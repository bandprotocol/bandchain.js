/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cometbft/blocksync/v1/types.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../types/v1/block";
import * as dependency_2 from "./../../types/v1/types";
import * as pb_1 from "google-protobuf";
export namespace cometbft.blocksync.v1 {
    export class BlockRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            height?: number;
        }): BlockRequest {
            const message = new BlockRequest({});
            if (data.height != null) {
                message.height = data.height;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockRequest {
            return BlockRequest.deserialize(bytes);
        }
    }
    export class NoBlockResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            height?: number;
        }): NoBlockResponse {
            const message = new NoBlockResponse({});
            if (data.height != null) {
                message.height = data.height;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NoBlockResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NoBlockResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NoBlockResponse {
            return NoBlockResponse.deserialize(bytes);
        }
    }
    export class StatusRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): StatusRequest {
            const message = new StatusRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StatusRequest {
            return StatusRequest.deserialize(bytes);
        }
    }
    export class StatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
            base?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("base" in data && data.base != undefined) {
                    this.base = data.base;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get base() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set base(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            height?: number;
            base?: number;
        }): StatusResponse {
            const message = new StatusResponse({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.base != null) {
                message.base = data.base;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                base?: number;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.base != null) {
                data.base = this.base;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (this.base != 0)
                writer.writeInt64(2, this.base);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    case 2:
                        message.base = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StatusResponse {
            return StatusResponse.deserialize(bytes);
        }
    }
    export class BlockResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block?: dependency_1.cometbft.types.v1.Block;
            ext_commit?: dependency_2.cometbft.types.v1.ExtendedCommit;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
                if ("ext_commit" in data && data.ext_commit != undefined) {
                    this.ext_commit = data.ext_commit;
                }
            }
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_1.cometbft.types.v1.Block, 1) as dependency_1.cometbft.types.v1.Block;
        }
        set block(value: dependency_1.cometbft.types.v1.Block) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_block() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get ext_commit() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.types.v1.ExtendedCommit, 2) as dependency_2.cometbft.types.v1.ExtendedCommit;
        }
        set ext_commit(value: dependency_2.cometbft.types.v1.ExtendedCommit) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_ext_commit() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            block?: ReturnType<typeof dependency_1.cometbft.types.v1.Block.prototype.toObject>;
            ext_commit?: ReturnType<typeof dependency_2.cometbft.types.v1.ExtendedCommit.prototype.toObject>;
        }): BlockResponse {
            const message = new BlockResponse({});
            if (data.block != null) {
                message.block = dependency_1.cometbft.types.v1.Block.fromObject(data.block);
            }
            if (data.ext_commit != null) {
                message.ext_commit = dependency_2.cometbft.types.v1.ExtendedCommit.fromObject(data.ext_commit);
            }
            return message;
        }
        toObject() {
            const data: {
                block?: ReturnType<typeof dependency_1.cometbft.types.v1.Block.prototype.toObject>;
                ext_commit?: ReturnType<typeof dependency_2.cometbft.types.v1.ExtendedCommit.prototype.toObject>;
            } = {};
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            if (this.ext_commit != null) {
                data.ext_commit = this.ext_commit.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_block)
                writer.writeMessage(1, this.block, () => this.block.serialize(writer));
            if (this.has_ext_commit)
                writer.writeMessage(2, this.ext_commit, () => this.ext_commit.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block, () => message.block = dependency_1.cometbft.types.v1.Block.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.ext_commit, () => message.ext_commit = dependency_2.cometbft.types.v1.ExtendedCommit.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockResponse {
            return BlockResponse.deserialize(bytes);
        }
    }
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5]];
        constructor(data?: any[] | ({} & (({
            block_request?: BlockRequest;
            no_block_response?: never;
            block_response?: never;
            status_request?: never;
            status_response?: never;
        } | {
            block_request?: never;
            no_block_response?: NoBlockResponse;
            block_response?: never;
            status_request?: never;
            status_response?: never;
        } | {
            block_request?: never;
            no_block_response?: never;
            block_response?: BlockResponse;
            status_request?: never;
            status_response?: never;
        } | {
            block_request?: never;
            no_block_response?: never;
            block_response?: never;
            status_request?: StatusRequest;
            status_response?: never;
        } | {
            block_request?: never;
            no_block_response?: never;
            block_response?: never;
            status_request?: never;
            status_response?: StatusResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_request" in data && data.block_request != undefined) {
                    this.block_request = data.block_request;
                }
                if ("no_block_response" in data && data.no_block_response != undefined) {
                    this.no_block_response = data.no_block_response;
                }
                if ("block_response" in data && data.block_response != undefined) {
                    this.block_response = data.block_response;
                }
                if ("status_request" in data && data.status_request != undefined) {
                    this.status_request = data.status_request;
                }
                if ("status_response" in data && data.status_response != undefined) {
                    this.status_response = data.status_response;
                }
            }
        }
        get block_request() {
            return pb_1.Message.getWrapperField(this, BlockRequest, 1) as BlockRequest;
        }
        set block_request(value: BlockRequest) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_block_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get no_block_response() {
            return pb_1.Message.getWrapperField(this, NoBlockResponse, 2) as NoBlockResponse;
        }
        set no_block_response(value: NoBlockResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_no_block_response() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get block_response() {
            return pb_1.Message.getWrapperField(this, BlockResponse, 3) as BlockResponse;
        }
        set block_response(value: BlockResponse) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_block_response() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get status_request() {
            return pb_1.Message.getWrapperField(this, StatusRequest, 4) as StatusRequest;
        }
        set status_request(value: StatusRequest) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_status_request() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get status_response() {
            return pb_1.Message.getWrapperField(this, StatusResponse, 5) as StatusResponse;
        }
        set status_response(value: StatusResponse) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_status_response() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get sum() {
            const cases: {
                [index: number]: "none" | "block_request" | "no_block_response" | "block_response" | "status_request" | "status_response";
            } = {
                0: "none",
                1: "block_request",
                2: "no_block_response",
                3: "block_response",
                4: "status_request",
                5: "status_response"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5])];
        }
        static fromObject(data: {
            block_request?: ReturnType<typeof BlockRequest.prototype.toObject>;
            no_block_response?: ReturnType<typeof NoBlockResponse.prototype.toObject>;
            block_response?: ReturnType<typeof BlockResponse.prototype.toObject>;
            status_request?: ReturnType<typeof StatusRequest.prototype.toObject>;
            status_response?: ReturnType<typeof StatusResponse.prototype.toObject>;
        }): Message {
            const message = new Message({});
            if (data.block_request != null) {
                message.block_request = BlockRequest.fromObject(data.block_request);
            }
            if (data.no_block_response != null) {
                message.no_block_response = NoBlockResponse.fromObject(data.no_block_response);
            }
            if (data.block_response != null) {
                message.block_response = BlockResponse.fromObject(data.block_response);
            }
            if (data.status_request != null) {
                message.status_request = StatusRequest.fromObject(data.status_request);
            }
            if (data.status_response != null) {
                message.status_response = StatusResponse.fromObject(data.status_response);
            }
            return message;
        }
        toObject() {
            const data: {
                block_request?: ReturnType<typeof BlockRequest.prototype.toObject>;
                no_block_response?: ReturnType<typeof NoBlockResponse.prototype.toObject>;
                block_response?: ReturnType<typeof BlockResponse.prototype.toObject>;
                status_request?: ReturnType<typeof StatusRequest.prototype.toObject>;
                status_response?: ReturnType<typeof StatusResponse.prototype.toObject>;
            } = {};
            if (this.block_request != null) {
                data.block_request = this.block_request.toObject();
            }
            if (this.no_block_response != null) {
                data.no_block_response = this.no_block_response.toObject();
            }
            if (this.block_response != null) {
                data.block_response = this.block_response.toObject();
            }
            if (this.status_request != null) {
                data.status_request = this.status_request.toObject();
            }
            if (this.status_response != null) {
                data.status_response = this.status_response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_block_request)
                writer.writeMessage(1, this.block_request, () => this.block_request.serialize(writer));
            if (this.has_no_block_response)
                writer.writeMessage(2, this.no_block_response, () => this.no_block_response.serialize(writer));
            if (this.has_block_response)
                writer.writeMessage(3, this.block_response, () => this.block_response.serialize(writer));
            if (this.has_status_request)
                writer.writeMessage(4, this.status_request, () => this.status_request.serialize(writer));
            if (this.has_status_response)
                writer.writeMessage(5, this.status_response, () => this.status_response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block_request, () => message.block_request = BlockRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.no_block_response, () => message.no_block_response = NoBlockResponse.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.block_response, () => message.block_response = BlockResponse.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.status_request, () => message.status_request = StatusRequest.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.status_response, () => message.status_response = StatusResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
}
