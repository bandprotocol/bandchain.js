// source: cometbft/statesync/v1/types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.cometbft.statesync.v1.ChunkRequest', null, global);
goog.exportSymbol('proto.cometbft.statesync.v1.ChunkResponse', null, global);
goog.exportSymbol('proto.cometbft.statesync.v1.Message', null, global);
goog.exportSymbol('proto.cometbft.statesync.v1.Message.SumCase', null, global);
goog.exportSymbol('proto.cometbft.statesync.v1.SnapshotsRequest', null, global);
goog.exportSymbol('proto.cometbft.statesync.v1.SnapshotsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.statesync.v1.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cometbft.statesync.v1.Message.oneofGroups_);
};
goog.inherits(proto.cometbft.statesync.v1.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.statesync.v1.Message.displayName = 'proto.cometbft.statesync.v1.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.statesync.v1.SnapshotsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.statesync.v1.SnapshotsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.statesync.v1.SnapshotsRequest.displayName = 'proto.cometbft.statesync.v1.SnapshotsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.statesync.v1.SnapshotsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.statesync.v1.SnapshotsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.statesync.v1.SnapshotsResponse.displayName = 'proto.cometbft.statesync.v1.SnapshotsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.statesync.v1.ChunkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.statesync.v1.ChunkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.statesync.v1.ChunkRequest.displayName = 'proto.cometbft.statesync.v1.ChunkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.statesync.v1.ChunkResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.statesync.v1.ChunkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.statesync.v1.ChunkResponse.displayName = 'proto.cometbft.statesync.v1.ChunkResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cometbft.statesync.v1.Message.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.cometbft.statesync.v1.Message.SumCase = {
  SUM_NOT_SET: 0,
  SNAPSHOTS_REQUEST: 1,
  SNAPSHOTS_RESPONSE: 2,
  CHUNK_REQUEST: 3,
  CHUNK_RESPONSE: 4
};

/**
 * @return {proto.cometbft.statesync.v1.Message.SumCase}
 */
proto.cometbft.statesync.v1.Message.prototype.getSumCase = function() {
  return /** @type {proto.cometbft.statesync.v1.Message.SumCase} */(jspb.Message.computeOneofCase(this, proto.cometbft.statesync.v1.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.statesync.v1.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.statesync.v1.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.statesync.v1.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.statesync.v1.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    snapshotsRequest: (f = msg.getSnapshotsRequest()) && proto.cometbft.statesync.v1.SnapshotsRequest.toObject(includeInstance, f),
    snapshotsResponse: (f = msg.getSnapshotsResponse()) && proto.cometbft.statesync.v1.SnapshotsResponse.toObject(includeInstance, f),
    chunkRequest: (f = msg.getChunkRequest()) && proto.cometbft.statesync.v1.ChunkRequest.toObject(includeInstance, f),
    chunkResponse: (f = msg.getChunkResponse()) && proto.cometbft.statesync.v1.ChunkResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.statesync.v1.Message}
 */
proto.cometbft.statesync.v1.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.statesync.v1.Message;
  return proto.cometbft.statesync.v1.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.statesync.v1.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.statesync.v1.Message}
 */
proto.cometbft.statesync.v1.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cometbft.statesync.v1.SnapshotsRequest;
      reader.readMessage(value,proto.cometbft.statesync.v1.SnapshotsRequest.deserializeBinaryFromReader);
      msg.setSnapshotsRequest(value);
      break;
    case 2:
      var value = new proto.cometbft.statesync.v1.SnapshotsResponse;
      reader.readMessage(value,proto.cometbft.statesync.v1.SnapshotsResponse.deserializeBinaryFromReader);
      msg.setSnapshotsResponse(value);
      break;
    case 3:
      var value = new proto.cometbft.statesync.v1.ChunkRequest;
      reader.readMessage(value,proto.cometbft.statesync.v1.ChunkRequest.deserializeBinaryFromReader);
      msg.setChunkRequest(value);
      break;
    case 4:
      var value = new proto.cometbft.statesync.v1.ChunkResponse;
      reader.readMessage(value,proto.cometbft.statesync.v1.ChunkResponse.deserializeBinaryFromReader);
      msg.setChunkResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.statesync.v1.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.statesync.v1.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.statesync.v1.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.statesync.v1.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSnapshotsRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cometbft.statesync.v1.SnapshotsRequest.serializeBinaryToWriter
    );
  }
  f = message.getSnapshotsResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cometbft.statesync.v1.SnapshotsResponse.serializeBinaryToWriter
    );
  }
  f = message.getChunkRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cometbft.statesync.v1.ChunkRequest.serializeBinaryToWriter
    );
  }
  f = message.getChunkResponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cometbft.statesync.v1.ChunkResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional SnapshotsRequest snapshots_request = 1;
 * @return {?proto.cometbft.statesync.v1.SnapshotsRequest}
 */
proto.cometbft.statesync.v1.Message.prototype.getSnapshotsRequest = function() {
  return /** @type{?proto.cometbft.statesync.v1.SnapshotsRequest} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.statesync.v1.SnapshotsRequest, 1));
};


/**
 * @param {?proto.cometbft.statesync.v1.SnapshotsRequest|undefined} value
 * @return {!proto.cometbft.statesync.v1.Message} returns this
*/
proto.cometbft.statesync.v1.Message.prototype.setSnapshotsRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.cometbft.statesync.v1.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.statesync.v1.Message} returns this
 */
proto.cometbft.statesync.v1.Message.prototype.clearSnapshotsRequest = function() {
  return this.setSnapshotsRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.statesync.v1.Message.prototype.hasSnapshotsRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SnapshotsResponse snapshots_response = 2;
 * @return {?proto.cometbft.statesync.v1.SnapshotsResponse}
 */
proto.cometbft.statesync.v1.Message.prototype.getSnapshotsResponse = function() {
  return /** @type{?proto.cometbft.statesync.v1.SnapshotsResponse} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.statesync.v1.SnapshotsResponse, 2));
};


/**
 * @param {?proto.cometbft.statesync.v1.SnapshotsResponse|undefined} value
 * @return {!proto.cometbft.statesync.v1.Message} returns this
*/
proto.cometbft.statesync.v1.Message.prototype.setSnapshotsResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.cometbft.statesync.v1.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.statesync.v1.Message} returns this
 */
proto.cometbft.statesync.v1.Message.prototype.clearSnapshotsResponse = function() {
  return this.setSnapshotsResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.statesync.v1.Message.prototype.hasSnapshotsResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ChunkRequest chunk_request = 3;
 * @return {?proto.cometbft.statesync.v1.ChunkRequest}
 */
proto.cometbft.statesync.v1.Message.prototype.getChunkRequest = function() {
  return /** @type{?proto.cometbft.statesync.v1.ChunkRequest} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.statesync.v1.ChunkRequest, 3));
};


/**
 * @param {?proto.cometbft.statesync.v1.ChunkRequest|undefined} value
 * @return {!proto.cometbft.statesync.v1.Message} returns this
*/
proto.cometbft.statesync.v1.Message.prototype.setChunkRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.cometbft.statesync.v1.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.statesync.v1.Message} returns this
 */
proto.cometbft.statesync.v1.Message.prototype.clearChunkRequest = function() {
  return this.setChunkRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.statesync.v1.Message.prototype.hasChunkRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ChunkResponse chunk_response = 4;
 * @return {?proto.cometbft.statesync.v1.ChunkResponse}
 */
proto.cometbft.statesync.v1.Message.prototype.getChunkResponse = function() {
  return /** @type{?proto.cometbft.statesync.v1.ChunkResponse} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.statesync.v1.ChunkResponse, 4));
};


/**
 * @param {?proto.cometbft.statesync.v1.ChunkResponse|undefined} value
 * @return {!proto.cometbft.statesync.v1.Message} returns this
*/
proto.cometbft.statesync.v1.Message.prototype.setChunkResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.cometbft.statesync.v1.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.statesync.v1.Message} returns this
 */
proto.cometbft.statesync.v1.Message.prototype.clearChunkResponse = function() {
  return this.setChunkResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.statesync.v1.Message.prototype.hasChunkResponse = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.statesync.v1.SnapshotsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.statesync.v1.SnapshotsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.statesync.v1.SnapshotsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.statesync.v1.SnapshotsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.statesync.v1.SnapshotsRequest}
 */
proto.cometbft.statesync.v1.SnapshotsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.statesync.v1.SnapshotsRequest;
  return proto.cometbft.statesync.v1.SnapshotsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.statesync.v1.SnapshotsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.statesync.v1.SnapshotsRequest}
 */
proto.cometbft.statesync.v1.SnapshotsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.statesync.v1.SnapshotsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.statesync.v1.SnapshotsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.statesync.v1.SnapshotsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.statesync.v1.SnapshotsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.statesync.v1.SnapshotsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.statesync.v1.SnapshotsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.statesync.v1.SnapshotsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.statesync.v1.SnapshotsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    format: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chunks: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hash: msg.getHash_asB64(),
    metadata: msg.getMetadata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.statesync.v1.SnapshotsResponse}
 */
proto.cometbft.statesync.v1.SnapshotsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.statesync.v1.SnapshotsResponse;
  return proto.cometbft.statesync.v1.SnapshotsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.statesync.v1.SnapshotsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.statesync.v1.SnapshotsResponse}
 */
proto.cometbft.statesync.v1.SnapshotsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFormat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChunks(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.statesync.v1.SnapshotsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.statesync.v1.SnapshotsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.statesync.v1.SnapshotsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.statesync.v1.SnapshotsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getFormat();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getChunks();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.cometbft.statesync.v1.SnapshotsResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.statesync.v1.SnapshotsResponse} returns this
 */
proto.cometbft.statesync.v1.SnapshotsResponse.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 format = 2;
 * @return {number}
 */
proto.cometbft.statesync.v1.SnapshotsResponse.prototype.getFormat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.statesync.v1.SnapshotsResponse} returns this
 */
proto.cometbft.statesync.v1.SnapshotsResponse.prototype.setFormat = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 chunks = 3;
 * @return {number}
 */
proto.cometbft.statesync.v1.SnapshotsResponse.prototype.getChunks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.statesync.v1.SnapshotsResponse} returns this
 */
proto.cometbft.statesync.v1.SnapshotsResponse.prototype.setChunks = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.statesync.v1.SnapshotsResponse.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes hash = 4;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.cometbft.statesync.v1.SnapshotsResponse.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.cometbft.statesync.v1.SnapshotsResponse.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.statesync.v1.SnapshotsResponse} returns this
 */
proto.cometbft.statesync.v1.SnapshotsResponse.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes metadata = 5;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.statesync.v1.SnapshotsResponse.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes metadata = 5;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.cometbft.statesync.v1.SnapshotsResponse.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.cometbft.statesync.v1.SnapshotsResponse.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.statesync.v1.SnapshotsResponse} returns this
 */
proto.cometbft.statesync.v1.SnapshotsResponse.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.statesync.v1.ChunkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.statesync.v1.ChunkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.statesync.v1.ChunkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.statesync.v1.ChunkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    format: jspb.Message.getFieldWithDefault(msg, 2, 0),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.statesync.v1.ChunkRequest}
 */
proto.cometbft.statesync.v1.ChunkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.statesync.v1.ChunkRequest;
  return proto.cometbft.statesync.v1.ChunkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.statesync.v1.ChunkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.statesync.v1.ChunkRequest}
 */
proto.cometbft.statesync.v1.ChunkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFormat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.statesync.v1.ChunkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.statesync.v1.ChunkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.statesync.v1.ChunkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.statesync.v1.ChunkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getFormat();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.cometbft.statesync.v1.ChunkRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.statesync.v1.ChunkRequest} returns this
 */
proto.cometbft.statesync.v1.ChunkRequest.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 format = 2;
 * @return {number}
 */
proto.cometbft.statesync.v1.ChunkRequest.prototype.getFormat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.statesync.v1.ChunkRequest} returns this
 */
proto.cometbft.statesync.v1.ChunkRequest.prototype.setFormat = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 index = 3;
 * @return {number}
 */
proto.cometbft.statesync.v1.ChunkRequest.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.statesync.v1.ChunkRequest} returns this
 */
proto.cometbft.statesync.v1.ChunkRequest.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.statesync.v1.ChunkResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.statesync.v1.ChunkResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.statesync.v1.ChunkResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.statesync.v1.ChunkResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    format: jspb.Message.getFieldWithDefault(msg, 2, 0),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0),
    chunk: msg.getChunk_asB64(),
    missing: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.statesync.v1.ChunkResponse}
 */
proto.cometbft.statesync.v1.ChunkResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.statesync.v1.ChunkResponse;
  return proto.cometbft.statesync.v1.ChunkResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.statesync.v1.ChunkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.statesync.v1.ChunkResponse}
 */
proto.cometbft.statesync.v1.ChunkResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFormat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChunk(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMissing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.statesync.v1.ChunkResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.statesync.v1.ChunkResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.statesync.v1.ChunkResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.statesync.v1.ChunkResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getFormat();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getChunk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getMissing();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.cometbft.statesync.v1.ChunkResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.statesync.v1.ChunkResponse} returns this
 */
proto.cometbft.statesync.v1.ChunkResponse.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 format = 2;
 * @return {number}
 */
proto.cometbft.statesync.v1.ChunkResponse.prototype.getFormat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.statesync.v1.ChunkResponse} returns this
 */
proto.cometbft.statesync.v1.ChunkResponse.prototype.setFormat = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 index = 3;
 * @return {number}
 */
proto.cometbft.statesync.v1.ChunkResponse.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.statesync.v1.ChunkResponse} returns this
 */
proto.cometbft.statesync.v1.ChunkResponse.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes chunk = 4;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.statesync.v1.ChunkResponse.prototype.getChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes chunk = 4;
 * This is a type-conversion wrapper around `getChunk()`
 * @return {string}
 */
proto.cometbft.statesync.v1.ChunkResponse.prototype.getChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChunk()));
};


/**
 * optional bytes chunk = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunk()`
 * @return {!Uint8Array}
 */
proto.cometbft.statesync.v1.ChunkResponse.prototype.getChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChunk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.statesync.v1.ChunkResponse} returns this
 */
proto.cometbft.statesync.v1.ChunkResponse.prototype.setChunk = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bool missing = 5;
 * @return {boolean}
 */
proto.cometbft.statesync.v1.ChunkResponse.prototype.getMissing = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cometbft.statesync.v1.ChunkResponse} returns this
 */
proto.cometbft.statesync.v1.ChunkResponse.prototype.setMissing = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


goog.object.extend(exports, proto.cometbft.statesync.v1);
