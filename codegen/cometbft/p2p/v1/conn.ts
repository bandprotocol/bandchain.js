/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cometbft/p2p/v1/conn.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../../crypto/v1/keys";
import * as pb_1 from "google-protobuf";
export namespace cometbft.p2p.v1 {
    export class PacketPing extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): PacketPing {
            const message = new PacketPing({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PacketPing {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PacketPing();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PacketPing {
            return PacketPing.deserialize(bytes);
        }
    }
    export class PacketPong extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): PacketPong {
            const message = new PacketPong({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PacketPong {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PacketPong();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PacketPong {
            return PacketPong.deserialize(bytes);
        }
    }
    export class PacketMsg extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            channel_id?: number;
            eof?: boolean;
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
                if ("eof" in data && data.eof != undefined) {
                    this.eof = data.eof;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get channel_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set channel_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get eof() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set eof(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            channel_id?: number;
            eof?: boolean;
            data?: Uint8Array;
        }): PacketMsg {
            const message = new PacketMsg({});
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            if (data.eof != null) {
                message.eof = data.eof;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                channel_id?: number;
                eof?: boolean;
                data?: Uint8Array;
            } = {};
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            if (this.eof != null) {
                data.eof = this.eof;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.channel_id != 0)
                writer.writeInt32(1, this.channel_id);
            if (this.eof != false)
                writer.writeBool(2, this.eof);
            if (this.data.length)
                writer.writeBytes(3, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PacketMsg {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PacketMsg();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.channel_id = reader.readInt32();
                        break;
                    case 2:
                        message.eof = reader.readBool();
                        break;
                    case 3:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PacketMsg {
            return PacketMsg.deserialize(bytes);
        }
    }
    export class Packet extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            packet_ping?: PacketPing;
            packet_pong?: never;
            packet_msg?: never;
        } | {
            packet_ping?: never;
            packet_pong?: PacketPong;
            packet_msg?: never;
        } | {
            packet_ping?: never;
            packet_pong?: never;
            packet_msg?: PacketMsg;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("packet_ping" in data && data.packet_ping != undefined) {
                    this.packet_ping = data.packet_ping;
                }
                if ("packet_pong" in data && data.packet_pong != undefined) {
                    this.packet_pong = data.packet_pong;
                }
                if ("packet_msg" in data && data.packet_msg != undefined) {
                    this.packet_msg = data.packet_msg;
                }
            }
        }
        get packet_ping() {
            return pb_1.Message.getWrapperField(this, PacketPing, 1) as PacketPing;
        }
        set packet_ping(value: PacketPing) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_packet_ping() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get packet_pong() {
            return pb_1.Message.getWrapperField(this, PacketPong, 2) as PacketPong;
        }
        set packet_pong(value: PacketPong) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_packet_pong() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get packet_msg() {
            return pb_1.Message.getWrapperField(this, PacketMsg, 3) as PacketMsg;
        }
        set packet_msg(value: PacketMsg) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_packet_msg() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get sum() {
            const cases: {
                [index: number]: "none" | "packet_ping" | "packet_pong" | "packet_msg";
            } = {
                0: "none",
                1: "packet_ping",
                2: "packet_pong",
                3: "packet_msg"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            packet_ping?: ReturnType<typeof PacketPing.prototype.toObject>;
            packet_pong?: ReturnType<typeof PacketPong.prototype.toObject>;
            packet_msg?: ReturnType<typeof PacketMsg.prototype.toObject>;
        }): Packet {
            const message = new Packet({});
            if (data.packet_ping != null) {
                message.packet_ping = PacketPing.fromObject(data.packet_ping);
            }
            if (data.packet_pong != null) {
                message.packet_pong = PacketPong.fromObject(data.packet_pong);
            }
            if (data.packet_msg != null) {
                message.packet_msg = PacketMsg.fromObject(data.packet_msg);
            }
            return message;
        }
        toObject() {
            const data: {
                packet_ping?: ReturnType<typeof PacketPing.prototype.toObject>;
                packet_pong?: ReturnType<typeof PacketPong.prototype.toObject>;
                packet_msg?: ReturnType<typeof PacketMsg.prototype.toObject>;
            } = {};
            if (this.packet_ping != null) {
                data.packet_ping = this.packet_ping.toObject();
            }
            if (this.packet_pong != null) {
                data.packet_pong = this.packet_pong.toObject();
            }
            if (this.packet_msg != null) {
                data.packet_msg = this.packet_msg.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_packet_ping)
                writer.writeMessage(1, this.packet_ping, () => this.packet_ping.serialize(writer));
            if (this.has_packet_pong)
                writer.writeMessage(2, this.packet_pong, () => this.packet_pong.serialize(writer));
            if (this.has_packet_msg)
                writer.writeMessage(3, this.packet_msg, () => this.packet_msg.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Packet {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Packet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.packet_ping, () => message.packet_ping = PacketPing.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.packet_pong, () => message.packet_pong = PacketPong.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.packet_msg, () => message.packet_msg = PacketMsg.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Packet {
            return Packet.deserialize(bytes);
        }
    }
    export class AuthSigMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pub_key?: dependency_2.cometbft.crypto.v1.PublicKey;
            sig?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pub_key" in data && data.pub_key != undefined) {
                    this.pub_key = data.pub_key;
                }
                if ("sig" in data && data.sig != undefined) {
                    this.sig = data.sig;
                }
            }
        }
        get pub_key() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.crypto.v1.PublicKey, 1) as dependency_2.cometbft.crypto.v1.PublicKey;
        }
        set pub_key(value: dependency_2.cometbft.crypto.v1.PublicKey) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_pub_key() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get sig() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set sig(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            pub_key?: ReturnType<typeof dependency_2.cometbft.crypto.v1.PublicKey.prototype.toObject>;
            sig?: Uint8Array;
        }): AuthSigMessage {
            const message = new AuthSigMessage({});
            if (data.pub_key != null) {
                message.pub_key = dependency_2.cometbft.crypto.v1.PublicKey.fromObject(data.pub_key);
            }
            if (data.sig != null) {
                message.sig = data.sig;
            }
            return message;
        }
        toObject() {
            const data: {
                pub_key?: ReturnType<typeof dependency_2.cometbft.crypto.v1.PublicKey.prototype.toObject>;
                sig?: Uint8Array;
            } = {};
            if (this.pub_key != null) {
                data.pub_key = this.pub_key.toObject();
            }
            if (this.sig != null) {
                data.sig = this.sig;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_pub_key)
                writer.writeMessage(1, this.pub_key, () => this.pub_key.serialize(writer));
            if (this.sig.length)
                writer.writeBytes(2, this.sig);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthSigMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthSigMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pub_key, () => message.pub_key = dependency_2.cometbft.crypto.v1.PublicKey.deserialize(reader));
                        break;
                    case 2:
                        message.sig = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthSigMessage {
            return AuthSigMessage.deserialize(bytes);
        }
    }
}
