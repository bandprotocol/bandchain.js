/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cometbft/services/block/v1/block.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../types/v1/types";
import * as dependency_2 from "./../../../types/v1/block";
import * as pb_1 from "google-protobuf";
export namespace cometbft.services.block.v1 {
    export class GetByHeightRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            height?: number;
        }): GetByHeightRequest {
            const message = new GetByHeightRequest({});
            if (data.height != null) {
                message.height = data.height;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetByHeightRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetByHeightRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetByHeightRequest {
            return GetByHeightRequest.deserialize(bytes);
        }
    }
    export class GetByHeightResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block_id?: dependency_1.cometbft.types.v1.BlockID;
            block?: dependency_2.cometbft.types.v1.Block;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
            }
        }
        get block_id() {
            return pb_1.Message.getWrapperField(this, dependency_1.cometbft.types.v1.BlockID, 1) as dependency_1.cometbft.types.v1.BlockID;
        }
        set block_id(value: dependency_1.cometbft.types.v1.BlockID) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_block_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.types.v1.Block, 2) as dependency_2.cometbft.types.v1.Block;
        }
        set block(value: dependency_2.cometbft.types.v1.Block) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_block() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            block_id?: ReturnType<typeof dependency_1.cometbft.types.v1.BlockID.prototype.toObject>;
            block?: ReturnType<typeof dependency_2.cometbft.types.v1.Block.prototype.toObject>;
        }): GetByHeightResponse {
            const message = new GetByHeightResponse({});
            if (data.block_id != null) {
                message.block_id = dependency_1.cometbft.types.v1.BlockID.fromObject(data.block_id);
            }
            if (data.block != null) {
                message.block = dependency_2.cometbft.types.v1.Block.fromObject(data.block);
            }
            return message;
        }
        toObject() {
            const data: {
                block_id?: ReturnType<typeof dependency_1.cometbft.types.v1.BlockID.prototype.toObject>;
                block?: ReturnType<typeof dependency_2.cometbft.types.v1.Block.prototype.toObject>;
            } = {};
            if (this.block_id != null) {
                data.block_id = this.block_id.toObject();
            }
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_block_id)
                writer.writeMessage(1, this.block_id, () => this.block_id.serialize(writer));
            if (this.has_block)
                writer.writeMessage(2, this.block, () => this.block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetByHeightResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetByHeightResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block_id, () => message.block_id = dependency_1.cometbft.types.v1.BlockID.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.block, () => message.block = dependency_2.cometbft.types.v1.Block.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetByHeightResponse {
            return GetByHeightResponse.deserialize(bytes);
        }
    }
    export class GetLatestHeightRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetLatestHeightRequest {
            const message = new GetLatestHeightRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLatestHeightRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLatestHeightRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLatestHeightRequest {
            return GetLatestHeightRequest.deserialize(bytes);
        }
    }
    export class GetLatestHeightResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            height?: number;
        }): GetLatestHeightResponse {
            const message = new GetLatestHeightResponse({});
            if (data.height != null) {
                message.height = data.height;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLatestHeightResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLatestHeightResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLatestHeightResponse {
            return GetLatestHeightResponse.deserialize(bytes);
        }
    }
}
