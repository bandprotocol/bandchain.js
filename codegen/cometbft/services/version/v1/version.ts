/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cometbft/services/version/v1/version.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace cometbft.services.version.v1 {
    export class GetVersionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetVersionRequest {
            const message = new GetVersionRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVersionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVersionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVersionRequest {
            return GetVersionRequest.deserialize(bytes);
        }
    }
    export class GetVersionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            node?: string;
            abci?: string;
            p2p?: number;
            block?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("node" in data && data.node != undefined) {
                    this.node = data.node;
                }
                if ("abci" in data && data.abci != undefined) {
                    this.abci = data.abci;
                }
                if ("p2p" in data && data.p2p != undefined) {
                    this.p2p = data.p2p;
                }
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
            }
        }
        get node() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set node(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get abci() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set abci(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get p2p() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set p2p(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get block() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set block(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            node?: string;
            abci?: string;
            p2p?: number;
            block?: number;
        }): GetVersionResponse {
            const message = new GetVersionResponse({});
            if (data.node != null) {
                message.node = data.node;
            }
            if (data.abci != null) {
                message.abci = data.abci;
            }
            if (data.p2p != null) {
                message.p2p = data.p2p;
            }
            if (data.block != null) {
                message.block = data.block;
            }
            return message;
        }
        toObject() {
            const data: {
                node?: string;
                abci?: string;
                p2p?: number;
                block?: number;
            } = {};
            if (this.node != null) {
                data.node = this.node;
            }
            if (this.abci != null) {
                data.abci = this.abci;
            }
            if (this.p2p != null) {
                data.p2p = this.p2p;
            }
            if (this.block != null) {
                data.block = this.block;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.node.length)
                writer.writeString(1, this.node);
            if (this.abci.length)
                writer.writeString(2, this.abci);
            if (this.p2p != 0)
                writer.writeUint64(3, this.p2p);
            if (this.block != 0)
                writer.writeUint64(4, this.block);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVersionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVersionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.node = reader.readString();
                        break;
                    case 2:
                        message.abci = reader.readString();
                        break;
                    case 3:
                        message.p2p = reader.readUint64();
                        break;
                    case 4:
                        message.block = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVersionResponse {
            return GetVersionResponse.deserialize(bytes);
        }
    }
}
