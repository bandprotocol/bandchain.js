/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cometbft/abci/v1beta2/types.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../v1beta1/types";
import * as dependency_3 from "./../../types/v1beta1/types";
import * as dependency_4 from "./../../types/v1beta2/params";
import * as dependency_5 from "./../../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace cometbft.abci.v1beta2 {
    export enum MisbehaviorType {
        UNKNOWN = 0,
        DUPLICATE_VOTE = 1,
        LIGHT_CLIENT_ATTACK = 2
    }
    export class Request extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]];
        constructor(data?: any[] | ({} & (({
            echo?: dependency_2.cometbft.abci.v1beta1.RequestEcho;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            echo?: never;
            flush?: dependency_2.cometbft.abci.v1beta1.RequestFlush;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            echo?: never;
            flush?: never;
            info?: RequestInfo;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: RequestInitChain;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: dependency_2.cometbft.abci.v1beta1.RequestQuery;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: RequestBeginBlock;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: dependency_2.cometbft.abci.v1beta1.RequestCheckTx;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: dependency_2.cometbft.abci.v1beta1.RequestDeliverTx;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: dependency_2.cometbft.abci.v1beta1.RequestEndBlock;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: dependency_2.cometbft.abci.v1beta1.RequestCommit;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: dependency_2.cometbft.abci.v1beta1.RequestListSnapshots;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: dependency_2.cometbft.abci.v1beta1.RequestOfferSnapshot;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: dependency_2.cometbft.abci.v1beta1.RequestLoadSnapshotChunk;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: dependency_2.cometbft.abci.v1beta1.RequestApplySnapshotChunk;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: RequestPrepareProposal;
            process_proposal?: never;
        } | {
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: RequestProcessProposal;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("echo" in data && data.echo != undefined) {
                    this.echo = data.echo;
                }
                if ("flush" in data && data.flush != undefined) {
                    this.flush = data.flush;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
                if ("init_chain" in data && data.init_chain != undefined) {
                    this.init_chain = data.init_chain;
                }
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("begin_block" in data && data.begin_block != undefined) {
                    this.begin_block = data.begin_block;
                }
                if ("check_tx" in data && data.check_tx != undefined) {
                    this.check_tx = data.check_tx;
                }
                if ("deliver_tx" in data && data.deliver_tx != undefined) {
                    this.deliver_tx = data.deliver_tx;
                }
                if ("end_block" in data && data.end_block != undefined) {
                    this.end_block = data.end_block;
                }
                if ("commit" in data && data.commit != undefined) {
                    this.commit = data.commit;
                }
                if ("list_snapshots" in data && data.list_snapshots != undefined) {
                    this.list_snapshots = data.list_snapshots;
                }
                if ("offer_snapshot" in data && data.offer_snapshot != undefined) {
                    this.offer_snapshot = data.offer_snapshot;
                }
                if ("load_snapshot_chunk" in data && data.load_snapshot_chunk != undefined) {
                    this.load_snapshot_chunk = data.load_snapshot_chunk;
                }
                if ("apply_snapshot_chunk" in data && data.apply_snapshot_chunk != undefined) {
                    this.apply_snapshot_chunk = data.apply_snapshot_chunk;
                }
                if ("prepare_proposal" in data && data.prepare_proposal != undefined) {
                    this.prepare_proposal = data.prepare_proposal;
                }
                if ("process_proposal" in data && data.process_proposal != undefined) {
                    this.process_proposal = data.process_proposal;
                }
            }
        }
        get echo() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.RequestEcho, 1) as dependency_2.cometbft.abci.v1beta1.RequestEcho;
        }
        set echo(value: dependency_2.cometbft.abci.v1beta1.RequestEcho) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_echo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get flush() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.RequestFlush, 2) as dependency_2.cometbft.abci.v1beta1.RequestFlush;
        }
        set flush(value: dependency_2.cometbft.abci.v1beta1.RequestFlush) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_flush() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get info() {
            return pb_1.Message.getWrapperField(this, RequestInfo, 3) as RequestInfo;
        }
        set info(value: RequestInfo) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get init_chain() {
            return pb_1.Message.getWrapperField(this, RequestInitChain, 5) as RequestInitChain;
        }
        set init_chain(value: RequestInitChain) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_init_chain() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get query() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.RequestQuery, 6) as dependency_2.cometbft.abci.v1beta1.RequestQuery;
        }
        set query(value: dependency_2.cometbft.abci.v1beta1.RequestQuery) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_query() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get begin_block() {
            return pb_1.Message.getWrapperField(this, RequestBeginBlock, 7) as RequestBeginBlock;
        }
        set begin_block(value: RequestBeginBlock) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_begin_block() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get check_tx() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.RequestCheckTx, 8) as dependency_2.cometbft.abci.v1beta1.RequestCheckTx;
        }
        set check_tx(value: dependency_2.cometbft.abci.v1beta1.RequestCheckTx) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_check_tx() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get deliver_tx() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.RequestDeliverTx, 9) as dependency_2.cometbft.abci.v1beta1.RequestDeliverTx;
        }
        set deliver_tx(value: dependency_2.cometbft.abci.v1beta1.RequestDeliverTx) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_deliver_tx() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get end_block() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.RequestEndBlock, 10) as dependency_2.cometbft.abci.v1beta1.RequestEndBlock;
        }
        set end_block(value: dependency_2.cometbft.abci.v1beta1.RequestEndBlock) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_end_block() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get commit() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.RequestCommit, 11) as dependency_2.cometbft.abci.v1beta1.RequestCommit;
        }
        set commit(value: dependency_2.cometbft.abci.v1beta1.RequestCommit) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_commit() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get list_snapshots() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.RequestListSnapshots, 12) as dependency_2.cometbft.abci.v1beta1.RequestListSnapshots;
        }
        set list_snapshots(value: dependency_2.cometbft.abci.v1beta1.RequestListSnapshots) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_list_snapshots() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get offer_snapshot() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.RequestOfferSnapshot, 13) as dependency_2.cometbft.abci.v1beta1.RequestOfferSnapshot;
        }
        set offer_snapshot(value: dependency_2.cometbft.abci.v1beta1.RequestOfferSnapshot) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_offer_snapshot() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get load_snapshot_chunk() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.RequestLoadSnapshotChunk, 14) as dependency_2.cometbft.abci.v1beta1.RequestLoadSnapshotChunk;
        }
        set load_snapshot_chunk(value: dependency_2.cometbft.abci.v1beta1.RequestLoadSnapshotChunk) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_load_snapshot_chunk() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get apply_snapshot_chunk() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.RequestApplySnapshotChunk, 15) as dependency_2.cometbft.abci.v1beta1.RequestApplySnapshotChunk;
        }
        set apply_snapshot_chunk(value: dependency_2.cometbft.abci.v1beta1.RequestApplySnapshotChunk) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_apply_snapshot_chunk() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get prepare_proposal() {
            return pb_1.Message.getWrapperField(this, RequestPrepareProposal, 16) as RequestPrepareProposal;
        }
        set prepare_proposal(value: RequestPrepareProposal) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_prepare_proposal() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get process_proposal() {
            return pb_1.Message.getWrapperField(this, RequestProcessProposal, 17) as RequestProcessProposal;
        }
        set process_proposal(value: RequestProcessProposal) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_process_proposal() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get value() {
            const cases: {
                [index: number]: "none" | "echo" | "flush" | "info" | "init_chain" | "query" | "begin_block" | "check_tx" | "deliver_tx" | "end_block" | "commit" | "list_snapshots" | "offer_snapshot" | "load_snapshot_chunk" | "apply_snapshot_chunk" | "prepare_proposal" | "process_proposal";
            } = {
                0: "none",
                1: "echo",
                2: "flush",
                3: "info",
                5: "init_chain",
                6: "query",
                7: "begin_block",
                8: "check_tx",
                9: "deliver_tx",
                10: "end_block",
                11: "commit",
                12: "list_snapshots",
                13: "offer_snapshot",
                14: "load_snapshot_chunk",
                15: "apply_snapshot_chunk",
                16: "prepare_proposal",
                17: "process_proposal"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])];
        }
        static fromObject(data: {
            echo?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestEcho.prototype.toObject>;
            flush?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestFlush.prototype.toObject>;
            info?: ReturnType<typeof RequestInfo.prototype.toObject>;
            init_chain?: ReturnType<typeof RequestInitChain.prototype.toObject>;
            query?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestQuery.prototype.toObject>;
            begin_block?: ReturnType<typeof RequestBeginBlock.prototype.toObject>;
            check_tx?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestCheckTx.prototype.toObject>;
            deliver_tx?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestDeliverTx.prototype.toObject>;
            end_block?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestEndBlock.prototype.toObject>;
            commit?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestCommit.prototype.toObject>;
            list_snapshots?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestListSnapshots.prototype.toObject>;
            offer_snapshot?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestOfferSnapshot.prototype.toObject>;
            load_snapshot_chunk?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestLoadSnapshotChunk.prototype.toObject>;
            apply_snapshot_chunk?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestApplySnapshotChunk.prototype.toObject>;
            prepare_proposal?: ReturnType<typeof RequestPrepareProposal.prototype.toObject>;
            process_proposal?: ReturnType<typeof RequestProcessProposal.prototype.toObject>;
        }): Request {
            const message = new Request({});
            if (data.echo != null) {
                message.echo = dependency_2.cometbft.abci.v1beta1.RequestEcho.fromObject(data.echo);
            }
            if (data.flush != null) {
                message.flush = dependency_2.cometbft.abci.v1beta1.RequestFlush.fromObject(data.flush);
            }
            if (data.info != null) {
                message.info = RequestInfo.fromObject(data.info);
            }
            if (data.init_chain != null) {
                message.init_chain = RequestInitChain.fromObject(data.init_chain);
            }
            if (data.query != null) {
                message.query = dependency_2.cometbft.abci.v1beta1.RequestQuery.fromObject(data.query);
            }
            if (data.begin_block != null) {
                message.begin_block = RequestBeginBlock.fromObject(data.begin_block);
            }
            if (data.check_tx != null) {
                message.check_tx = dependency_2.cometbft.abci.v1beta1.RequestCheckTx.fromObject(data.check_tx);
            }
            if (data.deliver_tx != null) {
                message.deliver_tx = dependency_2.cometbft.abci.v1beta1.RequestDeliverTx.fromObject(data.deliver_tx);
            }
            if (data.end_block != null) {
                message.end_block = dependency_2.cometbft.abci.v1beta1.RequestEndBlock.fromObject(data.end_block);
            }
            if (data.commit != null) {
                message.commit = dependency_2.cometbft.abci.v1beta1.RequestCommit.fromObject(data.commit);
            }
            if (data.list_snapshots != null) {
                message.list_snapshots = dependency_2.cometbft.abci.v1beta1.RequestListSnapshots.fromObject(data.list_snapshots);
            }
            if (data.offer_snapshot != null) {
                message.offer_snapshot = dependency_2.cometbft.abci.v1beta1.RequestOfferSnapshot.fromObject(data.offer_snapshot);
            }
            if (data.load_snapshot_chunk != null) {
                message.load_snapshot_chunk = dependency_2.cometbft.abci.v1beta1.RequestLoadSnapshotChunk.fromObject(data.load_snapshot_chunk);
            }
            if (data.apply_snapshot_chunk != null) {
                message.apply_snapshot_chunk = dependency_2.cometbft.abci.v1beta1.RequestApplySnapshotChunk.fromObject(data.apply_snapshot_chunk);
            }
            if (data.prepare_proposal != null) {
                message.prepare_proposal = RequestPrepareProposal.fromObject(data.prepare_proposal);
            }
            if (data.process_proposal != null) {
                message.process_proposal = RequestProcessProposal.fromObject(data.process_proposal);
            }
            return message;
        }
        toObject() {
            const data: {
                echo?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestEcho.prototype.toObject>;
                flush?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestFlush.prototype.toObject>;
                info?: ReturnType<typeof RequestInfo.prototype.toObject>;
                init_chain?: ReturnType<typeof RequestInitChain.prototype.toObject>;
                query?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestQuery.prototype.toObject>;
                begin_block?: ReturnType<typeof RequestBeginBlock.prototype.toObject>;
                check_tx?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestCheckTx.prototype.toObject>;
                deliver_tx?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestDeliverTx.prototype.toObject>;
                end_block?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestEndBlock.prototype.toObject>;
                commit?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestCommit.prototype.toObject>;
                list_snapshots?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestListSnapshots.prototype.toObject>;
                offer_snapshot?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestOfferSnapshot.prototype.toObject>;
                load_snapshot_chunk?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestLoadSnapshotChunk.prototype.toObject>;
                apply_snapshot_chunk?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.RequestApplySnapshotChunk.prototype.toObject>;
                prepare_proposal?: ReturnType<typeof RequestPrepareProposal.prototype.toObject>;
                process_proposal?: ReturnType<typeof RequestProcessProposal.prototype.toObject>;
            } = {};
            if (this.echo != null) {
                data.echo = this.echo.toObject();
            }
            if (this.flush != null) {
                data.flush = this.flush.toObject();
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            if (this.init_chain != null) {
                data.init_chain = this.init_chain.toObject();
            }
            if (this.query != null) {
                data.query = this.query.toObject();
            }
            if (this.begin_block != null) {
                data.begin_block = this.begin_block.toObject();
            }
            if (this.check_tx != null) {
                data.check_tx = this.check_tx.toObject();
            }
            if (this.deliver_tx != null) {
                data.deliver_tx = this.deliver_tx.toObject();
            }
            if (this.end_block != null) {
                data.end_block = this.end_block.toObject();
            }
            if (this.commit != null) {
                data.commit = this.commit.toObject();
            }
            if (this.list_snapshots != null) {
                data.list_snapshots = this.list_snapshots.toObject();
            }
            if (this.offer_snapshot != null) {
                data.offer_snapshot = this.offer_snapshot.toObject();
            }
            if (this.load_snapshot_chunk != null) {
                data.load_snapshot_chunk = this.load_snapshot_chunk.toObject();
            }
            if (this.apply_snapshot_chunk != null) {
                data.apply_snapshot_chunk = this.apply_snapshot_chunk.toObject();
            }
            if (this.prepare_proposal != null) {
                data.prepare_proposal = this.prepare_proposal.toObject();
            }
            if (this.process_proposal != null) {
                data.process_proposal = this.process_proposal.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_echo)
                writer.writeMessage(1, this.echo, () => this.echo.serialize(writer));
            if (this.has_flush)
                writer.writeMessage(2, this.flush, () => this.flush.serialize(writer));
            if (this.has_info)
                writer.writeMessage(3, this.info, () => this.info.serialize(writer));
            if (this.has_init_chain)
                writer.writeMessage(5, this.init_chain, () => this.init_chain.serialize(writer));
            if (this.has_query)
                writer.writeMessage(6, this.query, () => this.query.serialize(writer));
            if (this.has_begin_block)
                writer.writeMessage(7, this.begin_block, () => this.begin_block.serialize(writer));
            if (this.has_check_tx)
                writer.writeMessage(8, this.check_tx, () => this.check_tx.serialize(writer));
            if (this.has_deliver_tx)
                writer.writeMessage(9, this.deliver_tx, () => this.deliver_tx.serialize(writer));
            if (this.has_end_block)
                writer.writeMessage(10, this.end_block, () => this.end_block.serialize(writer));
            if (this.has_commit)
                writer.writeMessage(11, this.commit, () => this.commit.serialize(writer));
            if (this.has_list_snapshots)
                writer.writeMessage(12, this.list_snapshots, () => this.list_snapshots.serialize(writer));
            if (this.has_offer_snapshot)
                writer.writeMessage(13, this.offer_snapshot, () => this.offer_snapshot.serialize(writer));
            if (this.has_load_snapshot_chunk)
                writer.writeMessage(14, this.load_snapshot_chunk, () => this.load_snapshot_chunk.serialize(writer));
            if (this.has_apply_snapshot_chunk)
                writer.writeMessage(15, this.apply_snapshot_chunk, () => this.apply_snapshot_chunk.serialize(writer));
            if (this.has_prepare_proposal)
                writer.writeMessage(16, this.prepare_proposal, () => this.prepare_proposal.serialize(writer));
            if (this.has_process_proposal)
                writer.writeMessage(17, this.process_proposal, () => this.process_proposal.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.echo, () => message.echo = dependency_2.cometbft.abci.v1beta1.RequestEcho.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.flush, () => message.flush = dependency_2.cometbft.abci.v1beta1.RequestFlush.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.info, () => message.info = RequestInfo.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.init_chain, () => message.init_chain = RequestInitChain.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.query, () => message.query = dependency_2.cometbft.abci.v1beta1.RequestQuery.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.begin_block, () => message.begin_block = RequestBeginBlock.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.check_tx, () => message.check_tx = dependency_2.cometbft.abci.v1beta1.RequestCheckTx.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.deliver_tx, () => message.deliver_tx = dependency_2.cometbft.abci.v1beta1.RequestDeliverTx.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.end_block, () => message.end_block = dependency_2.cometbft.abci.v1beta1.RequestEndBlock.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.commit, () => message.commit = dependency_2.cometbft.abci.v1beta1.RequestCommit.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.list_snapshots, () => message.list_snapshots = dependency_2.cometbft.abci.v1beta1.RequestListSnapshots.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.offer_snapshot, () => message.offer_snapshot = dependency_2.cometbft.abci.v1beta1.RequestOfferSnapshot.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.load_snapshot_chunk, () => message.load_snapshot_chunk = dependency_2.cometbft.abci.v1beta1.RequestLoadSnapshotChunk.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.apply_snapshot_chunk, () => message.apply_snapshot_chunk = dependency_2.cometbft.abci.v1beta1.RequestApplySnapshotChunk.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.prepare_proposal, () => message.prepare_proposal = RequestPrepareProposal.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.process_proposal, () => message.process_proposal = RequestProcessProposal.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Request {
            return Request.deserialize(bytes);
        }
    }
    export class RequestInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version?: string;
            block_version?: number;
            p2p_version?: number;
            abci_version?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("block_version" in data && data.block_version != undefined) {
                    this.block_version = data.block_version;
                }
                if ("p2p_version" in data && data.p2p_version != undefined) {
                    this.p2p_version = data.p2p_version;
                }
                if ("abci_version" in data && data.abci_version != undefined) {
                    this.abci_version = data.abci_version;
                }
            }
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get block_version() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set block_version(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get p2p_version() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set p2p_version(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get abci_version() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set abci_version(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            version?: string;
            block_version?: number;
            p2p_version?: number;
            abci_version?: string;
        }): RequestInfo {
            const message = new RequestInfo({});
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.block_version != null) {
                message.block_version = data.block_version;
            }
            if (data.p2p_version != null) {
                message.p2p_version = data.p2p_version;
            }
            if (data.abci_version != null) {
                message.abci_version = data.abci_version;
            }
            return message;
        }
        toObject() {
            const data: {
                version?: string;
                block_version?: number;
                p2p_version?: number;
                abci_version?: string;
            } = {};
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.block_version != null) {
                data.block_version = this.block_version;
            }
            if (this.p2p_version != null) {
                data.p2p_version = this.p2p_version;
            }
            if (this.abci_version != null) {
                data.abci_version = this.abci_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version.length)
                writer.writeString(1, this.version);
            if (this.block_version != 0)
                writer.writeUint64(2, this.block_version);
            if (this.p2p_version != 0)
                writer.writeUint64(3, this.p2p_version);
            if (this.abci_version.length)
                writer.writeString(4, this.abci_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version = reader.readString();
                        break;
                    case 2:
                        message.block_version = reader.readUint64();
                        break;
                    case 3:
                        message.p2p_version = reader.readUint64();
                        break;
                    case 4:
                        message.abci_version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestInfo {
            return RequestInfo.deserialize(bytes);
        }
    }
    export class RequestInitChain extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            time?: dependency_5.google.protobuf.Timestamp;
            chain_id?: string;
            consensus_params?: dependency_4.cometbft.types.v1beta2.ConsensusParams;
            validators?: dependency_2.cometbft.abci.v1beta1.ValidatorUpdate[];
            app_state_bytes?: Uint8Array;
            initial_height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("time" in data && data.time != undefined) {
                    this.time = data.time;
                }
                if ("chain_id" in data && data.chain_id != undefined) {
                    this.chain_id = data.chain_id;
                }
                if ("consensus_params" in data && data.consensus_params != undefined) {
                    this.consensus_params = data.consensus_params;
                }
                if ("validators" in data && data.validators != undefined) {
                    this.validators = data.validators;
                }
                if ("app_state_bytes" in data && data.app_state_bytes != undefined) {
                    this.app_state_bytes = data.app_state_bytes;
                }
                if ("initial_height" in data && data.initial_height != undefined) {
                    this.initial_height = data.initial_height;
                }
            }
        }
        get time() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 1) as dependency_5.google.protobuf.Timestamp;
        }
        set time(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_time() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get chain_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set chain_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get consensus_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.cometbft.types.v1beta2.ConsensusParams, 3) as dependency_4.cometbft.types.v1beta2.ConsensusParams;
        }
        set consensus_params(value: dependency_4.cometbft.types.v1beta2.ConsensusParams) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_consensus_params() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get validators() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cometbft.abci.v1beta1.ValidatorUpdate, 4) as dependency_2.cometbft.abci.v1beta1.ValidatorUpdate[];
        }
        set validators(value: dependency_2.cometbft.abci.v1beta1.ValidatorUpdate[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get app_state_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set app_state_bytes(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get initial_height() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set initial_height(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            chain_id?: string;
            consensus_params?: ReturnType<typeof dependency_4.cometbft.types.v1beta2.ConsensusParams.prototype.toObject>;
            validators?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ValidatorUpdate.prototype.toObject>[];
            app_state_bytes?: Uint8Array;
            initial_height?: number;
        }): RequestInitChain {
            const message = new RequestInitChain({});
            if (data.time != null) {
                message.time = dependency_5.google.protobuf.Timestamp.fromObject(data.time);
            }
            if (data.chain_id != null) {
                message.chain_id = data.chain_id;
            }
            if (data.consensus_params != null) {
                message.consensus_params = dependency_4.cometbft.types.v1beta2.ConsensusParams.fromObject(data.consensus_params);
            }
            if (data.validators != null) {
                message.validators = data.validators.map(item => dependency_2.cometbft.abci.v1beta1.ValidatorUpdate.fromObject(item));
            }
            if (data.app_state_bytes != null) {
                message.app_state_bytes = data.app_state_bytes;
            }
            if (data.initial_height != null) {
                message.initial_height = data.initial_height;
            }
            return message;
        }
        toObject() {
            const data: {
                time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
                chain_id?: string;
                consensus_params?: ReturnType<typeof dependency_4.cometbft.types.v1beta2.ConsensusParams.prototype.toObject>;
                validators?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ValidatorUpdate.prototype.toObject>[];
                app_state_bytes?: Uint8Array;
                initial_height?: number;
            } = {};
            if (this.time != null) {
                data.time = this.time.toObject();
            }
            if (this.chain_id != null) {
                data.chain_id = this.chain_id;
            }
            if (this.consensus_params != null) {
                data.consensus_params = this.consensus_params.toObject();
            }
            if (this.validators != null) {
                data.validators = this.validators.map((item: dependency_2.cometbft.abci.v1beta1.ValidatorUpdate) => item.toObject());
            }
            if (this.app_state_bytes != null) {
                data.app_state_bytes = this.app_state_bytes;
            }
            if (this.initial_height != null) {
                data.initial_height = this.initial_height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_time)
                writer.writeMessage(1, this.time, () => this.time.serialize(writer));
            if (this.chain_id.length)
                writer.writeString(2, this.chain_id);
            if (this.has_consensus_params)
                writer.writeMessage(3, this.consensus_params, () => this.consensus_params.serialize(writer));
            if (this.validators.length)
                writer.writeRepeatedMessage(4, this.validators, (item: dependency_2.cometbft.abci.v1beta1.ValidatorUpdate) => item.serialize(writer));
            if (this.app_state_bytes.length)
                writer.writeBytes(5, this.app_state_bytes);
            if (this.initial_height != 0)
                writer.writeInt64(6, this.initial_height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestInitChain {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestInitChain();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.time, () => message.time = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        message.chain_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.consensus_params, () => message.consensus_params = dependency_4.cometbft.types.v1beta2.ConsensusParams.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.validators, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.cometbft.abci.v1beta1.ValidatorUpdate.deserialize(reader), dependency_2.cometbft.abci.v1beta1.ValidatorUpdate));
                        break;
                    case 5:
                        message.app_state_bytes = reader.readBytes();
                        break;
                    case 6:
                        message.initial_height = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestInitChain {
            return RequestInitChain.deserialize(bytes);
        }
    }
    export class RequestBeginBlock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            hash?: Uint8Array;
            header?: dependency_3.cometbft.types.v1beta1.Header;
            last_commit_info?: CommitInfo;
            byzantine_validators?: Misbehavior[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("hash" in data && data.hash != undefined) {
                    this.hash = data.hash;
                }
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("last_commit_info" in data && data.last_commit_info != undefined) {
                    this.last_commit_info = data.last_commit_info;
                }
                if ("byzantine_validators" in data && data.byzantine_validators != undefined) {
                    this.byzantine_validators = data.byzantine_validators;
                }
            }
        }
        get hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set hash(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get header() {
            return pb_1.Message.getWrapperField(this, dependency_3.cometbft.types.v1beta1.Header, 2) as dependency_3.cometbft.types.v1beta1.Header;
        }
        set header(value: dependency_3.cometbft.types.v1beta1.Header) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get last_commit_info() {
            return pb_1.Message.getWrapperField(this, CommitInfo, 3) as CommitInfo;
        }
        set last_commit_info(value: CommitInfo) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_last_commit_info() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get byzantine_validators() {
            return pb_1.Message.getRepeatedWrapperField(this, Misbehavior, 4) as Misbehavior[];
        }
        set byzantine_validators(value: Misbehavior[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            hash?: Uint8Array;
            header?: ReturnType<typeof dependency_3.cometbft.types.v1beta1.Header.prototype.toObject>;
            last_commit_info?: ReturnType<typeof CommitInfo.prototype.toObject>;
            byzantine_validators?: ReturnType<typeof Misbehavior.prototype.toObject>[];
        }): RequestBeginBlock {
            const message = new RequestBeginBlock({});
            if (data.hash != null) {
                message.hash = data.hash;
            }
            if (data.header != null) {
                message.header = dependency_3.cometbft.types.v1beta1.Header.fromObject(data.header);
            }
            if (data.last_commit_info != null) {
                message.last_commit_info = CommitInfo.fromObject(data.last_commit_info);
            }
            if (data.byzantine_validators != null) {
                message.byzantine_validators = data.byzantine_validators.map(item => Misbehavior.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                hash?: Uint8Array;
                header?: ReturnType<typeof dependency_3.cometbft.types.v1beta1.Header.prototype.toObject>;
                last_commit_info?: ReturnType<typeof CommitInfo.prototype.toObject>;
                byzantine_validators?: ReturnType<typeof Misbehavior.prototype.toObject>[];
            } = {};
            if (this.hash != null) {
                data.hash = this.hash;
            }
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.last_commit_info != null) {
                data.last_commit_info = this.last_commit_info.toObject();
            }
            if (this.byzantine_validators != null) {
                data.byzantine_validators = this.byzantine_validators.map((item: Misbehavior) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hash.length)
                writer.writeBytes(1, this.hash);
            if (this.has_header)
                writer.writeMessage(2, this.header, () => this.header.serialize(writer));
            if (this.has_last_commit_info)
                writer.writeMessage(3, this.last_commit_info, () => this.last_commit_info.serialize(writer));
            if (this.byzantine_validators.length)
                writer.writeRepeatedMessage(4, this.byzantine_validators, (item: Misbehavior) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestBeginBlock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestBeginBlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.hash = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.header, () => message.header = dependency_3.cometbft.types.v1beta1.Header.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.last_commit_info, () => message.last_commit_info = CommitInfo.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.byzantine_validators, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Misbehavior.deserialize(reader), Misbehavior));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestBeginBlock {
            return RequestBeginBlock.deserialize(bytes);
        }
    }
    export class RequestPrepareProposal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            max_tx_bytes?: number;
            txs?: Uint8Array[];
            local_last_commit?: ExtendedCommitInfo;
            misbehavior?: Misbehavior[];
            height?: number;
            time?: dependency_5.google.protobuf.Timestamp;
            next_validators_hash?: Uint8Array;
            proposer_address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("max_tx_bytes" in data && data.max_tx_bytes != undefined) {
                    this.max_tx_bytes = data.max_tx_bytes;
                }
                if ("txs" in data && data.txs != undefined) {
                    this.txs = data.txs;
                }
                if ("local_last_commit" in data && data.local_last_commit != undefined) {
                    this.local_last_commit = data.local_last_commit;
                }
                if ("misbehavior" in data && data.misbehavior != undefined) {
                    this.misbehavior = data.misbehavior;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("time" in data && data.time != undefined) {
                    this.time = data.time;
                }
                if ("next_validators_hash" in data && data.next_validators_hash != undefined) {
                    this.next_validators_hash = data.next_validators_hash;
                }
                if ("proposer_address" in data && data.proposer_address != undefined) {
                    this.proposer_address = data.proposer_address;
                }
            }
        }
        get max_tx_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set max_tx_bytes(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get txs() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
        }
        set txs(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get local_last_commit() {
            return pb_1.Message.getWrapperField(this, ExtendedCommitInfo, 3) as ExtendedCommitInfo;
        }
        set local_last_commit(value: ExtendedCommitInfo) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_local_last_commit() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get misbehavior() {
            return pb_1.Message.getRepeatedWrapperField(this, Misbehavior, 4) as Misbehavior[];
        }
        set misbehavior(value: Misbehavior[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get time() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 6) as dependency_5.google.protobuf.Timestamp;
        }
        set time(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_time() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get next_validators_hash() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set next_validators_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        get proposer_address() {
            return pb_1.Message.getFieldWithDefault(this, 8, new Uint8Array(0)) as Uint8Array;
        }
        set proposer_address(value: Uint8Array) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            max_tx_bytes?: number;
            txs?: Uint8Array[];
            local_last_commit?: ReturnType<typeof ExtendedCommitInfo.prototype.toObject>;
            misbehavior?: ReturnType<typeof Misbehavior.prototype.toObject>[];
            height?: number;
            time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            next_validators_hash?: Uint8Array;
            proposer_address?: Uint8Array;
        }): RequestPrepareProposal {
            const message = new RequestPrepareProposal({});
            if (data.max_tx_bytes != null) {
                message.max_tx_bytes = data.max_tx_bytes;
            }
            if (data.txs != null) {
                message.txs = data.txs;
            }
            if (data.local_last_commit != null) {
                message.local_last_commit = ExtendedCommitInfo.fromObject(data.local_last_commit);
            }
            if (data.misbehavior != null) {
                message.misbehavior = data.misbehavior.map(item => Misbehavior.fromObject(item));
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.time != null) {
                message.time = dependency_5.google.protobuf.Timestamp.fromObject(data.time);
            }
            if (data.next_validators_hash != null) {
                message.next_validators_hash = data.next_validators_hash;
            }
            if (data.proposer_address != null) {
                message.proposer_address = data.proposer_address;
            }
            return message;
        }
        toObject() {
            const data: {
                max_tx_bytes?: number;
                txs?: Uint8Array[];
                local_last_commit?: ReturnType<typeof ExtendedCommitInfo.prototype.toObject>;
                misbehavior?: ReturnType<typeof Misbehavior.prototype.toObject>[];
                height?: number;
                time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
                next_validators_hash?: Uint8Array;
                proposer_address?: Uint8Array;
            } = {};
            if (this.max_tx_bytes != null) {
                data.max_tx_bytes = this.max_tx_bytes;
            }
            if (this.txs != null) {
                data.txs = this.txs;
            }
            if (this.local_last_commit != null) {
                data.local_last_commit = this.local_last_commit.toObject();
            }
            if (this.misbehavior != null) {
                data.misbehavior = this.misbehavior.map((item: Misbehavior) => item.toObject());
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.time != null) {
                data.time = this.time.toObject();
            }
            if (this.next_validators_hash != null) {
                data.next_validators_hash = this.next_validators_hash;
            }
            if (this.proposer_address != null) {
                data.proposer_address = this.proposer_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.max_tx_bytes != 0)
                writer.writeInt64(1, this.max_tx_bytes);
            if (this.txs.length)
                writer.writeRepeatedBytes(2, this.txs);
            if (this.has_local_last_commit)
                writer.writeMessage(3, this.local_last_commit, () => this.local_last_commit.serialize(writer));
            if (this.misbehavior.length)
                writer.writeRepeatedMessage(4, this.misbehavior, (item: Misbehavior) => item.serialize(writer));
            if (this.height != 0)
                writer.writeInt64(5, this.height);
            if (this.has_time)
                writer.writeMessage(6, this.time, () => this.time.serialize(writer));
            if (this.next_validators_hash.length)
                writer.writeBytes(7, this.next_validators_hash);
            if (this.proposer_address.length)
                writer.writeBytes(8, this.proposer_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestPrepareProposal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestPrepareProposal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.max_tx_bytes = reader.readInt64();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    case 3:
                        reader.readMessage(message.local_last_commit, () => message.local_last_commit = ExtendedCommitInfo.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.misbehavior, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Misbehavior.deserialize(reader), Misbehavior));
                        break;
                    case 5:
                        message.height = reader.readInt64();
                        break;
                    case 6:
                        reader.readMessage(message.time, () => message.time = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        message.next_validators_hash = reader.readBytes();
                        break;
                    case 8:
                        message.proposer_address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestPrepareProposal {
            return RequestPrepareProposal.deserialize(bytes);
        }
    }
    export class RequestProcessProposal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            txs?: Uint8Array[];
            proposed_last_commit?: CommitInfo;
            misbehavior?: Misbehavior[];
            hash?: Uint8Array;
            height?: number;
            time?: dependency_5.google.protobuf.Timestamp;
            next_validators_hash?: Uint8Array;
            proposer_address?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("txs" in data && data.txs != undefined) {
                    this.txs = data.txs;
                }
                if ("proposed_last_commit" in data && data.proposed_last_commit != undefined) {
                    this.proposed_last_commit = data.proposed_last_commit;
                }
                if ("misbehavior" in data && data.misbehavior != undefined) {
                    this.misbehavior = data.misbehavior;
                }
                if ("hash" in data && data.hash != undefined) {
                    this.hash = data.hash;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("time" in data && data.time != undefined) {
                    this.time = data.time;
                }
                if ("next_validators_hash" in data && data.next_validators_hash != undefined) {
                    this.next_validators_hash = data.next_validators_hash;
                }
                if ("proposer_address" in data && data.proposer_address != undefined) {
                    this.proposer_address = data.proposer_address;
                }
            }
        }
        get txs() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set txs(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get proposed_last_commit() {
            return pb_1.Message.getWrapperField(this, CommitInfo, 2) as CommitInfo;
        }
        set proposed_last_commit(value: CommitInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_proposed_last_commit() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get misbehavior() {
            return pb_1.Message.getRepeatedWrapperField(this, Misbehavior, 3) as Misbehavior[];
        }
        set misbehavior(value: Misbehavior[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get hash() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set hash(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get time() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 6) as dependency_5.google.protobuf.Timestamp;
        }
        set time(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_time() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get next_validators_hash() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set next_validators_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        get proposer_address() {
            return pb_1.Message.getFieldWithDefault(this, 8, new Uint8Array(0)) as Uint8Array;
        }
        set proposer_address(value: Uint8Array) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            txs?: Uint8Array[];
            proposed_last_commit?: ReturnType<typeof CommitInfo.prototype.toObject>;
            misbehavior?: ReturnType<typeof Misbehavior.prototype.toObject>[];
            hash?: Uint8Array;
            height?: number;
            time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            next_validators_hash?: Uint8Array;
            proposer_address?: Uint8Array;
        }): RequestProcessProposal {
            const message = new RequestProcessProposal({});
            if (data.txs != null) {
                message.txs = data.txs;
            }
            if (data.proposed_last_commit != null) {
                message.proposed_last_commit = CommitInfo.fromObject(data.proposed_last_commit);
            }
            if (data.misbehavior != null) {
                message.misbehavior = data.misbehavior.map(item => Misbehavior.fromObject(item));
            }
            if (data.hash != null) {
                message.hash = data.hash;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.time != null) {
                message.time = dependency_5.google.protobuf.Timestamp.fromObject(data.time);
            }
            if (data.next_validators_hash != null) {
                message.next_validators_hash = data.next_validators_hash;
            }
            if (data.proposer_address != null) {
                message.proposer_address = data.proposer_address;
            }
            return message;
        }
        toObject() {
            const data: {
                txs?: Uint8Array[];
                proposed_last_commit?: ReturnType<typeof CommitInfo.prototype.toObject>;
                misbehavior?: ReturnType<typeof Misbehavior.prototype.toObject>[];
                hash?: Uint8Array;
                height?: number;
                time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
                next_validators_hash?: Uint8Array;
                proposer_address?: Uint8Array;
            } = {};
            if (this.txs != null) {
                data.txs = this.txs;
            }
            if (this.proposed_last_commit != null) {
                data.proposed_last_commit = this.proposed_last_commit.toObject();
            }
            if (this.misbehavior != null) {
                data.misbehavior = this.misbehavior.map((item: Misbehavior) => item.toObject());
            }
            if (this.hash != null) {
                data.hash = this.hash;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.time != null) {
                data.time = this.time.toObject();
            }
            if (this.next_validators_hash != null) {
                data.next_validators_hash = this.next_validators_hash;
            }
            if (this.proposer_address != null) {
                data.proposer_address = this.proposer_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.txs.length)
                writer.writeRepeatedBytes(1, this.txs);
            if (this.has_proposed_last_commit)
                writer.writeMessage(2, this.proposed_last_commit, () => this.proposed_last_commit.serialize(writer));
            if (this.misbehavior.length)
                writer.writeRepeatedMessage(3, this.misbehavior, (item: Misbehavior) => item.serialize(writer));
            if (this.hash.length)
                writer.writeBytes(4, this.hash);
            if (this.height != 0)
                writer.writeInt64(5, this.height);
            if (this.has_time)
                writer.writeMessage(6, this.time, () => this.time.serialize(writer));
            if (this.next_validators_hash.length)
                writer.writeBytes(7, this.next_validators_hash);
            if (this.proposer_address.length)
                writer.writeBytes(8, this.proposer_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestProcessProposal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestProcessProposal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    case 2:
                        reader.readMessage(message.proposed_last_commit, () => message.proposed_last_commit = CommitInfo.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.misbehavior, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Misbehavior.deserialize(reader), Misbehavior));
                        break;
                    case 4:
                        message.hash = reader.readBytes();
                        break;
                    case 5:
                        message.height = reader.readInt64();
                        break;
                    case 6:
                        reader.readMessage(message.time, () => message.time = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        message.next_validators_hash = reader.readBytes();
                        break;
                    case 8:
                        message.proposer_address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestProcessProposal {
            return RequestProcessProposal.deserialize(bytes);
        }
    }
    export class Response extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]];
        constructor(data?: any[] | ({} & (({
            exception?: dependency_2.cometbft.abci.v1beta1.ResponseException;
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            exception?: never;
            echo?: dependency_2.cometbft.abci.v1beta1.ResponseEcho;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            exception?: never;
            echo?: never;
            flush?: dependency_2.cometbft.abci.v1beta1.ResponseFlush;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            exception?: never;
            echo?: never;
            flush?: never;
            info?: dependency_2.cometbft.abci.v1beta1.ResponseInfo;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            exception?: never;
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: ResponseInitChain;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            exception?: never;
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: dependency_2.cometbft.abci.v1beta1.ResponseQuery;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            exception?: never;
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: ResponseBeginBlock;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            exception?: never;
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: ResponseCheckTx;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            exception?: never;
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: ResponseDeliverTx;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            exception?: never;
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: ResponseEndBlock;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            exception?: never;
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: dependency_2.cometbft.abci.v1beta1.ResponseCommit;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            exception?: never;
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: dependency_2.cometbft.abci.v1beta1.ResponseListSnapshots;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            exception?: never;
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: dependency_2.cometbft.abci.v1beta1.ResponseOfferSnapshot;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            exception?: never;
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: dependency_2.cometbft.abci.v1beta1.ResponseLoadSnapshotChunk;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            exception?: never;
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: dependency_2.cometbft.abci.v1beta1.ResponseApplySnapshotChunk;
            prepare_proposal?: never;
            process_proposal?: never;
        } | {
            exception?: never;
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: ResponsePrepareProposal;
            process_proposal?: never;
        } | {
            exception?: never;
            echo?: never;
            flush?: never;
            info?: never;
            init_chain?: never;
            query?: never;
            begin_block?: never;
            check_tx?: never;
            deliver_tx?: never;
            end_block?: never;
            commit?: never;
            list_snapshots?: never;
            offer_snapshot?: never;
            load_snapshot_chunk?: never;
            apply_snapshot_chunk?: never;
            prepare_proposal?: never;
            process_proposal?: ResponseProcessProposal;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("exception" in data && data.exception != undefined) {
                    this.exception = data.exception;
                }
                if ("echo" in data && data.echo != undefined) {
                    this.echo = data.echo;
                }
                if ("flush" in data && data.flush != undefined) {
                    this.flush = data.flush;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
                if ("init_chain" in data && data.init_chain != undefined) {
                    this.init_chain = data.init_chain;
                }
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("begin_block" in data && data.begin_block != undefined) {
                    this.begin_block = data.begin_block;
                }
                if ("check_tx" in data && data.check_tx != undefined) {
                    this.check_tx = data.check_tx;
                }
                if ("deliver_tx" in data && data.deliver_tx != undefined) {
                    this.deliver_tx = data.deliver_tx;
                }
                if ("end_block" in data && data.end_block != undefined) {
                    this.end_block = data.end_block;
                }
                if ("commit" in data && data.commit != undefined) {
                    this.commit = data.commit;
                }
                if ("list_snapshots" in data && data.list_snapshots != undefined) {
                    this.list_snapshots = data.list_snapshots;
                }
                if ("offer_snapshot" in data && data.offer_snapshot != undefined) {
                    this.offer_snapshot = data.offer_snapshot;
                }
                if ("load_snapshot_chunk" in data && data.load_snapshot_chunk != undefined) {
                    this.load_snapshot_chunk = data.load_snapshot_chunk;
                }
                if ("apply_snapshot_chunk" in data && data.apply_snapshot_chunk != undefined) {
                    this.apply_snapshot_chunk = data.apply_snapshot_chunk;
                }
                if ("prepare_proposal" in data && data.prepare_proposal != undefined) {
                    this.prepare_proposal = data.prepare_proposal;
                }
                if ("process_proposal" in data && data.process_proposal != undefined) {
                    this.process_proposal = data.process_proposal;
                }
            }
        }
        get exception() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.ResponseException, 1) as dependency_2.cometbft.abci.v1beta1.ResponseException;
        }
        set exception(value: dependency_2.cometbft.abci.v1beta1.ResponseException) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_exception() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get echo() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.ResponseEcho, 2) as dependency_2.cometbft.abci.v1beta1.ResponseEcho;
        }
        set echo(value: dependency_2.cometbft.abci.v1beta1.ResponseEcho) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_echo() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get flush() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.ResponseFlush, 3) as dependency_2.cometbft.abci.v1beta1.ResponseFlush;
        }
        set flush(value: dependency_2.cometbft.abci.v1beta1.ResponseFlush) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_flush() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get info() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.ResponseInfo, 4) as dependency_2.cometbft.abci.v1beta1.ResponseInfo;
        }
        set info(value: dependency_2.cometbft.abci.v1beta1.ResponseInfo) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get init_chain() {
            return pb_1.Message.getWrapperField(this, ResponseInitChain, 6) as ResponseInitChain;
        }
        set init_chain(value: ResponseInitChain) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_init_chain() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get query() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.ResponseQuery, 7) as dependency_2.cometbft.abci.v1beta1.ResponseQuery;
        }
        set query(value: dependency_2.cometbft.abci.v1beta1.ResponseQuery) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_query() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get begin_block() {
            return pb_1.Message.getWrapperField(this, ResponseBeginBlock, 8) as ResponseBeginBlock;
        }
        set begin_block(value: ResponseBeginBlock) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_begin_block() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get check_tx() {
            return pb_1.Message.getWrapperField(this, ResponseCheckTx, 9) as ResponseCheckTx;
        }
        set check_tx(value: ResponseCheckTx) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_check_tx() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get deliver_tx() {
            return pb_1.Message.getWrapperField(this, ResponseDeliverTx, 10) as ResponseDeliverTx;
        }
        set deliver_tx(value: ResponseDeliverTx) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_deliver_tx() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get end_block() {
            return pb_1.Message.getWrapperField(this, ResponseEndBlock, 11) as ResponseEndBlock;
        }
        set end_block(value: ResponseEndBlock) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_end_block() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get commit() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.ResponseCommit, 12) as dependency_2.cometbft.abci.v1beta1.ResponseCommit;
        }
        set commit(value: dependency_2.cometbft.abci.v1beta1.ResponseCommit) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_commit() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get list_snapshots() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.ResponseListSnapshots, 13) as dependency_2.cometbft.abci.v1beta1.ResponseListSnapshots;
        }
        set list_snapshots(value: dependency_2.cometbft.abci.v1beta1.ResponseListSnapshots) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_list_snapshots() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get offer_snapshot() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.ResponseOfferSnapshot, 14) as dependency_2.cometbft.abci.v1beta1.ResponseOfferSnapshot;
        }
        set offer_snapshot(value: dependency_2.cometbft.abci.v1beta1.ResponseOfferSnapshot) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_offer_snapshot() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get load_snapshot_chunk() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.ResponseLoadSnapshotChunk, 15) as dependency_2.cometbft.abci.v1beta1.ResponseLoadSnapshotChunk;
        }
        set load_snapshot_chunk(value: dependency_2.cometbft.abci.v1beta1.ResponseLoadSnapshotChunk) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_load_snapshot_chunk() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get apply_snapshot_chunk() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.ResponseApplySnapshotChunk, 16) as dependency_2.cometbft.abci.v1beta1.ResponseApplySnapshotChunk;
        }
        set apply_snapshot_chunk(value: dependency_2.cometbft.abci.v1beta1.ResponseApplySnapshotChunk) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_apply_snapshot_chunk() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get prepare_proposal() {
            return pb_1.Message.getWrapperField(this, ResponsePrepareProposal, 17) as ResponsePrepareProposal;
        }
        set prepare_proposal(value: ResponsePrepareProposal) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_prepare_proposal() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get process_proposal() {
            return pb_1.Message.getWrapperField(this, ResponseProcessProposal, 18) as ResponseProcessProposal;
        }
        set process_proposal(value: ResponseProcessProposal) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_process_proposal() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get value() {
            const cases: {
                [index: number]: "none" | "exception" | "echo" | "flush" | "info" | "init_chain" | "query" | "begin_block" | "check_tx" | "deliver_tx" | "end_block" | "commit" | "list_snapshots" | "offer_snapshot" | "load_snapshot_chunk" | "apply_snapshot_chunk" | "prepare_proposal" | "process_proposal";
            } = {
                0: "none",
                1: "exception",
                2: "echo",
                3: "flush",
                4: "info",
                6: "init_chain",
                7: "query",
                8: "begin_block",
                9: "check_tx",
                10: "deliver_tx",
                11: "end_block",
                12: "commit",
                13: "list_snapshots",
                14: "offer_snapshot",
                15: "load_snapshot_chunk",
                16: "apply_snapshot_chunk",
                17: "prepare_proposal",
                18: "process_proposal"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])];
        }
        static fromObject(data: {
            exception?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseException.prototype.toObject>;
            echo?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseEcho.prototype.toObject>;
            flush?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseFlush.prototype.toObject>;
            info?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseInfo.prototype.toObject>;
            init_chain?: ReturnType<typeof ResponseInitChain.prototype.toObject>;
            query?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseQuery.prototype.toObject>;
            begin_block?: ReturnType<typeof ResponseBeginBlock.prototype.toObject>;
            check_tx?: ReturnType<typeof ResponseCheckTx.prototype.toObject>;
            deliver_tx?: ReturnType<typeof ResponseDeliverTx.prototype.toObject>;
            end_block?: ReturnType<typeof ResponseEndBlock.prototype.toObject>;
            commit?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseCommit.prototype.toObject>;
            list_snapshots?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseListSnapshots.prototype.toObject>;
            offer_snapshot?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseOfferSnapshot.prototype.toObject>;
            load_snapshot_chunk?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseLoadSnapshotChunk.prototype.toObject>;
            apply_snapshot_chunk?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseApplySnapshotChunk.prototype.toObject>;
            prepare_proposal?: ReturnType<typeof ResponsePrepareProposal.prototype.toObject>;
            process_proposal?: ReturnType<typeof ResponseProcessProposal.prototype.toObject>;
        }): Response {
            const message = new Response({});
            if (data.exception != null) {
                message.exception = dependency_2.cometbft.abci.v1beta1.ResponseException.fromObject(data.exception);
            }
            if (data.echo != null) {
                message.echo = dependency_2.cometbft.abci.v1beta1.ResponseEcho.fromObject(data.echo);
            }
            if (data.flush != null) {
                message.flush = dependency_2.cometbft.abci.v1beta1.ResponseFlush.fromObject(data.flush);
            }
            if (data.info != null) {
                message.info = dependency_2.cometbft.abci.v1beta1.ResponseInfo.fromObject(data.info);
            }
            if (data.init_chain != null) {
                message.init_chain = ResponseInitChain.fromObject(data.init_chain);
            }
            if (data.query != null) {
                message.query = dependency_2.cometbft.abci.v1beta1.ResponseQuery.fromObject(data.query);
            }
            if (data.begin_block != null) {
                message.begin_block = ResponseBeginBlock.fromObject(data.begin_block);
            }
            if (data.check_tx != null) {
                message.check_tx = ResponseCheckTx.fromObject(data.check_tx);
            }
            if (data.deliver_tx != null) {
                message.deliver_tx = ResponseDeliverTx.fromObject(data.deliver_tx);
            }
            if (data.end_block != null) {
                message.end_block = ResponseEndBlock.fromObject(data.end_block);
            }
            if (data.commit != null) {
                message.commit = dependency_2.cometbft.abci.v1beta1.ResponseCommit.fromObject(data.commit);
            }
            if (data.list_snapshots != null) {
                message.list_snapshots = dependency_2.cometbft.abci.v1beta1.ResponseListSnapshots.fromObject(data.list_snapshots);
            }
            if (data.offer_snapshot != null) {
                message.offer_snapshot = dependency_2.cometbft.abci.v1beta1.ResponseOfferSnapshot.fromObject(data.offer_snapshot);
            }
            if (data.load_snapshot_chunk != null) {
                message.load_snapshot_chunk = dependency_2.cometbft.abci.v1beta1.ResponseLoadSnapshotChunk.fromObject(data.load_snapshot_chunk);
            }
            if (data.apply_snapshot_chunk != null) {
                message.apply_snapshot_chunk = dependency_2.cometbft.abci.v1beta1.ResponseApplySnapshotChunk.fromObject(data.apply_snapshot_chunk);
            }
            if (data.prepare_proposal != null) {
                message.prepare_proposal = ResponsePrepareProposal.fromObject(data.prepare_proposal);
            }
            if (data.process_proposal != null) {
                message.process_proposal = ResponseProcessProposal.fromObject(data.process_proposal);
            }
            return message;
        }
        toObject() {
            const data: {
                exception?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseException.prototype.toObject>;
                echo?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseEcho.prototype.toObject>;
                flush?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseFlush.prototype.toObject>;
                info?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseInfo.prototype.toObject>;
                init_chain?: ReturnType<typeof ResponseInitChain.prototype.toObject>;
                query?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseQuery.prototype.toObject>;
                begin_block?: ReturnType<typeof ResponseBeginBlock.prototype.toObject>;
                check_tx?: ReturnType<typeof ResponseCheckTx.prototype.toObject>;
                deliver_tx?: ReturnType<typeof ResponseDeliverTx.prototype.toObject>;
                end_block?: ReturnType<typeof ResponseEndBlock.prototype.toObject>;
                commit?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseCommit.prototype.toObject>;
                list_snapshots?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseListSnapshots.prototype.toObject>;
                offer_snapshot?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseOfferSnapshot.prototype.toObject>;
                load_snapshot_chunk?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseLoadSnapshotChunk.prototype.toObject>;
                apply_snapshot_chunk?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ResponseApplySnapshotChunk.prototype.toObject>;
                prepare_proposal?: ReturnType<typeof ResponsePrepareProposal.prototype.toObject>;
                process_proposal?: ReturnType<typeof ResponseProcessProposal.prototype.toObject>;
            } = {};
            if (this.exception != null) {
                data.exception = this.exception.toObject();
            }
            if (this.echo != null) {
                data.echo = this.echo.toObject();
            }
            if (this.flush != null) {
                data.flush = this.flush.toObject();
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            if (this.init_chain != null) {
                data.init_chain = this.init_chain.toObject();
            }
            if (this.query != null) {
                data.query = this.query.toObject();
            }
            if (this.begin_block != null) {
                data.begin_block = this.begin_block.toObject();
            }
            if (this.check_tx != null) {
                data.check_tx = this.check_tx.toObject();
            }
            if (this.deliver_tx != null) {
                data.deliver_tx = this.deliver_tx.toObject();
            }
            if (this.end_block != null) {
                data.end_block = this.end_block.toObject();
            }
            if (this.commit != null) {
                data.commit = this.commit.toObject();
            }
            if (this.list_snapshots != null) {
                data.list_snapshots = this.list_snapshots.toObject();
            }
            if (this.offer_snapshot != null) {
                data.offer_snapshot = this.offer_snapshot.toObject();
            }
            if (this.load_snapshot_chunk != null) {
                data.load_snapshot_chunk = this.load_snapshot_chunk.toObject();
            }
            if (this.apply_snapshot_chunk != null) {
                data.apply_snapshot_chunk = this.apply_snapshot_chunk.toObject();
            }
            if (this.prepare_proposal != null) {
                data.prepare_proposal = this.prepare_proposal.toObject();
            }
            if (this.process_proposal != null) {
                data.process_proposal = this.process_proposal.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_exception)
                writer.writeMessage(1, this.exception, () => this.exception.serialize(writer));
            if (this.has_echo)
                writer.writeMessage(2, this.echo, () => this.echo.serialize(writer));
            if (this.has_flush)
                writer.writeMessage(3, this.flush, () => this.flush.serialize(writer));
            if (this.has_info)
                writer.writeMessage(4, this.info, () => this.info.serialize(writer));
            if (this.has_init_chain)
                writer.writeMessage(6, this.init_chain, () => this.init_chain.serialize(writer));
            if (this.has_query)
                writer.writeMessage(7, this.query, () => this.query.serialize(writer));
            if (this.has_begin_block)
                writer.writeMessage(8, this.begin_block, () => this.begin_block.serialize(writer));
            if (this.has_check_tx)
                writer.writeMessage(9, this.check_tx, () => this.check_tx.serialize(writer));
            if (this.has_deliver_tx)
                writer.writeMessage(10, this.deliver_tx, () => this.deliver_tx.serialize(writer));
            if (this.has_end_block)
                writer.writeMessage(11, this.end_block, () => this.end_block.serialize(writer));
            if (this.has_commit)
                writer.writeMessage(12, this.commit, () => this.commit.serialize(writer));
            if (this.has_list_snapshots)
                writer.writeMessage(13, this.list_snapshots, () => this.list_snapshots.serialize(writer));
            if (this.has_offer_snapshot)
                writer.writeMessage(14, this.offer_snapshot, () => this.offer_snapshot.serialize(writer));
            if (this.has_load_snapshot_chunk)
                writer.writeMessage(15, this.load_snapshot_chunk, () => this.load_snapshot_chunk.serialize(writer));
            if (this.has_apply_snapshot_chunk)
                writer.writeMessage(16, this.apply_snapshot_chunk, () => this.apply_snapshot_chunk.serialize(writer));
            if (this.has_prepare_proposal)
                writer.writeMessage(17, this.prepare_proposal, () => this.prepare_proposal.serialize(writer));
            if (this.has_process_proposal)
                writer.writeMessage(18, this.process_proposal, () => this.process_proposal.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.exception, () => message.exception = dependency_2.cometbft.abci.v1beta1.ResponseException.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.echo, () => message.echo = dependency_2.cometbft.abci.v1beta1.ResponseEcho.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.flush, () => message.flush = dependency_2.cometbft.abci.v1beta1.ResponseFlush.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.info, () => message.info = dependency_2.cometbft.abci.v1beta1.ResponseInfo.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.init_chain, () => message.init_chain = ResponseInitChain.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.query, () => message.query = dependency_2.cometbft.abci.v1beta1.ResponseQuery.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.begin_block, () => message.begin_block = ResponseBeginBlock.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.check_tx, () => message.check_tx = ResponseCheckTx.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.deliver_tx, () => message.deliver_tx = ResponseDeliverTx.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.end_block, () => message.end_block = ResponseEndBlock.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.commit, () => message.commit = dependency_2.cometbft.abci.v1beta1.ResponseCommit.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.list_snapshots, () => message.list_snapshots = dependency_2.cometbft.abci.v1beta1.ResponseListSnapshots.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.offer_snapshot, () => message.offer_snapshot = dependency_2.cometbft.abci.v1beta1.ResponseOfferSnapshot.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.load_snapshot_chunk, () => message.load_snapshot_chunk = dependency_2.cometbft.abci.v1beta1.ResponseLoadSnapshotChunk.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.apply_snapshot_chunk, () => message.apply_snapshot_chunk = dependency_2.cometbft.abci.v1beta1.ResponseApplySnapshotChunk.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.prepare_proposal, () => message.prepare_proposal = ResponsePrepareProposal.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.process_proposal, () => message.process_proposal = ResponseProcessProposal.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Response {
            return Response.deserialize(bytes);
        }
    }
    export class ResponseInitChain extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consensus_params?: dependency_4.cometbft.types.v1beta2.ConsensusParams;
            validators?: dependency_2.cometbft.abci.v1beta1.ValidatorUpdate[];
            app_hash?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consensus_params" in data && data.consensus_params != undefined) {
                    this.consensus_params = data.consensus_params;
                }
                if ("validators" in data && data.validators != undefined) {
                    this.validators = data.validators;
                }
                if ("app_hash" in data && data.app_hash != undefined) {
                    this.app_hash = data.app_hash;
                }
            }
        }
        get consensus_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.cometbft.types.v1beta2.ConsensusParams, 1) as dependency_4.cometbft.types.v1beta2.ConsensusParams;
        }
        set consensus_params(value: dependency_4.cometbft.types.v1beta2.ConsensusParams) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_consensus_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get validators() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cometbft.abci.v1beta1.ValidatorUpdate, 2) as dependency_2.cometbft.abci.v1beta1.ValidatorUpdate[];
        }
        set validators(value: dependency_2.cometbft.abci.v1beta1.ValidatorUpdate[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get app_hash() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set app_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            consensus_params?: ReturnType<typeof dependency_4.cometbft.types.v1beta2.ConsensusParams.prototype.toObject>;
            validators?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ValidatorUpdate.prototype.toObject>[];
            app_hash?: Uint8Array;
        }): ResponseInitChain {
            const message = new ResponseInitChain({});
            if (data.consensus_params != null) {
                message.consensus_params = dependency_4.cometbft.types.v1beta2.ConsensusParams.fromObject(data.consensus_params);
            }
            if (data.validators != null) {
                message.validators = data.validators.map(item => dependency_2.cometbft.abci.v1beta1.ValidatorUpdate.fromObject(item));
            }
            if (data.app_hash != null) {
                message.app_hash = data.app_hash;
            }
            return message;
        }
        toObject() {
            const data: {
                consensus_params?: ReturnType<typeof dependency_4.cometbft.types.v1beta2.ConsensusParams.prototype.toObject>;
                validators?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ValidatorUpdate.prototype.toObject>[];
                app_hash?: Uint8Array;
            } = {};
            if (this.consensus_params != null) {
                data.consensus_params = this.consensus_params.toObject();
            }
            if (this.validators != null) {
                data.validators = this.validators.map((item: dependency_2.cometbft.abci.v1beta1.ValidatorUpdate) => item.toObject());
            }
            if (this.app_hash != null) {
                data.app_hash = this.app_hash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_consensus_params)
                writer.writeMessage(1, this.consensus_params, () => this.consensus_params.serialize(writer));
            if (this.validators.length)
                writer.writeRepeatedMessage(2, this.validators, (item: dependency_2.cometbft.abci.v1beta1.ValidatorUpdate) => item.serialize(writer));
            if (this.app_hash.length)
                writer.writeBytes(3, this.app_hash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseInitChain {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseInitChain();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.consensus_params, () => message.consensus_params = dependency_4.cometbft.types.v1beta2.ConsensusParams.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.validators, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.cometbft.abci.v1beta1.ValidatorUpdate.deserialize(reader), dependency_2.cometbft.abci.v1beta1.ValidatorUpdate));
                        break;
                    case 3:
                        message.app_hash = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResponseInitChain {
            return ResponseInitChain.deserialize(bytes);
        }
    }
    export class ResponseBeginBlock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            events?: Event[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
            }
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, Event, 1) as Event[];
        }
        set events(value: Event[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            events?: ReturnType<typeof Event.prototype.toObject>[];
        }): ResponseBeginBlock {
            const message = new ResponseBeginBlock({});
            if (data.events != null) {
                message.events = data.events.map(item => Event.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                events?: ReturnType<typeof Event.prototype.toObject>[];
            } = {};
            if (this.events != null) {
                data.events = this.events.map((item: Event) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.events.length)
                writer.writeRepeatedMessage(1, this.events, (item: Event) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseBeginBlock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseBeginBlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Event.deserialize(reader), Event));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResponseBeginBlock {
            return ResponseBeginBlock.deserialize(bytes);
        }
    }
    export class ResponseCheckTx extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            data?: Uint8Array;
            log?: string;
            info?: string;
            gas_wanted?: number;
            gas_used?: number;
            events?: Event[];
            codespace?: string;
            sender?: string;
            priority?: number;
            mempool_error?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("log" in data && data.log != undefined) {
                    this.log = data.log;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
                if ("gas_wanted" in data && data.gas_wanted != undefined) {
                    this.gas_wanted = data.gas_wanted;
                }
                if ("gas_used" in data && data.gas_used != undefined) {
                    this.gas_used = data.gas_used;
                }
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
                if ("codespace" in data && data.codespace != undefined) {
                    this.codespace = data.codespace;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("mempool_error" in data && data.mempool_error != undefined) {
                    this.mempool_error = data.mempool_error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get log() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set log(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get info() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set info(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get gas_wanted() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set gas_wanted(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get gas_used() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set gas_used(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, Event, 7) as Event[];
        }
        set events(value: Event[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get codespace() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set codespace(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get mempool_error() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set mempool_error(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            code?: number;
            data?: Uint8Array;
            log?: string;
            info?: string;
            gas_wanted?: number;
            gas_used?: number;
            events?: ReturnType<typeof Event.prototype.toObject>[];
            codespace?: string;
            sender?: string;
            priority?: number;
            mempool_error?: string;
        }): ResponseCheckTx {
            const message = new ResponseCheckTx({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.log != null) {
                message.log = data.log;
            }
            if (data.info != null) {
                message.info = data.info;
            }
            if (data.gas_wanted != null) {
                message.gas_wanted = data.gas_wanted;
            }
            if (data.gas_used != null) {
                message.gas_used = data.gas_used;
            }
            if (data.events != null) {
                message.events = data.events.map(item => Event.fromObject(item));
            }
            if (data.codespace != null) {
                message.codespace = data.codespace;
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.mempool_error != null) {
                message.mempool_error = data.mempool_error;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                data?: Uint8Array;
                log?: string;
                info?: string;
                gas_wanted?: number;
                gas_used?: number;
                events?: ReturnType<typeof Event.prototype.toObject>[];
                codespace?: string;
                sender?: string;
                priority?: number;
                mempool_error?: string;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.log != null) {
                data.log = this.log;
            }
            if (this.info != null) {
                data.info = this.info;
            }
            if (this.gas_wanted != null) {
                data.gas_wanted = this.gas_wanted;
            }
            if (this.gas_used != null) {
                data.gas_used = this.gas_used;
            }
            if (this.events != null) {
                data.events = this.events.map((item: Event) => item.toObject());
            }
            if (this.codespace != null) {
                data.codespace = this.codespace;
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.mempool_error != null) {
                data.mempool_error = this.mempool_error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeUint32(1, this.code);
            if (this.data.length)
                writer.writeBytes(2, this.data);
            if (this.log.length)
                writer.writeString(3, this.log);
            if (this.info.length)
                writer.writeString(4, this.info);
            if (this.gas_wanted != 0)
                writer.writeInt64(5, this.gas_wanted);
            if (this.gas_used != 0)
                writer.writeInt64(6, this.gas_used);
            if (this.events.length)
                writer.writeRepeatedMessage(7, this.events, (item: Event) => item.serialize(writer));
            if (this.codespace.length)
                writer.writeString(8, this.codespace);
            if (this.sender.length)
                writer.writeString(9, this.sender);
            if (this.priority != 0)
                writer.writeInt64(10, this.priority);
            if (this.mempool_error.length)
                writer.writeString(11, this.mempool_error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseCheckTx {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseCheckTx();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readUint32();
                        break;
                    case 2:
                        message.data = reader.readBytes();
                        break;
                    case 3:
                        message.log = reader.readString();
                        break;
                    case 4:
                        message.info = reader.readString();
                        break;
                    case 5:
                        message.gas_wanted = reader.readInt64();
                        break;
                    case 6:
                        message.gas_used = reader.readInt64();
                        break;
                    case 7:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 7, Event.deserialize(reader), Event));
                        break;
                    case 8:
                        message.codespace = reader.readString();
                        break;
                    case 9:
                        message.sender = reader.readString();
                        break;
                    case 10:
                        message.priority = reader.readInt64();
                        break;
                    case 11:
                        message.mempool_error = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResponseCheckTx {
            return ResponseCheckTx.deserialize(bytes);
        }
    }
    export class ResponseDeliverTx extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            data?: Uint8Array;
            log?: string;
            info?: string;
            gas_wanted?: number;
            gas_used?: number;
            events?: Event[];
            codespace?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("log" in data && data.log != undefined) {
                    this.log = data.log;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
                if ("gas_wanted" in data && data.gas_wanted != undefined) {
                    this.gas_wanted = data.gas_wanted;
                }
                if ("gas_used" in data && data.gas_used != undefined) {
                    this.gas_used = data.gas_used;
                }
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
                if ("codespace" in data && data.codespace != undefined) {
                    this.codespace = data.codespace;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get log() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set log(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get info() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set info(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get gas_wanted() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set gas_wanted(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get gas_used() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set gas_used(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, Event, 7) as Event[];
        }
        set events(value: Event[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get codespace() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set codespace(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            code?: number;
            data?: Uint8Array;
            log?: string;
            info?: string;
            gas_wanted?: number;
            gas_used?: number;
            events?: ReturnType<typeof Event.prototype.toObject>[];
            codespace?: string;
        }): ResponseDeliverTx {
            const message = new ResponseDeliverTx({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.log != null) {
                message.log = data.log;
            }
            if (data.info != null) {
                message.info = data.info;
            }
            if (data.gas_wanted != null) {
                message.gas_wanted = data.gas_wanted;
            }
            if (data.gas_used != null) {
                message.gas_used = data.gas_used;
            }
            if (data.events != null) {
                message.events = data.events.map(item => Event.fromObject(item));
            }
            if (data.codespace != null) {
                message.codespace = data.codespace;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                data?: Uint8Array;
                log?: string;
                info?: string;
                gas_wanted?: number;
                gas_used?: number;
                events?: ReturnType<typeof Event.prototype.toObject>[];
                codespace?: string;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.log != null) {
                data.log = this.log;
            }
            if (this.info != null) {
                data.info = this.info;
            }
            if (this.gas_wanted != null) {
                data.gas_wanted = this.gas_wanted;
            }
            if (this.gas_used != null) {
                data.gas_used = this.gas_used;
            }
            if (this.events != null) {
                data.events = this.events.map((item: Event) => item.toObject());
            }
            if (this.codespace != null) {
                data.codespace = this.codespace;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeUint32(1, this.code);
            if (this.data.length)
                writer.writeBytes(2, this.data);
            if (this.log.length)
                writer.writeString(3, this.log);
            if (this.info.length)
                writer.writeString(4, this.info);
            if (this.gas_wanted != 0)
                writer.writeInt64(5, this.gas_wanted);
            if (this.gas_used != 0)
                writer.writeInt64(6, this.gas_used);
            if (this.events.length)
                writer.writeRepeatedMessage(7, this.events, (item: Event) => item.serialize(writer));
            if (this.codespace.length)
                writer.writeString(8, this.codespace);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseDeliverTx {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseDeliverTx();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readUint32();
                        break;
                    case 2:
                        message.data = reader.readBytes();
                        break;
                    case 3:
                        message.log = reader.readString();
                        break;
                    case 4:
                        message.info = reader.readString();
                        break;
                    case 5:
                        message.gas_wanted = reader.readInt64();
                        break;
                    case 6:
                        message.gas_used = reader.readInt64();
                        break;
                    case 7:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 7, Event.deserialize(reader), Event));
                        break;
                    case 8:
                        message.codespace = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResponseDeliverTx {
            return ResponseDeliverTx.deserialize(bytes);
        }
    }
    export class ResponseEndBlock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validator_updates?: dependency_2.cometbft.abci.v1beta1.ValidatorUpdate[];
            consensus_param_updates?: dependency_4.cometbft.types.v1beta2.ConsensusParams;
            events?: Event[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator_updates" in data && data.validator_updates != undefined) {
                    this.validator_updates = data.validator_updates;
                }
                if ("consensus_param_updates" in data && data.consensus_param_updates != undefined) {
                    this.consensus_param_updates = data.consensus_param_updates;
                }
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
            }
        }
        get validator_updates() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cometbft.abci.v1beta1.ValidatorUpdate, 1) as dependency_2.cometbft.abci.v1beta1.ValidatorUpdate[];
        }
        set validator_updates(value: dependency_2.cometbft.abci.v1beta1.ValidatorUpdate[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get consensus_param_updates() {
            return pb_1.Message.getWrapperField(this, dependency_4.cometbft.types.v1beta2.ConsensusParams, 2) as dependency_4.cometbft.types.v1beta2.ConsensusParams;
        }
        set consensus_param_updates(value: dependency_4.cometbft.types.v1beta2.ConsensusParams) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_consensus_param_updates() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, Event, 3) as Event[];
        }
        set events(value: Event[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            validator_updates?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ValidatorUpdate.prototype.toObject>[];
            consensus_param_updates?: ReturnType<typeof dependency_4.cometbft.types.v1beta2.ConsensusParams.prototype.toObject>;
            events?: ReturnType<typeof Event.prototype.toObject>[];
        }): ResponseEndBlock {
            const message = new ResponseEndBlock({});
            if (data.validator_updates != null) {
                message.validator_updates = data.validator_updates.map(item => dependency_2.cometbft.abci.v1beta1.ValidatorUpdate.fromObject(item));
            }
            if (data.consensus_param_updates != null) {
                message.consensus_param_updates = dependency_4.cometbft.types.v1beta2.ConsensusParams.fromObject(data.consensus_param_updates);
            }
            if (data.events != null) {
                message.events = data.events.map(item => Event.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                validator_updates?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.ValidatorUpdate.prototype.toObject>[];
                consensus_param_updates?: ReturnType<typeof dependency_4.cometbft.types.v1beta2.ConsensusParams.prototype.toObject>;
                events?: ReturnType<typeof Event.prototype.toObject>[];
            } = {};
            if (this.validator_updates != null) {
                data.validator_updates = this.validator_updates.map((item: dependency_2.cometbft.abci.v1beta1.ValidatorUpdate) => item.toObject());
            }
            if (this.consensus_param_updates != null) {
                data.consensus_param_updates = this.consensus_param_updates.toObject();
            }
            if (this.events != null) {
                data.events = this.events.map((item: Event) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validator_updates.length)
                writer.writeRepeatedMessage(1, this.validator_updates, (item: dependency_2.cometbft.abci.v1beta1.ValidatorUpdate) => item.serialize(writer));
            if (this.has_consensus_param_updates)
                writer.writeMessage(2, this.consensus_param_updates, () => this.consensus_param_updates.serialize(writer));
            if (this.events.length)
                writer.writeRepeatedMessage(3, this.events, (item: Event) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseEndBlock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseEndBlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.validator_updates, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.cometbft.abci.v1beta1.ValidatorUpdate.deserialize(reader), dependency_2.cometbft.abci.v1beta1.ValidatorUpdate));
                        break;
                    case 2:
                        reader.readMessage(message.consensus_param_updates, () => message.consensus_param_updates = dependency_4.cometbft.types.v1beta2.ConsensusParams.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Event.deserialize(reader), Event));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResponseEndBlock {
            return ResponseEndBlock.deserialize(bytes);
        }
    }
    export class ResponsePrepareProposal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            txs?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("txs" in data && data.txs != undefined) {
                    this.txs = data.txs;
                }
            }
        }
        get txs() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set txs(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            txs?: Uint8Array[];
        }): ResponsePrepareProposal {
            const message = new ResponsePrepareProposal({});
            if (data.txs != null) {
                message.txs = data.txs;
            }
            return message;
        }
        toObject() {
            const data: {
                txs?: Uint8Array[];
            } = {};
            if (this.txs != null) {
                data.txs = this.txs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.txs.length)
                writer.writeRepeatedBytes(1, this.txs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponsePrepareProposal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponsePrepareProposal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResponsePrepareProposal {
            return ResponsePrepareProposal.deserialize(bytes);
        }
    }
    export class ResponseProcessProposal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: ResponseProcessProposal.ProposalStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, ResponseProcessProposal.ProposalStatus.UNKNOWN) as ResponseProcessProposal.ProposalStatus;
        }
        set status(value: ResponseProcessProposal.ProposalStatus) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: ResponseProcessProposal.ProposalStatus;
        }): ResponseProcessProposal {
            const message = new ResponseProcessProposal({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: ResponseProcessProposal.ProposalStatus;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != ResponseProcessProposal.ProposalStatus.UNKNOWN)
                writer.writeEnum(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseProcessProposal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseProcessProposal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResponseProcessProposal {
            return ResponseProcessProposal.deserialize(bytes);
        }
    }
    export namespace ResponseProcessProposal {
        export enum ProposalStatus {
            UNKNOWN = 0,
            ACCEPT = 1,
            REJECT = 2
        }
    }
    export class CommitInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            round?: number;
            votes?: dependency_2.cometbft.abci.v1beta1.VoteInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("round" in data && data.round != undefined) {
                    this.round = data.round;
                }
                if ("votes" in data && data.votes != undefined) {
                    this.votes = data.votes;
                }
            }
        }
        get round() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set round(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get votes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cometbft.abci.v1beta1.VoteInfo, 2) as dependency_2.cometbft.abci.v1beta1.VoteInfo[];
        }
        set votes(value: dependency_2.cometbft.abci.v1beta1.VoteInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            round?: number;
            votes?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.VoteInfo.prototype.toObject>[];
        }): CommitInfo {
            const message = new CommitInfo({});
            if (data.round != null) {
                message.round = data.round;
            }
            if (data.votes != null) {
                message.votes = data.votes.map(item => dependency_2.cometbft.abci.v1beta1.VoteInfo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                round?: number;
                votes?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.VoteInfo.prototype.toObject>[];
            } = {};
            if (this.round != null) {
                data.round = this.round;
            }
            if (this.votes != null) {
                data.votes = this.votes.map((item: dependency_2.cometbft.abci.v1beta1.VoteInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.round != 0)
                writer.writeInt32(1, this.round);
            if (this.votes.length)
                writer.writeRepeatedMessage(2, this.votes, (item: dependency_2.cometbft.abci.v1beta1.VoteInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommitInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommitInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.round = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.votes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.cometbft.abci.v1beta1.VoteInfo.deserialize(reader), dependency_2.cometbft.abci.v1beta1.VoteInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommitInfo {
            return CommitInfo.deserialize(bytes);
        }
    }
    export class ExtendedCommitInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            round?: number;
            votes?: ExtendedVoteInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("round" in data && data.round != undefined) {
                    this.round = data.round;
                }
                if ("votes" in data && data.votes != undefined) {
                    this.votes = data.votes;
                }
            }
        }
        get round() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set round(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get votes() {
            return pb_1.Message.getRepeatedWrapperField(this, ExtendedVoteInfo, 2) as ExtendedVoteInfo[];
        }
        set votes(value: ExtendedVoteInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            round?: number;
            votes?: ReturnType<typeof ExtendedVoteInfo.prototype.toObject>[];
        }): ExtendedCommitInfo {
            const message = new ExtendedCommitInfo({});
            if (data.round != null) {
                message.round = data.round;
            }
            if (data.votes != null) {
                message.votes = data.votes.map(item => ExtendedVoteInfo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                round?: number;
                votes?: ReturnType<typeof ExtendedVoteInfo.prototype.toObject>[];
            } = {};
            if (this.round != null) {
                data.round = this.round;
            }
            if (this.votes != null) {
                data.votes = this.votes.map((item: ExtendedVoteInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.round != 0)
                writer.writeInt32(1, this.round);
            if (this.votes.length)
                writer.writeRepeatedMessage(2, this.votes, (item: ExtendedVoteInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExtendedCommitInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExtendedCommitInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.round = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.votes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ExtendedVoteInfo.deserialize(reader), ExtendedVoteInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExtendedCommitInfo {
            return ExtendedCommitInfo.deserialize(bytes);
        }
    }
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            attributes?: EventAttribute[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("attributes" in data && data.attributes != undefined) {
                    this.attributes = data.attributes;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get attributes() {
            return pb_1.Message.getRepeatedWrapperField(this, EventAttribute, 2) as EventAttribute[];
        }
        set attributes(value: EventAttribute[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            type?: string;
            attributes?: ReturnType<typeof EventAttribute.prototype.toObject>[];
        }): Event {
            const message = new Event({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.attributes != null) {
                message.attributes = data.attributes.map(item => EventAttribute.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                attributes?: ReturnType<typeof EventAttribute.prototype.toObject>[];
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.attributes != null) {
                data.attributes = this.attributes.map((item: EventAttribute) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.attributes.length)
                writer.writeRepeatedMessage(2, this.attributes, (item: EventAttribute) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.attributes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, EventAttribute.deserialize(reader), EventAttribute));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class EventAttribute extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
            value?: string;
            index?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set index(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            key?: string;
            value?: string;
            index?: boolean;
        }): EventAttribute {
            const message = new EventAttribute({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                value?: string;
                index?: boolean;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (this.value.length)
                writer.writeString(2, this.value);
            if (this.index != false)
                writer.writeBool(3, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventAttribute {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventAttribute();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        message.value = reader.readString();
                        break;
                    case 3:
                        message.index = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventAttribute {
            return EventAttribute.deserialize(bytes);
        }
    }
    export class ExtendedVoteInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validator?: dependency_2.cometbft.abci.v1beta1.Validator;
            signed_last_block?: boolean;
            vote_extension?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator" in data && data.validator != undefined) {
                    this.validator = data.validator;
                }
                if ("signed_last_block" in data && data.signed_last_block != undefined) {
                    this.signed_last_block = data.signed_last_block;
                }
                if ("vote_extension" in data && data.vote_extension != undefined) {
                    this.vote_extension = data.vote_extension;
                }
            }
        }
        get validator() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.Validator, 1) as dependency_2.cometbft.abci.v1beta1.Validator;
        }
        set validator(value: dependency_2.cometbft.abci.v1beta1.Validator) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_validator() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get signed_last_block() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set signed_last_block(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get vote_extension() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set vote_extension(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            validator?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.Validator.prototype.toObject>;
            signed_last_block?: boolean;
            vote_extension?: Uint8Array;
        }): ExtendedVoteInfo {
            const message = new ExtendedVoteInfo({});
            if (data.validator != null) {
                message.validator = dependency_2.cometbft.abci.v1beta1.Validator.fromObject(data.validator);
            }
            if (data.signed_last_block != null) {
                message.signed_last_block = data.signed_last_block;
            }
            if (data.vote_extension != null) {
                message.vote_extension = data.vote_extension;
            }
            return message;
        }
        toObject() {
            const data: {
                validator?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.Validator.prototype.toObject>;
                signed_last_block?: boolean;
                vote_extension?: Uint8Array;
            } = {};
            if (this.validator != null) {
                data.validator = this.validator.toObject();
            }
            if (this.signed_last_block != null) {
                data.signed_last_block = this.signed_last_block;
            }
            if (this.vote_extension != null) {
                data.vote_extension = this.vote_extension;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_validator)
                writer.writeMessage(1, this.validator, () => this.validator.serialize(writer));
            if (this.signed_last_block != false)
                writer.writeBool(2, this.signed_last_block);
            if (this.vote_extension.length)
                writer.writeBytes(3, this.vote_extension);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExtendedVoteInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExtendedVoteInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.validator, () => message.validator = dependency_2.cometbft.abci.v1beta1.Validator.deserialize(reader));
                        break;
                    case 2:
                        message.signed_last_block = reader.readBool();
                        break;
                    case 3:
                        message.vote_extension = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExtendedVoteInfo {
            return ExtendedVoteInfo.deserialize(bytes);
        }
    }
    export class Misbehavior extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: MisbehaviorType;
            validator?: dependency_2.cometbft.abci.v1beta1.Validator;
            height?: number;
            time?: dependency_5.google.protobuf.Timestamp;
            total_voting_power?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("validator" in data && data.validator != undefined) {
                    this.validator = data.validator;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("time" in data && data.time != undefined) {
                    this.time = data.time;
                }
                if ("total_voting_power" in data && data.total_voting_power != undefined) {
                    this.total_voting_power = data.total_voting_power;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, MisbehaviorType.UNKNOWN) as MisbehaviorType;
        }
        set type(value: MisbehaviorType) {
            pb_1.Message.setField(this, 1, value);
        }
        get validator() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.abci.v1beta1.Validator, 2) as dependency_2.cometbft.abci.v1beta1.Validator;
        }
        set validator(value: dependency_2.cometbft.abci.v1beta1.Validator) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_validator() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get time() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 4) as dependency_5.google.protobuf.Timestamp;
        }
        set time(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_time() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get total_voting_power() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set total_voting_power(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            type?: MisbehaviorType;
            validator?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.Validator.prototype.toObject>;
            height?: number;
            time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            total_voting_power?: number;
        }): Misbehavior {
            const message = new Misbehavior({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.validator != null) {
                message.validator = dependency_2.cometbft.abci.v1beta1.Validator.fromObject(data.validator);
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.time != null) {
                message.time = dependency_5.google.protobuf.Timestamp.fromObject(data.time);
            }
            if (data.total_voting_power != null) {
                message.total_voting_power = data.total_voting_power;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: MisbehaviorType;
                validator?: ReturnType<typeof dependency_2.cometbft.abci.v1beta1.Validator.prototype.toObject>;
                height?: number;
                time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
                total_voting_power?: number;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.validator != null) {
                data.validator = this.validator.toObject();
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.time != null) {
                data.time = this.time.toObject();
            }
            if (this.total_voting_power != null) {
                data.total_voting_power = this.total_voting_power;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != MisbehaviorType.UNKNOWN)
                writer.writeEnum(1, this.type);
            if (this.has_validator)
                writer.writeMessage(2, this.validator, () => this.validator.serialize(writer));
            if (this.height != 0)
                writer.writeInt64(3, this.height);
            if (this.has_time)
                writer.writeMessage(4, this.time, () => this.time.serialize(writer));
            if (this.total_voting_power != 0)
                writer.writeInt64(5, this.total_voting_power);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Misbehavior {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Misbehavior();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.validator, () => message.validator = dependency_2.cometbft.abci.v1beta1.Validator.deserialize(reader));
                        break;
                    case 3:
                        message.height = reader.readInt64();
                        break;
                    case 4:
                        reader.readMessage(message.time, () => message.time = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        message.total_voting_power = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Misbehavior {
            return Misbehavior.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedABCIApplicationService {
        static definition = {
            Echo: {
                path: "/cometbft.abci.v1beta2.ABCIApplication/Echo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.cometbft.abci.v1beta1.RequestEcho) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.RequestEcho.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.cometbft.abci.v1beta1.ResponseEcho) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.ResponseEcho.deserialize(new Uint8Array(bytes))
            },
            Flush: {
                path: "/cometbft.abci.v1beta2.ABCIApplication/Flush",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.cometbft.abci.v1beta1.RequestFlush) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.RequestFlush.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.cometbft.abci.v1beta1.ResponseFlush) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.ResponseFlush.deserialize(new Uint8Array(bytes))
            },
            Info: {
                path: "/cometbft.abci.v1beta2.ABCIApplication/Info",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RequestInfo) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RequestInfo.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.cometbft.abci.v1beta1.ResponseInfo) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.ResponseInfo.deserialize(new Uint8Array(bytes))
            },
            DeliverTx: {
                path: "/cometbft.abci.v1beta2.ABCIApplication/DeliverTx",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.cometbft.abci.v1beta1.RequestDeliverTx) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.RequestDeliverTx.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ResponseDeliverTx) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ResponseDeliverTx.deserialize(new Uint8Array(bytes))
            },
            CheckTx: {
                path: "/cometbft.abci.v1beta2.ABCIApplication/CheckTx",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.cometbft.abci.v1beta1.RequestCheckTx) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.RequestCheckTx.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ResponseCheckTx) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ResponseCheckTx.deserialize(new Uint8Array(bytes))
            },
            Query: {
                path: "/cometbft.abci.v1beta2.ABCIApplication/Query",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.cometbft.abci.v1beta1.RequestQuery) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.RequestQuery.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.cometbft.abci.v1beta1.ResponseQuery) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.ResponseQuery.deserialize(new Uint8Array(bytes))
            },
            Commit: {
                path: "/cometbft.abci.v1beta2.ABCIApplication/Commit",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.cometbft.abci.v1beta1.RequestCommit) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.RequestCommit.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.cometbft.abci.v1beta1.ResponseCommit) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.ResponseCommit.deserialize(new Uint8Array(bytes))
            },
            InitChain: {
                path: "/cometbft.abci.v1beta2.ABCIApplication/InitChain",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RequestInitChain) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RequestInitChain.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ResponseInitChain) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ResponseInitChain.deserialize(new Uint8Array(bytes))
            },
            BeginBlock: {
                path: "/cometbft.abci.v1beta2.ABCIApplication/BeginBlock",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RequestBeginBlock) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RequestBeginBlock.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ResponseBeginBlock) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ResponseBeginBlock.deserialize(new Uint8Array(bytes))
            },
            EndBlock: {
                path: "/cometbft.abci.v1beta2.ABCIApplication/EndBlock",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.cometbft.abci.v1beta1.RequestEndBlock) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.RequestEndBlock.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ResponseEndBlock) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ResponseEndBlock.deserialize(new Uint8Array(bytes))
            },
            ListSnapshots: {
                path: "/cometbft.abci.v1beta2.ABCIApplication/ListSnapshots",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.cometbft.abci.v1beta1.RequestListSnapshots) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.RequestListSnapshots.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.cometbft.abci.v1beta1.ResponseListSnapshots) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.ResponseListSnapshots.deserialize(new Uint8Array(bytes))
            },
            OfferSnapshot: {
                path: "/cometbft.abci.v1beta2.ABCIApplication/OfferSnapshot",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.cometbft.abci.v1beta1.RequestOfferSnapshot) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.RequestOfferSnapshot.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.cometbft.abci.v1beta1.ResponseOfferSnapshot) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.ResponseOfferSnapshot.deserialize(new Uint8Array(bytes))
            },
            LoadSnapshotChunk: {
                path: "/cometbft.abci.v1beta2.ABCIApplication/LoadSnapshotChunk",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.cometbft.abci.v1beta1.RequestLoadSnapshotChunk) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.RequestLoadSnapshotChunk.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.cometbft.abci.v1beta1.ResponseLoadSnapshotChunk) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.ResponseLoadSnapshotChunk.deserialize(new Uint8Array(bytes))
            },
            ApplySnapshotChunk: {
                path: "/cometbft.abci.v1beta2.ABCIApplication/ApplySnapshotChunk",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.cometbft.abci.v1beta1.RequestApplySnapshotChunk) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.RequestApplySnapshotChunk.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.cometbft.abci.v1beta1.ResponseApplySnapshotChunk) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.cometbft.abci.v1beta1.ResponseApplySnapshotChunk.deserialize(new Uint8Array(bytes))
            },
            PrepareProposal: {
                path: "/cometbft.abci.v1beta2.ABCIApplication/PrepareProposal",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RequestPrepareProposal) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RequestPrepareProposal.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ResponsePrepareProposal) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ResponsePrepareProposal.deserialize(new Uint8Array(bytes))
            },
            ProcessProposal: {
                path: "/cometbft.abci.v1beta2.ABCIApplication/ProcessProposal",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RequestProcessProposal) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RequestProcessProposal.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ResponseProcessProposal) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ResponseProcessProposal.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Echo(call: grpc_1.ServerUnaryCall<dependency_2.cometbft.abci.v1beta1.RequestEcho, dependency_2.cometbft.abci.v1beta1.ResponseEcho>, callback: grpc_1.sendUnaryData<dependency_2.cometbft.abci.v1beta1.ResponseEcho>): void;
        abstract Flush(call: grpc_1.ServerUnaryCall<dependency_2.cometbft.abci.v1beta1.RequestFlush, dependency_2.cometbft.abci.v1beta1.ResponseFlush>, callback: grpc_1.sendUnaryData<dependency_2.cometbft.abci.v1beta1.ResponseFlush>): void;
        abstract Info(call: grpc_1.ServerUnaryCall<RequestInfo, dependency_2.cometbft.abci.v1beta1.ResponseInfo>, callback: grpc_1.sendUnaryData<dependency_2.cometbft.abci.v1beta1.ResponseInfo>): void;
        abstract DeliverTx(call: grpc_1.ServerUnaryCall<dependency_2.cometbft.abci.v1beta1.RequestDeliverTx, ResponseDeliverTx>, callback: grpc_1.sendUnaryData<ResponseDeliverTx>): void;
        abstract CheckTx(call: grpc_1.ServerUnaryCall<dependency_2.cometbft.abci.v1beta1.RequestCheckTx, ResponseCheckTx>, callback: grpc_1.sendUnaryData<ResponseCheckTx>): void;
        abstract Query(call: grpc_1.ServerUnaryCall<dependency_2.cometbft.abci.v1beta1.RequestQuery, dependency_2.cometbft.abci.v1beta1.ResponseQuery>, callback: grpc_1.sendUnaryData<dependency_2.cometbft.abci.v1beta1.ResponseQuery>): void;
        abstract Commit(call: grpc_1.ServerUnaryCall<dependency_2.cometbft.abci.v1beta1.RequestCommit, dependency_2.cometbft.abci.v1beta1.ResponseCommit>, callback: grpc_1.sendUnaryData<dependency_2.cometbft.abci.v1beta1.ResponseCommit>): void;
        abstract InitChain(call: grpc_1.ServerUnaryCall<RequestInitChain, ResponseInitChain>, callback: grpc_1.sendUnaryData<ResponseInitChain>): void;
        abstract BeginBlock(call: grpc_1.ServerUnaryCall<RequestBeginBlock, ResponseBeginBlock>, callback: grpc_1.sendUnaryData<ResponseBeginBlock>): void;
        abstract EndBlock(call: grpc_1.ServerUnaryCall<dependency_2.cometbft.abci.v1beta1.RequestEndBlock, ResponseEndBlock>, callback: grpc_1.sendUnaryData<ResponseEndBlock>): void;
        abstract ListSnapshots(call: grpc_1.ServerUnaryCall<dependency_2.cometbft.abci.v1beta1.RequestListSnapshots, dependency_2.cometbft.abci.v1beta1.ResponseListSnapshots>, callback: grpc_1.sendUnaryData<dependency_2.cometbft.abci.v1beta1.ResponseListSnapshots>): void;
        abstract OfferSnapshot(call: grpc_1.ServerUnaryCall<dependency_2.cometbft.abci.v1beta1.RequestOfferSnapshot, dependency_2.cometbft.abci.v1beta1.ResponseOfferSnapshot>, callback: grpc_1.sendUnaryData<dependency_2.cometbft.abci.v1beta1.ResponseOfferSnapshot>): void;
        abstract LoadSnapshotChunk(call: grpc_1.ServerUnaryCall<dependency_2.cometbft.abci.v1beta1.RequestLoadSnapshotChunk, dependency_2.cometbft.abci.v1beta1.ResponseLoadSnapshotChunk>, callback: grpc_1.sendUnaryData<dependency_2.cometbft.abci.v1beta1.ResponseLoadSnapshotChunk>): void;
        abstract ApplySnapshotChunk(call: grpc_1.ServerUnaryCall<dependency_2.cometbft.abci.v1beta1.RequestApplySnapshotChunk, dependency_2.cometbft.abci.v1beta1.ResponseApplySnapshotChunk>, callback: grpc_1.sendUnaryData<dependency_2.cometbft.abci.v1beta1.ResponseApplySnapshotChunk>): void;
        abstract PrepareProposal(call: grpc_1.ServerUnaryCall<RequestPrepareProposal, ResponsePrepareProposal>, callback: grpc_1.sendUnaryData<ResponsePrepareProposal>): void;
        abstract ProcessProposal(call: grpc_1.ServerUnaryCall<RequestProcessProposal, ResponseProcessProposal>, callback: grpc_1.sendUnaryData<ResponseProcessProposal>): void;
    }
    export class ABCIApplicationClient extends grpc_1.makeGenericClientConstructor(UnimplementedABCIApplicationService.definition, "ABCIApplication", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Echo: GrpcUnaryServiceInterface<dependency_2.cometbft.abci.v1beta1.RequestEcho, dependency_2.cometbft.abci.v1beta1.ResponseEcho> = (message: dependency_2.cometbft.abci.v1beta1.RequestEcho, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseEcho>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseEcho>, callback?: grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseEcho>): grpc_1.ClientUnaryCall => {
            return super.Echo(message, metadata, options, callback);
        };
        Flush: GrpcUnaryServiceInterface<dependency_2.cometbft.abci.v1beta1.RequestFlush, dependency_2.cometbft.abci.v1beta1.ResponseFlush> = (message: dependency_2.cometbft.abci.v1beta1.RequestFlush, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseFlush>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseFlush>, callback?: grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseFlush>): grpc_1.ClientUnaryCall => {
            return super.Flush(message, metadata, options, callback);
        };
        Info: GrpcUnaryServiceInterface<RequestInfo, dependency_2.cometbft.abci.v1beta1.ResponseInfo> = (message: RequestInfo, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseInfo>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseInfo>, callback?: grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseInfo>): grpc_1.ClientUnaryCall => {
            return super.Info(message, metadata, options, callback);
        };
        DeliverTx: GrpcUnaryServiceInterface<dependency_2.cometbft.abci.v1beta1.RequestDeliverTx, ResponseDeliverTx> = (message: dependency_2.cometbft.abci.v1beta1.RequestDeliverTx, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ResponseDeliverTx>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ResponseDeliverTx>, callback?: grpc_1.requestCallback<ResponseDeliverTx>): grpc_1.ClientUnaryCall => {
            return super.DeliverTx(message, metadata, options, callback);
        };
        CheckTx: GrpcUnaryServiceInterface<dependency_2.cometbft.abci.v1beta1.RequestCheckTx, ResponseCheckTx> = (message: dependency_2.cometbft.abci.v1beta1.RequestCheckTx, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ResponseCheckTx>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ResponseCheckTx>, callback?: grpc_1.requestCallback<ResponseCheckTx>): grpc_1.ClientUnaryCall => {
            return super.CheckTx(message, metadata, options, callback);
        };
        Query: GrpcUnaryServiceInterface<dependency_2.cometbft.abci.v1beta1.RequestQuery, dependency_2.cometbft.abci.v1beta1.ResponseQuery> = (message: dependency_2.cometbft.abci.v1beta1.RequestQuery, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseQuery>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseQuery>, callback?: grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseQuery>): grpc_1.ClientUnaryCall => {
            return super.Query(message, metadata, options, callback);
        };
        Commit: GrpcUnaryServiceInterface<dependency_2.cometbft.abci.v1beta1.RequestCommit, dependency_2.cometbft.abci.v1beta1.ResponseCommit> = (message: dependency_2.cometbft.abci.v1beta1.RequestCommit, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseCommit>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseCommit>, callback?: grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseCommit>): grpc_1.ClientUnaryCall => {
            return super.Commit(message, metadata, options, callback);
        };
        InitChain: GrpcUnaryServiceInterface<RequestInitChain, ResponseInitChain> = (message: RequestInitChain, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ResponseInitChain>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ResponseInitChain>, callback?: grpc_1.requestCallback<ResponseInitChain>): grpc_1.ClientUnaryCall => {
            return super.InitChain(message, metadata, options, callback);
        };
        BeginBlock: GrpcUnaryServiceInterface<RequestBeginBlock, ResponseBeginBlock> = (message: RequestBeginBlock, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ResponseBeginBlock>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ResponseBeginBlock>, callback?: grpc_1.requestCallback<ResponseBeginBlock>): grpc_1.ClientUnaryCall => {
            return super.BeginBlock(message, metadata, options, callback);
        };
        EndBlock: GrpcUnaryServiceInterface<dependency_2.cometbft.abci.v1beta1.RequestEndBlock, ResponseEndBlock> = (message: dependency_2.cometbft.abci.v1beta1.RequestEndBlock, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ResponseEndBlock>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ResponseEndBlock>, callback?: grpc_1.requestCallback<ResponseEndBlock>): grpc_1.ClientUnaryCall => {
            return super.EndBlock(message, metadata, options, callback);
        };
        ListSnapshots: GrpcUnaryServiceInterface<dependency_2.cometbft.abci.v1beta1.RequestListSnapshots, dependency_2.cometbft.abci.v1beta1.ResponseListSnapshots> = (message: dependency_2.cometbft.abci.v1beta1.RequestListSnapshots, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseListSnapshots>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseListSnapshots>, callback?: grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseListSnapshots>): grpc_1.ClientUnaryCall => {
            return super.ListSnapshots(message, metadata, options, callback);
        };
        OfferSnapshot: GrpcUnaryServiceInterface<dependency_2.cometbft.abci.v1beta1.RequestOfferSnapshot, dependency_2.cometbft.abci.v1beta1.ResponseOfferSnapshot> = (message: dependency_2.cometbft.abci.v1beta1.RequestOfferSnapshot, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseOfferSnapshot>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseOfferSnapshot>, callback?: grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseOfferSnapshot>): grpc_1.ClientUnaryCall => {
            return super.OfferSnapshot(message, metadata, options, callback);
        };
        LoadSnapshotChunk: GrpcUnaryServiceInterface<dependency_2.cometbft.abci.v1beta1.RequestLoadSnapshotChunk, dependency_2.cometbft.abci.v1beta1.ResponseLoadSnapshotChunk> = (message: dependency_2.cometbft.abci.v1beta1.RequestLoadSnapshotChunk, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseLoadSnapshotChunk>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseLoadSnapshotChunk>, callback?: grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseLoadSnapshotChunk>): grpc_1.ClientUnaryCall => {
            return super.LoadSnapshotChunk(message, metadata, options, callback);
        };
        ApplySnapshotChunk: GrpcUnaryServiceInterface<dependency_2.cometbft.abci.v1beta1.RequestApplySnapshotChunk, dependency_2.cometbft.abci.v1beta1.ResponseApplySnapshotChunk> = (message: dependency_2.cometbft.abci.v1beta1.RequestApplySnapshotChunk, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseApplySnapshotChunk>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseApplySnapshotChunk>, callback?: grpc_1.requestCallback<dependency_2.cometbft.abci.v1beta1.ResponseApplySnapshotChunk>): grpc_1.ClientUnaryCall => {
            return super.ApplySnapshotChunk(message, metadata, options, callback);
        };
        PrepareProposal: GrpcUnaryServiceInterface<RequestPrepareProposal, ResponsePrepareProposal> = (message: RequestPrepareProposal, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ResponsePrepareProposal>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ResponsePrepareProposal>, callback?: grpc_1.requestCallback<ResponsePrepareProposal>): grpc_1.ClientUnaryCall => {
            return super.PrepareProposal(message, metadata, options, callback);
        };
        ProcessProposal: GrpcUnaryServiceInterface<RequestProcessProposal, ResponseProcessProposal> = (message: RequestProcessProposal, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ResponseProcessProposal>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ResponseProcessProposal>, callback?: grpc_1.requestCallback<ResponseProcessProposal>): grpc_1.ClientUnaryCall => {
            return super.ProcessProposal(message, metadata, options, callback);
        };
    }
}
