// source: cometbft/consensus/v1beta1/types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var cometbft_types_v1beta1_types_pb = require('../../../cometbft/types/v1beta1/types_pb.js');
goog.object.extend(proto, cometbft_types_v1beta1_types_pb);
var cometbft_libs_bits_v1_types_pb = require('../../../cometbft/libs/bits/v1/types_pb.js');
goog.object.extend(proto, cometbft_libs_bits_v1_types_pb);
goog.exportSymbol('proto.cometbft.consensus.v1beta1.BlockPart', null, global);
goog.exportSymbol('proto.cometbft.consensus.v1beta1.HasVote', null, global);
goog.exportSymbol('proto.cometbft.consensus.v1beta1.Message', null, global);
goog.exportSymbol('proto.cometbft.consensus.v1beta1.Message.SumCase', null, global);
goog.exportSymbol('proto.cometbft.consensus.v1beta1.NewRoundStep', null, global);
goog.exportSymbol('proto.cometbft.consensus.v1beta1.NewValidBlock', null, global);
goog.exportSymbol('proto.cometbft.consensus.v1beta1.Proposal', null, global);
goog.exportSymbol('proto.cometbft.consensus.v1beta1.ProposalPOL', null, global);
goog.exportSymbol('proto.cometbft.consensus.v1beta1.Vote', null, global);
goog.exportSymbol('proto.cometbft.consensus.v1beta1.VoteSetBits', null, global);
goog.exportSymbol('proto.cometbft.consensus.v1beta1.VoteSetMaj23', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.consensus.v1beta1.NewRoundStep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.consensus.v1beta1.NewRoundStep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.consensus.v1beta1.NewRoundStep.displayName = 'proto.cometbft.consensus.v1beta1.NewRoundStep';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.consensus.v1beta1.NewValidBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.consensus.v1beta1.NewValidBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.consensus.v1beta1.NewValidBlock.displayName = 'proto.cometbft.consensus.v1beta1.NewValidBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.consensus.v1beta1.Proposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.consensus.v1beta1.Proposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.consensus.v1beta1.Proposal.displayName = 'proto.cometbft.consensus.v1beta1.Proposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.consensus.v1beta1.ProposalPOL = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.consensus.v1beta1.ProposalPOL, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.consensus.v1beta1.ProposalPOL.displayName = 'proto.cometbft.consensus.v1beta1.ProposalPOL';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.consensus.v1beta1.BlockPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.consensus.v1beta1.BlockPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.consensus.v1beta1.BlockPart.displayName = 'proto.cometbft.consensus.v1beta1.BlockPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.consensus.v1beta1.Vote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.consensus.v1beta1.Vote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.consensus.v1beta1.Vote.displayName = 'proto.cometbft.consensus.v1beta1.Vote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.consensus.v1beta1.HasVote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.consensus.v1beta1.HasVote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.consensus.v1beta1.HasVote.displayName = 'proto.cometbft.consensus.v1beta1.HasVote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.consensus.v1beta1.VoteSetMaj23 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.consensus.v1beta1.VoteSetMaj23, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.consensus.v1beta1.VoteSetMaj23.displayName = 'proto.cometbft.consensus.v1beta1.VoteSetMaj23';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.consensus.v1beta1.VoteSetBits = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.consensus.v1beta1.VoteSetBits, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.consensus.v1beta1.VoteSetBits.displayName = 'proto.cometbft.consensus.v1beta1.VoteSetBits';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.consensus.v1beta1.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cometbft.consensus.v1beta1.Message.oneofGroups_);
};
goog.inherits(proto.cometbft.consensus.v1beta1.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.consensus.v1beta1.Message.displayName = 'proto.cometbft.consensus.v1beta1.Message';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.consensus.v1beta1.NewRoundStep.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.consensus.v1beta1.NewRoundStep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.consensus.v1beta1.NewRoundStep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.NewRoundStep.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    round: jspb.Message.getFieldWithDefault(msg, 2, 0),
    step: jspb.Message.getFieldWithDefault(msg, 3, 0),
    secondsSinceStartTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lastCommitRound: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.consensus.v1beta1.NewRoundStep}
 */
proto.cometbft.consensus.v1beta1.NewRoundStep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.consensus.v1beta1.NewRoundStep;
  return proto.cometbft.consensus.v1beta1.NewRoundStep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.consensus.v1beta1.NewRoundStep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.consensus.v1beta1.NewRoundStep}
 */
proto.cometbft.consensus.v1beta1.NewRoundStep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStep(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSecondsSinceStartTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLastCommitRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.consensus.v1beta1.NewRoundStep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.consensus.v1beta1.NewRoundStep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.consensus.v1beta1.NewRoundStep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.NewRoundStep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStep();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSecondsSinceStartTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getLastCommitRound();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.cometbft.consensus.v1beta1.NewRoundStep.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.consensus.v1beta1.NewRoundStep} returns this
 */
proto.cometbft.consensus.v1beta1.NewRoundStep.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 round = 2;
 * @return {number}
 */
proto.cometbft.consensus.v1beta1.NewRoundStep.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.consensus.v1beta1.NewRoundStep} returns this
 */
proto.cometbft.consensus.v1beta1.NewRoundStep.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 step = 3;
 * @return {number}
 */
proto.cometbft.consensus.v1beta1.NewRoundStep.prototype.getStep = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.consensus.v1beta1.NewRoundStep} returns this
 */
proto.cometbft.consensus.v1beta1.NewRoundStep.prototype.setStep = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 seconds_since_start_time = 4;
 * @return {number}
 */
proto.cometbft.consensus.v1beta1.NewRoundStep.prototype.getSecondsSinceStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.consensus.v1beta1.NewRoundStep} returns this
 */
proto.cometbft.consensus.v1beta1.NewRoundStep.prototype.setSecondsSinceStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 last_commit_round = 5;
 * @return {number}
 */
proto.cometbft.consensus.v1beta1.NewRoundStep.prototype.getLastCommitRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.consensus.v1beta1.NewRoundStep} returns this
 */
proto.cometbft.consensus.v1beta1.NewRoundStep.prototype.setLastCommitRound = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.consensus.v1beta1.NewValidBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.consensus.v1beta1.NewValidBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.consensus.v1beta1.NewValidBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.NewValidBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    round: jspb.Message.getFieldWithDefault(msg, 2, 0),
    blockPartSetHeader: (f = msg.getBlockPartSetHeader()) && cometbft_types_v1beta1_types_pb.PartSetHeader.toObject(includeInstance, f),
    blockParts: (f = msg.getBlockParts()) && cometbft_libs_bits_v1_types_pb.BitArray.toObject(includeInstance, f),
    isCommit: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.consensus.v1beta1.NewValidBlock}
 */
proto.cometbft.consensus.v1beta1.NewValidBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.consensus.v1beta1.NewValidBlock;
  return proto.cometbft.consensus.v1beta1.NewValidBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.consensus.v1beta1.NewValidBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.consensus.v1beta1.NewValidBlock}
 */
proto.cometbft.consensus.v1beta1.NewValidBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 3:
      var value = new cometbft_types_v1beta1_types_pb.PartSetHeader;
      reader.readMessage(value,cometbft_types_v1beta1_types_pb.PartSetHeader.deserializeBinaryFromReader);
      msg.setBlockPartSetHeader(value);
      break;
    case 4:
      var value = new cometbft_libs_bits_v1_types_pb.BitArray;
      reader.readMessage(value,cometbft_libs_bits_v1_types_pb.BitArray.deserializeBinaryFromReader);
      msg.setBlockParts(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.consensus.v1beta1.NewValidBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.consensus.v1beta1.NewValidBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.consensus.v1beta1.NewValidBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.NewValidBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getBlockPartSetHeader();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cometbft_types_v1beta1_types_pb.PartSetHeader.serializeBinaryToWriter
    );
  }
  f = message.getBlockParts();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      cometbft_libs_bits_v1_types_pb.BitArray.serializeBinaryToWriter
    );
  }
  f = message.getIsCommit();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.cometbft.consensus.v1beta1.NewValidBlock.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.consensus.v1beta1.NewValidBlock} returns this
 */
proto.cometbft.consensus.v1beta1.NewValidBlock.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 round = 2;
 * @return {number}
 */
proto.cometbft.consensus.v1beta1.NewValidBlock.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.consensus.v1beta1.NewValidBlock} returns this
 */
proto.cometbft.consensus.v1beta1.NewValidBlock.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional cometbft.types.v1beta1.PartSetHeader block_part_set_header = 3;
 * @return {?proto.cometbft.types.v1beta1.PartSetHeader}
 */
proto.cometbft.consensus.v1beta1.NewValidBlock.prototype.getBlockPartSetHeader = function() {
  return /** @type{?proto.cometbft.types.v1beta1.PartSetHeader} */ (
    jspb.Message.getWrapperField(this, cometbft_types_v1beta1_types_pb.PartSetHeader, 3));
};


/**
 * @param {?proto.cometbft.types.v1beta1.PartSetHeader|undefined} value
 * @return {!proto.cometbft.consensus.v1beta1.NewValidBlock} returns this
*/
proto.cometbft.consensus.v1beta1.NewValidBlock.prototype.setBlockPartSetHeader = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.consensus.v1beta1.NewValidBlock} returns this
 */
proto.cometbft.consensus.v1beta1.NewValidBlock.prototype.clearBlockPartSetHeader = function() {
  return this.setBlockPartSetHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.consensus.v1beta1.NewValidBlock.prototype.hasBlockPartSetHeader = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional cometbft.libs.bits.v1.BitArray block_parts = 4;
 * @return {?proto.cometbft.libs.bits.v1.BitArray}
 */
proto.cometbft.consensus.v1beta1.NewValidBlock.prototype.getBlockParts = function() {
  return /** @type{?proto.cometbft.libs.bits.v1.BitArray} */ (
    jspb.Message.getWrapperField(this, cometbft_libs_bits_v1_types_pb.BitArray, 4));
};


/**
 * @param {?proto.cometbft.libs.bits.v1.BitArray|undefined} value
 * @return {!proto.cometbft.consensus.v1beta1.NewValidBlock} returns this
*/
proto.cometbft.consensus.v1beta1.NewValidBlock.prototype.setBlockParts = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.consensus.v1beta1.NewValidBlock} returns this
 */
proto.cometbft.consensus.v1beta1.NewValidBlock.prototype.clearBlockParts = function() {
  return this.setBlockParts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.consensus.v1beta1.NewValidBlock.prototype.hasBlockParts = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool is_commit = 5;
 * @return {boolean}
 */
proto.cometbft.consensus.v1beta1.NewValidBlock.prototype.getIsCommit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cometbft.consensus.v1beta1.NewValidBlock} returns this
 */
proto.cometbft.consensus.v1beta1.NewValidBlock.prototype.setIsCommit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.consensus.v1beta1.Proposal.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.consensus.v1beta1.Proposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.consensus.v1beta1.Proposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.Proposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposal: (f = msg.getProposal()) && cometbft_types_v1beta1_types_pb.Proposal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.consensus.v1beta1.Proposal}
 */
proto.cometbft.consensus.v1beta1.Proposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.consensus.v1beta1.Proposal;
  return proto.cometbft.consensus.v1beta1.Proposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.consensus.v1beta1.Proposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.consensus.v1beta1.Proposal}
 */
proto.cometbft.consensus.v1beta1.Proposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cometbft_types_v1beta1_types_pb.Proposal;
      reader.readMessage(value,cometbft_types_v1beta1_types_pb.Proposal.deserializeBinaryFromReader);
      msg.setProposal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.consensus.v1beta1.Proposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.consensus.v1beta1.Proposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.consensus.v1beta1.Proposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.Proposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cometbft_types_v1beta1_types_pb.Proposal.serializeBinaryToWriter
    );
  }
};


/**
 * optional cometbft.types.v1beta1.Proposal proposal = 1;
 * @return {?proto.cometbft.types.v1beta1.Proposal}
 */
proto.cometbft.consensus.v1beta1.Proposal.prototype.getProposal = function() {
  return /** @type{?proto.cometbft.types.v1beta1.Proposal} */ (
    jspb.Message.getWrapperField(this, cometbft_types_v1beta1_types_pb.Proposal, 1));
};


/**
 * @param {?proto.cometbft.types.v1beta1.Proposal|undefined} value
 * @return {!proto.cometbft.consensus.v1beta1.Proposal} returns this
*/
proto.cometbft.consensus.v1beta1.Proposal.prototype.setProposal = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.consensus.v1beta1.Proposal} returns this
 */
proto.cometbft.consensus.v1beta1.Proposal.prototype.clearProposal = function() {
  return this.setProposal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.consensus.v1beta1.Proposal.prototype.hasProposal = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.consensus.v1beta1.ProposalPOL.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.consensus.v1beta1.ProposalPOL.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.consensus.v1beta1.ProposalPOL} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.ProposalPOL.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    proposalPolRound: jspb.Message.getFieldWithDefault(msg, 2, 0),
    proposalPol: (f = msg.getProposalPol()) && cometbft_libs_bits_v1_types_pb.BitArray.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.consensus.v1beta1.ProposalPOL}
 */
proto.cometbft.consensus.v1beta1.ProposalPOL.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.consensus.v1beta1.ProposalPOL;
  return proto.cometbft.consensus.v1beta1.ProposalPOL.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.consensus.v1beta1.ProposalPOL} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.consensus.v1beta1.ProposalPOL}
 */
proto.cometbft.consensus.v1beta1.ProposalPOL.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProposalPolRound(value);
      break;
    case 3:
      var value = new cometbft_libs_bits_v1_types_pb.BitArray;
      reader.readMessage(value,cometbft_libs_bits_v1_types_pb.BitArray.deserializeBinaryFromReader);
      msg.setProposalPol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.consensus.v1beta1.ProposalPOL.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.consensus.v1beta1.ProposalPOL.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.consensus.v1beta1.ProposalPOL} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.ProposalPOL.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getProposalPolRound();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getProposalPol();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cometbft_libs_bits_v1_types_pb.BitArray.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.cometbft.consensus.v1beta1.ProposalPOL.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.consensus.v1beta1.ProposalPOL} returns this
 */
proto.cometbft.consensus.v1beta1.ProposalPOL.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 proposal_pol_round = 2;
 * @return {number}
 */
proto.cometbft.consensus.v1beta1.ProposalPOL.prototype.getProposalPolRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.consensus.v1beta1.ProposalPOL} returns this
 */
proto.cometbft.consensus.v1beta1.ProposalPOL.prototype.setProposalPolRound = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional cometbft.libs.bits.v1.BitArray proposal_pol = 3;
 * @return {?proto.cometbft.libs.bits.v1.BitArray}
 */
proto.cometbft.consensus.v1beta1.ProposalPOL.prototype.getProposalPol = function() {
  return /** @type{?proto.cometbft.libs.bits.v1.BitArray} */ (
    jspb.Message.getWrapperField(this, cometbft_libs_bits_v1_types_pb.BitArray, 3));
};


/**
 * @param {?proto.cometbft.libs.bits.v1.BitArray|undefined} value
 * @return {!proto.cometbft.consensus.v1beta1.ProposalPOL} returns this
*/
proto.cometbft.consensus.v1beta1.ProposalPOL.prototype.setProposalPol = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.consensus.v1beta1.ProposalPOL} returns this
 */
proto.cometbft.consensus.v1beta1.ProposalPOL.prototype.clearProposalPol = function() {
  return this.setProposalPol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.consensus.v1beta1.ProposalPOL.prototype.hasProposalPol = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.consensus.v1beta1.BlockPart.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.consensus.v1beta1.BlockPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.consensus.v1beta1.BlockPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.BlockPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    round: jspb.Message.getFieldWithDefault(msg, 2, 0),
    part: (f = msg.getPart()) && cometbft_types_v1beta1_types_pb.Part.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.consensus.v1beta1.BlockPart}
 */
proto.cometbft.consensus.v1beta1.BlockPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.consensus.v1beta1.BlockPart;
  return proto.cometbft.consensus.v1beta1.BlockPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.consensus.v1beta1.BlockPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.consensus.v1beta1.BlockPart}
 */
proto.cometbft.consensus.v1beta1.BlockPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 3:
      var value = new cometbft_types_v1beta1_types_pb.Part;
      reader.readMessage(value,cometbft_types_v1beta1_types_pb.Part.deserializeBinaryFromReader);
      msg.setPart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.consensus.v1beta1.BlockPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.consensus.v1beta1.BlockPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.consensus.v1beta1.BlockPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.BlockPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPart();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cometbft_types_v1beta1_types_pb.Part.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.cometbft.consensus.v1beta1.BlockPart.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.consensus.v1beta1.BlockPart} returns this
 */
proto.cometbft.consensus.v1beta1.BlockPart.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 round = 2;
 * @return {number}
 */
proto.cometbft.consensus.v1beta1.BlockPart.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.consensus.v1beta1.BlockPart} returns this
 */
proto.cometbft.consensus.v1beta1.BlockPart.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional cometbft.types.v1beta1.Part part = 3;
 * @return {?proto.cometbft.types.v1beta1.Part}
 */
proto.cometbft.consensus.v1beta1.BlockPart.prototype.getPart = function() {
  return /** @type{?proto.cometbft.types.v1beta1.Part} */ (
    jspb.Message.getWrapperField(this, cometbft_types_v1beta1_types_pb.Part, 3));
};


/**
 * @param {?proto.cometbft.types.v1beta1.Part|undefined} value
 * @return {!proto.cometbft.consensus.v1beta1.BlockPart} returns this
*/
proto.cometbft.consensus.v1beta1.BlockPart.prototype.setPart = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.consensus.v1beta1.BlockPart} returns this
 */
proto.cometbft.consensus.v1beta1.BlockPart.prototype.clearPart = function() {
  return this.setPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.consensus.v1beta1.BlockPart.prototype.hasPart = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.consensus.v1beta1.Vote.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.consensus.v1beta1.Vote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.consensus.v1beta1.Vote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.Vote.toObject = function(includeInstance, msg) {
  var f, obj = {
    vote: (f = msg.getVote()) && cometbft_types_v1beta1_types_pb.Vote.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.consensus.v1beta1.Vote}
 */
proto.cometbft.consensus.v1beta1.Vote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.consensus.v1beta1.Vote;
  return proto.cometbft.consensus.v1beta1.Vote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.consensus.v1beta1.Vote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.consensus.v1beta1.Vote}
 */
proto.cometbft.consensus.v1beta1.Vote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cometbft_types_v1beta1_types_pb.Vote;
      reader.readMessage(value,cometbft_types_v1beta1_types_pb.Vote.deserializeBinaryFromReader);
      msg.setVote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.consensus.v1beta1.Vote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.consensus.v1beta1.Vote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.consensus.v1beta1.Vote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.Vote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVote();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cometbft_types_v1beta1_types_pb.Vote.serializeBinaryToWriter
    );
  }
};


/**
 * optional cometbft.types.v1beta1.Vote vote = 1;
 * @return {?proto.cometbft.types.v1beta1.Vote}
 */
proto.cometbft.consensus.v1beta1.Vote.prototype.getVote = function() {
  return /** @type{?proto.cometbft.types.v1beta1.Vote} */ (
    jspb.Message.getWrapperField(this, cometbft_types_v1beta1_types_pb.Vote, 1));
};


/**
 * @param {?proto.cometbft.types.v1beta1.Vote|undefined} value
 * @return {!proto.cometbft.consensus.v1beta1.Vote} returns this
*/
proto.cometbft.consensus.v1beta1.Vote.prototype.setVote = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.consensus.v1beta1.Vote} returns this
 */
proto.cometbft.consensus.v1beta1.Vote.prototype.clearVote = function() {
  return this.setVote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.consensus.v1beta1.Vote.prototype.hasVote = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.consensus.v1beta1.HasVote.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.consensus.v1beta1.HasVote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.consensus.v1beta1.HasVote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.HasVote.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    round: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    index: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.consensus.v1beta1.HasVote}
 */
proto.cometbft.consensus.v1beta1.HasVote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.consensus.v1beta1.HasVote;
  return proto.cometbft.consensus.v1beta1.HasVote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.consensus.v1beta1.HasVote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.consensus.v1beta1.HasVote}
 */
proto.cometbft.consensus.v1beta1.HasVote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 3:
      var value = /** @type {!proto.cometbft.types.v1beta1.SignedMsgType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.consensus.v1beta1.HasVote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.consensus.v1beta1.HasVote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.consensus.v1beta1.HasVote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.HasVote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.cometbft.consensus.v1beta1.HasVote.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.consensus.v1beta1.HasVote} returns this
 */
proto.cometbft.consensus.v1beta1.HasVote.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 round = 2;
 * @return {number}
 */
proto.cometbft.consensus.v1beta1.HasVote.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.consensus.v1beta1.HasVote} returns this
 */
proto.cometbft.consensus.v1beta1.HasVote.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional cometbft.types.v1beta1.SignedMsgType type = 3;
 * @return {!proto.cometbft.types.v1beta1.SignedMsgType}
 */
proto.cometbft.consensus.v1beta1.HasVote.prototype.getType = function() {
  return /** @type {!proto.cometbft.types.v1beta1.SignedMsgType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.cometbft.types.v1beta1.SignedMsgType} value
 * @return {!proto.cometbft.consensus.v1beta1.HasVote} returns this
 */
proto.cometbft.consensus.v1beta1.HasVote.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 index = 4;
 * @return {number}
 */
proto.cometbft.consensus.v1beta1.HasVote.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.consensus.v1beta1.HasVote} returns this
 */
proto.cometbft.consensus.v1beta1.HasVote.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.consensus.v1beta1.VoteSetMaj23.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.consensus.v1beta1.VoteSetMaj23.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.consensus.v1beta1.VoteSetMaj23} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.VoteSetMaj23.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    round: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blockId: (f = msg.getBlockId()) && cometbft_types_v1beta1_types_pb.BlockID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.consensus.v1beta1.VoteSetMaj23}
 */
proto.cometbft.consensus.v1beta1.VoteSetMaj23.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.consensus.v1beta1.VoteSetMaj23;
  return proto.cometbft.consensus.v1beta1.VoteSetMaj23.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.consensus.v1beta1.VoteSetMaj23} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.consensus.v1beta1.VoteSetMaj23}
 */
proto.cometbft.consensus.v1beta1.VoteSetMaj23.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 3:
      var value = /** @type {!proto.cometbft.types.v1beta1.SignedMsgType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = new cometbft_types_v1beta1_types_pb.BlockID;
      reader.readMessage(value,cometbft_types_v1beta1_types_pb.BlockID.deserializeBinaryFromReader);
      msg.setBlockId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.consensus.v1beta1.VoteSetMaj23.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.consensus.v1beta1.VoteSetMaj23.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.consensus.v1beta1.VoteSetMaj23} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.VoteSetMaj23.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getBlockId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      cometbft_types_v1beta1_types_pb.BlockID.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.cometbft.consensus.v1beta1.VoteSetMaj23.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.consensus.v1beta1.VoteSetMaj23} returns this
 */
proto.cometbft.consensus.v1beta1.VoteSetMaj23.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 round = 2;
 * @return {number}
 */
proto.cometbft.consensus.v1beta1.VoteSetMaj23.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.consensus.v1beta1.VoteSetMaj23} returns this
 */
proto.cometbft.consensus.v1beta1.VoteSetMaj23.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional cometbft.types.v1beta1.SignedMsgType type = 3;
 * @return {!proto.cometbft.types.v1beta1.SignedMsgType}
 */
proto.cometbft.consensus.v1beta1.VoteSetMaj23.prototype.getType = function() {
  return /** @type {!proto.cometbft.types.v1beta1.SignedMsgType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.cometbft.types.v1beta1.SignedMsgType} value
 * @return {!proto.cometbft.consensus.v1beta1.VoteSetMaj23} returns this
 */
proto.cometbft.consensus.v1beta1.VoteSetMaj23.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional cometbft.types.v1beta1.BlockID block_id = 4;
 * @return {?proto.cometbft.types.v1beta1.BlockID}
 */
proto.cometbft.consensus.v1beta1.VoteSetMaj23.prototype.getBlockId = function() {
  return /** @type{?proto.cometbft.types.v1beta1.BlockID} */ (
    jspb.Message.getWrapperField(this, cometbft_types_v1beta1_types_pb.BlockID, 4));
};


/**
 * @param {?proto.cometbft.types.v1beta1.BlockID|undefined} value
 * @return {!proto.cometbft.consensus.v1beta1.VoteSetMaj23} returns this
*/
proto.cometbft.consensus.v1beta1.VoteSetMaj23.prototype.setBlockId = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.consensus.v1beta1.VoteSetMaj23} returns this
 */
proto.cometbft.consensus.v1beta1.VoteSetMaj23.prototype.clearBlockId = function() {
  return this.setBlockId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.consensus.v1beta1.VoteSetMaj23.prototype.hasBlockId = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.consensus.v1beta1.VoteSetBits.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.consensus.v1beta1.VoteSetBits.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.consensus.v1beta1.VoteSetBits} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.VoteSetBits.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    round: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blockId: (f = msg.getBlockId()) && cometbft_types_v1beta1_types_pb.BlockID.toObject(includeInstance, f),
    votes: (f = msg.getVotes()) && cometbft_libs_bits_v1_types_pb.BitArray.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.consensus.v1beta1.VoteSetBits}
 */
proto.cometbft.consensus.v1beta1.VoteSetBits.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.consensus.v1beta1.VoteSetBits;
  return proto.cometbft.consensus.v1beta1.VoteSetBits.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.consensus.v1beta1.VoteSetBits} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.consensus.v1beta1.VoteSetBits}
 */
proto.cometbft.consensus.v1beta1.VoteSetBits.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 3:
      var value = /** @type {!proto.cometbft.types.v1beta1.SignedMsgType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = new cometbft_types_v1beta1_types_pb.BlockID;
      reader.readMessage(value,cometbft_types_v1beta1_types_pb.BlockID.deserializeBinaryFromReader);
      msg.setBlockId(value);
      break;
    case 5:
      var value = new cometbft_libs_bits_v1_types_pb.BitArray;
      reader.readMessage(value,cometbft_libs_bits_v1_types_pb.BitArray.deserializeBinaryFromReader);
      msg.setVotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.consensus.v1beta1.VoteSetBits.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.consensus.v1beta1.VoteSetBits.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.consensus.v1beta1.VoteSetBits} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.VoteSetBits.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getBlockId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      cometbft_types_v1beta1_types_pb.BlockID.serializeBinaryToWriter
    );
  }
  f = message.getVotes();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      cometbft_libs_bits_v1_types_pb.BitArray.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.cometbft.consensus.v1beta1.VoteSetBits.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.consensus.v1beta1.VoteSetBits} returns this
 */
proto.cometbft.consensus.v1beta1.VoteSetBits.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 round = 2;
 * @return {number}
 */
proto.cometbft.consensus.v1beta1.VoteSetBits.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.consensus.v1beta1.VoteSetBits} returns this
 */
proto.cometbft.consensus.v1beta1.VoteSetBits.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional cometbft.types.v1beta1.SignedMsgType type = 3;
 * @return {!proto.cometbft.types.v1beta1.SignedMsgType}
 */
proto.cometbft.consensus.v1beta1.VoteSetBits.prototype.getType = function() {
  return /** @type {!proto.cometbft.types.v1beta1.SignedMsgType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.cometbft.types.v1beta1.SignedMsgType} value
 * @return {!proto.cometbft.consensus.v1beta1.VoteSetBits} returns this
 */
proto.cometbft.consensus.v1beta1.VoteSetBits.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional cometbft.types.v1beta1.BlockID block_id = 4;
 * @return {?proto.cometbft.types.v1beta1.BlockID}
 */
proto.cometbft.consensus.v1beta1.VoteSetBits.prototype.getBlockId = function() {
  return /** @type{?proto.cometbft.types.v1beta1.BlockID} */ (
    jspb.Message.getWrapperField(this, cometbft_types_v1beta1_types_pb.BlockID, 4));
};


/**
 * @param {?proto.cometbft.types.v1beta1.BlockID|undefined} value
 * @return {!proto.cometbft.consensus.v1beta1.VoteSetBits} returns this
*/
proto.cometbft.consensus.v1beta1.VoteSetBits.prototype.setBlockId = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.consensus.v1beta1.VoteSetBits} returns this
 */
proto.cometbft.consensus.v1beta1.VoteSetBits.prototype.clearBlockId = function() {
  return this.setBlockId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.consensus.v1beta1.VoteSetBits.prototype.hasBlockId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional cometbft.libs.bits.v1.BitArray votes = 5;
 * @return {?proto.cometbft.libs.bits.v1.BitArray}
 */
proto.cometbft.consensus.v1beta1.VoteSetBits.prototype.getVotes = function() {
  return /** @type{?proto.cometbft.libs.bits.v1.BitArray} */ (
    jspb.Message.getWrapperField(this, cometbft_libs_bits_v1_types_pb.BitArray, 5));
};


/**
 * @param {?proto.cometbft.libs.bits.v1.BitArray|undefined} value
 * @return {!proto.cometbft.consensus.v1beta1.VoteSetBits} returns this
*/
proto.cometbft.consensus.v1beta1.VoteSetBits.prototype.setVotes = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.consensus.v1beta1.VoteSetBits} returns this
 */
proto.cometbft.consensus.v1beta1.VoteSetBits.prototype.clearVotes = function() {
  return this.setVotes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.consensus.v1beta1.VoteSetBits.prototype.hasVotes = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cometbft.consensus.v1beta1.Message.oneofGroups_ = [[1,2,3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.cometbft.consensus.v1beta1.Message.SumCase = {
  SUM_NOT_SET: 0,
  NEW_ROUND_STEP: 1,
  NEW_VALID_BLOCK: 2,
  PROPOSAL: 3,
  PROPOSAL_POL: 4,
  BLOCK_PART: 5,
  VOTE: 6,
  HAS_VOTE: 7,
  VOTE_SET_MAJ23: 8,
  VOTE_SET_BITS: 9
};

/**
 * @return {proto.cometbft.consensus.v1beta1.Message.SumCase}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.getSumCase = function() {
  return /** @type {proto.cometbft.consensus.v1beta1.Message.SumCase} */(jspb.Message.computeOneofCase(this, proto.cometbft.consensus.v1beta1.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.consensus.v1beta1.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.consensus.v1beta1.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    newRoundStep: (f = msg.getNewRoundStep()) && proto.cometbft.consensus.v1beta1.NewRoundStep.toObject(includeInstance, f),
    newValidBlock: (f = msg.getNewValidBlock()) && proto.cometbft.consensus.v1beta1.NewValidBlock.toObject(includeInstance, f),
    proposal: (f = msg.getProposal()) && proto.cometbft.consensus.v1beta1.Proposal.toObject(includeInstance, f),
    proposalPol: (f = msg.getProposalPol()) && proto.cometbft.consensus.v1beta1.ProposalPOL.toObject(includeInstance, f),
    blockPart: (f = msg.getBlockPart()) && proto.cometbft.consensus.v1beta1.BlockPart.toObject(includeInstance, f),
    vote: (f = msg.getVote()) && proto.cometbft.consensus.v1beta1.Vote.toObject(includeInstance, f),
    hasVote: (f = msg.getHasVote()) && proto.cometbft.consensus.v1beta1.HasVote.toObject(includeInstance, f),
    voteSetMaj23: (f = msg.getVoteSetMaj23()) && proto.cometbft.consensus.v1beta1.VoteSetMaj23.toObject(includeInstance, f),
    voteSetBits: (f = msg.getVoteSetBits()) && proto.cometbft.consensus.v1beta1.VoteSetBits.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.consensus.v1beta1.Message}
 */
proto.cometbft.consensus.v1beta1.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.consensus.v1beta1.Message;
  return proto.cometbft.consensus.v1beta1.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.consensus.v1beta1.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.consensus.v1beta1.Message}
 */
proto.cometbft.consensus.v1beta1.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cometbft.consensus.v1beta1.NewRoundStep;
      reader.readMessage(value,proto.cometbft.consensus.v1beta1.NewRoundStep.deserializeBinaryFromReader);
      msg.setNewRoundStep(value);
      break;
    case 2:
      var value = new proto.cometbft.consensus.v1beta1.NewValidBlock;
      reader.readMessage(value,proto.cometbft.consensus.v1beta1.NewValidBlock.deserializeBinaryFromReader);
      msg.setNewValidBlock(value);
      break;
    case 3:
      var value = new proto.cometbft.consensus.v1beta1.Proposal;
      reader.readMessage(value,proto.cometbft.consensus.v1beta1.Proposal.deserializeBinaryFromReader);
      msg.setProposal(value);
      break;
    case 4:
      var value = new proto.cometbft.consensus.v1beta1.ProposalPOL;
      reader.readMessage(value,proto.cometbft.consensus.v1beta1.ProposalPOL.deserializeBinaryFromReader);
      msg.setProposalPol(value);
      break;
    case 5:
      var value = new proto.cometbft.consensus.v1beta1.BlockPart;
      reader.readMessage(value,proto.cometbft.consensus.v1beta1.BlockPart.deserializeBinaryFromReader);
      msg.setBlockPart(value);
      break;
    case 6:
      var value = new proto.cometbft.consensus.v1beta1.Vote;
      reader.readMessage(value,proto.cometbft.consensus.v1beta1.Vote.deserializeBinaryFromReader);
      msg.setVote(value);
      break;
    case 7:
      var value = new proto.cometbft.consensus.v1beta1.HasVote;
      reader.readMessage(value,proto.cometbft.consensus.v1beta1.HasVote.deserializeBinaryFromReader);
      msg.setHasVote(value);
      break;
    case 8:
      var value = new proto.cometbft.consensus.v1beta1.VoteSetMaj23;
      reader.readMessage(value,proto.cometbft.consensus.v1beta1.VoteSetMaj23.deserializeBinaryFromReader);
      msg.setVoteSetMaj23(value);
      break;
    case 9:
      var value = new proto.cometbft.consensus.v1beta1.VoteSetBits;
      reader.readMessage(value,proto.cometbft.consensus.v1beta1.VoteSetBits.deserializeBinaryFromReader);
      msg.setVoteSetBits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.consensus.v1beta1.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.consensus.v1beta1.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.consensus.v1beta1.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewRoundStep();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cometbft.consensus.v1beta1.NewRoundStep.serializeBinaryToWriter
    );
  }
  f = message.getNewValidBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cometbft.consensus.v1beta1.NewValidBlock.serializeBinaryToWriter
    );
  }
  f = message.getProposal();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cometbft.consensus.v1beta1.Proposal.serializeBinaryToWriter
    );
  }
  f = message.getProposalPol();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cometbft.consensus.v1beta1.ProposalPOL.serializeBinaryToWriter
    );
  }
  f = message.getBlockPart();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cometbft.consensus.v1beta1.BlockPart.serializeBinaryToWriter
    );
  }
  f = message.getVote();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.cometbft.consensus.v1beta1.Vote.serializeBinaryToWriter
    );
  }
  f = message.getHasVote();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.cometbft.consensus.v1beta1.HasVote.serializeBinaryToWriter
    );
  }
  f = message.getVoteSetMaj23();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.cometbft.consensus.v1beta1.VoteSetMaj23.serializeBinaryToWriter
    );
  }
  f = message.getVoteSetBits();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.cometbft.consensus.v1beta1.VoteSetBits.serializeBinaryToWriter
    );
  }
};


/**
 * optional NewRoundStep new_round_step = 1;
 * @return {?proto.cometbft.consensus.v1beta1.NewRoundStep}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.getNewRoundStep = function() {
  return /** @type{?proto.cometbft.consensus.v1beta1.NewRoundStep} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.consensus.v1beta1.NewRoundStep, 1));
};


/**
 * @param {?proto.cometbft.consensus.v1beta1.NewRoundStep|undefined} value
 * @return {!proto.cometbft.consensus.v1beta1.Message} returns this
*/
proto.cometbft.consensus.v1beta1.Message.prototype.setNewRoundStep = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.cometbft.consensus.v1beta1.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.consensus.v1beta1.Message} returns this
 */
proto.cometbft.consensus.v1beta1.Message.prototype.clearNewRoundStep = function() {
  return this.setNewRoundStep(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.hasNewRoundStep = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NewValidBlock new_valid_block = 2;
 * @return {?proto.cometbft.consensus.v1beta1.NewValidBlock}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.getNewValidBlock = function() {
  return /** @type{?proto.cometbft.consensus.v1beta1.NewValidBlock} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.consensus.v1beta1.NewValidBlock, 2));
};


/**
 * @param {?proto.cometbft.consensus.v1beta1.NewValidBlock|undefined} value
 * @return {!proto.cometbft.consensus.v1beta1.Message} returns this
*/
proto.cometbft.consensus.v1beta1.Message.prototype.setNewValidBlock = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.cometbft.consensus.v1beta1.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.consensus.v1beta1.Message} returns this
 */
proto.cometbft.consensus.v1beta1.Message.prototype.clearNewValidBlock = function() {
  return this.setNewValidBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.hasNewValidBlock = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Proposal proposal = 3;
 * @return {?proto.cometbft.consensus.v1beta1.Proposal}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.getProposal = function() {
  return /** @type{?proto.cometbft.consensus.v1beta1.Proposal} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.consensus.v1beta1.Proposal, 3));
};


/**
 * @param {?proto.cometbft.consensus.v1beta1.Proposal|undefined} value
 * @return {!proto.cometbft.consensus.v1beta1.Message} returns this
*/
proto.cometbft.consensus.v1beta1.Message.prototype.setProposal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.cometbft.consensus.v1beta1.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.consensus.v1beta1.Message} returns this
 */
proto.cometbft.consensus.v1beta1.Message.prototype.clearProposal = function() {
  return this.setProposal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.hasProposal = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ProposalPOL proposal_pol = 4;
 * @return {?proto.cometbft.consensus.v1beta1.ProposalPOL}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.getProposalPol = function() {
  return /** @type{?proto.cometbft.consensus.v1beta1.ProposalPOL} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.consensus.v1beta1.ProposalPOL, 4));
};


/**
 * @param {?proto.cometbft.consensus.v1beta1.ProposalPOL|undefined} value
 * @return {!proto.cometbft.consensus.v1beta1.Message} returns this
*/
proto.cometbft.consensus.v1beta1.Message.prototype.setProposalPol = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.cometbft.consensus.v1beta1.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.consensus.v1beta1.Message} returns this
 */
proto.cometbft.consensus.v1beta1.Message.prototype.clearProposalPol = function() {
  return this.setProposalPol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.hasProposalPol = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BlockPart block_part = 5;
 * @return {?proto.cometbft.consensus.v1beta1.BlockPart}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.getBlockPart = function() {
  return /** @type{?proto.cometbft.consensus.v1beta1.BlockPart} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.consensus.v1beta1.BlockPart, 5));
};


/**
 * @param {?proto.cometbft.consensus.v1beta1.BlockPart|undefined} value
 * @return {!proto.cometbft.consensus.v1beta1.Message} returns this
*/
proto.cometbft.consensus.v1beta1.Message.prototype.setBlockPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.cometbft.consensus.v1beta1.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.consensus.v1beta1.Message} returns this
 */
proto.cometbft.consensus.v1beta1.Message.prototype.clearBlockPart = function() {
  return this.setBlockPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.hasBlockPart = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Vote vote = 6;
 * @return {?proto.cometbft.consensus.v1beta1.Vote}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.getVote = function() {
  return /** @type{?proto.cometbft.consensus.v1beta1.Vote} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.consensus.v1beta1.Vote, 6));
};


/**
 * @param {?proto.cometbft.consensus.v1beta1.Vote|undefined} value
 * @return {!proto.cometbft.consensus.v1beta1.Message} returns this
*/
proto.cometbft.consensus.v1beta1.Message.prototype.setVote = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.cometbft.consensus.v1beta1.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.consensus.v1beta1.Message} returns this
 */
proto.cometbft.consensus.v1beta1.Message.prototype.clearVote = function() {
  return this.setVote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.hasVote = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional HasVote has_vote = 7;
 * @return {?proto.cometbft.consensus.v1beta1.HasVote}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.getHasVote = function() {
  return /** @type{?proto.cometbft.consensus.v1beta1.HasVote} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.consensus.v1beta1.HasVote, 7));
};


/**
 * @param {?proto.cometbft.consensus.v1beta1.HasVote|undefined} value
 * @return {!proto.cometbft.consensus.v1beta1.Message} returns this
*/
proto.cometbft.consensus.v1beta1.Message.prototype.setHasVote = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.cometbft.consensus.v1beta1.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.consensus.v1beta1.Message} returns this
 */
proto.cometbft.consensus.v1beta1.Message.prototype.clearHasVote = function() {
  return this.setHasVote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.hasHasVote = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional VoteSetMaj23 vote_set_maj23 = 8;
 * @return {?proto.cometbft.consensus.v1beta1.VoteSetMaj23}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.getVoteSetMaj23 = function() {
  return /** @type{?proto.cometbft.consensus.v1beta1.VoteSetMaj23} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.consensus.v1beta1.VoteSetMaj23, 8));
};


/**
 * @param {?proto.cometbft.consensus.v1beta1.VoteSetMaj23|undefined} value
 * @return {!proto.cometbft.consensus.v1beta1.Message} returns this
*/
proto.cometbft.consensus.v1beta1.Message.prototype.setVoteSetMaj23 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.cometbft.consensus.v1beta1.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.consensus.v1beta1.Message} returns this
 */
proto.cometbft.consensus.v1beta1.Message.prototype.clearVoteSetMaj23 = function() {
  return this.setVoteSetMaj23(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.hasVoteSetMaj23 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional VoteSetBits vote_set_bits = 9;
 * @return {?proto.cometbft.consensus.v1beta1.VoteSetBits}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.getVoteSetBits = function() {
  return /** @type{?proto.cometbft.consensus.v1beta1.VoteSetBits} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.consensus.v1beta1.VoteSetBits, 9));
};


/**
 * @param {?proto.cometbft.consensus.v1beta1.VoteSetBits|undefined} value
 * @return {!proto.cometbft.consensus.v1beta1.Message} returns this
*/
proto.cometbft.consensus.v1beta1.Message.prototype.setVoteSetBits = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.cometbft.consensus.v1beta1.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.consensus.v1beta1.Message} returns this
 */
proto.cometbft.consensus.v1beta1.Message.prototype.clearVoteSetBits = function() {
  return this.setVoteSetBits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.consensus.v1beta1.Message.prototype.hasVoteSetBits = function() {
  return jspb.Message.getField(this, 9) != null;
};


goog.object.extend(exports, proto.cometbft.consensus.v1beta1);
