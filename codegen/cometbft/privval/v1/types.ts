/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cometbft/privval/v1/types.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../types/v1/types";
import * as dependency_2 from "./../../../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace cometbft.privval.v1 {
    export class RemoteSignerError extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            description?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            code?: number;
            description?: string;
        }): RemoteSignerError {
            const message = new RemoteSignerError({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                description?: string;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoteSignerError {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoteSignerError();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoteSignerError {
            return RemoteSignerError.deserialize(bytes);
        }
    }
    export class PubKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chain_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chain_id" in data && data.chain_id != undefined) {
                    this.chain_id = data.chain_id;
                }
            }
        }
        get chain_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set chain_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            chain_id?: string;
        }): PubKeyRequest {
            const message = new PubKeyRequest({});
            if (data.chain_id != null) {
                message.chain_id = data.chain_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chain_id?: string;
            } = {};
            if (this.chain_id != null) {
                data.chain_id = this.chain_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chain_id.length)
                writer.writeString(1, this.chain_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PubKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PubKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chain_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PubKeyRequest {
            return PubKeyRequest.deserialize(bytes);
        }
    }
    export class PubKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            error?: RemoteSignerError;
            pub_key_bytes?: Uint8Array;
            pub_key_type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("pub_key_bytes" in data && data.pub_key_bytes != undefined) {
                    this.pub_key_bytes = data.pub_key_bytes;
                }
                if ("pub_key_type" in data && data.pub_key_type != undefined) {
                    this.pub_key_type = data.pub_key_type;
                }
            }
        }
        get error() {
            return pb_1.Message.getWrapperField(this, RemoteSignerError, 2) as RemoteSignerError;
        }
        set error(value: RemoteSignerError) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get pub_key_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set pub_key_bytes(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get pub_key_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set pub_key_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            error?: ReturnType<typeof RemoteSignerError.prototype.toObject>;
            pub_key_bytes?: Uint8Array;
            pub_key_type?: string;
        }): PubKeyResponse {
            const message = new PubKeyResponse({});
            if (data.error != null) {
                message.error = RemoteSignerError.fromObject(data.error);
            }
            if (data.pub_key_bytes != null) {
                message.pub_key_bytes = data.pub_key_bytes;
            }
            if (data.pub_key_type != null) {
                message.pub_key_type = data.pub_key_type;
            }
            return message;
        }
        toObject() {
            const data: {
                error?: ReturnType<typeof RemoteSignerError.prototype.toObject>;
                pub_key_bytes?: Uint8Array;
                pub_key_type?: string;
            } = {};
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.pub_key_bytes != null) {
                data.pub_key_bytes = this.pub_key_bytes;
            }
            if (this.pub_key_type != null) {
                data.pub_key_type = this.pub_key_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_error)
                writer.writeMessage(2, this.error, () => this.error.serialize(writer));
            if (this.pub_key_bytes.length)
                writer.writeBytes(3, this.pub_key_bytes);
            if (this.pub_key_type.length)
                writer.writeString(4, this.pub_key_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PubKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PubKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message.error, () => message.error = RemoteSignerError.deserialize(reader));
                        break;
                    case 3:
                        message.pub_key_bytes = reader.readBytes();
                        break;
                    case 4:
                        message.pub_key_type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PubKeyResponse {
            return PubKeyResponse.deserialize(bytes);
        }
    }
    export class SignVoteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vote?: dependency_1.cometbft.types.v1.Vote;
            chain_id?: string;
            skip_extension_signing?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vote" in data && data.vote != undefined) {
                    this.vote = data.vote;
                }
                if ("chain_id" in data && data.chain_id != undefined) {
                    this.chain_id = data.chain_id;
                }
                if ("skip_extension_signing" in data && data.skip_extension_signing != undefined) {
                    this.skip_extension_signing = data.skip_extension_signing;
                }
            }
        }
        get vote() {
            return pb_1.Message.getWrapperField(this, dependency_1.cometbft.types.v1.Vote, 1) as dependency_1.cometbft.types.v1.Vote;
        }
        set vote(value: dependency_1.cometbft.types.v1.Vote) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_vote() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get chain_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set chain_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get skip_extension_signing() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set skip_extension_signing(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            vote?: ReturnType<typeof dependency_1.cometbft.types.v1.Vote.prototype.toObject>;
            chain_id?: string;
            skip_extension_signing?: boolean;
        }): SignVoteRequest {
            const message = new SignVoteRequest({});
            if (data.vote != null) {
                message.vote = dependency_1.cometbft.types.v1.Vote.fromObject(data.vote);
            }
            if (data.chain_id != null) {
                message.chain_id = data.chain_id;
            }
            if (data.skip_extension_signing != null) {
                message.skip_extension_signing = data.skip_extension_signing;
            }
            return message;
        }
        toObject() {
            const data: {
                vote?: ReturnType<typeof dependency_1.cometbft.types.v1.Vote.prototype.toObject>;
                chain_id?: string;
                skip_extension_signing?: boolean;
            } = {};
            if (this.vote != null) {
                data.vote = this.vote.toObject();
            }
            if (this.chain_id != null) {
                data.chain_id = this.chain_id;
            }
            if (this.skip_extension_signing != null) {
                data.skip_extension_signing = this.skip_extension_signing;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_vote)
                writer.writeMessage(1, this.vote, () => this.vote.serialize(writer));
            if (this.chain_id.length)
                writer.writeString(2, this.chain_id);
            if (this.skip_extension_signing != false)
                writer.writeBool(3, this.skip_extension_signing);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignVoteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignVoteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.vote, () => message.vote = dependency_1.cometbft.types.v1.Vote.deserialize(reader));
                        break;
                    case 2:
                        message.chain_id = reader.readString();
                        break;
                    case 3:
                        message.skip_extension_signing = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignVoteRequest {
            return SignVoteRequest.deserialize(bytes);
        }
    }
    export class SignedVoteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vote?: dependency_1.cometbft.types.v1.Vote;
            error?: RemoteSignerError;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vote" in data && data.vote != undefined) {
                    this.vote = data.vote;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get vote() {
            return pb_1.Message.getWrapperField(this, dependency_1.cometbft.types.v1.Vote, 1) as dependency_1.cometbft.types.v1.Vote;
        }
        set vote(value: dependency_1.cometbft.types.v1.Vote) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_vote() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, RemoteSignerError, 2) as RemoteSignerError;
        }
        set error(value: RemoteSignerError) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            vote?: ReturnType<typeof dependency_1.cometbft.types.v1.Vote.prototype.toObject>;
            error?: ReturnType<typeof RemoteSignerError.prototype.toObject>;
        }): SignedVoteResponse {
            const message = new SignedVoteResponse({});
            if (data.vote != null) {
                message.vote = dependency_1.cometbft.types.v1.Vote.fromObject(data.vote);
            }
            if (data.error != null) {
                message.error = RemoteSignerError.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                vote?: ReturnType<typeof dependency_1.cometbft.types.v1.Vote.prototype.toObject>;
                error?: ReturnType<typeof RemoteSignerError.prototype.toObject>;
            } = {};
            if (this.vote != null) {
                data.vote = this.vote.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_vote)
                writer.writeMessage(1, this.vote, () => this.vote.serialize(writer));
            if (this.has_error)
                writer.writeMessage(2, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignedVoteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignedVoteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.vote, () => message.vote = dependency_1.cometbft.types.v1.Vote.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.error, () => message.error = RemoteSignerError.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignedVoteResponse {
            return SignedVoteResponse.deserialize(bytes);
        }
    }
    export class SignProposalRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proposal?: dependency_1.cometbft.types.v1.Proposal;
            chain_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal" in data && data.proposal != undefined) {
                    this.proposal = data.proposal;
                }
                if ("chain_id" in data && data.chain_id != undefined) {
                    this.chain_id = data.chain_id;
                }
            }
        }
        get proposal() {
            return pb_1.Message.getWrapperField(this, dependency_1.cometbft.types.v1.Proposal, 1) as dependency_1.cometbft.types.v1.Proposal;
        }
        set proposal(value: dependency_1.cometbft.types.v1.Proposal) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_proposal() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get chain_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set chain_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            proposal?: ReturnType<typeof dependency_1.cometbft.types.v1.Proposal.prototype.toObject>;
            chain_id?: string;
        }): SignProposalRequest {
            const message = new SignProposalRequest({});
            if (data.proposal != null) {
                message.proposal = dependency_1.cometbft.types.v1.Proposal.fromObject(data.proposal);
            }
            if (data.chain_id != null) {
                message.chain_id = data.chain_id;
            }
            return message;
        }
        toObject() {
            const data: {
                proposal?: ReturnType<typeof dependency_1.cometbft.types.v1.Proposal.prototype.toObject>;
                chain_id?: string;
            } = {};
            if (this.proposal != null) {
                data.proposal = this.proposal.toObject();
            }
            if (this.chain_id != null) {
                data.chain_id = this.chain_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_proposal)
                writer.writeMessage(1, this.proposal, () => this.proposal.serialize(writer));
            if (this.chain_id.length)
                writer.writeString(2, this.chain_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignProposalRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignProposalRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.proposal, () => message.proposal = dependency_1.cometbft.types.v1.Proposal.deserialize(reader));
                        break;
                    case 2:
                        message.chain_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignProposalRequest {
            return SignProposalRequest.deserialize(bytes);
        }
    }
    export class SignedProposalResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proposal?: dependency_1.cometbft.types.v1.Proposal;
            error?: RemoteSignerError;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal" in data && data.proposal != undefined) {
                    this.proposal = data.proposal;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get proposal() {
            return pb_1.Message.getWrapperField(this, dependency_1.cometbft.types.v1.Proposal, 1) as dependency_1.cometbft.types.v1.Proposal;
        }
        set proposal(value: dependency_1.cometbft.types.v1.Proposal) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_proposal() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, RemoteSignerError, 2) as RemoteSignerError;
        }
        set error(value: RemoteSignerError) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            proposal?: ReturnType<typeof dependency_1.cometbft.types.v1.Proposal.prototype.toObject>;
            error?: ReturnType<typeof RemoteSignerError.prototype.toObject>;
        }): SignedProposalResponse {
            const message = new SignedProposalResponse({});
            if (data.proposal != null) {
                message.proposal = dependency_1.cometbft.types.v1.Proposal.fromObject(data.proposal);
            }
            if (data.error != null) {
                message.error = RemoteSignerError.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                proposal?: ReturnType<typeof dependency_1.cometbft.types.v1.Proposal.prototype.toObject>;
                error?: ReturnType<typeof RemoteSignerError.prototype.toObject>;
            } = {};
            if (this.proposal != null) {
                data.proposal = this.proposal.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_proposal)
                writer.writeMessage(1, this.proposal, () => this.proposal.serialize(writer));
            if (this.has_error)
                writer.writeMessage(2, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignedProposalResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignedProposalResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.proposal, () => message.proposal = dependency_1.cometbft.types.v1.Proposal.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.error, () => message.error = RemoteSignerError.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignedProposalResponse {
            return SignedProposalResponse.deserialize(bytes);
        }
    }
    export class SignBytesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: Uint8Array;
        }): SignBytesRequest {
            const message = new SignBytesRequest({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: Uint8Array;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value.length)
                writer.writeBytes(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignBytesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignBytesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignBytesRequest {
            return SignBytesRequest.deserialize(bytes);
        }
    }
    export class SignBytesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signature?: Uint8Array;
            error?: RemoteSignerError;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, RemoteSignerError, 2) as RemoteSignerError;
        }
        set error(value: RemoteSignerError) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            signature?: Uint8Array;
            error?: ReturnType<typeof RemoteSignerError.prototype.toObject>;
        }): SignBytesResponse {
            const message = new SignBytesResponse({});
            if (data.signature != null) {
                message.signature = data.signature;
            }
            if (data.error != null) {
                message.error = RemoteSignerError.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                signature?: Uint8Array;
                error?: ReturnType<typeof RemoteSignerError.prototype.toObject>;
            } = {};
            if (this.signature != null) {
                data.signature = this.signature;
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signature.length)
                writer.writeBytes(1, this.signature);
            if (this.has_error)
                writer.writeMessage(2, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignBytesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignBytesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signature = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.error, () => message.error = RemoteSignerError.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignBytesResponse {
            return SignBytesResponse.deserialize(bytes);
        }
    }
    export class PingRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): PingRequest {
            const message = new PingRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PingRequest {
            return PingRequest.deserialize(bytes);
        }
    }
    export class PingResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): PingResponse {
            const message = new PingResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PingResponse {
            return PingResponse.deserialize(bytes);
        }
    }
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]];
        constructor(data?: any[] | ({} & (({
            pub_key_request?: PubKeyRequest;
            pub_key_response?: never;
            sign_vote_request?: never;
            signed_vote_response?: never;
            sign_proposal_request?: never;
            signed_proposal_response?: never;
            ping_request?: never;
            ping_response?: never;
            sign_bytes_request?: never;
            sign_bytes_response?: never;
        } | {
            pub_key_request?: never;
            pub_key_response?: PubKeyResponse;
            sign_vote_request?: never;
            signed_vote_response?: never;
            sign_proposal_request?: never;
            signed_proposal_response?: never;
            ping_request?: never;
            ping_response?: never;
            sign_bytes_request?: never;
            sign_bytes_response?: never;
        } | {
            pub_key_request?: never;
            pub_key_response?: never;
            sign_vote_request?: SignVoteRequest;
            signed_vote_response?: never;
            sign_proposal_request?: never;
            signed_proposal_response?: never;
            ping_request?: never;
            ping_response?: never;
            sign_bytes_request?: never;
            sign_bytes_response?: never;
        } | {
            pub_key_request?: never;
            pub_key_response?: never;
            sign_vote_request?: never;
            signed_vote_response?: SignedVoteResponse;
            sign_proposal_request?: never;
            signed_proposal_response?: never;
            ping_request?: never;
            ping_response?: never;
            sign_bytes_request?: never;
            sign_bytes_response?: never;
        } | {
            pub_key_request?: never;
            pub_key_response?: never;
            sign_vote_request?: never;
            signed_vote_response?: never;
            sign_proposal_request?: SignProposalRequest;
            signed_proposal_response?: never;
            ping_request?: never;
            ping_response?: never;
            sign_bytes_request?: never;
            sign_bytes_response?: never;
        } | {
            pub_key_request?: never;
            pub_key_response?: never;
            sign_vote_request?: never;
            signed_vote_response?: never;
            sign_proposal_request?: never;
            signed_proposal_response?: SignedProposalResponse;
            ping_request?: never;
            ping_response?: never;
            sign_bytes_request?: never;
            sign_bytes_response?: never;
        } | {
            pub_key_request?: never;
            pub_key_response?: never;
            sign_vote_request?: never;
            signed_vote_response?: never;
            sign_proposal_request?: never;
            signed_proposal_response?: never;
            ping_request?: PingRequest;
            ping_response?: never;
            sign_bytes_request?: never;
            sign_bytes_response?: never;
        } | {
            pub_key_request?: never;
            pub_key_response?: never;
            sign_vote_request?: never;
            signed_vote_response?: never;
            sign_proposal_request?: never;
            signed_proposal_response?: never;
            ping_request?: never;
            ping_response?: PingResponse;
            sign_bytes_request?: never;
            sign_bytes_response?: never;
        } | {
            pub_key_request?: never;
            pub_key_response?: never;
            sign_vote_request?: never;
            signed_vote_response?: never;
            sign_proposal_request?: never;
            signed_proposal_response?: never;
            ping_request?: never;
            ping_response?: never;
            sign_bytes_request?: SignBytesRequest;
            sign_bytes_response?: never;
        } | {
            pub_key_request?: never;
            pub_key_response?: never;
            sign_vote_request?: never;
            signed_vote_response?: never;
            sign_proposal_request?: never;
            signed_proposal_response?: never;
            ping_request?: never;
            ping_response?: never;
            sign_bytes_request?: never;
            sign_bytes_response?: SignBytesResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pub_key_request" in data && data.pub_key_request != undefined) {
                    this.pub_key_request = data.pub_key_request;
                }
                if ("pub_key_response" in data && data.pub_key_response != undefined) {
                    this.pub_key_response = data.pub_key_response;
                }
                if ("sign_vote_request" in data && data.sign_vote_request != undefined) {
                    this.sign_vote_request = data.sign_vote_request;
                }
                if ("signed_vote_response" in data && data.signed_vote_response != undefined) {
                    this.signed_vote_response = data.signed_vote_response;
                }
                if ("sign_proposal_request" in data && data.sign_proposal_request != undefined) {
                    this.sign_proposal_request = data.sign_proposal_request;
                }
                if ("signed_proposal_response" in data && data.signed_proposal_response != undefined) {
                    this.signed_proposal_response = data.signed_proposal_response;
                }
                if ("ping_request" in data && data.ping_request != undefined) {
                    this.ping_request = data.ping_request;
                }
                if ("ping_response" in data && data.ping_response != undefined) {
                    this.ping_response = data.ping_response;
                }
                if ("sign_bytes_request" in data && data.sign_bytes_request != undefined) {
                    this.sign_bytes_request = data.sign_bytes_request;
                }
                if ("sign_bytes_response" in data && data.sign_bytes_response != undefined) {
                    this.sign_bytes_response = data.sign_bytes_response;
                }
            }
        }
        get pub_key_request() {
            return pb_1.Message.getWrapperField(this, PubKeyRequest, 1) as PubKeyRequest;
        }
        set pub_key_request(value: PubKeyRequest) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_pub_key_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get pub_key_response() {
            return pb_1.Message.getWrapperField(this, PubKeyResponse, 2) as PubKeyResponse;
        }
        set pub_key_response(value: PubKeyResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_pub_key_response() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get sign_vote_request() {
            return pb_1.Message.getWrapperField(this, SignVoteRequest, 3) as SignVoteRequest;
        }
        set sign_vote_request(value: SignVoteRequest) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_sign_vote_request() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get signed_vote_response() {
            return pb_1.Message.getWrapperField(this, SignedVoteResponse, 4) as SignedVoteResponse;
        }
        set signed_vote_response(value: SignedVoteResponse) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_signed_vote_response() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get sign_proposal_request() {
            return pb_1.Message.getWrapperField(this, SignProposalRequest, 5) as SignProposalRequest;
        }
        set sign_proposal_request(value: SignProposalRequest) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_sign_proposal_request() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get signed_proposal_response() {
            return pb_1.Message.getWrapperField(this, SignedProposalResponse, 6) as SignedProposalResponse;
        }
        set signed_proposal_response(value: SignedProposalResponse) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_signed_proposal_response() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get ping_request() {
            return pb_1.Message.getWrapperField(this, PingRequest, 7) as PingRequest;
        }
        set ping_request(value: PingRequest) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_ping_request() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get ping_response() {
            return pb_1.Message.getWrapperField(this, PingResponse, 8) as PingResponse;
        }
        set ping_response(value: PingResponse) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_ping_response() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get sign_bytes_request() {
            return pb_1.Message.getWrapperField(this, SignBytesRequest, 9) as SignBytesRequest;
        }
        set sign_bytes_request(value: SignBytesRequest) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_sign_bytes_request() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get sign_bytes_response() {
            return pb_1.Message.getWrapperField(this, SignBytesResponse, 10) as SignBytesResponse;
        }
        set sign_bytes_response(value: SignBytesResponse) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_sign_bytes_response() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get sum() {
            const cases: {
                [index: number]: "none" | "pub_key_request" | "pub_key_response" | "sign_vote_request" | "signed_vote_response" | "sign_proposal_request" | "signed_proposal_response" | "ping_request" | "ping_response" | "sign_bytes_request" | "sign_bytes_response";
            } = {
                0: "none",
                1: "pub_key_request",
                2: "pub_key_response",
                3: "sign_vote_request",
                4: "signed_vote_response",
                5: "sign_proposal_request",
                6: "signed_proposal_response",
                7: "ping_request",
                8: "ping_response",
                9: "sign_bytes_request",
                10: "sign_bytes_response"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])];
        }
        static fromObject(data: {
            pub_key_request?: ReturnType<typeof PubKeyRequest.prototype.toObject>;
            pub_key_response?: ReturnType<typeof PubKeyResponse.prototype.toObject>;
            sign_vote_request?: ReturnType<typeof SignVoteRequest.prototype.toObject>;
            signed_vote_response?: ReturnType<typeof SignedVoteResponse.prototype.toObject>;
            sign_proposal_request?: ReturnType<typeof SignProposalRequest.prototype.toObject>;
            signed_proposal_response?: ReturnType<typeof SignedProposalResponse.prototype.toObject>;
            ping_request?: ReturnType<typeof PingRequest.prototype.toObject>;
            ping_response?: ReturnType<typeof PingResponse.prototype.toObject>;
            sign_bytes_request?: ReturnType<typeof SignBytesRequest.prototype.toObject>;
            sign_bytes_response?: ReturnType<typeof SignBytesResponse.prototype.toObject>;
        }): Message {
            const message = new Message({});
            if (data.pub_key_request != null) {
                message.pub_key_request = PubKeyRequest.fromObject(data.pub_key_request);
            }
            if (data.pub_key_response != null) {
                message.pub_key_response = PubKeyResponse.fromObject(data.pub_key_response);
            }
            if (data.sign_vote_request != null) {
                message.sign_vote_request = SignVoteRequest.fromObject(data.sign_vote_request);
            }
            if (data.signed_vote_response != null) {
                message.signed_vote_response = SignedVoteResponse.fromObject(data.signed_vote_response);
            }
            if (data.sign_proposal_request != null) {
                message.sign_proposal_request = SignProposalRequest.fromObject(data.sign_proposal_request);
            }
            if (data.signed_proposal_response != null) {
                message.signed_proposal_response = SignedProposalResponse.fromObject(data.signed_proposal_response);
            }
            if (data.ping_request != null) {
                message.ping_request = PingRequest.fromObject(data.ping_request);
            }
            if (data.ping_response != null) {
                message.ping_response = PingResponse.fromObject(data.ping_response);
            }
            if (data.sign_bytes_request != null) {
                message.sign_bytes_request = SignBytesRequest.fromObject(data.sign_bytes_request);
            }
            if (data.sign_bytes_response != null) {
                message.sign_bytes_response = SignBytesResponse.fromObject(data.sign_bytes_response);
            }
            return message;
        }
        toObject() {
            const data: {
                pub_key_request?: ReturnType<typeof PubKeyRequest.prototype.toObject>;
                pub_key_response?: ReturnType<typeof PubKeyResponse.prototype.toObject>;
                sign_vote_request?: ReturnType<typeof SignVoteRequest.prototype.toObject>;
                signed_vote_response?: ReturnType<typeof SignedVoteResponse.prototype.toObject>;
                sign_proposal_request?: ReturnType<typeof SignProposalRequest.prototype.toObject>;
                signed_proposal_response?: ReturnType<typeof SignedProposalResponse.prototype.toObject>;
                ping_request?: ReturnType<typeof PingRequest.prototype.toObject>;
                ping_response?: ReturnType<typeof PingResponse.prototype.toObject>;
                sign_bytes_request?: ReturnType<typeof SignBytesRequest.prototype.toObject>;
                sign_bytes_response?: ReturnType<typeof SignBytesResponse.prototype.toObject>;
            } = {};
            if (this.pub_key_request != null) {
                data.pub_key_request = this.pub_key_request.toObject();
            }
            if (this.pub_key_response != null) {
                data.pub_key_response = this.pub_key_response.toObject();
            }
            if (this.sign_vote_request != null) {
                data.sign_vote_request = this.sign_vote_request.toObject();
            }
            if (this.signed_vote_response != null) {
                data.signed_vote_response = this.signed_vote_response.toObject();
            }
            if (this.sign_proposal_request != null) {
                data.sign_proposal_request = this.sign_proposal_request.toObject();
            }
            if (this.signed_proposal_response != null) {
                data.signed_proposal_response = this.signed_proposal_response.toObject();
            }
            if (this.ping_request != null) {
                data.ping_request = this.ping_request.toObject();
            }
            if (this.ping_response != null) {
                data.ping_response = this.ping_response.toObject();
            }
            if (this.sign_bytes_request != null) {
                data.sign_bytes_request = this.sign_bytes_request.toObject();
            }
            if (this.sign_bytes_response != null) {
                data.sign_bytes_response = this.sign_bytes_response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_pub_key_request)
                writer.writeMessage(1, this.pub_key_request, () => this.pub_key_request.serialize(writer));
            if (this.has_pub_key_response)
                writer.writeMessage(2, this.pub_key_response, () => this.pub_key_response.serialize(writer));
            if (this.has_sign_vote_request)
                writer.writeMessage(3, this.sign_vote_request, () => this.sign_vote_request.serialize(writer));
            if (this.has_signed_vote_response)
                writer.writeMessage(4, this.signed_vote_response, () => this.signed_vote_response.serialize(writer));
            if (this.has_sign_proposal_request)
                writer.writeMessage(5, this.sign_proposal_request, () => this.sign_proposal_request.serialize(writer));
            if (this.has_signed_proposal_response)
                writer.writeMessage(6, this.signed_proposal_response, () => this.signed_proposal_response.serialize(writer));
            if (this.has_ping_request)
                writer.writeMessage(7, this.ping_request, () => this.ping_request.serialize(writer));
            if (this.has_ping_response)
                writer.writeMessage(8, this.ping_response, () => this.ping_response.serialize(writer));
            if (this.has_sign_bytes_request)
                writer.writeMessage(9, this.sign_bytes_request, () => this.sign_bytes_request.serialize(writer));
            if (this.has_sign_bytes_response)
                writer.writeMessage(10, this.sign_bytes_response, () => this.sign_bytes_response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pub_key_request, () => message.pub_key_request = PubKeyRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.pub_key_response, () => message.pub_key_response = PubKeyResponse.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.sign_vote_request, () => message.sign_vote_request = SignVoteRequest.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.signed_vote_response, () => message.signed_vote_response = SignedVoteResponse.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.sign_proposal_request, () => message.sign_proposal_request = SignProposalRequest.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.signed_proposal_response, () => message.signed_proposal_response = SignedProposalResponse.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.ping_request, () => message.ping_request = PingRequest.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.ping_response, () => message.ping_response = PingResponse.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.sign_bytes_request, () => message.sign_bytes_request = SignBytesRequest.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.sign_bytes_response, () => message.sign_bytes_response = SignBytesResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
}
