/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cometbft/types/v1beta1/events.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace cometbft.types.v1beta1 {
    export class EventDataRoundState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
            round?: number;
            step?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("round" in data && data.round != undefined) {
                    this.round = data.round;
                }
                if ("step" in data && data.step != undefined) {
                    this.step = data.step;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get round() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set round(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get step() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set step(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            height?: number;
            round?: number;
            step?: string;
        }): EventDataRoundState {
            const message = new EventDataRoundState({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.round != null) {
                message.round = data.round;
            }
            if (data.step != null) {
                message.step = data.step;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                round?: number;
                step?: string;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.round != null) {
                data.round = this.round;
            }
            if (this.step != null) {
                data.step = this.step;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (this.round != 0)
                writer.writeInt32(2, this.round);
            if (this.step.length)
                writer.writeString(3, this.step);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventDataRoundState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventDataRoundState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    case 2:
                        message.round = reader.readInt32();
                        break;
                    case 3:
                        message.step = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventDataRoundState {
            return EventDataRoundState.deserialize(bytes);
        }
    }
}
