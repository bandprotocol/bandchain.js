// source: cometbft/types/v1beta1/canonical.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var cometbft_types_v1beta1_types_pb = require('../../../cometbft/types/v1beta1/types_pb.js');
goog.object.extend(proto, cometbft_types_v1beta1_types_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.cometbft.types.v1beta1.CanonicalBlockID', null, global);
goog.exportSymbol('proto.cometbft.types.v1beta1.CanonicalPartSetHeader', null, global);
goog.exportSymbol('proto.cometbft.types.v1beta1.CanonicalProposal', null, global);
goog.exportSymbol('proto.cometbft.types.v1beta1.CanonicalVote', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1beta1.CanonicalBlockID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.types.v1beta1.CanonicalBlockID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1beta1.CanonicalBlockID.displayName = 'proto.cometbft.types.v1beta1.CanonicalBlockID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1beta1.CanonicalPartSetHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.types.v1beta1.CanonicalPartSetHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1beta1.CanonicalPartSetHeader.displayName = 'proto.cometbft.types.v1beta1.CanonicalPartSetHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1beta1.CanonicalProposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.types.v1beta1.CanonicalProposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1beta1.CanonicalProposal.displayName = 'proto.cometbft.types.v1beta1.CanonicalProposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1beta1.CanonicalVote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.types.v1beta1.CanonicalVote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1beta1.CanonicalVote.displayName = 'proto.cometbft.types.v1beta1.CanonicalVote';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1beta1.CanonicalBlockID.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1beta1.CanonicalBlockID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1beta1.CanonicalBlockID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.CanonicalBlockID.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    partSetHeader: (f = msg.getPartSetHeader()) && proto.cometbft.types.v1beta1.CanonicalPartSetHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1beta1.CanonicalBlockID}
 */
proto.cometbft.types.v1beta1.CanonicalBlockID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1beta1.CanonicalBlockID;
  return proto.cometbft.types.v1beta1.CanonicalBlockID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1beta1.CanonicalBlockID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1beta1.CanonicalBlockID}
 */
proto.cometbft.types.v1beta1.CanonicalBlockID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = new proto.cometbft.types.v1beta1.CanonicalPartSetHeader;
      reader.readMessage(value,proto.cometbft.types.v1beta1.CanonicalPartSetHeader.deserializeBinaryFromReader);
      msg.setPartSetHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.CanonicalBlockID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1beta1.CanonicalBlockID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1beta1.CanonicalBlockID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.CanonicalBlockID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPartSetHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cometbft.types.v1beta1.CanonicalPartSetHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.CanonicalBlockID.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.CanonicalBlockID.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.CanonicalBlockID.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.CanonicalBlockID} returns this
 */
proto.cometbft.types.v1beta1.CanonicalBlockID.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CanonicalPartSetHeader part_set_header = 2;
 * @return {?proto.cometbft.types.v1beta1.CanonicalPartSetHeader}
 */
proto.cometbft.types.v1beta1.CanonicalBlockID.prototype.getPartSetHeader = function() {
  return /** @type{?proto.cometbft.types.v1beta1.CanonicalPartSetHeader} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.types.v1beta1.CanonicalPartSetHeader, 2));
};


/**
 * @param {?proto.cometbft.types.v1beta1.CanonicalPartSetHeader|undefined} value
 * @return {!proto.cometbft.types.v1beta1.CanonicalBlockID} returns this
*/
proto.cometbft.types.v1beta1.CanonicalBlockID.prototype.setPartSetHeader = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.CanonicalBlockID} returns this
 */
proto.cometbft.types.v1beta1.CanonicalBlockID.prototype.clearPartSetHeader = function() {
  return this.setPartSetHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.CanonicalBlockID.prototype.hasPartSetHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1beta1.CanonicalPartSetHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1beta1.CanonicalPartSetHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1beta1.CanonicalPartSetHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.CanonicalPartSetHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1beta1.CanonicalPartSetHeader}
 */
proto.cometbft.types.v1beta1.CanonicalPartSetHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1beta1.CanonicalPartSetHeader;
  return proto.cometbft.types.v1beta1.CanonicalPartSetHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1beta1.CanonicalPartSetHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1beta1.CanonicalPartSetHeader}
 */
proto.cometbft.types.v1beta1.CanonicalPartSetHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotal(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.CanonicalPartSetHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1beta1.CanonicalPartSetHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1beta1.CanonicalPartSetHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.CanonicalPartSetHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 total = 1;
 * @return {number}
 */
proto.cometbft.types.v1beta1.CanonicalPartSetHeader.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1beta1.CanonicalPartSetHeader} returns this
 */
proto.cometbft.types.v1beta1.CanonicalPartSetHeader.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.CanonicalPartSetHeader.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.CanonicalPartSetHeader.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.CanonicalPartSetHeader.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.CanonicalPartSetHeader} returns this
 */
proto.cometbft.types.v1beta1.CanonicalPartSetHeader.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1beta1.CanonicalProposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1beta1.CanonicalProposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.CanonicalProposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    polRound: jspb.Message.getFieldWithDefault(msg, 4, 0),
    blockId: (f = msg.getBlockId()) && proto.cometbft.types.v1beta1.CanonicalBlockID.toObject(includeInstance, f),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    chainId: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1beta1.CanonicalProposal}
 */
proto.cometbft.types.v1beta1.CanonicalProposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1beta1.CanonicalProposal;
  return proto.cometbft.types.v1beta1.CanonicalProposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1beta1.CanonicalProposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1beta1.CanonicalProposal}
 */
proto.cometbft.types.v1beta1.CanonicalProposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cometbft.types.v1beta1.SignedMsgType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPolRound(value);
      break;
    case 5:
      var value = new proto.cometbft.types.v1beta1.CanonicalBlockID;
      reader.readMessage(value,proto.cometbft.types.v1beta1.CanonicalBlockID.deserializeBinaryFromReader);
      msg.setBlockId(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1beta1.CanonicalProposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1beta1.CanonicalProposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.CanonicalProposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeSfixed64(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeSfixed64(
      3,
      f
    );
  }
  f = message.getPolRound();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getBlockId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cometbft.types.v1beta1.CanonicalBlockID.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional SignedMsgType type = 1;
 * @return {!proto.cometbft.types.v1beta1.SignedMsgType}
 */
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.getType = function() {
  return /** @type {!proto.cometbft.types.v1beta1.SignedMsgType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.cometbft.types.v1beta1.SignedMsgType} value
 * @return {!proto.cometbft.types.v1beta1.CanonicalProposal} returns this
 */
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional sfixed64 height = 2;
 * @return {number}
 */
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1beta1.CanonicalProposal} returns this
 */
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional sfixed64 round = 3;
 * @return {number}
 */
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1beta1.CanonicalProposal} returns this
 */
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 pol_round = 4;
 * @return {number}
 */
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.getPolRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1beta1.CanonicalProposal} returns this
 */
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.setPolRound = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional CanonicalBlockID block_id = 5;
 * @return {?proto.cometbft.types.v1beta1.CanonicalBlockID}
 */
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.getBlockId = function() {
  return /** @type{?proto.cometbft.types.v1beta1.CanonicalBlockID} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.types.v1beta1.CanonicalBlockID, 5));
};


/**
 * @param {?proto.cometbft.types.v1beta1.CanonicalBlockID|undefined} value
 * @return {!proto.cometbft.types.v1beta1.CanonicalProposal} returns this
*/
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.setBlockId = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.CanonicalProposal} returns this
 */
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.clearBlockId = function() {
  return this.setBlockId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.hasBlockId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp timestamp = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.cometbft.types.v1beta1.CanonicalProposal} returns this
*/
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.CanonicalProposal} returns this
 */
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string chain_id = 7;
 * @return {string}
 */
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.cometbft.types.v1beta1.CanonicalProposal} returns this
 */
proto.cometbft.types.v1beta1.CanonicalProposal.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1beta1.CanonicalVote.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1beta1.CanonicalVote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1beta1.CanonicalVote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.CanonicalVote.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blockId: (f = msg.getBlockId()) && proto.cometbft.types.v1beta1.CanonicalBlockID.toObject(includeInstance, f),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    chainId: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1beta1.CanonicalVote}
 */
proto.cometbft.types.v1beta1.CanonicalVote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1beta1.CanonicalVote;
  return proto.cometbft.types.v1beta1.CanonicalVote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1beta1.CanonicalVote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1beta1.CanonicalVote}
 */
proto.cometbft.types.v1beta1.CanonicalVote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cometbft.types.v1beta1.SignedMsgType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setRound(value);
      break;
    case 4:
      var value = new proto.cometbft.types.v1beta1.CanonicalBlockID;
      reader.readMessage(value,proto.cometbft.types.v1beta1.CanonicalBlockID.deserializeBinaryFromReader);
      msg.setBlockId(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.CanonicalVote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1beta1.CanonicalVote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1beta1.CanonicalVote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.CanonicalVote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeSfixed64(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeSfixed64(
      3,
      f
    );
  }
  f = message.getBlockId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cometbft.types.v1beta1.CanonicalBlockID.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional SignedMsgType type = 1;
 * @return {!proto.cometbft.types.v1beta1.SignedMsgType}
 */
proto.cometbft.types.v1beta1.CanonicalVote.prototype.getType = function() {
  return /** @type {!proto.cometbft.types.v1beta1.SignedMsgType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.cometbft.types.v1beta1.SignedMsgType} value
 * @return {!proto.cometbft.types.v1beta1.CanonicalVote} returns this
 */
proto.cometbft.types.v1beta1.CanonicalVote.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional sfixed64 height = 2;
 * @return {number}
 */
proto.cometbft.types.v1beta1.CanonicalVote.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1beta1.CanonicalVote} returns this
 */
proto.cometbft.types.v1beta1.CanonicalVote.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional sfixed64 round = 3;
 * @return {number}
 */
proto.cometbft.types.v1beta1.CanonicalVote.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1beta1.CanonicalVote} returns this
 */
proto.cometbft.types.v1beta1.CanonicalVote.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional CanonicalBlockID block_id = 4;
 * @return {?proto.cometbft.types.v1beta1.CanonicalBlockID}
 */
proto.cometbft.types.v1beta1.CanonicalVote.prototype.getBlockId = function() {
  return /** @type{?proto.cometbft.types.v1beta1.CanonicalBlockID} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.types.v1beta1.CanonicalBlockID, 4));
};


/**
 * @param {?proto.cometbft.types.v1beta1.CanonicalBlockID|undefined} value
 * @return {!proto.cometbft.types.v1beta1.CanonicalVote} returns this
*/
proto.cometbft.types.v1beta1.CanonicalVote.prototype.setBlockId = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.CanonicalVote} returns this
 */
proto.cometbft.types.v1beta1.CanonicalVote.prototype.clearBlockId = function() {
  return this.setBlockId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.CanonicalVote.prototype.hasBlockId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp timestamp = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.cometbft.types.v1beta1.CanonicalVote.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.cometbft.types.v1beta1.CanonicalVote} returns this
*/
proto.cometbft.types.v1beta1.CanonicalVote.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.CanonicalVote} returns this
 */
proto.cometbft.types.v1beta1.CanonicalVote.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.CanonicalVote.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string chain_id = 6;
 * @return {string}
 */
proto.cometbft.types.v1beta1.CanonicalVote.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.cometbft.types.v1beta1.CanonicalVote} returns this
 */
proto.cometbft.types.v1beta1.CanonicalVote.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


goog.object.extend(exports, proto.cometbft.types.v1beta1);
