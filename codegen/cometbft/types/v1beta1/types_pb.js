// source: cometbft/types/v1beta1/types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var cometbft_crypto_v1_proof_pb = require('../../../cometbft/crypto/v1/proof_pb.js');
goog.object.extend(proto, cometbft_crypto_v1_proof_pb);
var cometbft_version_v1_types_pb = require('../../../cometbft/version/v1/types_pb.js');
goog.object.extend(proto, cometbft_version_v1_types_pb);
var cometbft_types_v1beta1_validator_pb = require('../../../cometbft/types/v1beta1/validator_pb.js');
goog.object.extend(proto, cometbft_types_v1beta1_validator_pb);
goog.exportSymbol('proto.cometbft.types.v1beta1.BlockID', null, global);
goog.exportSymbol('proto.cometbft.types.v1beta1.BlockMeta', null, global);
goog.exportSymbol('proto.cometbft.types.v1beta1.Commit', null, global);
goog.exportSymbol('proto.cometbft.types.v1beta1.CommitSig', null, global);
goog.exportSymbol('proto.cometbft.types.v1beta1.Data', null, global);
goog.exportSymbol('proto.cometbft.types.v1beta1.Header', null, global);
goog.exportSymbol('proto.cometbft.types.v1beta1.LightBlock', null, global);
goog.exportSymbol('proto.cometbft.types.v1beta1.Part', null, global);
goog.exportSymbol('proto.cometbft.types.v1beta1.PartSetHeader', null, global);
goog.exportSymbol('proto.cometbft.types.v1beta1.Proposal', null, global);
goog.exportSymbol('proto.cometbft.types.v1beta1.SignedHeader', null, global);
goog.exportSymbol('proto.cometbft.types.v1beta1.SignedMsgType', null, global);
goog.exportSymbol('proto.cometbft.types.v1beta1.TxProof', null, global);
goog.exportSymbol('proto.cometbft.types.v1beta1.Vote', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1beta1.PartSetHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.types.v1beta1.PartSetHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1beta1.PartSetHeader.displayName = 'proto.cometbft.types.v1beta1.PartSetHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1beta1.Part = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.types.v1beta1.Part, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1beta1.Part.displayName = 'proto.cometbft.types.v1beta1.Part';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1beta1.BlockID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.types.v1beta1.BlockID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1beta1.BlockID.displayName = 'proto.cometbft.types.v1beta1.BlockID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1beta1.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.types.v1beta1.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1beta1.Header.displayName = 'proto.cometbft.types.v1beta1.Header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1beta1.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cometbft.types.v1beta1.Data.repeatedFields_, null);
};
goog.inherits(proto.cometbft.types.v1beta1.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1beta1.Data.displayName = 'proto.cometbft.types.v1beta1.Data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1beta1.Vote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.types.v1beta1.Vote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1beta1.Vote.displayName = 'proto.cometbft.types.v1beta1.Vote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1beta1.Commit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cometbft.types.v1beta1.Commit.repeatedFields_, null);
};
goog.inherits(proto.cometbft.types.v1beta1.Commit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1beta1.Commit.displayName = 'proto.cometbft.types.v1beta1.Commit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1beta1.CommitSig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.types.v1beta1.CommitSig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1beta1.CommitSig.displayName = 'proto.cometbft.types.v1beta1.CommitSig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1beta1.Proposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.types.v1beta1.Proposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1beta1.Proposal.displayName = 'proto.cometbft.types.v1beta1.Proposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1beta1.SignedHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.types.v1beta1.SignedHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1beta1.SignedHeader.displayName = 'proto.cometbft.types.v1beta1.SignedHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1beta1.LightBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.types.v1beta1.LightBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1beta1.LightBlock.displayName = 'proto.cometbft.types.v1beta1.LightBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1beta1.BlockMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.types.v1beta1.BlockMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1beta1.BlockMeta.displayName = 'proto.cometbft.types.v1beta1.BlockMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1beta1.TxProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.types.v1beta1.TxProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1beta1.TxProof.displayName = 'proto.cometbft.types.v1beta1.TxProof';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1beta1.PartSetHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1beta1.PartSetHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1beta1.PartSetHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.PartSetHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1beta1.PartSetHeader}
 */
proto.cometbft.types.v1beta1.PartSetHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1beta1.PartSetHeader;
  return proto.cometbft.types.v1beta1.PartSetHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1beta1.PartSetHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1beta1.PartSetHeader}
 */
proto.cometbft.types.v1beta1.PartSetHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotal(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.PartSetHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1beta1.PartSetHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1beta1.PartSetHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.PartSetHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 total = 1;
 * @return {number}
 */
proto.cometbft.types.v1beta1.PartSetHeader.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1beta1.PartSetHeader} returns this
 */
proto.cometbft.types.v1beta1.PartSetHeader.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.PartSetHeader.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.PartSetHeader.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.PartSetHeader.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.PartSetHeader} returns this
 */
proto.cometbft.types.v1beta1.PartSetHeader.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1beta1.Part.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1beta1.Part.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1beta1.Part} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.Part.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bytes: msg.getBytes_asB64(),
    proof: (f = msg.getProof()) && cometbft_crypto_v1_proof_pb.Proof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1beta1.Part}
 */
proto.cometbft.types.v1beta1.Part.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1beta1.Part;
  return proto.cometbft.types.v1beta1.Part.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1beta1.Part} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1beta1.Part}
 */
proto.cometbft.types.v1beta1.Part.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytes(value);
      break;
    case 3:
      var value = new cometbft_crypto_v1_proof_pb.Proof;
      reader.readMessage(value,cometbft_crypto_v1_proof_pb.Proof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.Part.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1beta1.Part.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1beta1.Part} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.Part.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cometbft_crypto_v1_proof_pb.Proof.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.cometbft.types.v1beta1.Part.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1beta1.Part} returns this
 */
proto.cometbft.types.v1beta1.Part.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes bytes = 2;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.Part.prototype.getBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes bytes = 2;
 * This is a type-conversion wrapper around `getBytes()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.Part.prototype.getBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytes()));
};


/**
 * optional bytes bytes = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytes()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.Part.prototype.getBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.Part} returns this
 */
proto.cometbft.types.v1beta1.Part.prototype.setBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional cometbft.crypto.v1.Proof proof = 3;
 * @return {?proto.cometbft.crypto.v1.Proof}
 */
proto.cometbft.types.v1beta1.Part.prototype.getProof = function() {
  return /** @type{?proto.cometbft.crypto.v1.Proof} */ (
    jspb.Message.getWrapperField(this, cometbft_crypto_v1_proof_pb.Proof, 3));
};


/**
 * @param {?proto.cometbft.crypto.v1.Proof|undefined} value
 * @return {!proto.cometbft.types.v1beta1.Part} returns this
*/
proto.cometbft.types.v1beta1.Part.prototype.setProof = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.Part} returns this
 */
proto.cometbft.types.v1beta1.Part.prototype.clearProof = function() {
  return this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.Part.prototype.hasProof = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1beta1.BlockID.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1beta1.BlockID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1beta1.BlockID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.BlockID.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    partSetHeader: (f = msg.getPartSetHeader()) && proto.cometbft.types.v1beta1.PartSetHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1beta1.BlockID}
 */
proto.cometbft.types.v1beta1.BlockID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1beta1.BlockID;
  return proto.cometbft.types.v1beta1.BlockID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1beta1.BlockID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1beta1.BlockID}
 */
proto.cometbft.types.v1beta1.BlockID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = new proto.cometbft.types.v1beta1.PartSetHeader;
      reader.readMessage(value,proto.cometbft.types.v1beta1.PartSetHeader.deserializeBinaryFromReader);
      msg.setPartSetHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.BlockID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1beta1.BlockID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1beta1.BlockID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.BlockID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPartSetHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cometbft.types.v1beta1.PartSetHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.BlockID.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.BlockID.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.BlockID.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.BlockID} returns this
 */
proto.cometbft.types.v1beta1.BlockID.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional PartSetHeader part_set_header = 2;
 * @return {?proto.cometbft.types.v1beta1.PartSetHeader}
 */
proto.cometbft.types.v1beta1.BlockID.prototype.getPartSetHeader = function() {
  return /** @type{?proto.cometbft.types.v1beta1.PartSetHeader} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.types.v1beta1.PartSetHeader, 2));
};


/**
 * @param {?proto.cometbft.types.v1beta1.PartSetHeader|undefined} value
 * @return {!proto.cometbft.types.v1beta1.BlockID} returns this
*/
proto.cometbft.types.v1beta1.BlockID.prototype.setPartSetHeader = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.BlockID} returns this
 */
proto.cometbft.types.v1beta1.BlockID.prototype.clearPartSetHeader = function() {
  return this.setPartSetHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.BlockID.prototype.hasPartSetHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1beta1.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1beta1.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1beta1.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = msg.getVersion()) && cometbft_version_v1_types_pb.Consensus.toObject(includeInstance, f),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    lastBlockId: (f = msg.getLastBlockId()) && proto.cometbft.types.v1beta1.BlockID.toObject(includeInstance, f),
    lastCommitHash: msg.getLastCommitHash_asB64(),
    dataHash: msg.getDataHash_asB64(),
    validatorsHash: msg.getValidatorsHash_asB64(),
    nextValidatorsHash: msg.getNextValidatorsHash_asB64(),
    consensusHash: msg.getConsensusHash_asB64(),
    appHash: msg.getAppHash_asB64(),
    lastResultsHash: msg.getLastResultsHash_asB64(),
    evidenceHash: msg.getEvidenceHash_asB64(),
    proposerAddress: msg.getProposerAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1beta1.Header}
 */
proto.cometbft.types.v1beta1.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1beta1.Header;
  return proto.cometbft.types.v1beta1.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1beta1.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1beta1.Header}
 */
proto.cometbft.types.v1beta1.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cometbft_version_v1_types_pb.Consensus;
      reader.readMessage(value,cometbft_version_v1_types_pb.Consensus.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 5:
      var value = new proto.cometbft.types.v1beta1.BlockID;
      reader.readMessage(value,proto.cometbft.types.v1beta1.BlockID.deserializeBinaryFromReader);
      msg.setLastBlockId(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastCommitHash(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDataHash(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidatorsHash(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNextValidatorsHash(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConsensusHash(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppHash(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastResultsHash(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEvidenceHash(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProposerAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1beta1.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1beta1.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cometbft_version_v1_types_pb.Consensus.serializeBinaryToWriter
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastBlockId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cometbft.types.v1beta1.BlockID.serializeBinaryToWriter
    );
  }
  f = message.getLastCommitHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getDataHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getValidatorsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getNextValidatorsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getConsensusHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getAppHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getLastResultsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getEvidenceHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getProposerAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
};


/**
 * optional cometbft.version.v1.Consensus version = 1;
 * @return {?proto.cometbft.version.v1.Consensus}
 */
proto.cometbft.types.v1beta1.Header.prototype.getVersion = function() {
  return /** @type{?proto.cometbft.version.v1.Consensus} */ (
    jspb.Message.getWrapperField(this, cometbft_version_v1_types_pb.Consensus, 1));
};


/**
 * @param {?proto.cometbft.version.v1.Consensus|undefined} value
 * @return {!proto.cometbft.types.v1beta1.Header} returns this
*/
proto.cometbft.types.v1beta1.Header.prototype.setVersion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.Header} returns this
 */
proto.cometbft.types.v1beta1.Header.prototype.clearVersion = function() {
  return this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.Header.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.cometbft.types.v1beta1.Header.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cometbft.types.v1beta1.Header} returns this
 */
proto.cometbft.types.v1beta1.Header.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 height = 3;
 * @return {number}
 */
proto.cometbft.types.v1beta1.Header.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1beta1.Header} returns this
 */
proto.cometbft.types.v1beta1.Header.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.cometbft.types.v1beta1.Header.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.cometbft.types.v1beta1.Header} returns this
*/
proto.cometbft.types.v1beta1.Header.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.Header} returns this
 */
proto.cometbft.types.v1beta1.Header.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.Header.prototype.hasTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BlockID last_block_id = 5;
 * @return {?proto.cometbft.types.v1beta1.BlockID}
 */
proto.cometbft.types.v1beta1.Header.prototype.getLastBlockId = function() {
  return /** @type{?proto.cometbft.types.v1beta1.BlockID} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.types.v1beta1.BlockID, 5));
};


/**
 * @param {?proto.cometbft.types.v1beta1.BlockID|undefined} value
 * @return {!proto.cometbft.types.v1beta1.Header} returns this
*/
proto.cometbft.types.v1beta1.Header.prototype.setLastBlockId = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.Header} returns this
 */
proto.cometbft.types.v1beta1.Header.prototype.clearLastBlockId = function() {
  return this.setLastBlockId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.Header.prototype.hasLastBlockId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes last_commit_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.Header.prototype.getLastCommitHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes last_commit_hash = 6;
 * This is a type-conversion wrapper around `getLastCommitHash()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.Header.prototype.getLastCommitHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastCommitHash()));
};


/**
 * optional bytes last_commit_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastCommitHash()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.Header.prototype.getLastCommitHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastCommitHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.Header} returns this
 */
proto.cometbft.types.v1beta1.Header.prototype.setLastCommitHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes data_hash = 7;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.Header.prototype.getDataHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes data_hash = 7;
 * This is a type-conversion wrapper around `getDataHash()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.Header.prototype.getDataHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDataHash()));
};


/**
 * optional bytes data_hash = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDataHash()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.Header.prototype.getDataHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDataHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.Header} returns this
 */
proto.cometbft.types.v1beta1.Header.prototype.setDataHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes validators_hash = 8;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.Header.prototype.getValidatorsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes validators_hash = 8;
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.Header.prototype.getValidatorsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidatorsHash()));
};


/**
 * optional bytes validators_hash = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.Header.prototype.getValidatorsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidatorsHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.Header} returns this
 */
proto.cometbft.types.v1beta1.Header.prototype.setValidatorsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes next_validators_hash = 9;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.Header.prototype.getNextValidatorsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes next_validators_hash = 9;
 * This is a type-conversion wrapper around `getNextValidatorsHash()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.Header.prototype.getNextValidatorsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNextValidatorsHash()));
};


/**
 * optional bytes next_validators_hash = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNextValidatorsHash()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.Header.prototype.getNextValidatorsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNextValidatorsHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.Header} returns this
 */
proto.cometbft.types.v1beta1.Header.prototype.setNextValidatorsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes consensus_hash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.Header.prototype.getConsensusHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes consensus_hash = 10;
 * This is a type-conversion wrapper around `getConsensusHash()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.Header.prototype.getConsensusHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConsensusHash()));
};


/**
 * optional bytes consensus_hash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConsensusHash()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.Header.prototype.getConsensusHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConsensusHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.Header} returns this
 */
proto.cometbft.types.v1beta1.Header.prototype.setConsensusHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes app_hash = 11;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.Header.prototype.getAppHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes app_hash = 11;
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.Header.prototype.getAppHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppHash()));
};


/**
 * optional bytes app_hash = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.Header.prototype.getAppHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.Header} returns this
 */
proto.cometbft.types.v1beta1.Header.prototype.setAppHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional bytes last_results_hash = 12;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.Header.prototype.getLastResultsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes last_results_hash = 12;
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.Header.prototype.getLastResultsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastResultsHash()));
};


/**
 * optional bytes last_results_hash = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.Header.prototype.getLastResultsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastResultsHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.Header} returns this
 */
proto.cometbft.types.v1beta1.Header.prototype.setLastResultsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * optional bytes evidence_hash = 13;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.Header.prototype.getEvidenceHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes evidence_hash = 13;
 * This is a type-conversion wrapper around `getEvidenceHash()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.Header.prototype.getEvidenceHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEvidenceHash()));
};


/**
 * optional bytes evidence_hash = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvidenceHash()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.Header.prototype.getEvidenceHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEvidenceHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.Header} returns this
 */
proto.cometbft.types.v1beta1.Header.prototype.setEvidenceHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional bytes proposer_address = 14;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.Header.prototype.getProposerAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes proposer_address = 14;
 * This is a type-conversion wrapper around `getProposerAddress()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.Header.prototype.getProposerAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProposerAddress()));
};


/**
 * optional bytes proposer_address = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProposerAddress()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.Header.prototype.getProposerAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProposerAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.Header} returns this
 */
proto.cometbft.types.v1beta1.Header.prototype.setProposerAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cometbft.types.v1beta1.Data.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1beta1.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1beta1.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1beta1.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    txsList: msg.getTxsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1beta1.Data}
 */
proto.cometbft.types.v1beta1.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1beta1.Data;
  return proto.cometbft.types.v1beta1.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1beta1.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1beta1.Data}
 */
proto.cometbft.types.v1beta1.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTxs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1beta1.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1beta1.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes txs = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.cometbft.types.v1beta1.Data.prototype.getTxsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes txs = 1;
 * This is a type-conversion wrapper around `getTxsList()`
 * @return {!Array<string>}
 */
proto.cometbft.types.v1beta1.Data.prototype.getTxsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTxsList()));
};


/**
 * repeated bytes txs = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.cometbft.types.v1beta1.Data.prototype.getTxsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTxsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.cometbft.types.v1beta1.Data} returns this
 */
proto.cometbft.types.v1beta1.Data.prototype.setTxsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.cometbft.types.v1beta1.Data} returns this
 */
proto.cometbft.types.v1beta1.Data.prototype.addTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cometbft.types.v1beta1.Data} returns this
 */
proto.cometbft.types.v1beta1.Data.prototype.clearTxsList = function() {
  return this.setTxsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1beta1.Vote.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1beta1.Vote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1beta1.Vote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.Vote.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blockId: (f = msg.getBlockId()) && proto.cometbft.types.v1beta1.BlockID.toObject(includeInstance, f),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    validatorAddress: msg.getValidatorAddress_asB64(),
    validatorIndex: jspb.Message.getFieldWithDefault(msg, 7, 0),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1beta1.Vote}
 */
proto.cometbft.types.v1beta1.Vote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1beta1.Vote;
  return proto.cometbft.types.v1beta1.Vote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1beta1.Vote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1beta1.Vote}
 */
proto.cometbft.types.v1beta1.Vote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cometbft.types.v1beta1.SignedMsgType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 4:
      var value = new proto.cometbft.types.v1beta1.BlockID;
      reader.readMessage(value,proto.cometbft.types.v1beta1.BlockID.deserializeBinaryFromReader);
      msg.setBlockId(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidatorAddress(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValidatorIndex(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.Vote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1beta1.Vote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1beta1.Vote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.Vote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getBlockId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cometbft.types.v1beta1.BlockID.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getValidatorAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getValidatorIndex();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional SignedMsgType type = 1;
 * @return {!proto.cometbft.types.v1beta1.SignedMsgType}
 */
proto.cometbft.types.v1beta1.Vote.prototype.getType = function() {
  return /** @type {!proto.cometbft.types.v1beta1.SignedMsgType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.cometbft.types.v1beta1.SignedMsgType} value
 * @return {!proto.cometbft.types.v1beta1.Vote} returns this
 */
proto.cometbft.types.v1beta1.Vote.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 height = 2;
 * @return {number}
 */
proto.cometbft.types.v1beta1.Vote.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1beta1.Vote} returns this
 */
proto.cometbft.types.v1beta1.Vote.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 round = 3;
 * @return {number}
 */
proto.cometbft.types.v1beta1.Vote.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1beta1.Vote} returns this
 */
proto.cometbft.types.v1beta1.Vote.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional BlockID block_id = 4;
 * @return {?proto.cometbft.types.v1beta1.BlockID}
 */
proto.cometbft.types.v1beta1.Vote.prototype.getBlockId = function() {
  return /** @type{?proto.cometbft.types.v1beta1.BlockID} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.types.v1beta1.BlockID, 4));
};


/**
 * @param {?proto.cometbft.types.v1beta1.BlockID|undefined} value
 * @return {!proto.cometbft.types.v1beta1.Vote} returns this
*/
proto.cometbft.types.v1beta1.Vote.prototype.setBlockId = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.Vote} returns this
 */
proto.cometbft.types.v1beta1.Vote.prototype.clearBlockId = function() {
  return this.setBlockId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.Vote.prototype.hasBlockId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp timestamp = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.cometbft.types.v1beta1.Vote.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.cometbft.types.v1beta1.Vote} returns this
*/
proto.cometbft.types.v1beta1.Vote.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.Vote} returns this
 */
proto.cometbft.types.v1beta1.Vote.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.Vote.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes validator_address = 6;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.Vote.prototype.getValidatorAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes validator_address = 6;
 * This is a type-conversion wrapper around `getValidatorAddress()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.Vote.prototype.getValidatorAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidatorAddress()));
};


/**
 * optional bytes validator_address = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorAddress()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.Vote.prototype.getValidatorAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidatorAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.Vote} returns this
 */
proto.cometbft.types.v1beta1.Vote.prototype.setValidatorAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional int32 validator_index = 7;
 * @return {number}
 */
proto.cometbft.types.v1beta1.Vote.prototype.getValidatorIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1beta1.Vote} returns this
 */
proto.cometbft.types.v1beta1.Vote.prototype.setValidatorIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bytes signature = 8;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.Vote.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes signature = 8;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.Vote.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.Vote.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.Vote} returns this
 */
proto.cometbft.types.v1beta1.Vote.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cometbft.types.v1beta1.Commit.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1beta1.Commit.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1beta1.Commit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1beta1.Commit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.Commit.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    round: jspb.Message.getFieldWithDefault(msg, 2, 0),
    blockId: (f = msg.getBlockId()) && proto.cometbft.types.v1beta1.BlockID.toObject(includeInstance, f),
    signaturesList: jspb.Message.toObjectList(msg.getSignaturesList(),
    proto.cometbft.types.v1beta1.CommitSig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1beta1.Commit}
 */
proto.cometbft.types.v1beta1.Commit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1beta1.Commit;
  return proto.cometbft.types.v1beta1.Commit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1beta1.Commit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1beta1.Commit}
 */
proto.cometbft.types.v1beta1.Commit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 3:
      var value = new proto.cometbft.types.v1beta1.BlockID;
      reader.readMessage(value,proto.cometbft.types.v1beta1.BlockID.deserializeBinaryFromReader);
      msg.setBlockId(value);
      break;
    case 4:
      var value = new proto.cometbft.types.v1beta1.CommitSig;
      reader.readMessage(value,proto.cometbft.types.v1beta1.CommitSig.deserializeBinaryFromReader);
      msg.addSignatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.Commit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1beta1.Commit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1beta1.Commit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.Commit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getBlockId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cometbft.types.v1beta1.BlockID.serializeBinaryToWriter
    );
  }
  f = message.getSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.cometbft.types.v1beta1.CommitSig.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.cometbft.types.v1beta1.Commit.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1beta1.Commit} returns this
 */
proto.cometbft.types.v1beta1.Commit.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 round = 2;
 * @return {number}
 */
proto.cometbft.types.v1beta1.Commit.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1beta1.Commit} returns this
 */
proto.cometbft.types.v1beta1.Commit.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional BlockID block_id = 3;
 * @return {?proto.cometbft.types.v1beta1.BlockID}
 */
proto.cometbft.types.v1beta1.Commit.prototype.getBlockId = function() {
  return /** @type{?proto.cometbft.types.v1beta1.BlockID} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.types.v1beta1.BlockID, 3));
};


/**
 * @param {?proto.cometbft.types.v1beta1.BlockID|undefined} value
 * @return {!proto.cometbft.types.v1beta1.Commit} returns this
*/
proto.cometbft.types.v1beta1.Commit.prototype.setBlockId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.Commit} returns this
 */
proto.cometbft.types.v1beta1.Commit.prototype.clearBlockId = function() {
  return this.setBlockId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.Commit.prototype.hasBlockId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated CommitSig signatures = 4;
 * @return {!Array<!proto.cometbft.types.v1beta1.CommitSig>}
 */
proto.cometbft.types.v1beta1.Commit.prototype.getSignaturesList = function() {
  return /** @type{!Array<!proto.cometbft.types.v1beta1.CommitSig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cometbft.types.v1beta1.CommitSig, 4));
};


/**
 * @param {!Array<!proto.cometbft.types.v1beta1.CommitSig>} value
 * @return {!proto.cometbft.types.v1beta1.Commit} returns this
*/
proto.cometbft.types.v1beta1.Commit.prototype.setSignaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.cometbft.types.v1beta1.CommitSig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cometbft.types.v1beta1.CommitSig}
 */
proto.cometbft.types.v1beta1.Commit.prototype.addSignatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.cometbft.types.v1beta1.CommitSig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cometbft.types.v1beta1.Commit} returns this
 */
proto.cometbft.types.v1beta1.Commit.prototype.clearSignaturesList = function() {
  return this.setSignaturesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1beta1.CommitSig.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1beta1.CommitSig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1beta1.CommitSig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.CommitSig.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockIdFlag: jspb.Message.getFieldWithDefault(msg, 1, 0),
    validatorAddress: msg.getValidatorAddress_asB64(),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1beta1.CommitSig}
 */
proto.cometbft.types.v1beta1.CommitSig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1beta1.CommitSig;
  return proto.cometbft.types.v1beta1.CommitSig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1beta1.CommitSig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1beta1.CommitSig}
 */
proto.cometbft.types.v1beta1.CommitSig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cometbft.types.v1beta1.BlockIDFlag} */ (reader.readEnum());
      msg.setBlockIdFlag(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidatorAddress(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.CommitSig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1beta1.CommitSig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1beta1.CommitSig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.CommitSig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockIdFlag();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValidatorAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional BlockIDFlag block_id_flag = 1;
 * @return {!proto.cometbft.types.v1beta1.BlockIDFlag}
 */
proto.cometbft.types.v1beta1.CommitSig.prototype.getBlockIdFlag = function() {
  return /** @type {!proto.cometbft.types.v1beta1.BlockIDFlag} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.cometbft.types.v1beta1.BlockIDFlag} value
 * @return {!proto.cometbft.types.v1beta1.CommitSig} returns this
 */
proto.cometbft.types.v1beta1.CommitSig.prototype.setBlockIdFlag = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes validator_address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.CommitSig.prototype.getValidatorAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes validator_address = 2;
 * This is a type-conversion wrapper around `getValidatorAddress()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.CommitSig.prototype.getValidatorAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidatorAddress()));
};


/**
 * optional bytes validator_address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorAddress()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.CommitSig.prototype.getValidatorAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidatorAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.CommitSig} returns this
 */
proto.cometbft.types.v1beta1.CommitSig.prototype.setValidatorAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.cometbft.types.v1beta1.CommitSig.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.cometbft.types.v1beta1.CommitSig} returns this
*/
proto.cometbft.types.v1beta1.CommitSig.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.CommitSig} returns this
 */
proto.cometbft.types.v1beta1.CommitSig.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.CommitSig.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes signature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.CommitSig.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes signature = 4;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.CommitSig.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.CommitSig.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.CommitSig} returns this
 */
proto.cometbft.types.v1beta1.CommitSig.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1beta1.Proposal.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1beta1.Proposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1beta1.Proposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.Proposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    polRound: jspb.Message.getFieldWithDefault(msg, 4, 0),
    blockId: (f = msg.getBlockId()) && proto.cometbft.types.v1beta1.BlockID.toObject(includeInstance, f),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1beta1.Proposal}
 */
proto.cometbft.types.v1beta1.Proposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1beta1.Proposal;
  return proto.cometbft.types.v1beta1.Proposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1beta1.Proposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1beta1.Proposal}
 */
proto.cometbft.types.v1beta1.Proposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cometbft.types.v1beta1.SignedMsgType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPolRound(value);
      break;
    case 5:
      var value = new proto.cometbft.types.v1beta1.BlockID;
      reader.readMessage(value,proto.cometbft.types.v1beta1.BlockID.deserializeBinaryFromReader);
      msg.setBlockId(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.Proposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1beta1.Proposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1beta1.Proposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.Proposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPolRound();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getBlockId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cometbft.types.v1beta1.BlockID.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional SignedMsgType type = 1;
 * @return {!proto.cometbft.types.v1beta1.SignedMsgType}
 */
proto.cometbft.types.v1beta1.Proposal.prototype.getType = function() {
  return /** @type {!proto.cometbft.types.v1beta1.SignedMsgType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.cometbft.types.v1beta1.SignedMsgType} value
 * @return {!proto.cometbft.types.v1beta1.Proposal} returns this
 */
proto.cometbft.types.v1beta1.Proposal.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 height = 2;
 * @return {number}
 */
proto.cometbft.types.v1beta1.Proposal.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1beta1.Proposal} returns this
 */
proto.cometbft.types.v1beta1.Proposal.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 round = 3;
 * @return {number}
 */
proto.cometbft.types.v1beta1.Proposal.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1beta1.Proposal} returns this
 */
proto.cometbft.types.v1beta1.Proposal.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 pol_round = 4;
 * @return {number}
 */
proto.cometbft.types.v1beta1.Proposal.prototype.getPolRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1beta1.Proposal} returns this
 */
proto.cometbft.types.v1beta1.Proposal.prototype.setPolRound = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional BlockID block_id = 5;
 * @return {?proto.cometbft.types.v1beta1.BlockID}
 */
proto.cometbft.types.v1beta1.Proposal.prototype.getBlockId = function() {
  return /** @type{?proto.cometbft.types.v1beta1.BlockID} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.types.v1beta1.BlockID, 5));
};


/**
 * @param {?proto.cometbft.types.v1beta1.BlockID|undefined} value
 * @return {!proto.cometbft.types.v1beta1.Proposal} returns this
*/
proto.cometbft.types.v1beta1.Proposal.prototype.setBlockId = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.Proposal} returns this
 */
proto.cometbft.types.v1beta1.Proposal.prototype.clearBlockId = function() {
  return this.setBlockId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.Proposal.prototype.hasBlockId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp timestamp = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.cometbft.types.v1beta1.Proposal.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.cometbft.types.v1beta1.Proposal} returns this
*/
proto.cometbft.types.v1beta1.Proposal.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.Proposal} returns this
 */
proto.cometbft.types.v1beta1.Proposal.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.Proposal.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes signature = 7;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.Proposal.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes signature = 7;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.Proposal.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.Proposal.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.Proposal} returns this
 */
proto.cometbft.types.v1beta1.Proposal.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1beta1.SignedHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1beta1.SignedHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1beta1.SignedHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.SignedHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.cometbft.types.v1beta1.Header.toObject(includeInstance, f),
    commit: (f = msg.getCommit()) && proto.cometbft.types.v1beta1.Commit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1beta1.SignedHeader}
 */
proto.cometbft.types.v1beta1.SignedHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1beta1.SignedHeader;
  return proto.cometbft.types.v1beta1.SignedHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1beta1.SignedHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1beta1.SignedHeader}
 */
proto.cometbft.types.v1beta1.SignedHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cometbft.types.v1beta1.Header;
      reader.readMessage(value,proto.cometbft.types.v1beta1.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.cometbft.types.v1beta1.Commit;
      reader.readMessage(value,proto.cometbft.types.v1beta1.Commit.deserializeBinaryFromReader);
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.SignedHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1beta1.SignedHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1beta1.SignedHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.SignedHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cometbft.types.v1beta1.Header.serializeBinaryToWriter
    );
  }
  f = message.getCommit();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cometbft.types.v1beta1.Commit.serializeBinaryToWriter
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.cometbft.types.v1beta1.Header}
 */
proto.cometbft.types.v1beta1.SignedHeader.prototype.getHeader = function() {
  return /** @type{?proto.cometbft.types.v1beta1.Header} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.types.v1beta1.Header, 1));
};


/**
 * @param {?proto.cometbft.types.v1beta1.Header|undefined} value
 * @return {!proto.cometbft.types.v1beta1.SignedHeader} returns this
*/
proto.cometbft.types.v1beta1.SignedHeader.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.SignedHeader} returns this
 */
proto.cometbft.types.v1beta1.SignedHeader.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.SignedHeader.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Commit commit = 2;
 * @return {?proto.cometbft.types.v1beta1.Commit}
 */
proto.cometbft.types.v1beta1.SignedHeader.prototype.getCommit = function() {
  return /** @type{?proto.cometbft.types.v1beta1.Commit} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.types.v1beta1.Commit, 2));
};


/**
 * @param {?proto.cometbft.types.v1beta1.Commit|undefined} value
 * @return {!proto.cometbft.types.v1beta1.SignedHeader} returns this
*/
proto.cometbft.types.v1beta1.SignedHeader.prototype.setCommit = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.SignedHeader} returns this
 */
proto.cometbft.types.v1beta1.SignedHeader.prototype.clearCommit = function() {
  return this.setCommit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.SignedHeader.prototype.hasCommit = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1beta1.LightBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1beta1.LightBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1beta1.LightBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.LightBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    signedHeader: (f = msg.getSignedHeader()) && proto.cometbft.types.v1beta1.SignedHeader.toObject(includeInstance, f),
    validatorSet: (f = msg.getValidatorSet()) && cometbft_types_v1beta1_validator_pb.ValidatorSet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1beta1.LightBlock}
 */
proto.cometbft.types.v1beta1.LightBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1beta1.LightBlock;
  return proto.cometbft.types.v1beta1.LightBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1beta1.LightBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1beta1.LightBlock}
 */
proto.cometbft.types.v1beta1.LightBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cometbft.types.v1beta1.SignedHeader;
      reader.readMessage(value,proto.cometbft.types.v1beta1.SignedHeader.deserializeBinaryFromReader);
      msg.setSignedHeader(value);
      break;
    case 2:
      var value = new cometbft_types_v1beta1_validator_pb.ValidatorSet;
      reader.readMessage(value,cometbft_types_v1beta1_validator_pb.ValidatorSet.deserializeBinaryFromReader);
      msg.setValidatorSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.LightBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1beta1.LightBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1beta1.LightBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.LightBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignedHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cometbft.types.v1beta1.SignedHeader.serializeBinaryToWriter
    );
  }
  f = message.getValidatorSet();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cometbft_types_v1beta1_validator_pb.ValidatorSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional SignedHeader signed_header = 1;
 * @return {?proto.cometbft.types.v1beta1.SignedHeader}
 */
proto.cometbft.types.v1beta1.LightBlock.prototype.getSignedHeader = function() {
  return /** @type{?proto.cometbft.types.v1beta1.SignedHeader} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.types.v1beta1.SignedHeader, 1));
};


/**
 * @param {?proto.cometbft.types.v1beta1.SignedHeader|undefined} value
 * @return {!proto.cometbft.types.v1beta1.LightBlock} returns this
*/
proto.cometbft.types.v1beta1.LightBlock.prototype.setSignedHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.LightBlock} returns this
 */
proto.cometbft.types.v1beta1.LightBlock.prototype.clearSignedHeader = function() {
  return this.setSignedHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.LightBlock.prototype.hasSignedHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ValidatorSet validator_set = 2;
 * @return {?proto.cometbft.types.v1beta1.ValidatorSet}
 */
proto.cometbft.types.v1beta1.LightBlock.prototype.getValidatorSet = function() {
  return /** @type{?proto.cometbft.types.v1beta1.ValidatorSet} */ (
    jspb.Message.getWrapperField(this, cometbft_types_v1beta1_validator_pb.ValidatorSet, 2));
};


/**
 * @param {?proto.cometbft.types.v1beta1.ValidatorSet|undefined} value
 * @return {!proto.cometbft.types.v1beta1.LightBlock} returns this
*/
proto.cometbft.types.v1beta1.LightBlock.prototype.setValidatorSet = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.LightBlock} returns this
 */
proto.cometbft.types.v1beta1.LightBlock.prototype.clearValidatorSet = function() {
  return this.setValidatorSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.LightBlock.prototype.hasValidatorSet = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1beta1.BlockMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1beta1.BlockMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1beta1.BlockMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.BlockMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockId: (f = msg.getBlockId()) && proto.cometbft.types.v1beta1.BlockID.toObject(includeInstance, f),
    blockSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    header: (f = msg.getHeader()) && proto.cometbft.types.v1beta1.Header.toObject(includeInstance, f),
    numTxs: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1beta1.BlockMeta}
 */
proto.cometbft.types.v1beta1.BlockMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1beta1.BlockMeta;
  return proto.cometbft.types.v1beta1.BlockMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1beta1.BlockMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1beta1.BlockMeta}
 */
proto.cometbft.types.v1beta1.BlockMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cometbft.types.v1beta1.BlockID;
      reader.readMessage(value,proto.cometbft.types.v1beta1.BlockID.deserializeBinaryFromReader);
      msg.setBlockId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockSize(value);
      break;
    case 3:
      var value = new proto.cometbft.types.v1beta1.Header;
      reader.readMessage(value,proto.cometbft.types.v1beta1.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumTxs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.BlockMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1beta1.BlockMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1beta1.BlockMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.BlockMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cometbft.types.v1beta1.BlockID.serializeBinaryToWriter
    );
  }
  f = message.getBlockSize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cometbft.types.v1beta1.Header.serializeBinaryToWriter
    );
  }
  f = message.getNumTxs();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional BlockID block_id = 1;
 * @return {?proto.cometbft.types.v1beta1.BlockID}
 */
proto.cometbft.types.v1beta1.BlockMeta.prototype.getBlockId = function() {
  return /** @type{?proto.cometbft.types.v1beta1.BlockID} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.types.v1beta1.BlockID, 1));
};


/**
 * @param {?proto.cometbft.types.v1beta1.BlockID|undefined} value
 * @return {!proto.cometbft.types.v1beta1.BlockMeta} returns this
*/
proto.cometbft.types.v1beta1.BlockMeta.prototype.setBlockId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.BlockMeta} returns this
 */
proto.cometbft.types.v1beta1.BlockMeta.prototype.clearBlockId = function() {
  return this.setBlockId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.BlockMeta.prototype.hasBlockId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 block_size = 2;
 * @return {number}
 */
proto.cometbft.types.v1beta1.BlockMeta.prototype.getBlockSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1beta1.BlockMeta} returns this
 */
proto.cometbft.types.v1beta1.BlockMeta.prototype.setBlockSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Header header = 3;
 * @return {?proto.cometbft.types.v1beta1.Header}
 */
proto.cometbft.types.v1beta1.BlockMeta.prototype.getHeader = function() {
  return /** @type{?proto.cometbft.types.v1beta1.Header} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.types.v1beta1.Header, 3));
};


/**
 * @param {?proto.cometbft.types.v1beta1.Header|undefined} value
 * @return {!proto.cometbft.types.v1beta1.BlockMeta} returns this
*/
proto.cometbft.types.v1beta1.BlockMeta.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.BlockMeta} returns this
 */
proto.cometbft.types.v1beta1.BlockMeta.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.BlockMeta.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 num_txs = 4;
 * @return {number}
 */
proto.cometbft.types.v1beta1.BlockMeta.prototype.getNumTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1beta1.BlockMeta} returns this
 */
proto.cometbft.types.v1beta1.BlockMeta.prototype.setNumTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1beta1.TxProof.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1beta1.TxProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1beta1.TxProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.TxProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    rootHash: msg.getRootHash_asB64(),
    data: msg.getData_asB64(),
    proof: (f = msg.getProof()) && cometbft_crypto_v1_proof_pb.Proof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1beta1.TxProof}
 */
proto.cometbft.types.v1beta1.TxProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1beta1.TxProof;
  return proto.cometbft.types.v1beta1.TxProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1beta1.TxProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1beta1.TxProof}
 */
proto.cometbft.types.v1beta1.TxProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRootHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var value = new cometbft_crypto_v1_proof_pb.Proof;
      reader.readMessage(value,cometbft_crypto_v1_proof_pb.Proof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.TxProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1beta1.TxProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1beta1.TxProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1beta1.TxProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRootHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cometbft_crypto_v1_proof_pb.Proof.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes root_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.TxProof.prototype.getRootHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes root_hash = 1;
 * This is a type-conversion wrapper around `getRootHash()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.TxProof.prototype.getRootHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRootHash()));
};


/**
 * optional bytes root_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRootHash()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.TxProof.prototype.getRootHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRootHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.TxProof} returns this
 */
proto.cometbft.types.v1beta1.TxProof.prototype.setRootHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1beta1.TxProof.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.cometbft.types.v1beta1.TxProof.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1beta1.TxProof.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1beta1.TxProof} returns this
 */
proto.cometbft.types.v1beta1.TxProof.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional cometbft.crypto.v1.Proof proof = 3;
 * @return {?proto.cometbft.crypto.v1.Proof}
 */
proto.cometbft.types.v1beta1.TxProof.prototype.getProof = function() {
  return /** @type{?proto.cometbft.crypto.v1.Proof} */ (
    jspb.Message.getWrapperField(this, cometbft_crypto_v1_proof_pb.Proof, 3));
};


/**
 * @param {?proto.cometbft.crypto.v1.Proof|undefined} value
 * @return {!proto.cometbft.types.v1beta1.TxProof} returns this
*/
proto.cometbft.types.v1beta1.TxProof.prototype.setProof = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1beta1.TxProof} returns this
 */
proto.cometbft.types.v1beta1.TxProof.prototype.clearProof = function() {
  return this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1beta1.TxProof.prototype.hasProof = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.cometbft.types.v1beta1.SignedMsgType = {
  SIGNED_MSG_TYPE_UNKNOWN: 0,
  SIGNED_MSG_TYPE_PREVOTE: 1,
  SIGNED_MSG_TYPE_PRECOMMIT: 2,
  SIGNED_MSG_TYPE_PROPOSAL: 32
};

goog.object.extend(exports, proto.cometbft.types.v1beta1);
