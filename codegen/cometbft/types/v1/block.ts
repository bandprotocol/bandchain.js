/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cometbft/types/v1/block.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./types";
import * as dependency_2 from "./evidence";
import * as dependency_3 from "./../../../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace cometbft.types.v1 {
    export class Block extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            header?: dependency_1.cometbft.types.v1.Header;
            data?: dependency_1.cometbft.types.v1.Data;
            evidence?: dependency_2.cometbft.types.v1.EvidenceList;
            last_commit?: dependency_1.cometbft.types.v1.Commit;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("evidence" in data && data.evidence != undefined) {
                    this.evidence = data.evidence;
                }
                if ("last_commit" in data && data.last_commit != undefined) {
                    this.last_commit = data.last_commit;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, dependency_1.cometbft.types.v1.Header, 1) as dependency_1.cometbft.types.v1.Header;
        }
        set header(value: dependency_1.cometbft.types.v1.Header) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(this, dependency_1.cometbft.types.v1.Data, 2) as dependency_1.cometbft.types.v1.Data;
        }
        set data(value: dependency_1.cometbft.types.v1.Data) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get evidence() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.types.v1.EvidenceList, 3) as dependency_2.cometbft.types.v1.EvidenceList;
        }
        set evidence(value: dependency_2.cometbft.types.v1.EvidenceList) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_evidence() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get last_commit() {
            return pb_1.Message.getWrapperField(this, dependency_1.cometbft.types.v1.Commit, 4) as dependency_1.cometbft.types.v1.Commit;
        }
        set last_commit(value: dependency_1.cometbft.types.v1.Commit) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_last_commit() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof dependency_1.cometbft.types.v1.Header.prototype.toObject>;
            data?: ReturnType<typeof dependency_1.cometbft.types.v1.Data.prototype.toObject>;
            evidence?: ReturnType<typeof dependency_2.cometbft.types.v1.EvidenceList.prototype.toObject>;
            last_commit?: ReturnType<typeof dependency_1.cometbft.types.v1.Commit.prototype.toObject>;
        }): Block {
            const message = new Block({});
            if (data.header != null) {
                message.header = dependency_1.cometbft.types.v1.Header.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = dependency_1.cometbft.types.v1.Data.fromObject(data.data);
            }
            if (data.evidence != null) {
                message.evidence = dependency_2.cometbft.types.v1.EvidenceList.fromObject(data.evidence);
            }
            if (data.last_commit != null) {
                message.last_commit = dependency_1.cometbft.types.v1.Commit.fromObject(data.last_commit);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof dependency_1.cometbft.types.v1.Header.prototype.toObject>;
                data?: ReturnType<typeof dependency_1.cometbft.types.v1.Data.prototype.toObject>;
                evidence?: ReturnType<typeof dependency_2.cometbft.types.v1.EvidenceList.prototype.toObject>;
                last_commit?: ReturnType<typeof dependency_1.cometbft.types.v1.Commit.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.evidence != null) {
                data.evidence = this.evidence.toObject();
            }
            if (this.last_commit != null) {
                data.last_commit = this.last_commit.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data)
                writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (this.has_evidence)
                writer.writeMessage(3, this.evidence, () => this.evidence.serialize(writer));
            if (this.has_last_commit)
                writer.writeMessage(4, this.last_commit, () => this.last_commit.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Block {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Block();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.header, () => message.header = dependency_1.cometbft.types.v1.Header.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.data, () => message.data = dependency_1.cometbft.types.v1.Data.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.evidence, () => message.evidence = dependency_2.cometbft.types.v1.EvidenceList.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.last_commit, () => message.last_commit = dependency_1.cometbft.types.v1.Commit.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Block {
            return Block.deserialize(bytes);
        }
    }
}
