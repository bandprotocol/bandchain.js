// source: cometbft/types/v1/validator.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var cometbft_crypto_v1_keys_pb = require('../../../cometbft/crypto/v1/keys_pb.js');
goog.object.extend(proto, cometbft_crypto_v1_keys_pb);
var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
goog.exportSymbol('proto.cometbft.types.v1.BlockIDFlag', null, global);
goog.exportSymbol('proto.cometbft.types.v1.SimpleValidator', null, global);
goog.exportSymbol('proto.cometbft.types.v1.Validator', null, global);
goog.exportSymbol('proto.cometbft.types.v1.ValidatorSet', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1.ValidatorSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cometbft.types.v1.ValidatorSet.repeatedFields_, null);
};
goog.inherits(proto.cometbft.types.v1.ValidatorSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1.ValidatorSet.displayName = 'proto.cometbft.types.v1.ValidatorSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1.Validator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.types.v1.Validator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1.Validator.displayName = 'proto.cometbft.types.v1.Validator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cometbft.types.v1.SimpleValidator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cometbft.types.v1.SimpleValidator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cometbft.types.v1.SimpleValidator.displayName = 'proto.cometbft.types.v1.SimpleValidator';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cometbft.types.v1.ValidatorSet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1.ValidatorSet.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1.ValidatorSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1.ValidatorSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1.ValidatorSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    validatorsList: jspb.Message.toObjectList(msg.getValidatorsList(),
    proto.cometbft.types.v1.Validator.toObject, includeInstance),
    proposer: (f = msg.getProposer()) && proto.cometbft.types.v1.Validator.toObject(includeInstance, f),
    totalVotingPower: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1.ValidatorSet}
 */
proto.cometbft.types.v1.ValidatorSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1.ValidatorSet;
  return proto.cometbft.types.v1.ValidatorSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1.ValidatorSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1.ValidatorSet}
 */
proto.cometbft.types.v1.ValidatorSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cometbft.types.v1.Validator;
      reader.readMessage(value,proto.cometbft.types.v1.Validator.deserializeBinaryFromReader);
      msg.addValidators(value);
      break;
    case 2:
      var value = new proto.cometbft.types.v1.Validator;
      reader.readMessage(value,proto.cometbft.types.v1.Validator.deserializeBinaryFromReader);
      msg.setProposer(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalVotingPower(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1.ValidatorSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1.ValidatorSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1.ValidatorSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1.ValidatorSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cometbft.types.v1.Validator.serializeBinaryToWriter
    );
  }
  f = message.getProposer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cometbft.types.v1.Validator.serializeBinaryToWriter
    );
  }
  f = message.getTotalVotingPower();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * repeated Validator validators = 1;
 * @return {!Array<!proto.cometbft.types.v1.Validator>}
 */
proto.cometbft.types.v1.ValidatorSet.prototype.getValidatorsList = function() {
  return /** @type{!Array<!proto.cometbft.types.v1.Validator>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cometbft.types.v1.Validator, 1));
};


/**
 * @param {!Array<!proto.cometbft.types.v1.Validator>} value
 * @return {!proto.cometbft.types.v1.ValidatorSet} returns this
*/
proto.cometbft.types.v1.ValidatorSet.prototype.setValidatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cometbft.types.v1.Validator=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cometbft.types.v1.Validator}
 */
proto.cometbft.types.v1.ValidatorSet.prototype.addValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cometbft.types.v1.Validator, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cometbft.types.v1.ValidatorSet} returns this
 */
proto.cometbft.types.v1.ValidatorSet.prototype.clearValidatorsList = function() {
  return this.setValidatorsList([]);
};


/**
 * optional Validator proposer = 2;
 * @return {?proto.cometbft.types.v1.Validator}
 */
proto.cometbft.types.v1.ValidatorSet.prototype.getProposer = function() {
  return /** @type{?proto.cometbft.types.v1.Validator} */ (
    jspb.Message.getWrapperField(this, proto.cometbft.types.v1.Validator, 2));
};


/**
 * @param {?proto.cometbft.types.v1.Validator|undefined} value
 * @return {!proto.cometbft.types.v1.ValidatorSet} returns this
*/
proto.cometbft.types.v1.ValidatorSet.prototype.setProposer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1.ValidatorSet} returns this
 */
proto.cometbft.types.v1.ValidatorSet.prototype.clearProposer = function() {
  return this.setProposer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1.ValidatorSet.prototype.hasProposer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 total_voting_power = 3;
 * @return {number}
 */
proto.cometbft.types.v1.ValidatorSet.prototype.getTotalVotingPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1.ValidatorSet} returns this
 */
proto.cometbft.types.v1.ValidatorSet.prototype.setTotalVotingPower = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1.Validator.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1.Validator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1.Validator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1.Validator.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    pubKey: (f = msg.getPubKey()) && cometbft_crypto_v1_keys_pb.PublicKey.toObject(includeInstance, f),
    votingPower: jspb.Message.getFieldWithDefault(msg, 3, 0),
    proposerPriority: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pubKeyBytes: msg.getPubKeyBytes_asB64(),
    pubKeyType: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1.Validator}
 */
proto.cometbft.types.v1.Validator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1.Validator;
  return proto.cometbft.types.v1.Validator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1.Validator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1.Validator}
 */
proto.cometbft.types.v1.Validator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = new cometbft_crypto_v1_keys_pb.PublicKey;
      reader.readMessage(value,cometbft_crypto_v1_keys_pb.PublicKey.deserializeBinaryFromReader);
      msg.setPubKey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVotingPower(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setProposerPriority(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubKeyBytes(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubKeyType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1.Validator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1.Validator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1.Validator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1.Validator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPubKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cometbft_crypto_v1_keys_pb.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getVotingPower();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getProposerPriority();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getPubKeyBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getPubKeyType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1.Validator.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.cometbft.types.v1.Validator.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1.Validator.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1.Validator} returns this
 */
proto.cometbft.types.v1.Validator.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional cometbft.crypto.v1.PublicKey pub_key = 2;
 * @return {?proto.cometbft.crypto.v1.PublicKey}
 */
proto.cometbft.types.v1.Validator.prototype.getPubKey = function() {
  return /** @type{?proto.cometbft.crypto.v1.PublicKey} */ (
    jspb.Message.getWrapperField(this, cometbft_crypto_v1_keys_pb.PublicKey, 2));
};


/**
 * @param {?proto.cometbft.crypto.v1.PublicKey|undefined} value
 * @return {!proto.cometbft.types.v1.Validator} returns this
*/
proto.cometbft.types.v1.Validator.prototype.setPubKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1.Validator} returns this
 */
proto.cometbft.types.v1.Validator.prototype.clearPubKey = function() {
  return this.setPubKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1.Validator.prototype.hasPubKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 voting_power = 3;
 * @return {number}
 */
proto.cometbft.types.v1.Validator.prototype.getVotingPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1.Validator} returns this
 */
proto.cometbft.types.v1.Validator.prototype.setVotingPower = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 proposer_priority = 4;
 * @return {number}
 */
proto.cometbft.types.v1.Validator.prototype.getProposerPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1.Validator} returns this
 */
proto.cometbft.types.v1.Validator.prototype.setProposerPriority = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes pub_key_bytes = 5;
 * @return {!(string|Uint8Array)}
 */
proto.cometbft.types.v1.Validator.prototype.getPubKeyBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes pub_key_bytes = 5;
 * This is a type-conversion wrapper around `getPubKeyBytes()`
 * @return {string}
 */
proto.cometbft.types.v1.Validator.prototype.getPubKeyBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubKeyBytes()));
};


/**
 * optional bytes pub_key_bytes = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubKeyBytes()`
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1.Validator.prototype.getPubKeyBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubKeyBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cometbft.types.v1.Validator} returns this
 */
proto.cometbft.types.v1.Validator.prototype.setPubKeyBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional string pub_key_type = 6;
 * @return {string}
 */
proto.cometbft.types.v1.Validator.prototype.getPubKeyType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.cometbft.types.v1.Validator} returns this
 */
proto.cometbft.types.v1.Validator.prototype.setPubKeyType = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cometbft.types.v1.SimpleValidator.prototype.toObject = function(opt_includeInstance) {
  return proto.cometbft.types.v1.SimpleValidator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cometbft.types.v1.SimpleValidator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1.SimpleValidator.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubKey: (f = msg.getPubKey()) && cometbft_crypto_v1_keys_pb.PublicKey.toObject(includeInstance, f),
    votingPower: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cometbft.types.v1.SimpleValidator}
 */
proto.cometbft.types.v1.SimpleValidator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cometbft.types.v1.SimpleValidator;
  return proto.cometbft.types.v1.SimpleValidator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cometbft.types.v1.SimpleValidator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cometbft.types.v1.SimpleValidator}
 */
proto.cometbft.types.v1.SimpleValidator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cometbft_crypto_v1_keys_pb.PublicKey;
      reader.readMessage(value,cometbft_crypto_v1_keys_pb.PublicKey.deserializeBinaryFromReader);
      msg.setPubKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVotingPower(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cometbft.types.v1.SimpleValidator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cometbft.types.v1.SimpleValidator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cometbft.types.v1.SimpleValidator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cometbft.types.v1.SimpleValidator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cometbft_crypto_v1_keys_pb.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getVotingPower();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional cometbft.crypto.v1.PublicKey pub_key = 1;
 * @return {?proto.cometbft.crypto.v1.PublicKey}
 */
proto.cometbft.types.v1.SimpleValidator.prototype.getPubKey = function() {
  return /** @type{?proto.cometbft.crypto.v1.PublicKey} */ (
    jspb.Message.getWrapperField(this, cometbft_crypto_v1_keys_pb.PublicKey, 1));
};


/**
 * @param {?proto.cometbft.crypto.v1.PublicKey|undefined} value
 * @return {!proto.cometbft.types.v1.SimpleValidator} returns this
*/
proto.cometbft.types.v1.SimpleValidator.prototype.setPubKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cometbft.types.v1.SimpleValidator} returns this
 */
proto.cometbft.types.v1.SimpleValidator.prototype.clearPubKey = function() {
  return this.setPubKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cometbft.types.v1.SimpleValidator.prototype.hasPubKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 voting_power = 2;
 * @return {number}
 */
proto.cometbft.types.v1.SimpleValidator.prototype.getVotingPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cometbft.types.v1.SimpleValidator} returns this
 */
proto.cometbft.types.v1.SimpleValidator.prototype.setVotingPower = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.cometbft.types.v1.BlockIDFlag = {
  BLOCK_ID_FLAG_UNKNOWN: 0,
  BLOCK_ID_FLAG_ABSENT: 1,
  BLOCK_ID_FLAG_COMMIT: 2,
  BLOCK_ID_FLAG_NIL: 3
};

goog.object.extend(exports, proto.cometbft.types.v1);
