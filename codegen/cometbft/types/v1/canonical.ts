/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cometbft/types/v1/canonical.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./types";
import * as dependency_3 from "./../../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace cometbft.types.v1 {
    export class CanonicalBlockID extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            hash?: Uint8Array;
            part_set_header?: CanonicalPartSetHeader;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("hash" in data && data.hash != undefined) {
                    this.hash = data.hash;
                }
                if ("part_set_header" in data && data.part_set_header != undefined) {
                    this.part_set_header = data.part_set_header;
                }
            }
        }
        get hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set hash(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get part_set_header() {
            return pb_1.Message.getWrapperField(this, CanonicalPartSetHeader, 2) as CanonicalPartSetHeader;
        }
        set part_set_header(value: CanonicalPartSetHeader) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_part_set_header() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            hash?: Uint8Array;
            part_set_header?: ReturnType<typeof CanonicalPartSetHeader.prototype.toObject>;
        }): CanonicalBlockID {
            const message = new CanonicalBlockID({});
            if (data.hash != null) {
                message.hash = data.hash;
            }
            if (data.part_set_header != null) {
                message.part_set_header = CanonicalPartSetHeader.fromObject(data.part_set_header);
            }
            return message;
        }
        toObject() {
            const data: {
                hash?: Uint8Array;
                part_set_header?: ReturnType<typeof CanonicalPartSetHeader.prototype.toObject>;
            } = {};
            if (this.hash != null) {
                data.hash = this.hash;
            }
            if (this.part_set_header != null) {
                data.part_set_header = this.part_set_header.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hash.length)
                writer.writeBytes(1, this.hash);
            if (this.has_part_set_header)
                writer.writeMessage(2, this.part_set_header, () => this.part_set_header.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CanonicalBlockID {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CanonicalBlockID();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.hash = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.part_set_header, () => message.part_set_header = CanonicalPartSetHeader.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CanonicalBlockID {
            return CanonicalBlockID.deserialize(bytes);
        }
    }
    export class CanonicalPartSetHeader extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            total?: number;
            hash?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("hash" in data && data.hash != undefined) {
                    this.hash = data.hash;
                }
            }
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get hash() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set hash(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            total?: number;
            hash?: Uint8Array;
        }): CanonicalPartSetHeader {
            const message = new CanonicalPartSetHeader({});
            if (data.total != null) {
                message.total = data.total;
            }
            if (data.hash != null) {
                message.hash = data.hash;
            }
            return message;
        }
        toObject() {
            const data: {
                total?: number;
                hash?: Uint8Array;
            } = {};
            if (this.total != null) {
                data.total = this.total;
            }
            if (this.hash != null) {
                data.hash = this.hash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.total != 0)
                writer.writeUint32(1, this.total);
            if (this.hash.length)
                writer.writeBytes(2, this.hash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CanonicalPartSetHeader {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CanonicalPartSetHeader();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.total = reader.readUint32();
                        break;
                    case 2:
                        message.hash = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CanonicalPartSetHeader {
            return CanonicalPartSetHeader.deserialize(bytes);
        }
    }
    export class CanonicalProposal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: dependency_2.cometbft.types.v1.SignedMsgType;
            height?: number;
            round?: number;
            pol_round?: number;
            block_id?: CanonicalBlockID;
            timestamp?: dependency_3.google.protobuf.Timestamp;
            chain_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("round" in data && data.round != undefined) {
                    this.round = data.round;
                }
                if ("pol_round" in data && data.pol_round != undefined) {
                    this.pol_round = data.pol_round;
                }
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("chain_id" in data && data.chain_id != undefined) {
                    this.chain_id = data.chain_id;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_2.cometbft.types.v1.SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN) as dependency_2.cometbft.types.v1.SignedMsgType;
        }
        set type(value: dependency_2.cometbft.types.v1.SignedMsgType) {
            pb_1.Message.setField(this, 1, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get round() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set round(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get pol_round() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set pol_round(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get block_id() {
            return pb_1.Message.getWrapperField(this, CanonicalBlockID, 5) as CanonicalBlockID;
        }
        set block_id(value: CanonicalBlockID) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_block_id() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 6) as dependency_3.google.protobuf.Timestamp;
        }
        set timestamp(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get chain_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set chain_id(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            type?: dependency_2.cometbft.types.v1.SignedMsgType;
            height?: number;
            round?: number;
            pol_round?: number;
            block_id?: ReturnType<typeof CanonicalBlockID.prototype.toObject>;
            timestamp?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            chain_id?: string;
        }): CanonicalProposal {
            const message = new CanonicalProposal({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.round != null) {
                message.round = data.round;
            }
            if (data.pol_round != null) {
                message.pol_round = data.pol_round;
            }
            if (data.block_id != null) {
                message.block_id = CanonicalBlockID.fromObject(data.block_id);
            }
            if (data.timestamp != null) {
                message.timestamp = dependency_3.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            if (data.chain_id != null) {
                message.chain_id = data.chain_id;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: dependency_2.cometbft.types.v1.SignedMsgType;
                height?: number;
                round?: number;
                pol_round?: number;
                block_id?: ReturnType<typeof CanonicalBlockID.prototype.toObject>;
                timestamp?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                chain_id?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.round != null) {
                data.round = this.round;
            }
            if (this.pol_round != null) {
                data.pol_round = this.pol_round;
            }
            if (this.block_id != null) {
                data.block_id = this.block_id.toObject();
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            if (this.chain_id != null) {
                data.chain_id = this.chain_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != dependency_2.cometbft.types.v1.SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN)
                writer.writeEnum(1, this.type);
            if (this.height != 0)
                writer.writeSfixed64(2, this.height);
            if (this.round != 0)
                writer.writeSfixed64(3, this.round);
            if (this.pol_round != 0)
                writer.writeInt64(4, this.pol_round);
            if (this.has_block_id)
                writer.writeMessage(5, this.block_id, () => this.block_id.serialize(writer));
            if (this.has_timestamp)
                writer.writeMessage(6, this.timestamp, () => this.timestamp.serialize(writer));
            if (this.chain_id.length)
                writer.writeString(7, this.chain_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CanonicalProposal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CanonicalProposal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.height = reader.readSfixed64();
                        break;
                    case 3:
                        message.round = reader.readSfixed64();
                        break;
                    case 4:
                        message.pol_round = reader.readInt64();
                        break;
                    case 5:
                        reader.readMessage(message.block_id, () => message.block_id = CanonicalBlockID.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        message.chain_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CanonicalProposal {
            return CanonicalProposal.deserialize(bytes);
        }
    }
    export class CanonicalVote extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: dependency_2.cometbft.types.v1.SignedMsgType;
            height?: number;
            round?: number;
            block_id?: CanonicalBlockID;
            timestamp?: dependency_3.google.protobuf.Timestamp;
            chain_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("round" in data && data.round != undefined) {
                    this.round = data.round;
                }
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("chain_id" in data && data.chain_id != undefined) {
                    this.chain_id = data.chain_id;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_2.cometbft.types.v1.SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN) as dependency_2.cometbft.types.v1.SignedMsgType;
        }
        set type(value: dependency_2.cometbft.types.v1.SignedMsgType) {
            pb_1.Message.setField(this, 1, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get round() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set round(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get block_id() {
            return pb_1.Message.getWrapperField(this, CanonicalBlockID, 4) as CanonicalBlockID;
        }
        set block_id(value: CanonicalBlockID) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_block_id() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 5) as dependency_3.google.protobuf.Timestamp;
        }
        set timestamp(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get chain_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set chain_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            type?: dependency_2.cometbft.types.v1.SignedMsgType;
            height?: number;
            round?: number;
            block_id?: ReturnType<typeof CanonicalBlockID.prototype.toObject>;
            timestamp?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            chain_id?: string;
        }): CanonicalVote {
            const message = new CanonicalVote({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.round != null) {
                message.round = data.round;
            }
            if (data.block_id != null) {
                message.block_id = CanonicalBlockID.fromObject(data.block_id);
            }
            if (data.timestamp != null) {
                message.timestamp = dependency_3.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            if (data.chain_id != null) {
                message.chain_id = data.chain_id;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: dependency_2.cometbft.types.v1.SignedMsgType;
                height?: number;
                round?: number;
                block_id?: ReturnType<typeof CanonicalBlockID.prototype.toObject>;
                timestamp?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                chain_id?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.round != null) {
                data.round = this.round;
            }
            if (this.block_id != null) {
                data.block_id = this.block_id.toObject();
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            if (this.chain_id != null) {
                data.chain_id = this.chain_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != dependency_2.cometbft.types.v1.SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN)
                writer.writeEnum(1, this.type);
            if (this.height != 0)
                writer.writeSfixed64(2, this.height);
            if (this.round != 0)
                writer.writeSfixed64(3, this.round);
            if (this.has_block_id)
                writer.writeMessage(4, this.block_id, () => this.block_id.serialize(writer));
            if (this.has_timestamp)
                writer.writeMessage(5, this.timestamp, () => this.timestamp.serialize(writer));
            if (this.chain_id.length)
                writer.writeString(6, this.chain_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CanonicalVote {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CanonicalVote();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.height = reader.readSfixed64();
                        break;
                    case 3:
                        message.round = reader.readSfixed64();
                        break;
                    case 4:
                        reader.readMessage(message.block_id, () => message.block_id = CanonicalBlockID.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        message.chain_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CanonicalVote {
            return CanonicalVote.deserialize(bytes);
        }
    }
    export class CanonicalVoteExtension extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            extension?: Uint8Array;
            height?: number;
            round?: number;
            chain_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("extension" in data && data.extension != undefined) {
                    this.extension = data.extension;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("round" in data && data.round != undefined) {
                    this.round = data.round;
                }
                if ("chain_id" in data && data.chain_id != undefined) {
                    this.chain_id = data.chain_id;
                }
            }
        }
        get extension() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set extension(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get round() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set round(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get chain_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set chain_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            extension?: Uint8Array;
            height?: number;
            round?: number;
            chain_id?: string;
        }): CanonicalVoteExtension {
            const message = new CanonicalVoteExtension({});
            if (data.extension != null) {
                message.extension = data.extension;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.round != null) {
                message.round = data.round;
            }
            if (data.chain_id != null) {
                message.chain_id = data.chain_id;
            }
            return message;
        }
        toObject() {
            const data: {
                extension?: Uint8Array;
                height?: number;
                round?: number;
                chain_id?: string;
            } = {};
            if (this.extension != null) {
                data.extension = this.extension;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.round != null) {
                data.round = this.round;
            }
            if (this.chain_id != null) {
                data.chain_id = this.chain_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.extension.length)
                writer.writeBytes(1, this.extension);
            if (this.height != 0)
                writer.writeSfixed64(2, this.height);
            if (this.round != 0)
                writer.writeSfixed64(3, this.round);
            if (this.chain_id.length)
                writer.writeString(4, this.chain_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CanonicalVoteExtension {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CanonicalVoteExtension();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.extension = reader.readBytes();
                        break;
                    case 2:
                        message.height = reader.readSfixed64();
                        break;
                    case 3:
                        message.round = reader.readSfixed64();
                        break;
                    case 4:
                        message.chain_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CanonicalVoteExtension {
            return CanonicalVoteExtension.deserialize(bytes);
        }
    }
}
