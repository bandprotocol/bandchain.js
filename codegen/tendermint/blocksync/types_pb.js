// source: tendermint/blocksync/types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var tendermint_types_block_pb = require('../../tendermint/types/block_pb.js');
goog.object.extend(proto, tendermint_types_block_pb);
var tendermint_types_types_pb = require('../../tendermint/types/types_pb.js');
goog.object.extend(proto, tendermint_types_types_pb);
goog.exportSymbol('proto.tendermint.blocksync.BlockRequest', null, global);
goog.exportSymbol('proto.tendermint.blocksync.BlockResponse', null, global);
goog.exportSymbol('proto.tendermint.blocksync.Message', null, global);
goog.exportSymbol('proto.tendermint.blocksync.Message.SumCase', null, global);
goog.exportSymbol('proto.tendermint.blocksync.NoBlockResponse', null, global);
goog.exportSymbol('proto.tendermint.blocksync.StatusRequest', null, global);
goog.exportSymbol('proto.tendermint.blocksync.StatusResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.blocksync.BlockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.blocksync.BlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.blocksync.BlockRequest.displayName = 'proto.tendermint.blocksync.BlockRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.blocksync.NoBlockResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.blocksync.NoBlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.blocksync.NoBlockResponse.displayName = 'proto.tendermint.blocksync.NoBlockResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.blocksync.BlockResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.blocksync.BlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.blocksync.BlockResponse.displayName = 'proto.tendermint.blocksync.BlockResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.blocksync.StatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.blocksync.StatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.blocksync.StatusRequest.displayName = 'proto.tendermint.blocksync.StatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.blocksync.StatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tendermint.blocksync.StatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.blocksync.StatusResponse.displayName = 'proto.tendermint.blocksync.StatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tendermint.blocksync.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tendermint.blocksync.Message.oneofGroups_);
};
goog.inherits(proto.tendermint.blocksync.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tendermint.blocksync.Message.displayName = 'proto.tendermint.blocksync.Message';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.blocksync.BlockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.blocksync.BlockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.blocksync.BlockRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.blocksync.BlockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.blocksync.BlockRequest}
 */
proto.tendermint.blocksync.BlockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.blocksync.BlockRequest;
  return proto.tendermint.blocksync.BlockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.blocksync.BlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.blocksync.BlockRequest}
 */
proto.tendermint.blocksync.BlockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.blocksync.BlockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.blocksync.BlockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.blocksync.BlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.blocksync.BlockRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.tendermint.blocksync.BlockRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.blocksync.BlockRequest} returns this
 */
proto.tendermint.blocksync.BlockRequest.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.blocksync.NoBlockResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.blocksync.NoBlockResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.blocksync.NoBlockResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.blocksync.NoBlockResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.blocksync.NoBlockResponse}
 */
proto.tendermint.blocksync.NoBlockResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.blocksync.NoBlockResponse;
  return proto.tendermint.blocksync.NoBlockResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.blocksync.NoBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.blocksync.NoBlockResponse}
 */
proto.tendermint.blocksync.NoBlockResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.blocksync.NoBlockResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.blocksync.NoBlockResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.blocksync.NoBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.blocksync.NoBlockResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.tendermint.blocksync.NoBlockResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.blocksync.NoBlockResponse} returns this
 */
proto.tendermint.blocksync.NoBlockResponse.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.blocksync.BlockResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.blocksync.BlockResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.blocksync.BlockResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.blocksync.BlockResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: (f = msg.getBlock()) && tendermint_types_block_pb.Block.toObject(includeInstance, f),
    extCommit: (f = msg.getExtCommit()) && tendermint_types_types_pb.ExtendedCommit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.blocksync.BlockResponse}
 */
proto.tendermint.blocksync.BlockResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.blocksync.BlockResponse;
  return proto.tendermint.blocksync.BlockResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.blocksync.BlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.blocksync.BlockResponse}
 */
proto.tendermint.blocksync.BlockResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new tendermint_types_block_pb.Block;
      reader.readMessage(value,tendermint_types_block_pb.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 2:
      var value = new tendermint_types_types_pb.ExtendedCommit;
      reader.readMessage(value,tendermint_types_types_pb.ExtendedCommit.deserializeBinaryFromReader);
      msg.setExtCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.blocksync.BlockResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.blocksync.BlockResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.blocksync.BlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.blocksync.BlockResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      tendermint_types_block_pb.Block.serializeBinaryToWriter
    );
  }
  f = message.getExtCommit();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      tendermint_types_types_pb.ExtendedCommit.serializeBinaryToWriter
    );
  }
};


/**
 * optional tendermint.types.Block block = 1;
 * @return {?proto.tendermint.types.Block}
 */
proto.tendermint.blocksync.BlockResponse.prototype.getBlock = function() {
  return /** @type{?proto.tendermint.types.Block} */ (
    jspb.Message.getWrapperField(this, tendermint_types_block_pb.Block, 1));
};


/**
 * @param {?proto.tendermint.types.Block|undefined} value
 * @return {!proto.tendermint.blocksync.BlockResponse} returns this
*/
proto.tendermint.blocksync.BlockResponse.prototype.setBlock = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.blocksync.BlockResponse} returns this
 */
proto.tendermint.blocksync.BlockResponse.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.blocksync.BlockResponse.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional tendermint.types.ExtendedCommit ext_commit = 2;
 * @return {?proto.tendermint.types.ExtendedCommit}
 */
proto.tendermint.blocksync.BlockResponse.prototype.getExtCommit = function() {
  return /** @type{?proto.tendermint.types.ExtendedCommit} */ (
    jspb.Message.getWrapperField(this, tendermint_types_types_pb.ExtendedCommit, 2));
};


/**
 * @param {?proto.tendermint.types.ExtendedCommit|undefined} value
 * @return {!proto.tendermint.blocksync.BlockResponse} returns this
*/
proto.tendermint.blocksync.BlockResponse.prototype.setExtCommit = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.blocksync.BlockResponse} returns this
 */
proto.tendermint.blocksync.BlockResponse.prototype.clearExtCommit = function() {
  return this.setExtCommit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.blocksync.BlockResponse.prototype.hasExtCommit = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.blocksync.StatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.blocksync.StatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.blocksync.StatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.blocksync.StatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.blocksync.StatusRequest}
 */
proto.tendermint.blocksync.StatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.blocksync.StatusRequest;
  return proto.tendermint.blocksync.StatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.blocksync.StatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.blocksync.StatusRequest}
 */
proto.tendermint.blocksync.StatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.blocksync.StatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.blocksync.StatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.blocksync.StatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.blocksync.StatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.blocksync.StatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.blocksync.StatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.blocksync.StatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.blocksync.StatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    base: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.blocksync.StatusResponse}
 */
proto.tendermint.blocksync.StatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.blocksync.StatusResponse;
  return proto.tendermint.blocksync.StatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.blocksync.StatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.blocksync.StatusResponse}
 */
proto.tendermint.blocksync.StatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.blocksync.StatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.blocksync.StatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.blocksync.StatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.blocksync.StatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getBase();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.tendermint.blocksync.StatusResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.blocksync.StatusResponse} returns this
 */
proto.tendermint.blocksync.StatusResponse.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 base = 2;
 * @return {number}
 */
proto.tendermint.blocksync.StatusResponse.prototype.getBase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tendermint.blocksync.StatusResponse} returns this
 */
proto.tendermint.blocksync.StatusResponse.prototype.setBase = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tendermint.blocksync.Message.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.tendermint.blocksync.Message.SumCase = {
  SUM_NOT_SET: 0,
  BLOCK_REQUEST: 1,
  NO_BLOCK_RESPONSE: 2,
  BLOCK_RESPONSE: 3,
  STATUS_REQUEST: 4,
  STATUS_RESPONSE: 5
};

/**
 * @return {proto.tendermint.blocksync.Message.SumCase}
 */
proto.tendermint.blocksync.Message.prototype.getSumCase = function() {
  return /** @type {proto.tendermint.blocksync.Message.SumCase} */(jspb.Message.computeOneofCase(this, proto.tendermint.blocksync.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tendermint.blocksync.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.tendermint.blocksync.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tendermint.blocksync.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.blocksync.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockRequest: (f = msg.getBlockRequest()) && proto.tendermint.blocksync.BlockRequest.toObject(includeInstance, f),
    noBlockResponse: (f = msg.getNoBlockResponse()) && proto.tendermint.blocksync.NoBlockResponse.toObject(includeInstance, f),
    blockResponse: (f = msg.getBlockResponse()) && proto.tendermint.blocksync.BlockResponse.toObject(includeInstance, f),
    statusRequest: (f = msg.getStatusRequest()) && proto.tendermint.blocksync.StatusRequest.toObject(includeInstance, f),
    statusResponse: (f = msg.getStatusResponse()) && proto.tendermint.blocksync.StatusResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tendermint.blocksync.Message}
 */
proto.tendermint.blocksync.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tendermint.blocksync.Message;
  return proto.tendermint.blocksync.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tendermint.blocksync.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tendermint.blocksync.Message}
 */
proto.tendermint.blocksync.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tendermint.blocksync.BlockRequest;
      reader.readMessage(value,proto.tendermint.blocksync.BlockRequest.deserializeBinaryFromReader);
      msg.setBlockRequest(value);
      break;
    case 2:
      var value = new proto.tendermint.blocksync.NoBlockResponse;
      reader.readMessage(value,proto.tendermint.blocksync.NoBlockResponse.deserializeBinaryFromReader);
      msg.setNoBlockResponse(value);
      break;
    case 3:
      var value = new proto.tendermint.blocksync.BlockResponse;
      reader.readMessage(value,proto.tendermint.blocksync.BlockResponse.deserializeBinaryFromReader);
      msg.setBlockResponse(value);
      break;
    case 4:
      var value = new proto.tendermint.blocksync.StatusRequest;
      reader.readMessage(value,proto.tendermint.blocksync.StatusRequest.deserializeBinaryFromReader);
      msg.setStatusRequest(value);
      break;
    case 5:
      var value = new proto.tendermint.blocksync.StatusResponse;
      reader.readMessage(value,proto.tendermint.blocksync.StatusResponse.deserializeBinaryFromReader);
      msg.setStatusResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tendermint.blocksync.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tendermint.blocksync.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tendermint.blocksync.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tendermint.blocksync.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tendermint.blocksync.BlockRequest.serializeBinaryToWriter
    );
  }
  f = message.getNoBlockResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tendermint.blocksync.NoBlockResponse.serializeBinaryToWriter
    );
  }
  f = message.getBlockResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tendermint.blocksync.BlockResponse.serializeBinaryToWriter
    );
  }
  f = message.getStatusRequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tendermint.blocksync.StatusRequest.serializeBinaryToWriter
    );
  }
  f = message.getStatusResponse();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.tendermint.blocksync.StatusResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional BlockRequest block_request = 1;
 * @return {?proto.tendermint.blocksync.BlockRequest}
 */
proto.tendermint.blocksync.Message.prototype.getBlockRequest = function() {
  return /** @type{?proto.tendermint.blocksync.BlockRequest} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.blocksync.BlockRequest, 1));
};


/**
 * @param {?proto.tendermint.blocksync.BlockRequest|undefined} value
 * @return {!proto.tendermint.blocksync.Message} returns this
*/
proto.tendermint.blocksync.Message.prototype.setBlockRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.tendermint.blocksync.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.blocksync.Message} returns this
 */
proto.tendermint.blocksync.Message.prototype.clearBlockRequest = function() {
  return this.setBlockRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.blocksync.Message.prototype.hasBlockRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NoBlockResponse no_block_response = 2;
 * @return {?proto.tendermint.blocksync.NoBlockResponse}
 */
proto.tendermint.blocksync.Message.prototype.getNoBlockResponse = function() {
  return /** @type{?proto.tendermint.blocksync.NoBlockResponse} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.blocksync.NoBlockResponse, 2));
};


/**
 * @param {?proto.tendermint.blocksync.NoBlockResponse|undefined} value
 * @return {!proto.tendermint.blocksync.Message} returns this
*/
proto.tendermint.blocksync.Message.prototype.setNoBlockResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.tendermint.blocksync.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.blocksync.Message} returns this
 */
proto.tendermint.blocksync.Message.prototype.clearNoBlockResponse = function() {
  return this.setNoBlockResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.blocksync.Message.prototype.hasNoBlockResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BlockResponse block_response = 3;
 * @return {?proto.tendermint.blocksync.BlockResponse}
 */
proto.tendermint.blocksync.Message.prototype.getBlockResponse = function() {
  return /** @type{?proto.tendermint.blocksync.BlockResponse} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.blocksync.BlockResponse, 3));
};


/**
 * @param {?proto.tendermint.blocksync.BlockResponse|undefined} value
 * @return {!proto.tendermint.blocksync.Message} returns this
*/
proto.tendermint.blocksync.Message.prototype.setBlockResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.tendermint.blocksync.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.blocksync.Message} returns this
 */
proto.tendermint.blocksync.Message.prototype.clearBlockResponse = function() {
  return this.setBlockResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.blocksync.Message.prototype.hasBlockResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StatusRequest status_request = 4;
 * @return {?proto.tendermint.blocksync.StatusRequest}
 */
proto.tendermint.blocksync.Message.prototype.getStatusRequest = function() {
  return /** @type{?proto.tendermint.blocksync.StatusRequest} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.blocksync.StatusRequest, 4));
};


/**
 * @param {?proto.tendermint.blocksync.StatusRequest|undefined} value
 * @return {!proto.tendermint.blocksync.Message} returns this
*/
proto.tendermint.blocksync.Message.prototype.setStatusRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.tendermint.blocksync.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.blocksync.Message} returns this
 */
proto.tendermint.blocksync.Message.prototype.clearStatusRequest = function() {
  return this.setStatusRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.blocksync.Message.prototype.hasStatusRequest = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional StatusResponse status_response = 5;
 * @return {?proto.tendermint.blocksync.StatusResponse}
 */
proto.tendermint.blocksync.Message.prototype.getStatusResponse = function() {
  return /** @type{?proto.tendermint.blocksync.StatusResponse} */ (
    jspb.Message.getWrapperField(this, proto.tendermint.blocksync.StatusResponse, 5));
};


/**
 * @param {?proto.tendermint.blocksync.StatusResponse|undefined} value
 * @return {!proto.tendermint.blocksync.Message} returns this
*/
proto.tendermint.blocksync.Message.prototype.setStatusResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.tendermint.blocksync.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tendermint.blocksync.Message} returns this
 */
proto.tendermint.blocksync.Message.prototype.clearStatusResponse = function() {
  return this.setStatusResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tendermint.blocksync.Message.prototype.hasStatusResponse = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.tendermint.blocksync);
