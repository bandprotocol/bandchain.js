/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: tendermint/statesync/types.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace tendermint.statesync {
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4]];
        constructor(data?: any[] | ({} & (({
            snapshots_request?: SnapshotsRequest;
            snapshots_response?: never;
            chunk_request?: never;
            chunk_response?: never;
        } | {
            snapshots_request?: never;
            snapshots_response?: SnapshotsResponse;
            chunk_request?: never;
            chunk_response?: never;
        } | {
            snapshots_request?: never;
            snapshots_response?: never;
            chunk_request?: ChunkRequest;
            chunk_response?: never;
        } | {
            snapshots_request?: never;
            snapshots_response?: never;
            chunk_request?: never;
            chunk_response?: ChunkResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("snapshots_request" in data && data.snapshots_request != undefined) {
                    this.snapshots_request = data.snapshots_request;
                }
                if ("snapshots_response" in data && data.snapshots_response != undefined) {
                    this.snapshots_response = data.snapshots_response;
                }
                if ("chunk_request" in data && data.chunk_request != undefined) {
                    this.chunk_request = data.chunk_request;
                }
                if ("chunk_response" in data && data.chunk_response != undefined) {
                    this.chunk_response = data.chunk_response;
                }
            }
        }
        get snapshots_request() {
            return pb_1.Message.getWrapperField(this, SnapshotsRequest, 1) as SnapshotsRequest;
        }
        set snapshots_request(value: SnapshotsRequest) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_snapshots_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get snapshots_response() {
            return pb_1.Message.getWrapperField(this, SnapshotsResponse, 2) as SnapshotsResponse;
        }
        set snapshots_response(value: SnapshotsResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_snapshots_response() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get chunk_request() {
            return pb_1.Message.getWrapperField(this, ChunkRequest, 3) as ChunkRequest;
        }
        set chunk_request(value: ChunkRequest) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_chunk_request() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get chunk_response() {
            return pb_1.Message.getWrapperField(this, ChunkResponse, 4) as ChunkResponse;
        }
        set chunk_response(value: ChunkResponse) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_chunk_response() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get sum() {
            const cases: {
                [index: number]: "none" | "snapshots_request" | "snapshots_response" | "chunk_request" | "chunk_response";
            } = {
                0: "none",
                1: "snapshots_request",
                2: "snapshots_response",
                3: "chunk_request",
                4: "chunk_response"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4])];
        }
        static fromObject(data: {
            snapshots_request?: ReturnType<typeof SnapshotsRequest.prototype.toObject>;
            snapshots_response?: ReturnType<typeof SnapshotsResponse.prototype.toObject>;
            chunk_request?: ReturnType<typeof ChunkRequest.prototype.toObject>;
            chunk_response?: ReturnType<typeof ChunkResponse.prototype.toObject>;
        }): Message {
            const message = new Message({});
            if (data.snapshots_request != null) {
                message.snapshots_request = SnapshotsRequest.fromObject(data.snapshots_request);
            }
            if (data.snapshots_response != null) {
                message.snapshots_response = SnapshotsResponse.fromObject(data.snapshots_response);
            }
            if (data.chunk_request != null) {
                message.chunk_request = ChunkRequest.fromObject(data.chunk_request);
            }
            if (data.chunk_response != null) {
                message.chunk_response = ChunkResponse.fromObject(data.chunk_response);
            }
            return message;
        }
        toObject() {
            const data: {
                snapshots_request?: ReturnType<typeof SnapshotsRequest.prototype.toObject>;
                snapshots_response?: ReturnType<typeof SnapshotsResponse.prototype.toObject>;
                chunk_request?: ReturnType<typeof ChunkRequest.prototype.toObject>;
                chunk_response?: ReturnType<typeof ChunkResponse.prototype.toObject>;
            } = {};
            if (this.snapshots_request != null) {
                data.snapshots_request = this.snapshots_request.toObject();
            }
            if (this.snapshots_response != null) {
                data.snapshots_response = this.snapshots_response.toObject();
            }
            if (this.chunk_request != null) {
                data.chunk_request = this.chunk_request.toObject();
            }
            if (this.chunk_response != null) {
                data.chunk_response = this.chunk_response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_snapshots_request)
                writer.writeMessage(1, this.snapshots_request, () => this.snapshots_request.serialize(writer));
            if (this.has_snapshots_response)
                writer.writeMessage(2, this.snapshots_response, () => this.snapshots_response.serialize(writer));
            if (this.has_chunk_request)
                writer.writeMessage(3, this.chunk_request, () => this.chunk_request.serialize(writer));
            if (this.has_chunk_response)
                writer.writeMessage(4, this.chunk_response, () => this.chunk_response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.snapshots_request, () => message.snapshots_request = SnapshotsRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.snapshots_response, () => message.snapshots_response = SnapshotsResponse.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.chunk_request, () => message.chunk_request = ChunkRequest.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.chunk_response, () => message.chunk_response = ChunkResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    export class SnapshotsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SnapshotsRequest {
            const message = new SnapshotsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SnapshotsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SnapshotsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SnapshotsRequest {
            return SnapshotsRequest.deserialize(bytes);
        }
    }
    export class SnapshotsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
            format?: number;
            chunks?: number;
            hash?: Uint8Array;
            metadata?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("format" in data && data.format != undefined) {
                    this.format = data.format;
                }
                if ("chunks" in data && data.chunks != undefined) {
                    this.chunks = data.chunks;
                }
                if ("hash" in data && data.hash != undefined) {
                    this.hash = data.hash;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get format() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set format(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get chunks() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set chunks(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get hash() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set hash(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set metadata(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            height?: number;
            format?: number;
            chunks?: number;
            hash?: Uint8Array;
            metadata?: Uint8Array;
        }): SnapshotsResponse {
            const message = new SnapshotsResponse({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.format != null) {
                message.format = data.format;
            }
            if (data.chunks != null) {
                message.chunks = data.chunks;
            }
            if (data.hash != null) {
                message.hash = data.hash;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                format?: number;
                chunks?: number;
                hash?: Uint8Array;
                metadata?: Uint8Array;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.format != null) {
                data.format = this.format;
            }
            if (this.chunks != null) {
                data.chunks = this.chunks;
            }
            if (this.hash != null) {
                data.hash = this.hash;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeUint64(1, this.height);
            if (this.format != 0)
                writer.writeUint32(2, this.format);
            if (this.chunks != 0)
                writer.writeUint32(3, this.chunks);
            if (this.hash.length)
                writer.writeBytes(4, this.hash);
            if (this.metadata.length)
                writer.writeBytes(5, this.metadata);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SnapshotsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SnapshotsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readUint64();
                        break;
                    case 2:
                        message.format = reader.readUint32();
                        break;
                    case 3:
                        message.chunks = reader.readUint32();
                        break;
                    case 4:
                        message.hash = reader.readBytes();
                        break;
                    case 5:
                        message.metadata = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SnapshotsResponse {
            return SnapshotsResponse.deserialize(bytes);
        }
    }
    export class ChunkRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
            format?: number;
            index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("format" in data && data.format != undefined) {
                    this.format = data.format;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get format() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set format(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            height?: number;
            format?: number;
            index?: number;
        }): ChunkRequest {
            const message = new ChunkRequest({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.format != null) {
                message.format = data.format;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                format?: number;
                index?: number;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.format != null) {
                data.format = this.format;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeUint64(1, this.height);
            if (this.format != 0)
                writer.writeUint32(2, this.format);
            if (this.index != 0)
                writer.writeUint32(3, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChunkRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChunkRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readUint64();
                        break;
                    case 2:
                        message.format = reader.readUint32();
                        break;
                    case 3:
                        message.index = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChunkRequest {
            return ChunkRequest.deserialize(bytes);
        }
    }
    export class ChunkResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
            format?: number;
            index?: number;
            chunk?: Uint8Array;
            missing?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("format" in data && data.format != undefined) {
                    this.format = data.format;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("chunk" in data && data.chunk != undefined) {
                    this.chunk = data.chunk;
                }
                if ("missing" in data && data.missing != undefined) {
                    this.missing = data.missing;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get format() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set format(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get chunk() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set chunk(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get missing() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set missing(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            height?: number;
            format?: number;
            index?: number;
            chunk?: Uint8Array;
            missing?: boolean;
        }): ChunkResponse {
            const message = new ChunkResponse({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.format != null) {
                message.format = data.format;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.chunk != null) {
                message.chunk = data.chunk;
            }
            if (data.missing != null) {
                message.missing = data.missing;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                format?: number;
                index?: number;
                chunk?: Uint8Array;
                missing?: boolean;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.format != null) {
                data.format = this.format;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.chunk != null) {
                data.chunk = this.chunk;
            }
            if (this.missing != null) {
                data.missing = this.missing;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeUint64(1, this.height);
            if (this.format != 0)
                writer.writeUint32(2, this.format);
            if (this.index != 0)
                writer.writeUint32(3, this.index);
            if (this.chunk.length)
                writer.writeBytes(4, this.chunk);
            if (this.missing != false)
                writer.writeBool(5, this.missing);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChunkResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChunkResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readUint64();
                        break;
                    case 2:
                        message.format = reader.readUint32();
                        break;
                    case 3:
                        message.index = reader.readUint32();
                        break;
                    case 4:
                        message.chunk = reader.readBytes();
                        break;
                    case 5:
                        message.missing = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChunkResponse {
            return ChunkResponse.deserialize(bytes);
        }
    }
}
