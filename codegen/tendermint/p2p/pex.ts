/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: tendermint/p2p/pex.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./types";
import * as dependency_2 from "./../../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace tendermint.p2p {
    export class PexRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): PexRequest {
            const message = new PexRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PexRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PexRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PexRequest {
            return PexRequest.deserialize(bytes);
        }
    }
    export class PexAddrs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            addrs?: dependency_1.tendermint.p2p.NetAddress[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("addrs" in data && data.addrs != undefined) {
                    this.addrs = data.addrs;
                }
            }
        }
        get addrs() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.tendermint.p2p.NetAddress, 1) as dependency_1.tendermint.p2p.NetAddress[];
        }
        set addrs(value: dependency_1.tendermint.p2p.NetAddress[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            addrs?: ReturnType<typeof dependency_1.tendermint.p2p.NetAddress.prototype.toObject>[];
        }): PexAddrs {
            const message = new PexAddrs({});
            if (data.addrs != null) {
                message.addrs = data.addrs.map(item => dependency_1.tendermint.p2p.NetAddress.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                addrs?: ReturnType<typeof dependency_1.tendermint.p2p.NetAddress.prototype.toObject>[];
            } = {};
            if (this.addrs != null) {
                data.addrs = this.addrs.map((item: dependency_1.tendermint.p2p.NetAddress) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.addrs.length)
                writer.writeRepeatedMessage(1, this.addrs, (item: dependency_1.tendermint.p2p.NetAddress) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PexAddrs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PexAddrs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.addrs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.tendermint.p2p.NetAddress.deserialize(reader), dependency_1.tendermint.p2p.NetAddress));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PexAddrs {
            return PexAddrs.deserialize(bytes);
        }
    }
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            pex_request?: PexRequest;
            pex_addrs?: never;
        } | {
            pex_request?: never;
            pex_addrs?: PexAddrs;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pex_request" in data && data.pex_request != undefined) {
                    this.pex_request = data.pex_request;
                }
                if ("pex_addrs" in data && data.pex_addrs != undefined) {
                    this.pex_addrs = data.pex_addrs;
                }
            }
        }
        get pex_request() {
            return pb_1.Message.getWrapperField(this, PexRequest, 1) as PexRequest;
        }
        set pex_request(value: PexRequest) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_pex_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get pex_addrs() {
            return pb_1.Message.getWrapperField(this, PexAddrs, 2) as PexAddrs;
        }
        set pex_addrs(value: PexAddrs) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_pex_addrs() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get sum() {
            const cases: {
                [index: number]: "none" | "pex_request" | "pex_addrs";
            } = {
                0: "none",
                1: "pex_request",
                2: "pex_addrs"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            pex_request?: ReturnType<typeof PexRequest.prototype.toObject>;
            pex_addrs?: ReturnType<typeof PexAddrs.prototype.toObject>;
        }): Message {
            const message = new Message({});
            if (data.pex_request != null) {
                message.pex_request = PexRequest.fromObject(data.pex_request);
            }
            if (data.pex_addrs != null) {
                message.pex_addrs = PexAddrs.fromObject(data.pex_addrs);
            }
            return message;
        }
        toObject() {
            const data: {
                pex_request?: ReturnType<typeof PexRequest.prototype.toObject>;
                pex_addrs?: ReturnType<typeof PexAddrs.prototype.toObject>;
            } = {};
            if (this.pex_request != null) {
                data.pex_request = this.pex_request.toObject();
            }
            if (this.pex_addrs != null) {
                data.pex_addrs = this.pex_addrs.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_pex_request)
                writer.writeMessage(1, this.pex_request, () => this.pex_request.serialize(writer));
            if (this.has_pex_addrs)
                writer.writeMessage(2, this.pex_addrs, () => this.pex_addrs.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pex_request, () => message.pex_request = PexRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.pex_addrs, () => message.pex_addrs = PexAddrs.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
}
