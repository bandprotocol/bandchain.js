/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: tendermint/consensus/types.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../gogoproto/gogo";
import * as dependency_2 from "./../types/types";
import * as dependency_3 from "./../libs/bits/types";
import * as pb_1 from "google-protobuf";
export namespace tendermint.consensus {
    export class NewRoundStep extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
            round?: number;
            step?: number;
            seconds_since_start_time?: number;
            last_commit_round?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("round" in data && data.round != undefined) {
                    this.round = data.round;
                }
                if ("step" in data && data.step != undefined) {
                    this.step = data.step;
                }
                if ("seconds_since_start_time" in data && data.seconds_since_start_time != undefined) {
                    this.seconds_since_start_time = data.seconds_since_start_time;
                }
                if ("last_commit_round" in data && data.last_commit_round != undefined) {
                    this.last_commit_round = data.last_commit_round;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get round() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set round(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get step() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set step(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get seconds_since_start_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set seconds_since_start_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get last_commit_round() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set last_commit_round(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            height?: number;
            round?: number;
            step?: number;
            seconds_since_start_time?: number;
            last_commit_round?: number;
        }): NewRoundStep {
            const message = new NewRoundStep({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.round != null) {
                message.round = data.round;
            }
            if (data.step != null) {
                message.step = data.step;
            }
            if (data.seconds_since_start_time != null) {
                message.seconds_since_start_time = data.seconds_since_start_time;
            }
            if (data.last_commit_round != null) {
                message.last_commit_round = data.last_commit_round;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                round?: number;
                step?: number;
                seconds_since_start_time?: number;
                last_commit_round?: number;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.round != null) {
                data.round = this.round;
            }
            if (this.step != null) {
                data.step = this.step;
            }
            if (this.seconds_since_start_time != null) {
                data.seconds_since_start_time = this.seconds_since_start_time;
            }
            if (this.last_commit_round != null) {
                data.last_commit_round = this.last_commit_round;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (this.round != 0)
                writer.writeInt32(2, this.round);
            if (this.step != 0)
                writer.writeUint32(3, this.step);
            if (this.seconds_since_start_time != 0)
                writer.writeInt64(4, this.seconds_since_start_time);
            if (this.last_commit_round != 0)
                writer.writeInt32(5, this.last_commit_round);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewRoundStep {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewRoundStep();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    case 2:
                        message.round = reader.readInt32();
                        break;
                    case 3:
                        message.step = reader.readUint32();
                        break;
                    case 4:
                        message.seconds_since_start_time = reader.readInt64();
                        break;
                    case 5:
                        message.last_commit_round = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewRoundStep {
            return NewRoundStep.deserialize(bytes);
        }
    }
    export class NewValidBlock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
            round?: number;
            block_part_set_header?: dependency_2.tendermint.types.PartSetHeader;
            block_parts?: dependency_3.tendermint.libs.bits.BitArray;
            is_commit?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("round" in data && data.round != undefined) {
                    this.round = data.round;
                }
                if ("block_part_set_header" in data && data.block_part_set_header != undefined) {
                    this.block_part_set_header = data.block_part_set_header;
                }
                if ("block_parts" in data && data.block_parts != undefined) {
                    this.block_parts = data.block_parts;
                }
                if ("is_commit" in data && data.is_commit != undefined) {
                    this.is_commit = data.is_commit;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get round() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set round(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get block_part_set_header() {
            return pb_1.Message.getWrapperField(this, dependency_2.tendermint.types.PartSetHeader, 3) as dependency_2.tendermint.types.PartSetHeader;
        }
        set block_part_set_header(value: dependency_2.tendermint.types.PartSetHeader) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_block_part_set_header() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get block_parts() {
            return pb_1.Message.getWrapperField(this, dependency_3.tendermint.libs.bits.BitArray, 4) as dependency_3.tendermint.libs.bits.BitArray;
        }
        set block_parts(value: dependency_3.tendermint.libs.bits.BitArray) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_block_parts() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get is_commit() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set is_commit(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            height?: number;
            round?: number;
            block_part_set_header?: ReturnType<typeof dependency_2.tendermint.types.PartSetHeader.prototype.toObject>;
            block_parts?: ReturnType<typeof dependency_3.tendermint.libs.bits.BitArray.prototype.toObject>;
            is_commit?: boolean;
        }): NewValidBlock {
            const message = new NewValidBlock({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.round != null) {
                message.round = data.round;
            }
            if (data.block_part_set_header != null) {
                message.block_part_set_header = dependency_2.tendermint.types.PartSetHeader.fromObject(data.block_part_set_header);
            }
            if (data.block_parts != null) {
                message.block_parts = dependency_3.tendermint.libs.bits.BitArray.fromObject(data.block_parts);
            }
            if (data.is_commit != null) {
                message.is_commit = data.is_commit;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                round?: number;
                block_part_set_header?: ReturnType<typeof dependency_2.tendermint.types.PartSetHeader.prototype.toObject>;
                block_parts?: ReturnType<typeof dependency_3.tendermint.libs.bits.BitArray.prototype.toObject>;
                is_commit?: boolean;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.round != null) {
                data.round = this.round;
            }
            if (this.block_part_set_header != null) {
                data.block_part_set_header = this.block_part_set_header.toObject();
            }
            if (this.block_parts != null) {
                data.block_parts = this.block_parts.toObject();
            }
            if (this.is_commit != null) {
                data.is_commit = this.is_commit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (this.round != 0)
                writer.writeInt32(2, this.round);
            if (this.has_block_part_set_header)
                writer.writeMessage(3, this.block_part_set_header, () => this.block_part_set_header.serialize(writer));
            if (this.has_block_parts)
                writer.writeMessage(4, this.block_parts, () => this.block_parts.serialize(writer));
            if (this.is_commit != false)
                writer.writeBool(5, this.is_commit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewValidBlock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewValidBlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    case 2:
                        message.round = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.block_part_set_header, () => message.block_part_set_header = dependency_2.tendermint.types.PartSetHeader.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.block_parts, () => message.block_parts = dependency_3.tendermint.libs.bits.BitArray.deserialize(reader));
                        break;
                    case 5:
                        message.is_commit = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewValidBlock {
            return NewValidBlock.deserialize(bytes);
        }
    }
    export class Proposal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proposal?: dependency_2.tendermint.types.Proposal;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal" in data && data.proposal != undefined) {
                    this.proposal = data.proposal;
                }
            }
        }
        get proposal() {
            return pb_1.Message.getWrapperField(this, dependency_2.tendermint.types.Proposal, 1) as dependency_2.tendermint.types.Proposal;
        }
        set proposal(value: dependency_2.tendermint.types.Proposal) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_proposal() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            proposal?: ReturnType<typeof dependency_2.tendermint.types.Proposal.prototype.toObject>;
        }): Proposal {
            const message = new Proposal({});
            if (data.proposal != null) {
                message.proposal = dependency_2.tendermint.types.Proposal.fromObject(data.proposal);
            }
            return message;
        }
        toObject() {
            const data: {
                proposal?: ReturnType<typeof dependency_2.tendermint.types.Proposal.prototype.toObject>;
            } = {};
            if (this.proposal != null) {
                data.proposal = this.proposal.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_proposal)
                writer.writeMessage(1, this.proposal, () => this.proposal.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Proposal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Proposal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.proposal, () => message.proposal = dependency_2.tendermint.types.Proposal.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Proposal {
            return Proposal.deserialize(bytes);
        }
    }
    export class ProposalPOL extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
            proposal_pol_round?: number;
            proposal_pol?: dependency_3.tendermint.libs.bits.BitArray;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("proposal_pol_round" in data && data.proposal_pol_round != undefined) {
                    this.proposal_pol_round = data.proposal_pol_round;
                }
                if ("proposal_pol" in data && data.proposal_pol != undefined) {
                    this.proposal_pol = data.proposal_pol;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get proposal_pol_round() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set proposal_pol_round(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get proposal_pol() {
            return pb_1.Message.getWrapperField(this, dependency_3.tendermint.libs.bits.BitArray, 3) as dependency_3.tendermint.libs.bits.BitArray;
        }
        set proposal_pol(value: dependency_3.tendermint.libs.bits.BitArray) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_proposal_pol() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            height?: number;
            proposal_pol_round?: number;
            proposal_pol?: ReturnType<typeof dependency_3.tendermint.libs.bits.BitArray.prototype.toObject>;
        }): ProposalPOL {
            const message = new ProposalPOL({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.proposal_pol_round != null) {
                message.proposal_pol_round = data.proposal_pol_round;
            }
            if (data.proposal_pol != null) {
                message.proposal_pol = dependency_3.tendermint.libs.bits.BitArray.fromObject(data.proposal_pol);
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                proposal_pol_round?: number;
                proposal_pol?: ReturnType<typeof dependency_3.tendermint.libs.bits.BitArray.prototype.toObject>;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.proposal_pol_round != null) {
                data.proposal_pol_round = this.proposal_pol_round;
            }
            if (this.proposal_pol != null) {
                data.proposal_pol = this.proposal_pol.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (this.proposal_pol_round != 0)
                writer.writeInt32(2, this.proposal_pol_round);
            if (this.has_proposal_pol)
                writer.writeMessage(3, this.proposal_pol, () => this.proposal_pol.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProposalPOL {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProposalPOL();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    case 2:
                        message.proposal_pol_round = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.proposal_pol, () => message.proposal_pol = dependency_3.tendermint.libs.bits.BitArray.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProposalPOL {
            return ProposalPOL.deserialize(bytes);
        }
    }
    export class BlockPart extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
            round?: number;
            part?: dependency_2.tendermint.types.Part;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("round" in data && data.round != undefined) {
                    this.round = data.round;
                }
                if ("part" in data && data.part != undefined) {
                    this.part = data.part;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get round() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set round(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get part() {
            return pb_1.Message.getWrapperField(this, dependency_2.tendermint.types.Part, 3) as dependency_2.tendermint.types.Part;
        }
        set part(value: dependency_2.tendermint.types.Part) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_part() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            height?: number;
            round?: number;
            part?: ReturnType<typeof dependency_2.tendermint.types.Part.prototype.toObject>;
        }): BlockPart {
            const message = new BlockPart({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.round != null) {
                message.round = data.round;
            }
            if (data.part != null) {
                message.part = dependency_2.tendermint.types.Part.fromObject(data.part);
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                round?: number;
                part?: ReturnType<typeof dependency_2.tendermint.types.Part.prototype.toObject>;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.round != null) {
                data.round = this.round;
            }
            if (this.part != null) {
                data.part = this.part.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (this.round != 0)
                writer.writeInt32(2, this.round);
            if (this.has_part)
                writer.writeMessage(3, this.part, () => this.part.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockPart {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockPart();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    case 2:
                        message.round = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.part, () => message.part = dependency_2.tendermint.types.Part.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockPart {
            return BlockPart.deserialize(bytes);
        }
    }
    export class Vote extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vote?: dependency_2.tendermint.types.Vote;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vote" in data && data.vote != undefined) {
                    this.vote = data.vote;
                }
            }
        }
        get vote() {
            return pb_1.Message.getWrapperField(this, dependency_2.tendermint.types.Vote, 1) as dependency_2.tendermint.types.Vote;
        }
        set vote(value: dependency_2.tendermint.types.Vote) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_vote() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            vote?: ReturnType<typeof dependency_2.tendermint.types.Vote.prototype.toObject>;
        }): Vote {
            const message = new Vote({});
            if (data.vote != null) {
                message.vote = dependency_2.tendermint.types.Vote.fromObject(data.vote);
            }
            return message;
        }
        toObject() {
            const data: {
                vote?: ReturnType<typeof dependency_2.tendermint.types.Vote.prototype.toObject>;
            } = {};
            if (this.vote != null) {
                data.vote = this.vote.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_vote)
                writer.writeMessage(1, this.vote, () => this.vote.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Vote {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vote();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.vote, () => message.vote = dependency_2.tendermint.types.Vote.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Vote {
            return Vote.deserialize(bytes);
        }
    }
    export class HasVote extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
            round?: number;
            type?: dependency_2.tendermint.types.SignedMsgType;
            index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("round" in data && data.round != undefined) {
                    this.round = data.round;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get round() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set round(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_2.tendermint.types.SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN) as dependency_2.tendermint.types.SignedMsgType;
        }
        set type(value: dependency_2.tendermint.types.SignedMsgType) {
            pb_1.Message.setField(this, 3, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            height?: number;
            round?: number;
            type?: dependency_2.tendermint.types.SignedMsgType;
            index?: number;
        }): HasVote {
            const message = new HasVote({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.round != null) {
                message.round = data.round;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                round?: number;
                type?: dependency_2.tendermint.types.SignedMsgType;
                index?: number;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.round != null) {
                data.round = this.round;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (this.round != 0)
                writer.writeInt32(2, this.round);
            if (this.type != dependency_2.tendermint.types.SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN)
                writer.writeEnum(3, this.type);
            if (this.index != 0)
                writer.writeInt32(4, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HasVote {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HasVote();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    case 2:
                        message.round = reader.readInt32();
                        break;
                    case 3:
                        message.type = reader.readEnum();
                        break;
                    case 4:
                        message.index = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HasVote {
            return HasVote.deserialize(bytes);
        }
    }
    export class HasProposalBlockPart extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
            round?: number;
            index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("round" in data && data.round != undefined) {
                    this.round = data.round;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get round() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set round(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            height?: number;
            round?: number;
            index?: number;
        }): HasProposalBlockPart {
            const message = new HasProposalBlockPart({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.round != null) {
                message.round = data.round;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                round?: number;
                index?: number;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.round != null) {
                data.round = this.round;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (this.round != 0)
                writer.writeInt32(2, this.round);
            if (this.index != 0)
                writer.writeInt32(3, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HasProposalBlockPart {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HasProposalBlockPart();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    case 2:
                        message.round = reader.readInt32();
                        break;
                    case 3:
                        message.index = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HasProposalBlockPart {
            return HasProposalBlockPart.deserialize(bytes);
        }
    }
    export class VoteSetMaj23 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
            round?: number;
            type?: dependency_2.tendermint.types.SignedMsgType;
            block_id?: dependency_2.tendermint.types.BlockID;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("round" in data && data.round != undefined) {
                    this.round = data.round;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get round() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set round(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_2.tendermint.types.SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN) as dependency_2.tendermint.types.SignedMsgType;
        }
        set type(value: dependency_2.tendermint.types.SignedMsgType) {
            pb_1.Message.setField(this, 3, value);
        }
        get block_id() {
            return pb_1.Message.getWrapperField(this, dependency_2.tendermint.types.BlockID, 4) as dependency_2.tendermint.types.BlockID;
        }
        set block_id(value: dependency_2.tendermint.types.BlockID) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_block_id() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            height?: number;
            round?: number;
            type?: dependency_2.tendermint.types.SignedMsgType;
            block_id?: ReturnType<typeof dependency_2.tendermint.types.BlockID.prototype.toObject>;
        }): VoteSetMaj23 {
            const message = new VoteSetMaj23({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.round != null) {
                message.round = data.round;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.block_id != null) {
                message.block_id = dependency_2.tendermint.types.BlockID.fromObject(data.block_id);
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                round?: number;
                type?: dependency_2.tendermint.types.SignedMsgType;
                block_id?: ReturnType<typeof dependency_2.tendermint.types.BlockID.prototype.toObject>;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.round != null) {
                data.round = this.round;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.block_id != null) {
                data.block_id = this.block_id.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (this.round != 0)
                writer.writeInt32(2, this.round);
            if (this.type != dependency_2.tendermint.types.SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN)
                writer.writeEnum(3, this.type);
            if (this.has_block_id)
                writer.writeMessage(4, this.block_id, () => this.block_id.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VoteSetMaj23 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VoteSetMaj23();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    case 2:
                        message.round = reader.readInt32();
                        break;
                    case 3:
                        message.type = reader.readEnum();
                        break;
                    case 4:
                        reader.readMessage(message.block_id, () => message.block_id = dependency_2.tendermint.types.BlockID.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VoteSetMaj23 {
            return VoteSetMaj23.deserialize(bytes);
        }
    }
    export class VoteSetBits extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
            round?: number;
            type?: dependency_2.tendermint.types.SignedMsgType;
            block_id?: dependency_2.tendermint.types.BlockID;
            votes?: dependency_3.tendermint.libs.bits.BitArray;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("round" in data && data.round != undefined) {
                    this.round = data.round;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("votes" in data && data.votes != undefined) {
                    this.votes = data.votes;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get round() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set round(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_2.tendermint.types.SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN) as dependency_2.tendermint.types.SignedMsgType;
        }
        set type(value: dependency_2.tendermint.types.SignedMsgType) {
            pb_1.Message.setField(this, 3, value);
        }
        get block_id() {
            return pb_1.Message.getWrapperField(this, dependency_2.tendermint.types.BlockID, 4) as dependency_2.tendermint.types.BlockID;
        }
        set block_id(value: dependency_2.tendermint.types.BlockID) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_block_id() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get votes() {
            return pb_1.Message.getWrapperField(this, dependency_3.tendermint.libs.bits.BitArray, 5) as dependency_3.tendermint.libs.bits.BitArray;
        }
        set votes(value: dependency_3.tendermint.libs.bits.BitArray) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_votes() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            height?: number;
            round?: number;
            type?: dependency_2.tendermint.types.SignedMsgType;
            block_id?: ReturnType<typeof dependency_2.tendermint.types.BlockID.prototype.toObject>;
            votes?: ReturnType<typeof dependency_3.tendermint.libs.bits.BitArray.prototype.toObject>;
        }): VoteSetBits {
            const message = new VoteSetBits({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.round != null) {
                message.round = data.round;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.block_id != null) {
                message.block_id = dependency_2.tendermint.types.BlockID.fromObject(data.block_id);
            }
            if (data.votes != null) {
                message.votes = dependency_3.tendermint.libs.bits.BitArray.fromObject(data.votes);
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                round?: number;
                type?: dependency_2.tendermint.types.SignedMsgType;
                block_id?: ReturnType<typeof dependency_2.tendermint.types.BlockID.prototype.toObject>;
                votes?: ReturnType<typeof dependency_3.tendermint.libs.bits.BitArray.prototype.toObject>;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.round != null) {
                data.round = this.round;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.block_id != null) {
                data.block_id = this.block_id.toObject();
            }
            if (this.votes != null) {
                data.votes = this.votes.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (this.round != 0)
                writer.writeInt32(2, this.round);
            if (this.type != dependency_2.tendermint.types.SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN)
                writer.writeEnum(3, this.type);
            if (this.has_block_id)
                writer.writeMessage(4, this.block_id, () => this.block_id.serialize(writer));
            if (this.has_votes)
                writer.writeMessage(5, this.votes, () => this.votes.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VoteSetBits {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VoteSetBits();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    case 2:
                        message.round = reader.readInt32();
                        break;
                    case 3:
                        message.type = reader.readEnum();
                        break;
                    case 4:
                        reader.readMessage(message.block_id, () => message.block_id = dependency_2.tendermint.types.BlockID.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.votes, () => message.votes = dependency_3.tendermint.libs.bits.BitArray.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VoteSetBits {
            return VoteSetBits.deserialize(bytes);
        }
    }
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]];
        constructor(data?: any[] | ({} & (({
            new_round_step?: NewRoundStep;
            new_valid_block?: never;
            proposal?: never;
            proposal_pol?: never;
            block_part?: never;
            vote?: never;
            has_vote?: never;
            vote_set_maj23?: never;
            vote_set_bits?: never;
            has_proposal_block_part?: never;
        } | {
            new_round_step?: never;
            new_valid_block?: NewValidBlock;
            proposal?: never;
            proposal_pol?: never;
            block_part?: never;
            vote?: never;
            has_vote?: never;
            vote_set_maj23?: never;
            vote_set_bits?: never;
            has_proposal_block_part?: never;
        } | {
            new_round_step?: never;
            new_valid_block?: never;
            proposal?: Proposal;
            proposal_pol?: never;
            block_part?: never;
            vote?: never;
            has_vote?: never;
            vote_set_maj23?: never;
            vote_set_bits?: never;
            has_proposal_block_part?: never;
        } | {
            new_round_step?: never;
            new_valid_block?: never;
            proposal?: never;
            proposal_pol?: ProposalPOL;
            block_part?: never;
            vote?: never;
            has_vote?: never;
            vote_set_maj23?: never;
            vote_set_bits?: never;
            has_proposal_block_part?: never;
        } | {
            new_round_step?: never;
            new_valid_block?: never;
            proposal?: never;
            proposal_pol?: never;
            block_part?: BlockPart;
            vote?: never;
            has_vote?: never;
            vote_set_maj23?: never;
            vote_set_bits?: never;
            has_proposal_block_part?: never;
        } | {
            new_round_step?: never;
            new_valid_block?: never;
            proposal?: never;
            proposal_pol?: never;
            block_part?: never;
            vote?: Vote;
            has_vote?: never;
            vote_set_maj23?: never;
            vote_set_bits?: never;
            has_proposal_block_part?: never;
        } | {
            new_round_step?: never;
            new_valid_block?: never;
            proposal?: never;
            proposal_pol?: never;
            block_part?: never;
            vote?: never;
            has_vote?: HasVote;
            vote_set_maj23?: never;
            vote_set_bits?: never;
            has_proposal_block_part?: never;
        } | {
            new_round_step?: never;
            new_valid_block?: never;
            proposal?: never;
            proposal_pol?: never;
            block_part?: never;
            vote?: never;
            has_vote?: never;
            vote_set_maj23?: VoteSetMaj23;
            vote_set_bits?: never;
            has_proposal_block_part?: never;
        } | {
            new_round_step?: never;
            new_valid_block?: never;
            proposal?: never;
            proposal_pol?: never;
            block_part?: never;
            vote?: never;
            has_vote?: never;
            vote_set_maj23?: never;
            vote_set_bits?: VoteSetBits;
            has_proposal_block_part?: never;
        } | {
            new_round_step?: never;
            new_valid_block?: never;
            proposal?: never;
            proposal_pol?: never;
            block_part?: never;
            vote?: never;
            has_vote?: never;
            vote_set_maj23?: never;
            vote_set_bits?: never;
            has_proposal_block_part?: HasProposalBlockPart;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("new_round_step" in data && data.new_round_step != undefined) {
                    this.new_round_step = data.new_round_step;
                }
                if ("new_valid_block" in data && data.new_valid_block != undefined) {
                    this.new_valid_block = data.new_valid_block;
                }
                if ("proposal" in data && data.proposal != undefined) {
                    this.proposal = data.proposal;
                }
                if ("proposal_pol" in data && data.proposal_pol != undefined) {
                    this.proposal_pol = data.proposal_pol;
                }
                if ("block_part" in data && data.block_part != undefined) {
                    this.block_part = data.block_part;
                }
                if ("vote" in data && data.vote != undefined) {
                    this.vote = data.vote;
                }
                if ("has_vote" in data && data.has_vote != undefined) {
                    this.has_vote = data.has_vote;
                }
                if ("vote_set_maj23" in data && data.vote_set_maj23 != undefined) {
                    this.vote_set_maj23 = data.vote_set_maj23;
                }
                if ("vote_set_bits" in data && data.vote_set_bits != undefined) {
                    this.vote_set_bits = data.vote_set_bits;
                }
                if ("has_proposal_block_part" in data && data.has_proposal_block_part != undefined) {
                    this.has_proposal_block_part = data.has_proposal_block_part;
                }
            }
        }
        get new_round_step() {
            return pb_1.Message.getWrapperField(this, NewRoundStep, 1) as NewRoundStep;
        }
        set new_round_step(value: NewRoundStep) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_new_round_step() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get new_valid_block() {
            return pb_1.Message.getWrapperField(this, NewValidBlock, 2) as NewValidBlock;
        }
        set new_valid_block(value: NewValidBlock) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_new_valid_block() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get proposal() {
            return pb_1.Message.getWrapperField(this, Proposal, 3) as Proposal;
        }
        set proposal(value: Proposal) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_proposal() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get proposal_pol() {
            return pb_1.Message.getWrapperField(this, ProposalPOL, 4) as ProposalPOL;
        }
        set proposal_pol(value: ProposalPOL) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_proposal_pol() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get block_part() {
            return pb_1.Message.getWrapperField(this, BlockPart, 5) as BlockPart;
        }
        set block_part(value: BlockPart) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_block_part() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get vote() {
            return pb_1.Message.getWrapperField(this, Vote, 6) as Vote;
        }
        set vote(value: Vote) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_vote() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get has_vote() {
            return pb_1.Message.getWrapperField(this, HasVote, 7) as HasVote;
        }
        set has_vote(value: HasVote) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_has_vote() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get vote_set_maj23() {
            return pb_1.Message.getWrapperField(this, VoteSetMaj23, 8) as VoteSetMaj23;
        }
        set vote_set_maj23(value: VoteSetMaj23) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_vote_set_maj23() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get vote_set_bits() {
            return pb_1.Message.getWrapperField(this, VoteSetBits, 9) as VoteSetBits;
        }
        set vote_set_bits(value: VoteSetBits) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_vote_set_bits() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get has_proposal_block_part() {
            return pb_1.Message.getWrapperField(this, HasProposalBlockPart, 10) as HasProposalBlockPart;
        }
        set has_proposal_block_part(value: HasProposalBlockPart) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_has_proposal_block_part() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get sum() {
            const cases: {
                [index: number]: "none" | "new_round_step" | "new_valid_block" | "proposal" | "proposal_pol" | "block_part" | "vote" | "has_vote" | "vote_set_maj23" | "vote_set_bits" | "has_proposal_block_part";
            } = {
                0: "none",
                1: "new_round_step",
                2: "new_valid_block",
                3: "proposal",
                4: "proposal_pol",
                5: "block_part",
                6: "vote",
                7: "has_vote",
                8: "vote_set_maj23",
                9: "vote_set_bits",
                10: "has_proposal_block_part"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])];
        }
        static fromObject(data: {
            new_round_step?: ReturnType<typeof NewRoundStep.prototype.toObject>;
            new_valid_block?: ReturnType<typeof NewValidBlock.prototype.toObject>;
            proposal?: ReturnType<typeof Proposal.prototype.toObject>;
            proposal_pol?: ReturnType<typeof ProposalPOL.prototype.toObject>;
            block_part?: ReturnType<typeof BlockPart.prototype.toObject>;
            vote?: ReturnType<typeof Vote.prototype.toObject>;
            has_vote?: ReturnType<typeof HasVote.prototype.toObject>;
            vote_set_maj23?: ReturnType<typeof VoteSetMaj23.prototype.toObject>;
            vote_set_bits?: ReturnType<typeof VoteSetBits.prototype.toObject>;
            has_proposal_block_part?: ReturnType<typeof HasProposalBlockPart.prototype.toObject>;
        }): Message {
            const message = new Message({});
            if (data.new_round_step != null) {
                message.new_round_step = NewRoundStep.fromObject(data.new_round_step);
            }
            if (data.new_valid_block != null) {
                message.new_valid_block = NewValidBlock.fromObject(data.new_valid_block);
            }
            if (data.proposal != null) {
                message.proposal = Proposal.fromObject(data.proposal);
            }
            if (data.proposal_pol != null) {
                message.proposal_pol = ProposalPOL.fromObject(data.proposal_pol);
            }
            if (data.block_part != null) {
                message.block_part = BlockPart.fromObject(data.block_part);
            }
            if (data.vote != null) {
                message.vote = Vote.fromObject(data.vote);
            }
            if (data.has_vote != null) {
                message.has_vote = HasVote.fromObject(data.has_vote);
            }
            if (data.vote_set_maj23 != null) {
                message.vote_set_maj23 = VoteSetMaj23.fromObject(data.vote_set_maj23);
            }
            if (data.vote_set_bits != null) {
                message.vote_set_bits = VoteSetBits.fromObject(data.vote_set_bits);
            }
            if (data.has_proposal_block_part != null) {
                message.has_proposal_block_part = HasProposalBlockPart.fromObject(data.has_proposal_block_part);
            }
            return message;
        }
        toObject() {
            const data: {
                new_round_step?: ReturnType<typeof NewRoundStep.prototype.toObject>;
                new_valid_block?: ReturnType<typeof NewValidBlock.prototype.toObject>;
                proposal?: ReturnType<typeof Proposal.prototype.toObject>;
                proposal_pol?: ReturnType<typeof ProposalPOL.prototype.toObject>;
                block_part?: ReturnType<typeof BlockPart.prototype.toObject>;
                vote?: ReturnType<typeof Vote.prototype.toObject>;
                has_vote?: ReturnType<typeof HasVote.prototype.toObject>;
                vote_set_maj23?: ReturnType<typeof VoteSetMaj23.prototype.toObject>;
                vote_set_bits?: ReturnType<typeof VoteSetBits.prototype.toObject>;
                has_proposal_block_part?: ReturnType<typeof HasProposalBlockPart.prototype.toObject>;
            } = {};
            if (this.new_round_step != null) {
                data.new_round_step = this.new_round_step.toObject();
            }
            if (this.new_valid_block != null) {
                data.new_valid_block = this.new_valid_block.toObject();
            }
            if (this.proposal != null) {
                data.proposal = this.proposal.toObject();
            }
            if (this.proposal_pol != null) {
                data.proposal_pol = this.proposal_pol.toObject();
            }
            if (this.block_part != null) {
                data.block_part = this.block_part.toObject();
            }
            if (this.vote != null) {
                data.vote = this.vote.toObject();
            }
            if (this.has_vote != null) {
                data.has_vote = this.has_vote.toObject();
            }
            if (this.vote_set_maj23 != null) {
                data.vote_set_maj23 = this.vote_set_maj23.toObject();
            }
            if (this.vote_set_bits != null) {
                data.vote_set_bits = this.vote_set_bits.toObject();
            }
            if (this.has_proposal_block_part != null) {
                data.has_proposal_block_part = this.has_proposal_block_part.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_new_round_step)
                writer.writeMessage(1, this.new_round_step, () => this.new_round_step.serialize(writer));
            if (this.has_new_valid_block)
                writer.writeMessage(2, this.new_valid_block, () => this.new_valid_block.serialize(writer));
            if (this.has_proposal)
                writer.writeMessage(3, this.proposal, () => this.proposal.serialize(writer));
            if (this.has_proposal_pol)
                writer.writeMessage(4, this.proposal_pol, () => this.proposal_pol.serialize(writer));
            if (this.has_block_part)
                writer.writeMessage(5, this.block_part, () => this.block_part.serialize(writer));
            if (this.has_vote)
                writer.writeMessage(6, this.vote, () => this.vote.serialize(writer));
            if (this.has_has_vote)
                writer.writeMessage(7, this.has_vote, () => this.has_vote.serialize(writer));
            if (this.has_vote_set_maj23)
                writer.writeMessage(8, this.vote_set_maj23, () => this.vote_set_maj23.serialize(writer));
            if (this.has_vote_set_bits)
                writer.writeMessage(9, this.vote_set_bits, () => this.vote_set_bits.serialize(writer));
            if (this.has_has_proposal_block_part)
                writer.writeMessage(10, this.has_proposal_block_part, () => this.has_proposal_block_part.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.new_round_step, () => message.new_round_step = NewRoundStep.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.new_valid_block, () => message.new_valid_block = NewValidBlock.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.proposal, () => message.proposal = Proposal.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.proposal_pol, () => message.proposal_pol = ProposalPOL.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.block_part, () => message.block_part = BlockPart.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.vote, () => message.vote = Vote.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.has_vote, () => message.has_vote = HasVote.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.vote_set_maj23, () => message.vote_set_maj23 = VoteSetMaj23.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.vote_set_bits, () => message.vote_set_bits = VoteSetBits.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.has_proposal_block_part, () => message.has_proposal_block_part = HasProposalBlockPart.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
}
