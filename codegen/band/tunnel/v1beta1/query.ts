/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/tunnel/v1beta1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../../../cosmos/base/query/v1beta1/pagination";
import * as dependency_3 from "./../../../google/api/annotations";
import * as dependency_4 from "./params";
import * as dependency_5 from "./tunnel";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace band.tunnel.v1beta1 {
    export enum TunnelStatusFilter {
        TUNNEL_STATUS_FILTER_UNSPECIFIED = 0,
        TUNNEL_STATUS_FILTER_ACTIVE = 1,
        TUNNEL_STATUS_FILTER_INACTIVE = 2
    }
    export class QueryTunnelsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status_filter?: TunnelStatusFilter;
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status_filter" in data && data.status_filter != undefined) {
                    this.status_filter = data.status_filter;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get status_filter() {
            return pb_1.Message.getFieldWithDefault(this, 1, TunnelStatusFilter.TUNNEL_STATUS_FILTER_UNSPECIFIED) as TunnelStatusFilter;
        }
        set status_filter(value: TunnelStatusFilter) {
            pb_1.Message.setField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageRequest, 2) as dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            status_filter?: TunnelStatusFilter;
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }): QueryTunnelsRequest {
            const message = new QueryTunnelsRequest({});
            if (data.status_filter != null) {
                message.status_filter = data.status_filter;
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                status_filter?: TunnelStatusFilter;
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.status_filter != null) {
                data.status_filter = this.status_filter;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status_filter != TunnelStatusFilter.TUNNEL_STATUS_FILTER_UNSPECIFIED)
                writer.writeEnum(1, this.status_filter);
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryTunnelsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryTunnelsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status_filter = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryTunnelsRequest {
            return QueryTunnelsRequest.deserialize(bytes);
        }
    }
    export class QueryTunnelsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tunnels?: dependency_5.band.tunnel.v1beta1.Tunnel[];
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tunnels" in data && data.tunnels != undefined) {
                    this.tunnels = data.tunnels;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get tunnels() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.band.tunnel.v1beta1.Tunnel, 1) as dependency_5.band.tunnel.v1beta1.Tunnel[];
        }
        set tunnels(value: dependency_5.band.tunnel.v1beta1.Tunnel[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_2.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            tunnels?: ReturnType<typeof dependency_5.band.tunnel.v1beta1.Tunnel.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }): QueryTunnelsResponse {
            const message = new QueryTunnelsResponse({});
            if (data.tunnels != null) {
                message.tunnels = data.tunnels.map(item => dependency_5.band.tunnel.v1beta1.Tunnel.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                tunnels?: ReturnType<typeof dependency_5.band.tunnel.v1beta1.Tunnel.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.tunnels != null) {
                data.tunnels = this.tunnels.map((item: dependency_5.band.tunnel.v1beta1.Tunnel) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tunnels.length)
                writer.writeRepeatedMessage(1, this.tunnels, (item: dependency_5.band.tunnel.v1beta1.Tunnel) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryTunnelsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryTunnelsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tunnels, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.band.tunnel.v1beta1.Tunnel.deserialize(reader), dependency_5.band.tunnel.v1beta1.Tunnel));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryTunnelsResponse {
            return QueryTunnelsResponse.deserialize(bytes);
        }
    }
    export class QueryTunnelRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tunnel_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tunnel_id" in data && data.tunnel_id != undefined) {
                    this.tunnel_id = data.tunnel_id;
                }
            }
        }
        get tunnel_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tunnel_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            tunnel_id?: number;
        }): QueryTunnelRequest {
            const message = new QueryTunnelRequest({});
            if (data.tunnel_id != null) {
                message.tunnel_id = data.tunnel_id;
            }
            return message;
        }
        toObject() {
            const data: {
                tunnel_id?: number;
            } = {};
            if (this.tunnel_id != null) {
                data.tunnel_id = this.tunnel_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tunnel_id != 0)
                writer.writeUint64(1, this.tunnel_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryTunnelRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryTunnelRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tunnel_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryTunnelRequest {
            return QueryTunnelRequest.deserialize(bytes);
        }
    }
    export class QueryTunnelResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tunnel?: dependency_5.band.tunnel.v1beta1.Tunnel;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tunnel" in data && data.tunnel != undefined) {
                    this.tunnel = data.tunnel;
                }
            }
        }
        get tunnel() {
            return pb_1.Message.getWrapperField(this, dependency_5.band.tunnel.v1beta1.Tunnel, 1) as dependency_5.band.tunnel.v1beta1.Tunnel;
        }
        set tunnel(value: dependency_5.band.tunnel.v1beta1.Tunnel) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_tunnel() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            tunnel?: ReturnType<typeof dependency_5.band.tunnel.v1beta1.Tunnel.prototype.toObject>;
        }): QueryTunnelResponse {
            const message = new QueryTunnelResponse({});
            if (data.tunnel != null) {
                message.tunnel = dependency_5.band.tunnel.v1beta1.Tunnel.fromObject(data.tunnel);
            }
            return message;
        }
        toObject() {
            const data: {
                tunnel?: ReturnType<typeof dependency_5.band.tunnel.v1beta1.Tunnel.prototype.toObject>;
            } = {};
            if (this.tunnel != null) {
                data.tunnel = this.tunnel.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_tunnel)
                writer.writeMessage(1, this.tunnel, () => this.tunnel.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryTunnelResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryTunnelResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tunnel, () => message.tunnel = dependency_5.band.tunnel.v1beta1.Tunnel.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryTunnelResponse {
            return QueryTunnelResponse.deserialize(bytes);
        }
    }
    export class QueryDepositsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tunnel_id?: number;
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tunnel_id" in data && data.tunnel_id != undefined) {
                    this.tunnel_id = data.tunnel_id;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get tunnel_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tunnel_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageRequest, 2) as dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            tunnel_id?: number;
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }): QueryDepositsRequest {
            const message = new QueryDepositsRequest({});
            if (data.tunnel_id != null) {
                message.tunnel_id = data.tunnel_id;
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                tunnel_id?: number;
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.tunnel_id != null) {
                data.tunnel_id = this.tunnel_id;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tunnel_id != 0)
                writer.writeUint64(1, this.tunnel_id);
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDepositsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDepositsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tunnel_id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDepositsRequest {
            return QueryDepositsRequest.deserialize(bytes);
        }
    }
    export class QueryDepositsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            deposits?: dependency_5.band.tunnel.v1beta1.Deposit[];
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("deposits" in data && data.deposits != undefined) {
                    this.deposits = data.deposits;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get deposits() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.band.tunnel.v1beta1.Deposit, 1) as dependency_5.band.tunnel.v1beta1.Deposit[];
        }
        set deposits(value: dependency_5.band.tunnel.v1beta1.Deposit[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_2.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            deposits?: ReturnType<typeof dependency_5.band.tunnel.v1beta1.Deposit.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }): QueryDepositsResponse {
            const message = new QueryDepositsResponse({});
            if (data.deposits != null) {
                message.deposits = data.deposits.map(item => dependency_5.band.tunnel.v1beta1.Deposit.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                deposits?: ReturnType<typeof dependency_5.band.tunnel.v1beta1.Deposit.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.deposits != null) {
                data.deposits = this.deposits.map((item: dependency_5.band.tunnel.v1beta1.Deposit) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.deposits.length)
                writer.writeRepeatedMessage(1, this.deposits, (item: dependency_5.band.tunnel.v1beta1.Deposit) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDepositsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDepositsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.deposits, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.band.tunnel.v1beta1.Deposit.deserialize(reader), dependency_5.band.tunnel.v1beta1.Deposit));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDepositsResponse {
            return QueryDepositsResponse.deserialize(bytes);
        }
    }
    export class QueryDepositRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tunnel_id?: number;
            depositor?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tunnel_id" in data && data.tunnel_id != undefined) {
                    this.tunnel_id = data.tunnel_id;
                }
                if ("depositor" in data && data.depositor != undefined) {
                    this.depositor = data.depositor;
                }
            }
        }
        get tunnel_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tunnel_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get depositor() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set depositor(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tunnel_id?: number;
            depositor?: string;
        }): QueryDepositRequest {
            const message = new QueryDepositRequest({});
            if (data.tunnel_id != null) {
                message.tunnel_id = data.tunnel_id;
            }
            if (data.depositor != null) {
                message.depositor = data.depositor;
            }
            return message;
        }
        toObject() {
            const data: {
                tunnel_id?: number;
                depositor?: string;
            } = {};
            if (this.tunnel_id != null) {
                data.tunnel_id = this.tunnel_id;
            }
            if (this.depositor != null) {
                data.depositor = this.depositor;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tunnel_id != 0)
                writer.writeUint64(1, this.tunnel_id);
            if (this.depositor.length)
                writer.writeString(2, this.depositor);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDepositRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDepositRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tunnel_id = reader.readUint64();
                        break;
                    case 2:
                        message.depositor = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDepositRequest {
            return QueryDepositRequest.deserialize(bytes);
        }
    }
    export class QueryDepositResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            deposit?: dependency_5.band.tunnel.v1beta1.Deposit;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("deposit" in data && data.deposit != undefined) {
                    this.deposit = data.deposit;
                }
            }
        }
        get deposit() {
            return pb_1.Message.getWrapperField(this, dependency_5.band.tunnel.v1beta1.Deposit, 1) as dependency_5.band.tunnel.v1beta1.Deposit;
        }
        set deposit(value: dependency_5.band.tunnel.v1beta1.Deposit) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_deposit() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            deposit?: ReturnType<typeof dependency_5.band.tunnel.v1beta1.Deposit.prototype.toObject>;
        }): QueryDepositResponse {
            const message = new QueryDepositResponse({});
            if (data.deposit != null) {
                message.deposit = dependency_5.band.tunnel.v1beta1.Deposit.fromObject(data.deposit);
            }
            return message;
        }
        toObject() {
            const data: {
                deposit?: ReturnType<typeof dependency_5.band.tunnel.v1beta1.Deposit.prototype.toObject>;
            } = {};
            if (this.deposit != null) {
                data.deposit = this.deposit.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_deposit)
                writer.writeMessage(1, this.deposit, () => this.deposit.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDepositResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDepositResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.deposit, () => message.deposit = dependency_5.band.tunnel.v1beta1.Deposit.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDepositResponse {
            return QueryDepositResponse.deserialize(bytes);
        }
    }
    export class QueryPacketsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tunnel_id?: number;
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tunnel_id" in data && data.tunnel_id != undefined) {
                    this.tunnel_id = data.tunnel_id;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get tunnel_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tunnel_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageRequest, 2) as dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            tunnel_id?: number;
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }): QueryPacketsRequest {
            const message = new QueryPacketsRequest({});
            if (data.tunnel_id != null) {
                message.tunnel_id = data.tunnel_id;
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                tunnel_id?: number;
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.tunnel_id != null) {
                data.tunnel_id = this.tunnel_id;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tunnel_id != 0)
                writer.writeUint64(1, this.tunnel_id);
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPacketsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPacketsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tunnel_id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPacketsRequest {
            return QueryPacketsRequest.deserialize(bytes);
        }
    }
    export class QueryPacketsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            packets?: dependency_5.band.tunnel.v1beta1.Packet[];
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("packets" in data && data.packets != undefined) {
                    this.packets = data.packets;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get packets() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.band.tunnel.v1beta1.Packet, 1) as dependency_5.band.tunnel.v1beta1.Packet[];
        }
        set packets(value: dependency_5.band.tunnel.v1beta1.Packet[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_2.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            packets?: ReturnType<typeof dependency_5.band.tunnel.v1beta1.Packet.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }): QueryPacketsResponse {
            const message = new QueryPacketsResponse({});
            if (data.packets != null) {
                message.packets = data.packets.map(item => dependency_5.band.tunnel.v1beta1.Packet.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                packets?: ReturnType<typeof dependency_5.band.tunnel.v1beta1.Packet.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.packets != null) {
                data.packets = this.packets.map((item: dependency_5.band.tunnel.v1beta1.Packet) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.packets.length)
                writer.writeRepeatedMessage(1, this.packets, (item: dependency_5.band.tunnel.v1beta1.Packet) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPacketsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPacketsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.packets, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.band.tunnel.v1beta1.Packet.deserialize(reader), dependency_5.band.tunnel.v1beta1.Packet));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPacketsResponse {
            return QueryPacketsResponse.deserialize(bytes);
        }
    }
    export class QueryPacketRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tunnel_id?: number;
            sequence?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tunnel_id" in data && data.tunnel_id != undefined) {
                    this.tunnel_id = data.tunnel_id;
                }
                if ("sequence" in data && data.sequence != undefined) {
                    this.sequence = data.sequence;
                }
            }
        }
        get tunnel_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tunnel_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get sequence() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set sequence(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tunnel_id?: number;
            sequence?: number;
        }): QueryPacketRequest {
            const message = new QueryPacketRequest({});
            if (data.tunnel_id != null) {
                message.tunnel_id = data.tunnel_id;
            }
            if (data.sequence != null) {
                message.sequence = data.sequence;
            }
            return message;
        }
        toObject() {
            const data: {
                tunnel_id?: number;
                sequence?: number;
            } = {};
            if (this.tunnel_id != null) {
                data.tunnel_id = this.tunnel_id;
            }
            if (this.sequence != null) {
                data.sequence = this.sequence;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tunnel_id != 0)
                writer.writeUint64(1, this.tunnel_id);
            if (this.sequence != 0)
                writer.writeUint64(2, this.sequence);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPacketRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPacketRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tunnel_id = reader.readUint64();
                        break;
                    case 2:
                        message.sequence = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPacketRequest {
            return QueryPacketRequest.deserialize(bytes);
        }
    }
    export class QueryPacketResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            packet?: dependency_5.band.tunnel.v1beta1.Packet;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("packet" in data && data.packet != undefined) {
                    this.packet = data.packet;
                }
            }
        }
        get packet() {
            return pb_1.Message.getWrapperField(this, dependency_5.band.tunnel.v1beta1.Packet, 1) as dependency_5.band.tunnel.v1beta1.Packet;
        }
        set packet(value: dependency_5.band.tunnel.v1beta1.Packet) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_packet() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            packet?: ReturnType<typeof dependency_5.band.tunnel.v1beta1.Packet.prototype.toObject>;
        }): QueryPacketResponse {
            const message = new QueryPacketResponse({});
            if (data.packet != null) {
                message.packet = dependency_5.band.tunnel.v1beta1.Packet.fromObject(data.packet);
            }
            return message;
        }
        toObject() {
            const data: {
                packet?: ReturnType<typeof dependency_5.band.tunnel.v1beta1.Packet.prototype.toObject>;
            } = {};
            if (this.packet != null) {
                data.packet = this.packet.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_packet)
                writer.writeMessage(1, this.packet, () => this.packet.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPacketResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPacketResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.packet, () => message.packet = dependency_5.band.tunnel.v1beta1.Packet.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPacketResponse {
            return QueryPacketResponse.deserialize(bytes);
        }
    }
    export class QueryTotalFeesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryTotalFeesRequest {
            const message = new QueryTotalFeesRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryTotalFeesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryTotalFeesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryTotalFeesRequest {
            return QueryTotalFeesRequest.deserialize(bytes);
        }
    }
    export class QueryTotalFeesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            total_fees?: dependency_5.band.tunnel.v1beta1.TotalFees;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("total_fees" in data && data.total_fees != undefined) {
                    this.total_fees = data.total_fees;
                }
            }
        }
        get total_fees() {
            return pb_1.Message.getWrapperField(this, dependency_5.band.tunnel.v1beta1.TotalFees, 1) as dependency_5.band.tunnel.v1beta1.TotalFees;
        }
        set total_fees(value: dependency_5.band.tunnel.v1beta1.TotalFees) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_total_fees() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            total_fees?: ReturnType<typeof dependency_5.band.tunnel.v1beta1.TotalFees.prototype.toObject>;
        }): QueryTotalFeesResponse {
            const message = new QueryTotalFeesResponse({});
            if (data.total_fees != null) {
                message.total_fees = dependency_5.band.tunnel.v1beta1.TotalFees.fromObject(data.total_fees);
            }
            return message;
        }
        toObject() {
            const data: {
                total_fees?: ReturnType<typeof dependency_5.band.tunnel.v1beta1.TotalFees.prototype.toObject>;
            } = {};
            if (this.total_fees != null) {
                data.total_fees = this.total_fees.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_total_fees)
                writer.writeMessage(1, this.total_fees, () => this.total_fees.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryTotalFeesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryTotalFeesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.total_fees, () => message.total_fees = dependency_5.band.tunnel.v1beta1.TotalFees.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryTotalFeesResponse {
            return QueryTotalFeesResponse.deserialize(bytes);
        }
    }
    export class QueryParamsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryParamsRequest {
            const message = new QueryParamsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsRequest {
            return QueryParamsRequest.deserialize(bytes);
        }
    }
    export class QueryParamsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            params?: dependency_4.band.tunnel.v1beta1.Params;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
            }
        }
        get params() {
            return pb_1.Message.getWrapperField(this, dependency_4.band.tunnel.v1beta1.Params, 1) as dependency_4.band.tunnel.v1beta1.Params;
        }
        set params(value: dependency_4.band.tunnel.v1beta1.Params) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            params?: ReturnType<typeof dependency_4.band.tunnel.v1beta1.Params.prototype.toObject>;
        }): QueryParamsResponse {
            const message = new QueryParamsResponse({});
            if (data.params != null) {
                message.params = dependency_4.band.tunnel.v1beta1.Params.fromObject(data.params);
            }
            return message;
        }
        toObject() {
            const data: {
                params?: ReturnType<typeof dependency_4.band.tunnel.v1beta1.Params.prototype.toObject>;
            } = {};
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_params)
                writer.writeMessage(1, this.params, () => this.params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.params, () => message.params = dependency_4.band.tunnel.v1beta1.Params.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsResponse {
            return QueryParamsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedQueryService {
        static definition = {
            Tunnels: {
                path: "/band.tunnel.v1beta1.Query/Tunnels",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryTunnelsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryTunnelsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryTunnelsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryTunnelsResponse.deserialize(new Uint8Array(bytes))
            },
            Tunnel: {
                path: "/band.tunnel.v1beta1.Query/Tunnel",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryTunnelRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryTunnelRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryTunnelResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryTunnelResponse.deserialize(new Uint8Array(bytes))
            },
            Deposits: {
                path: "/band.tunnel.v1beta1.Query/Deposits",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryDepositsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryDepositsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryDepositsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryDepositsResponse.deserialize(new Uint8Array(bytes))
            },
            Deposit: {
                path: "/band.tunnel.v1beta1.Query/Deposit",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryDepositRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryDepositRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryDepositResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryDepositResponse.deserialize(new Uint8Array(bytes))
            },
            Packets: {
                path: "/band.tunnel.v1beta1.Query/Packets",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryPacketsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryPacketsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryPacketsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryPacketsResponse.deserialize(new Uint8Array(bytes))
            },
            Packet: {
                path: "/band.tunnel.v1beta1.Query/Packet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryPacketRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryPacketRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryPacketResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryPacketResponse.deserialize(new Uint8Array(bytes))
            },
            TotalFees: {
                path: "/band.tunnel.v1beta1.Query/TotalFees",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryTotalFeesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryTotalFeesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryTotalFeesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryTotalFeesResponse.deserialize(new Uint8Array(bytes))
            },
            Params: {
                path: "/band.tunnel.v1beta1.Query/Params",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryParamsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryParamsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryParamsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryParamsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Tunnels(call: grpc_1.ServerUnaryCall<QueryTunnelsRequest, QueryTunnelsResponse>, callback: grpc_1.sendUnaryData<QueryTunnelsResponse>): void;
        abstract Tunnel(call: grpc_1.ServerUnaryCall<QueryTunnelRequest, QueryTunnelResponse>, callback: grpc_1.sendUnaryData<QueryTunnelResponse>): void;
        abstract Deposits(call: grpc_1.ServerUnaryCall<QueryDepositsRequest, QueryDepositsResponse>, callback: grpc_1.sendUnaryData<QueryDepositsResponse>): void;
        abstract Deposit(call: grpc_1.ServerUnaryCall<QueryDepositRequest, QueryDepositResponse>, callback: grpc_1.sendUnaryData<QueryDepositResponse>): void;
        abstract Packets(call: grpc_1.ServerUnaryCall<QueryPacketsRequest, QueryPacketsResponse>, callback: grpc_1.sendUnaryData<QueryPacketsResponse>): void;
        abstract Packet(call: grpc_1.ServerUnaryCall<QueryPacketRequest, QueryPacketResponse>, callback: grpc_1.sendUnaryData<QueryPacketResponse>): void;
        abstract TotalFees(call: grpc_1.ServerUnaryCall<QueryTotalFeesRequest, QueryTotalFeesResponse>, callback: grpc_1.sendUnaryData<QueryTotalFeesResponse>): void;
        abstract Params(call: grpc_1.ServerUnaryCall<QueryParamsRequest, QueryParamsResponse>, callback: grpc_1.sendUnaryData<QueryParamsResponse>): void;
    }
    export class QueryClient extends grpc_1.makeGenericClientConstructor(UnimplementedQueryService.definition, "Query", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Tunnels: GrpcUnaryServiceInterface<QueryTunnelsRequest, QueryTunnelsResponse> = (message: QueryTunnelsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryTunnelsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryTunnelsResponse>, callback?: grpc_1.requestCallback<QueryTunnelsResponse>): grpc_1.ClientUnaryCall => {
            return super.Tunnels(message, metadata, options, callback);
        };
        Tunnel: GrpcUnaryServiceInterface<QueryTunnelRequest, QueryTunnelResponse> = (message: QueryTunnelRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryTunnelResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryTunnelResponse>, callback?: grpc_1.requestCallback<QueryTunnelResponse>): grpc_1.ClientUnaryCall => {
            return super.Tunnel(message, metadata, options, callback);
        };
        Deposits: GrpcUnaryServiceInterface<QueryDepositsRequest, QueryDepositsResponse> = (message: QueryDepositsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryDepositsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryDepositsResponse>, callback?: grpc_1.requestCallback<QueryDepositsResponse>): grpc_1.ClientUnaryCall => {
            return super.Deposits(message, metadata, options, callback);
        };
        Deposit: GrpcUnaryServiceInterface<QueryDepositRequest, QueryDepositResponse> = (message: QueryDepositRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryDepositResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryDepositResponse>, callback?: grpc_1.requestCallback<QueryDepositResponse>): grpc_1.ClientUnaryCall => {
            return super.Deposit(message, metadata, options, callback);
        };
        Packets: GrpcUnaryServiceInterface<QueryPacketsRequest, QueryPacketsResponse> = (message: QueryPacketsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryPacketsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryPacketsResponse>, callback?: grpc_1.requestCallback<QueryPacketsResponse>): grpc_1.ClientUnaryCall => {
            return super.Packets(message, metadata, options, callback);
        };
        Packet: GrpcUnaryServiceInterface<QueryPacketRequest, QueryPacketResponse> = (message: QueryPacketRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryPacketResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryPacketResponse>, callback?: grpc_1.requestCallback<QueryPacketResponse>): grpc_1.ClientUnaryCall => {
            return super.Packet(message, metadata, options, callback);
        };
        TotalFees: GrpcUnaryServiceInterface<QueryTotalFeesRequest, QueryTotalFeesResponse> = (message: QueryTotalFeesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryTotalFeesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryTotalFeesResponse>, callback?: grpc_1.requestCallback<QueryTotalFeesResponse>): grpc_1.ClientUnaryCall => {
            return super.TotalFees(message, metadata, options, callback);
        };
        Params: GrpcUnaryServiceInterface<QueryParamsRequest, QueryParamsResponse> = (message: QueryParamsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryParamsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryParamsResponse>, callback?: grpc_1.requestCallback<QueryParamsResponse>): grpc_1.ClientUnaryCall => {
            return super.Params(message, metadata, options, callback);
        };
    }
}
