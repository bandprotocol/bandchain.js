/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/tunnel/v1beta1/genesis.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./params";
import * as dependency_3 from "./tunnel";
import * as pb_1 from "google-protobuf";
export namespace band.tunnel.v1beta1 {
    export class GenesisState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            params?: dependency_2.band.tunnel.v1beta1.Params;
            tunnel_count?: number;
            tunnels?: dependency_3.band.tunnel.v1beta1.Tunnel[];
            deposits?: dependency_3.band.tunnel.v1beta1.Deposit[];
            total_fees?: dependency_3.band.tunnel.v1beta1.TotalFees;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
                if ("tunnel_count" in data && data.tunnel_count != undefined) {
                    this.tunnel_count = data.tunnel_count;
                }
                if ("tunnels" in data && data.tunnels != undefined) {
                    this.tunnels = data.tunnels;
                }
                if ("deposits" in data && data.deposits != undefined) {
                    this.deposits = data.deposits;
                }
                if ("total_fees" in data && data.total_fees != undefined) {
                    this.total_fees = data.total_fees;
                }
            }
        }
        get params() {
            return pb_1.Message.getWrapperField(this, dependency_2.band.tunnel.v1beta1.Params, 1) as dependency_2.band.tunnel.v1beta1.Params;
        }
        set params(value: dependency_2.band.tunnel.v1beta1.Params) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get tunnel_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set tunnel_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get tunnels() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.band.tunnel.v1beta1.Tunnel, 3) as dependency_3.band.tunnel.v1beta1.Tunnel[];
        }
        set tunnels(value: dependency_3.band.tunnel.v1beta1.Tunnel[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get deposits() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.band.tunnel.v1beta1.Deposit, 4) as dependency_3.band.tunnel.v1beta1.Deposit[];
        }
        set deposits(value: dependency_3.band.tunnel.v1beta1.Deposit[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get total_fees() {
            return pb_1.Message.getWrapperField(this, dependency_3.band.tunnel.v1beta1.TotalFees, 5) as dependency_3.band.tunnel.v1beta1.TotalFees;
        }
        set total_fees(value: dependency_3.band.tunnel.v1beta1.TotalFees) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_total_fees() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            params?: ReturnType<typeof dependency_2.band.tunnel.v1beta1.Params.prototype.toObject>;
            tunnel_count?: number;
            tunnels?: ReturnType<typeof dependency_3.band.tunnel.v1beta1.Tunnel.prototype.toObject>[];
            deposits?: ReturnType<typeof dependency_3.band.tunnel.v1beta1.Deposit.prototype.toObject>[];
            total_fees?: ReturnType<typeof dependency_3.band.tunnel.v1beta1.TotalFees.prototype.toObject>;
        }): GenesisState {
            const message = new GenesisState({});
            if (data.params != null) {
                message.params = dependency_2.band.tunnel.v1beta1.Params.fromObject(data.params);
            }
            if (data.tunnel_count != null) {
                message.tunnel_count = data.tunnel_count;
            }
            if (data.tunnels != null) {
                message.tunnels = data.tunnels.map(item => dependency_3.band.tunnel.v1beta1.Tunnel.fromObject(item));
            }
            if (data.deposits != null) {
                message.deposits = data.deposits.map(item => dependency_3.band.tunnel.v1beta1.Deposit.fromObject(item));
            }
            if (data.total_fees != null) {
                message.total_fees = dependency_3.band.tunnel.v1beta1.TotalFees.fromObject(data.total_fees);
            }
            return message;
        }
        toObject() {
            const data: {
                params?: ReturnType<typeof dependency_2.band.tunnel.v1beta1.Params.prototype.toObject>;
                tunnel_count?: number;
                tunnels?: ReturnType<typeof dependency_3.band.tunnel.v1beta1.Tunnel.prototype.toObject>[];
                deposits?: ReturnType<typeof dependency_3.band.tunnel.v1beta1.Deposit.prototype.toObject>[];
                total_fees?: ReturnType<typeof dependency_3.band.tunnel.v1beta1.TotalFees.prototype.toObject>;
            } = {};
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            if (this.tunnel_count != null) {
                data.tunnel_count = this.tunnel_count;
            }
            if (this.tunnels != null) {
                data.tunnels = this.tunnels.map((item: dependency_3.band.tunnel.v1beta1.Tunnel) => item.toObject());
            }
            if (this.deposits != null) {
                data.deposits = this.deposits.map((item: dependency_3.band.tunnel.v1beta1.Deposit) => item.toObject());
            }
            if (this.total_fees != null) {
                data.total_fees = this.total_fees.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_params)
                writer.writeMessage(1, this.params, () => this.params.serialize(writer));
            if (this.tunnel_count != 0)
                writer.writeUint64(2, this.tunnel_count);
            if (this.tunnels.length)
                writer.writeRepeatedMessage(3, this.tunnels, (item: dependency_3.band.tunnel.v1beta1.Tunnel) => item.serialize(writer));
            if (this.deposits.length)
                writer.writeRepeatedMessage(4, this.deposits, (item: dependency_3.band.tunnel.v1beta1.Deposit) => item.serialize(writer));
            if (this.has_total_fees)
                writer.writeMessage(5, this.total_fees, () => this.total_fees.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenesisState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenesisState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.params, () => message.params = dependency_2.band.tunnel.v1beta1.Params.deserialize(reader));
                        break;
                    case 2:
                        message.tunnel_count = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.tunnels, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_3.band.tunnel.v1beta1.Tunnel.deserialize(reader), dependency_3.band.tunnel.v1beta1.Tunnel));
                        break;
                    case 4:
                        reader.readMessage(message.deposits, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_3.band.tunnel.v1beta1.Deposit.deserialize(reader), dependency_3.band.tunnel.v1beta1.Deposit));
                        break;
                    case 5:
                        reader.readMessage(message.total_fees, () => message.total_fees = dependency_3.band.tunnel.v1beta1.TotalFees.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenesisState {
            return GenesisState.deserialize(bytes);
        }
    }
}
