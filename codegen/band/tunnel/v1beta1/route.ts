/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/tunnel/v1beta1/route.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../cosmos_proto/cosmos";
import * as dependency_2 from "./../../../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace band.tunnel.v1beta1 {
    export class TSSRoute extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            destination_chain_id?: string;
            destination_contract_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("destination_chain_id" in data && data.destination_chain_id != undefined) {
                    this.destination_chain_id = data.destination_chain_id;
                }
                if ("destination_contract_address" in data && data.destination_contract_address != undefined) {
                    this.destination_contract_address = data.destination_contract_address;
                }
            }
        }
        get destination_chain_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set destination_chain_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get destination_contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set destination_contract_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            destination_chain_id?: string;
            destination_contract_address?: string;
        }): TSSRoute {
            const message = new TSSRoute({});
            if (data.destination_chain_id != null) {
                message.destination_chain_id = data.destination_chain_id;
            }
            if (data.destination_contract_address != null) {
                message.destination_contract_address = data.destination_contract_address;
            }
            return message;
        }
        toObject() {
            const data: {
                destination_chain_id?: string;
                destination_contract_address?: string;
            } = {};
            if (this.destination_chain_id != null) {
                data.destination_chain_id = this.destination_chain_id;
            }
            if (this.destination_contract_address != null) {
                data.destination_contract_address = this.destination_contract_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.destination_chain_id.length)
                writer.writeString(1, this.destination_chain_id);
            if (this.destination_contract_address.length)
                writer.writeString(2, this.destination_contract_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TSSRoute {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TSSRoute();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.destination_chain_id = reader.readString();
                        break;
                    case 2:
                        message.destination_contract_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TSSRoute {
            return TSSRoute.deserialize(bytes);
        }
    }
    export class TSSPacketReceipt extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signing_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signing_id" in data && data.signing_id != undefined) {
                    this.signing_id = data.signing_id;
                }
            }
        }
        get signing_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set signing_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            signing_id?: number;
        }): TSSPacketReceipt {
            const message = new TSSPacketReceipt({});
            if (data.signing_id != null) {
                message.signing_id = data.signing_id;
            }
            return message;
        }
        toObject() {
            const data: {
                signing_id?: number;
            } = {};
            if (this.signing_id != null) {
                data.signing_id = this.signing_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signing_id != 0)
                writer.writeUint64(1, this.signing_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TSSPacketReceipt {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TSSPacketReceipt();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signing_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TSSPacketReceipt {
            return TSSPacketReceipt.deserialize(bytes);
        }
    }
}
