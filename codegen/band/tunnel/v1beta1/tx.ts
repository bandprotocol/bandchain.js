/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/tunnel/v1beta1/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../google/protobuf/any";
import * as dependency_2 from "./../../../gogoproto/gogo";
import * as dependency_3 from "./../../../cosmos_proto/cosmos";
import * as dependency_4 from "./../../../cosmos/base/v1beta1/coin";
import * as dependency_5 from "./../../../cosmos/msg/v1/msg";
import * as dependency_6 from "./../../../amino/amino";
import * as dependency_7 from "./../../feeds/v1beta1/feeds";
import * as dependency_8 from "./params";
import * as dependency_9 from "./tunnel";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace band.tunnel.v1beta1 {
    export class MsgCreateTunnel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signal_deviations?: dependency_9.band.tunnel.v1beta1.SignalDeviation[];
            interval?: number;
            route?: dependency_1.google.protobuf.Any;
            encoder?: dependency_7.band.feeds.v1beta1.Encoder;
            initial_deposit?: dependency_4.cosmos.base.v1beta1.Coin[];
            creator?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signal_deviations" in data && data.signal_deviations != undefined) {
                    this.signal_deviations = data.signal_deviations;
                }
                if ("interval" in data && data.interval != undefined) {
                    this.interval = data.interval;
                }
                if ("route" in data && data.route != undefined) {
                    this.route = data.route;
                }
                if ("encoder" in data && data.encoder != undefined) {
                    this.encoder = data.encoder;
                }
                if ("initial_deposit" in data && data.initial_deposit != undefined) {
                    this.initial_deposit = data.initial_deposit;
                }
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
            }
        }
        get signal_deviations() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_9.band.tunnel.v1beta1.SignalDeviation, 1) as dependency_9.band.tunnel.v1beta1.SignalDeviation[];
        }
        set signal_deviations(value: dependency_9.band.tunnel.v1beta1.SignalDeviation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get interval() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set interval(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get route() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 3) as dependency_1.google.protobuf.Any;
        }
        set route(value: dependency_1.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_route() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get encoder() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_7.band.feeds.v1beta1.Encoder.ENCODER_UNSPECIFIED) as dependency_7.band.feeds.v1beta1.Encoder;
        }
        set encoder(value: dependency_7.band.feeds.v1beta1.Encoder) {
            pb_1.Message.setField(this, 4, value);
        }
        get initial_deposit() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.cosmos.base.v1beta1.Coin, 5) as dependency_4.cosmos.base.v1beta1.Coin[];
        }
        set initial_deposit(value: dependency_4.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            signal_deviations?: ReturnType<typeof dependency_9.band.tunnel.v1beta1.SignalDeviation.prototype.toObject>[];
            interval?: number;
            route?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            encoder?: dependency_7.band.feeds.v1beta1.Encoder;
            initial_deposit?: ReturnType<typeof dependency_4.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            creator?: string;
        }): MsgCreateTunnel {
            const message = new MsgCreateTunnel({});
            if (data.signal_deviations != null) {
                message.signal_deviations = data.signal_deviations.map(item => dependency_9.band.tunnel.v1beta1.SignalDeviation.fromObject(item));
            }
            if (data.interval != null) {
                message.interval = data.interval;
            }
            if (data.route != null) {
                message.route = dependency_1.google.protobuf.Any.fromObject(data.route);
            }
            if (data.encoder != null) {
                message.encoder = data.encoder;
            }
            if (data.initial_deposit != null) {
                message.initial_deposit = data.initial_deposit.map(item => dependency_4.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            if (data.creator != null) {
                message.creator = data.creator;
            }
            return message;
        }
        toObject() {
            const data: {
                signal_deviations?: ReturnType<typeof dependency_9.band.tunnel.v1beta1.SignalDeviation.prototype.toObject>[];
                interval?: number;
                route?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
                encoder?: dependency_7.band.feeds.v1beta1.Encoder;
                initial_deposit?: ReturnType<typeof dependency_4.cosmos.base.v1beta1.Coin.prototype.toObject>[];
                creator?: string;
            } = {};
            if (this.signal_deviations != null) {
                data.signal_deviations = this.signal_deviations.map((item: dependency_9.band.tunnel.v1beta1.SignalDeviation) => item.toObject());
            }
            if (this.interval != null) {
                data.interval = this.interval;
            }
            if (this.route != null) {
                data.route = this.route.toObject();
            }
            if (this.encoder != null) {
                data.encoder = this.encoder;
            }
            if (this.initial_deposit != null) {
                data.initial_deposit = this.initial_deposit.map((item: dependency_4.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            if (this.creator != null) {
                data.creator = this.creator;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signal_deviations.length)
                writer.writeRepeatedMessage(1, this.signal_deviations, (item: dependency_9.band.tunnel.v1beta1.SignalDeviation) => item.serialize(writer));
            if (this.interval != 0)
                writer.writeUint64(2, this.interval);
            if (this.has_route)
                writer.writeMessage(3, this.route, () => this.route.serialize(writer));
            if (this.encoder != dependency_7.band.feeds.v1beta1.Encoder.ENCODER_UNSPECIFIED)
                writer.writeEnum(4, this.encoder);
            if (this.initial_deposit.length)
                writer.writeRepeatedMessage(5, this.initial_deposit, (item: dependency_4.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (this.creator.length)
                writer.writeString(6, this.creator);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCreateTunnel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateTunnel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.signal_deviations, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_9.band.tunnel.v1beta1.SignalDeviation.deserialize(reader), dependency_9.band.tunnel.v1beta1.SignalDeviation));
                        break;
                    case 2:
                        message.interval = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.route, () => message.route = dependency_1.google.protobuf.Any.deserialize(reader));
                        break;
                    case 4:
                        message.encoder = reader.readEnum();
                        break;
                    case 5:
                        reader.readMessage(message.initial_deposit, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_4.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_4.cosmos.base.v1beta1.Coin));
                        break;
                    case 6:
                        message.creator = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCreateTunnel {
            return MsgCreateTunnel.deserialize(bytes);
        }
    }
    export class MsgCreateTunnelResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tunnel_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tunnel_id" in data && data.tunnel_id != undefined) {
                    this.tunnel_id = data.tunnel_id;
                }
            }
        }
        get tunnel_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tunnel_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            tunnel_id?: number;
        }): MsgCreateTunnelResponse {
            const message = new MsgCreateTunnelResponse({});
            if (data.tunnel_id != null) {
                message.tunnel_id = data.tunnel_id;
            }
            return message;
        }
        toObject() {
            const data: {
                tunnel_id?: number;
            } = {};
            if (this.tunnel_id != null) {
                data.tunnel_id = this.tunnel_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tunnel_id != 0)
                writer.writeUint64(1, this.tunnel_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCreateTunnelResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateTunnelResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tunnel_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCreateTunnelResponse {
            return MsgCreateTunnelResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateAndResetTunnel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tunnel_id?: number;
            signal_deviations?: dependency_9.band.tunnel.v1beta1.SignalDeviation[];
            interval?: number;
            creator?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tunnel_id" in data && data.tunnel_id != undefined) {
                    this.tunnel_id = data.tunnel_id;
                }
                if ("signal_deviations" in data && data.signal_deviations != undefined) {
                    this.signal_deviations = data.signal_deviations;
                }
                if ("interval" in data && data.interval != undefined) {
                    this.interval = data.interval;
                }
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
            }
        }
        get tunnel_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tunnel_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get signal_deviations() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_9.band.tunnel.v1beta1.SignalDeviation, 2) as dependency_9.band.tunnel.v1beta1.SignalDeviation[];
        }
        set signal_deviations(value: dependency_9.band.tunnel.v1beta1.SignalDeviation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get interval() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set interval(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            tunnel_id?: number;
            signal_deviations?: ReturnType<typeof dependency_9.band.tunnel.v1beta1.SignalDeviation.prototype.toObject>[];
            interval?: number;
            creator?: string;
        }): MsgUpdateAndResetTunnel {
            const message = new MsgUpdateAndResetTunnel({});
            if (data.tunnel_id != null) {
                message.tunnel_id = data.tunnel_id;
            }
            if (data.signal_deviations != null) {
                message.signal_deviations = data.signal_deviations.map(item => dependency_9.band.tunnel.v1beta1.SignalDeviation.fromObject(item));
            }
            if (data.interval != null) {
                message.interval = data.interval;
            }
            if (data.creator != null) {
                message.creator = data.creator;
            }
            return message;
        }
        toObject() {
            const data: {
                tunnel_id?: number;
                signal_deviations?: ReturnType<typeof dependency_9.band.tunnel.v1beta1.SignalDeviation.prototype.toObject>[];
                interval?: number;
                creator?: string;
            } = {};
            if (this.tunnel_id != null) {
                data.tunnel_id = this.tunnel_id;
            }
            if (this.signal_deviations != null) {
                data.signal_deviations = this.signal_deviations.map((item: dependency_9.band.tunnel.v1beta1.SignalDeviation) => item.toObject());
            }
            if (this.interval != null) {
                data.interval = this.interval;
            }
            if (this.creator != null) {
                data.creator = this.creator;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tunnel_id != 0)
                writer.writeUint64(1, this.tunnel_id);
            if (this.signal_deviations.length)
                writer.writeRepeatedMessage(2, this.signal_deviations, (item: dependency_9.band.tunnel.v1beta1.SignalDeviation) => item.serialize(writer));
            if (this.interval != 0)
                writer.writeUint64(3, this.interval);
            if (this.creator.length)
                writer.writeString(4, this.creator);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateAndResetTunnel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateAndResetTunnel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tunnel_id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.signal_deviations, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_9.band.tunnel.v1beta1.SignalDeviation.deserialize(reader), dependency_9.band.tunnel.v1beta1.SignalDeviation));
                        break;
                    case 3:
                        message.interval = reader.readUint64();
                        break;
                    case 4:
                        message.creator = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateAndResetTunnel {
            return MsgUpdateAndResetTunnel.deserialize(bytes);
        }
    }
    export class MsgUpdateAndResetTunnelResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateAndResetTunnelResponse {
            const message = new MsgUpdateAndResetTunnelResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateAndResetTunnelResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateAndResetTunnelResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateAndResetTunnelResponse {
            return MsgUpdateAndResetTunnelResponse.deserialize(bytes);
        }
    }
    export class MsgActivate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tunnel_id?: number;
            creator?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tunnel_id" in data && data.tunnel_id != undefined) {
                    this.tunnel_id = data.tunnel_id;
                }
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
            }
        }
        get tunnel_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tunnel_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tunnel_id?: number;
            creator?: string;
        }): MsgActivate {
            const message = new MsgActivate({});
            if (data.tunnel_id != null) {
                message.tunnel_id = data.tunnel_id;
            }
            if (data.creator != null) {
                message.creator = data.creator;
            }
            return message;
        }
        toObject() {
            const data: {
                tunnel_id?: number;
                creator?: string;
            } = {};
            if (this.tunnel_id != null) {
                data.tunnel_id = this.tunnel_id;
            }
            if (this.creator != null) {
                data.creator = this.creator;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tunnel_id != 0)
                writer.writeUint64(1, this.tunnel_id);
            if (this.creator.length)
                writer.writeString(2, this.creator);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgActivate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgActivate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tunnel_id = reader.readUint64();
                        break;
                    case 2:
                        message.creator = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgActivate {
            return MsgActivate.deserialize(bytes);
        }
    }
    export class MsgActivateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgActivateResponse {
            const message = new MsgActivateResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgActivateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgActivateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgActivateResponse {
            return MsgActivateResponse.deserialize(bytes);
        }
    }
    export class MsgDeactivate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tunnel_id?: number;
            creator?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tunnel_id" in data && data.tunnel_id != undefined) {
                    this.tunnel_id = data.tunnel_id;
                }
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
            }
        }
        get tunnel_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tunnel_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tunnel_id?: number;
            creator?: string;
        }): MsgDeactivate {
            const message = new MsgDeactivate({});
            if (data.tunnel_id != null) {
                message.tunnel_id = data.tunnel_id;
            }
            if (data.creator != null) {
                message.creator = data.creator;
            }
            return message;
        }
        toObject() {
            const data: {
                tunnel_id?: number;
                creator?: string;
            } = {};
            if (this.tunnel_id != null) {
                data.tunnel_id = this.tunnel_id;
            }
            if (this.creator != null) {
                data.creator = this.creator;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tunnel_id != 0)
                writer.writeUint64(1, this.tunnel_id);
            if (this.creator.length)
                writer.writeString(2, this.creator);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgDeactivate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgDeactivate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tunnel_id = reader.readUint64();
                        break;
                    case 2:
                        message.creator = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgDeactivate {
            return MsgDeactivate.deserialize(bytes);
        }
    }
    export class MsgDeactivateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgDeactivateResponse {
            const message = new MsgDeactivateResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgDeactivateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgDeactivateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgDeactivateResponse {
            return MsgDeactivateResponse.deserialize(bytes);
        }
    }
    export class MsgTriggerTunnel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tunnel_id?: number;
            creator?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tunnel_id" in data && data.tunnel_id != undefined) {
                    this.tunnel_id = data.tunnel_id;
                }
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
            }
        }
        get tunnel_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tunnel_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tunnel_id?: number;
            creator?: string;
        }): MsgTriggerTunnel {
            const message = new MsgTriggerTunnel({});
            if (data.tunnel_id != null) {
                message.tunnel_id = data.tunnel_id;
            }
            if (data.creator != null) {
                message.creator = data.creator;
            }
            return message;
        }
        toObject() {
            const data: {
                tunnel_id?: number;
                creator?: string;
            } = {};
            if (this.tunnel_id != null) {
                data.tunnel_id = this.tunnel_id;
            }
            if (this.creator != null) {
                data.creator = this.creator;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tunnel_id != 0)
                writer.writeUint64(1, this.tunnel_id);
            if (this.creator.length)
                writer.writeString(2, this.creator);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTriggerTunnel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTriggerTunnel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tunnel_id = reader.readUint64();
                        break;
                    case 2:
                        message.creator = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgTriggerTunnel {
            return MsgTriggerTunnel.deserialize(bytes);
        }
    }
    export class MsgTriggerTunnelResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgTriggerTunnelResponse {
            const message = new MsgTriggerTunnelResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTriggerTunnelResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTriggerTunnelResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgTriggerTunnelResponse {
            return MsgTriggerTunnelResponse.deserialize(bytes);
        }
    }
    export class MsgDepositToTunnel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tunnel_id?: number;
            amount?: dependency_4.cosmos.base.v1beta1.Coin[];
            depositor?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tunnel_id" in data && data.tunnel_id != undefined) {
                    this.tunnel_id = data.tunnel_id;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("depositor" in data && data.depositor != undefined) {
                    this.depositor = data.depositor;
                }
            }
        }
        get tunnel_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tunnel_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get amount() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.cosmos.base.v1beta1.Coin, 2) as dependency_4.cosmos.base.v1beta1.Coin[];
        }
        set amount(value: dependency_4.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get depositor() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set depositor(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            tunnel_id?: number;
            amount?: ReturnType<typeof dependency_4.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            depositor?: string;
        }): MsgDepositToTunnel {
            const message = new MsgDepositToTunnel({});
            if (data.tunnel_id != null) {
                message.tunnel_id = data.tunnel_id;
            }
            if (data.amount != null) {
                message.amount = data.amount.map(item => dependency_4.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            if (data.depositor != null) {
                message.depositor = data.depositor;
            }
            return message;
        }
        toObject() {
            const data: {
                tunnel_id?: number;
                amount?: ReturnType<typeof dependency_4.cosmos.base.v1beta1.Coin.prototype.toObject>[];
                depositor?: string;
            } = {};
            if (this.tunnel_id != null) {
                data.tunnel_id = this.tunnel_id;
            }
            if (this.amount != null) {
                data.amount = this.amount.map((item: dependency_4.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            if (this.depositor != null) {
                data.depositor = this.depositor;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tunnel_id != 0)
                writer.writeUint64(1, this.tunnel_id);
            if (this.amount.length)
                writer.writeRepeatedMessage(2, this.amount, (item: dependency_4.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (this.depositor.length)
                writer.writeString(3, this.depositor);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgDepositToTunnel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgDepositToTunnel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tunnel_id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.amount, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_4.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_4.cosmos.base.v1beta1.Coin));
                        break;
                    case 3:
                        message.depositor = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgDepositToTunnel {
            return MsgDepositToTunnel.deserialize(bytes);
        }
    }
    export class MsgDepositToTunnelResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgDepositToTunnelResponse {
            const message = new MsgDepositToTunnelResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgDepositToTunnelResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgDepositToTunnelResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgDepositToTunnelResponse {
            return MsgDepositToTunnelResponse.deserialize(bytes);
        }
    }
    export class MsgWithdrawFromTunnel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tunnel_id?: number;
            amount?: dependency_4.cosmos.base.v1beta1.Coin[];
            withdrawer?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tunnel_id" in data && data.tunnel_id != undefined) {
                    this.tunnel_id = data.tunnel_id;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("withdrawer" in data && data.withdrawer != undefined) {
                    this.withdrawer = data.withdrawer;
                }
            }
        }
        get tunnel_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tunnel_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get amount() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.cosmos.base.v1beta1.Coin, 2) as dependency_4.cosmos.base.v1beta1.Coin[];
        }
        set amount(value: dependency_4.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get withdrawer() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set withdrawer(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            tunnel_id?: number;
            amount?: ReturnType<typeof dependency_4.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            withdrawer?: string;
        }): MsgWithdrawFromTunnel {
            const message = new MsgWithdrawFromTunnel({});
            if (data.tunnel_id != null) {
                message.tunnel_id = data.tunnel_id;
            }
            if (data.amount != null) {
                message.amount = data.amount.map(item => dependency_4.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            if (data.withdrawer != null) {
                message.withdrawer = data.withdrawer;
            }
            return message;
        }
        toObject() {
            const data: {
                tunnel_id?: number;
                amount?: ReturnType<typeof dependency_4.cosmos.base.v1beta1.Coin.prototype.toObject>[];
                withdrawer?: string;
            } = {};
            if (this.tunnel_id != null) {
                data.tunnel_id = this.tunnel_id;
            }
            if (this.amount != null) {
                data.amount = this.amount.map((item: dependency_4.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            if (this.withdrawer != null) {
                data.withdrawer = this.withdrawer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tunnel_id != 0)
                writer.writeUint64(1, this.tunnel_id);
            if (this.amount.length)
                writer.writeRepeatedMessage(2, this.amount, (item: dependency_4.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (this.withdrawer.length)
                writer.writeString(3, this.withdrawer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgWithdrawFromTunnel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgWithdrawFromTunnel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tunnel_id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.amount, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_4.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_4.cosmos.base.v1beta1.Coin));
                        break;
                    case 3:
                        message.withdrawer = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgWithdrawFromTunnel {
            return MsgWithdrawFromTunnel.deserialize(bytes);
        }
    }
    export class MsgWithdrawFromTunnelResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgWithdrawFromTunnelResponse {
            const message = new MsgWithdrawFromTunnelResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgWithdrawFromTunnelResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgWithdrawFromTunnelResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgWithdrawFromTunnelResponse {
            return MsgWithdrawFromTunnelResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateParams extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            authority?: string;
            params?: dependency_8.band.tunnel.v1beta1.Params;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("authority" in data && data.authority != undefined) {
                    this.authority = data.authority;
                }
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
            }
        }
        get authority() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set authority(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get params() {
            return pb_1.Message.getWrapperField(this, dependency_8.band.tunnel.v1beta1.Params, 2) as dependency_8.band.tunnel.v1beta1.Params;
        }
        set params(value: dependency_8.band.tunnel.v1beta1.Params) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_params() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            authority?: string;
            params?: ReturnType<typeof dependency_8.band.tunnel.v1beta1.Params.prototype.toObject>;
        }): MsgUpdateParams {
            const message = new MsgUpdateParams({});
            if (data.authority != null) {
                message.authority = data.authority;
            }
            if (data.params != null) {
                message.params = dependency_8.band.tunnel.v1beta1.Params.fromObject(data.params);
            }
            return message;
        }
        toObject() {
            const data: {
                authority?: string;
                params?: ReturnType<typeof dependency_8.band.tunnel.v1beta1.Params.prototype.toObject>;
            } = {};
            if (this.authority != null) {
                data.authority = this.authority;
            }
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.authority.length)
                writer.writeString(1, this.authority);
            if (this.has_params)
                writer.writeMessage(2, this.params, () => this.params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateParams {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateParams();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.authority = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.params, () => message.params = dependency_8.band.tunnel.v1beta1.Params.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateParams {
            return MsgUpdateParams.deserialize(bytes);
        }
    }
    export class MsgUpdateParamsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateParamsResponse {
            const message = new MsgUpdateParamsResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateParamsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateParamsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateParamsResponse {
            return MsgUpdateParamsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedMsgService {
        static definition = {
            CreateTunnel: {
                path: "/band.tunnel.v1beta1.Msg/CreateTunnel",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgCreateTunnel) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgCreateTunnel.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgCreateTunnelResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgCreateTunnelResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateAndResetTunnel: {
                path: "/band.tunnel.v1beta1.Msg/UpdateAndResetTunnel",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgUpdateAndResetTunnel) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgUpdateAndResetTunnel.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgUpdateAndResetTunnelResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgUpdateAndResetTunnelResponse.deserialize(new Uint8Array(bytes))
            },
            Activate: {
                path: "/band.tunnel.v1beta1.Msg/Activate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgActivate) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgActivate.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgActivateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgActivateResponse.deserialize(new Uint8Array(bytes))
            },
            Deactivate: {
                path: "/band.tunnel.v1beta1.Msg/Deactivate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgDeactivate) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgDeactivate.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgDeactivateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgDeactivateResponse.deserialize(new Uint8Array(bytes))
            },
            TriggerTunnel: {
                path: "/band.tunnel.v1beta1.Msg/TriggerTunnel",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgTriggerTunnel) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgTriggerTunnel.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgTriggerTunnelResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgTriggerTunnelResponse.deserialize(new Uint8Array(bytes))
            },
            DepositToTunnel: {
                path: "/band.tunnel.v1beta1.Msg/DepositToTunnel",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgDepositToTunnel) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgDepositToTunnel.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgDepositToTunnelResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgDepositToTunnelResponse.deserialize(new Uint8Array(bytes))
            },
            WithdrawFromTunnel: {
                path: "/band.tunnel.v1beta1.Msg/WithdrawFromTunnel",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgWithdrawFromTunnel) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgWithdrawFromTunnel.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgWithdrawFromTunnelResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgWithdrawFromTunnelResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateParams: {
                path: "/band.tunnel.v1beta1.Msg/UpdateParams",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgUpdateParams) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgUpdateParams.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgUpdateParamsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgUpdateParamsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateTunnel(call: grpc_1.ServerUnaryCall<MsgCreateTunnel, MsgCreateTunnelResponse>, callback: grpc_1.sendUnaryData<MsgCreateTunnelResponse>): void;
        abstract UpdateAndResetTunnel(call: grpc_1.ServerUnaryCall<MsgUpdateAndResetTunnel, MsgUpdateAndResetTunnelResponse>, callback: grpc_1.sendUnaryData<MsgUpdateAndResetTunnelResponse>): void;
        abstract Activate(call: grpc_1.ServerUnaryCall<MsgActivate, MsgActivateResponse>, callback: grpc_1.sendUnaryData<MsgActivateResponse>): void;
        abstract Deactivate(call: grpc_1.ServerUnaryCall<MsgDeactivate, MsgDeactivateResponse>, callback: grpc_1.sendUnaryData<MsgDeactivateResponse>): void;
        abstract TriggerTunnel(call: grpc_1.ServerUnaryCall<MsgTriggerTunnel, MsgTriggerTunnelResponse>, callback: grpc_1.sendUnaryData<MsgTriggerTunnelResponse>): void;
        abstract DepositToTunnel(call: grpc_1.ServerUnaryCall<MsgDepositToTunnel, MsgDepositToTunnelResponse>, callback: grpc_1.sendUnaryData<MsgDepositToTunnelResponse>): void;
        abstract WithdrawFromTunnel(call: grpc_1.ServerUnaryCall<MsgWithdrawFromTunnel, MsgWithdrawFromTunnelResponse>, callback: grpc_1.sendUnaryData<MsgWithdrawFromTunnelResponse>): void;
        abstract UpdateParams(call: grpc_1.ServerUnaryCall<MsgUpdateParams, MsgUpdateParamsResponse>, callback: grpc_1.sendUnaryData<MsgUpdateParamsResponse>): void;
    }
    export class MsgClient extends grpc_1.makeGenericClientConstructor(UnimplementedMsgService.definition, "Msg", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateTunnel: GrpcUnaryServiceInterface<MsgCreateTunnel, MsgCreateTunnelResponse> = (message: MsgCreateTunnel, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgCreateTunnelResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgCreateTunnelResponse>, callback?: grpc_1.requestCallback<MsgCreateTunnelResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateTunnel(message, metadata, options, callback);
        };
        UpdateAndResetTunnel: GrpcUnaryServiceInterface<MsgUpdateAndResetTunnel, MsgUpdateAndResetTunnelResponse> = (message: MsgUpdateAndResetTunnel, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateAndResetTunnelResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateAndResetTunnelResponse>, callback?: grpc_1.requestCallback<MsgUpdateAndResetTunnelResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateAndResetTunnel(message, metadata, options, callback);
        };
        Activate: GrpcUnaryServiceInterface<MsgActivate, MsgActivateResponse> = (message: MsgActivate, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgActivateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgActivateResponse>, callback?: grpc_1.requestCallback<MsgActivateResponse>): grpc_1.ClientUnaryCall => {
            return super.Activate(message, metadata, options, callback);
        };
        Deactivate: GrpcUnaryServiceInterface<MsgDeactivate, MsgDeactivateResponse> = (message: MsgDeactivate, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgDeactivateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgDeactivateResponse>, callback?: grpc_1.requestCallback<MsgDeactivateResponse>): grpc_1.ClientUnaryCall => {
            return super.Deactivate(message, metadata, options, callback);
        };
        TriggerTunnel: GrpcUnaryServiceInterface<MsgTriggerTunnel, MsgTriggerTunnelResponse> = (message: MsgTriggerTunnel, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgTriggerTunnelResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgTriggerTunnelResponse>, callback?: grpc_1.requestCallback<MsgTriggerTunnelResponse>): grpc_1.ClientUnaryCall => {
            return super.TriggerTunnel(message, metadata, options, callback);
        };
        DepositToTunnel: GrpcUnaryServiceInterface<MsgDepositToTunnel, MsgDepositToTunnelResponse> = (message: MsgDepositToTunnel, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgDepositToTunnelResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgDepositToTunnelResponse>, callback?: grpc_1.requestCallback<MsgDepositToTunnelResponse>): grpc_1.ClientUnaryCall => {
            return super.DepositToTunnel(message, metadata, options, callback);
        };
        WithdrawFromTunnel: GrpcUnaryServiceInterface<MsgWithdrawFromTunnel, MsgWithdrawFromTunnelResponse> = (message: MsgWithdrawFromTunnel, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgWithdrawFromTunnelResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgWithdrawFromTunnelResponse>, callback?: grpc_1.requestCallback<MsgWithdrawFromTunnelResponse>): grpc_1.ClientUnaryCall => {
            return super.WithdrawFromTunnel(message, metadata, options, callback);
        };
        UpdateParams: GrpcUnaryServiceInterface<MsgUpdateParams, MsgUpdateParamsResponse> = (message: MsgUpdateParams, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateParamsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateParamsResponse>, callback?: grpc_1.requestCallback<MsgUpdateParamsResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateParams(message, metadata, options, callback);
        };
    }
}
