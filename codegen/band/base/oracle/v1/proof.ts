/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/base/oracle/v1/proof.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../google/api/annotations";
import * as dependency_2 from "./../../../../gogoproto/gogo";
import * as dependency_3 from "./../../../oracle/v1/oracle";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace band.base.oracle.v1 {
    export class ProofRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_id?: number;
            height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            request_id?: number;
            height?: number;
        }): ProofRequest {
            const message = new ProofRequest({});
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            return message;
        }
        toObject() {
            const data: {
                request_id?: number;
                height?: number;
            } = {};
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_id != 0)
                writer.writeUint64(1, this.request_id);
            if (this.height != 0)
                writer.writeInt64(2, this.height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProofRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_id = reader.readUint64();
                        break;
                    case 2:
                        message.height = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProofRequest {
            return ProofRequest.deserialize(bytes);
        }
    }
    export class ProofResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
            result?: SingleProofResult;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get result() {
            return pb_1.Message.getWrapperField(this, SingleProofResult, 2) as SingleProofResult;
        }
        set result(value: SingleProofResult) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_result() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            height?: number;
            result?: ReturnType<typeof SingleProofResult.prototype.toObject>;
        }): ProofResponse {
            const message = new ProofResponse({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.result != null) {
                message.result = SingleProofResult.fromObject(data.result);
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                result?: ReturnType<typeof SingleProofResult.prototype.toObject>;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.result != null) {
                data.result = this.result.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (this.has_result)
                writer.writeMessage(2, this.result, () => this.result.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProofResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.result, () => message.result = SingleProofResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProofResponse {
            return ProofResponse.deserialize(bytes);
        }
    }
    export class MultiProofRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_ids" in data && data.request_ids != undefined) {
                    this.request_ids = data.request_ids;
                }
            }
        }
        get request_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set request_ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            request_ids?: number[];
        }): MultiProofRequest {
            const message = new MultiProofRequest({});
            if (data.request_ids != null) {
                message.request_ids = data.request_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                request_ids?: number[];
            } = {};
            if (this.request_ids != null) {
                data.request_ids = this.request_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_ids.length)
                writer.writePackedUint64(1, this.request_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultiProofRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultiProofRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_ids = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultiProofRequest {
            return MultiProofRequest.deserialize(bytes);
        }
    }
    export class MultiProofResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
            result?: MultiProofResult;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get result() {
            return pb_1.Message.getWrapperField(this, MultiProofResult, 2) as MultiProofResult;
        }
        set result(value: MultiProofResult) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_result() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            height?: number;
            result?: ReturnType<typeof MultiProofResult.prototype.toObject>;
        }): MultiProofResponse {
            const message = new MultiProofResponse({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.result != null) {
                message.result = MultiProofResult.fromObject(data.result);
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                result?: ReturnType<typeof MultiProofResult.prototype.toObject>;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.result != null) {
                data.result = this.result.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (this.has_result)
                writer.writeMessage(2, this.result, () => this.result.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultiProofResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultiProofResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.result, () => message.result = MultiProofResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultiProofResponse {
            return MultiProofResponse.deserialize(bytes);
        }
    }
    export class RequestCountProofRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): RequestCountProofRequest {
            const message = new RequestCountProofRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestCountProofRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestCountProofRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestCountProofRequest {
            return RequestCountProofRequest.deserialize(bytes);
        }
    }
    export class RequestCountProofResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
            result?: CountProofResult;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get result() {
            return pb_1.Message.getWrapperField(this, CountProofResult, 2) as CountProofResult;
        }
        set result(value: CountProofResult) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_result() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            height?: number;
            result?: ReturnType<typeof CountProofResult.prototype.toObject>;
        }): RequestCountProofResponse {
            const message = new RequestCountProofResponse({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.result != null) {
                message.result = CountProofResult.fromObject(data.result);
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                result?: ReturnType<typeof CountProofResult.prototype.toObject>;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.result != null) {
                data.result = this.result.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (this.has_result)
                writer.writeMessage(2, this.result, () => this.result.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestCountProofResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestCountProofResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.result, () => message.result = CountProofResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestCountProofResponse {
            return RequestCountProofResponse.deserialize(bytes);
        }
    }
    export class SingleProofResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proof?: SingleProof;
            evm_proof_bytes?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proof" in data && data.proof != undefined) {
                    this.proof = data.proof;
                }
                if ("evm_proof_bytes" in data && data.evm_proof_bytes != undefined) {
                    this.evm_proof_bytes = data.evm_proof_bytes;
                }
            }
        }
        get proof() {
            return pb_1.Message.getWrapperField(this, SingleProof, 1) as SingleProof;
        }
        set proof(value: SingleProof) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_proof() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get evm_proof_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set evm_proof_bytes(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            proof?: ReturnType<typeof SingleProof.prototype.toObject>;
            evm_proof_bytes?: Uint8Array;
        }): SingleProofResult {
            const message = new SingleProofResult({});
            if (data.proof != null) {
                message.proof = SingleProof.fromObject(data.proof);
            }
            if (data.evm_proof_bytes != null) {
                message.evm_proof_bytes = data.evm_proof_bytes;
            }
            return message;
        }
        toObject() {
            const data: {
                proof?: ReturnType<typeof SingleProof.prototype.toObject>;
                evm_proof_bytes?: Uint8Array;
            } = {};
            if (this.proof != null) {
                data.proof = this.proof.toObject();
            }
            if (this.evm_proof_bytes != null) {
                data.evm_proof_bytes = this.evm_proof_bytes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_proof)
                writer.writeMessage(1, this.proof, () => this.proof.serialize(writer));
            if (this.evm_proof_bytes.length)
                writer.writeBytes(2, this.evm_proof_bytes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SingleProofResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SingleProofResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.proof, () => message.proof = SingleProof.deserialize(reader));
                        break;
                    case 2:
                        message.evm_proof_bytes = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SingleProofResult {
            return SingleProofResult.deserialize(bytes);
        }
    }
    export class MultiProofResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proof?: MultiProof;
            evm_proof_bytes?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proof" in data && data.proof != undefined) {
                    this.proof = data.proof;
                }
                if ("evm_proof_bytes" in data && data.evm_proof_bytes != undefined) {
                    this.evm_proof_bytes = data.evm_proof_bytes;
                }
            }
        }
        get proof() {
            return pb_1.Message.getWrapperField(this, MultiProof, 1) as MultiProof;
        }
        set proof(value: MultiProof) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_proof() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get evm_proof_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set evm_proof_bytes(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            proof?: ReturnType<typeof MultiProof.prototype.toObject>;
            evm_proof_bytes?: Uint8Array;
        }): MultiProofResult {
            const message = new MultiProofResult({});
            if (data.proof != null) {
                message.proof = MultiProof.fromObject(data.proof);
            }
            if (data.evm_proof_bytes != null) {
                message.evm_proof_bytes = data.evm_proof_bytes;
            }
            return message;
        }
        toObject() {
            const data: {
                proof?: ReturnType<typeof MultiProof.prototype.toObject>;
                evm_proof_bytes?: Uint8Array;
            } = {};
            if (this.proof != null) {
                data.proof = this.proof.toObject();
            }
            if (this.evm_proof_bytes != null) {
                data.evm_proof_bytes = this.evm_proof_bytes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_proof)
                writer.writeMessage(1, this.proof, () => this.proof.serialize(writer));
            if (this.evm_proof_bytes.length)
                writer.writeBytes(2, this.evm_proof_bytes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultiProofResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultiProofResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.proof, () => message.proof = MultiProof.deserialize(reader));
                        break;
                    case 2:
                        message.evm_proof_bytes = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultiProofResult {
            return MultiProofResult.deserialize(bytes);
        }
    }
    export class CountProofResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proof?: CountProof;
            evm_proof_bytes?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proof" in data && data.proof != undefined) {
                    this.proof = data.proof;
                }
                if ("evm_proof_bytes" in data && data.evm_proof_bytes != undefined) {
                    this.evm_proof_bytes = data.evm_proof_bytes;
                }
            }
        }
        get proof() {
            return pb_1.Message.getWrapperField(this, CountProof, 1) as CountProof;
        }
        set proof(value: CountProof) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_proof() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get evm_proof_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set evm_proof_bytes(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            proof?: ReturnType<typeof CountProof.prototype.toObject>;
            evm_proof_bytes?: Uint8Array;
        }): CountProofResult {
            const message = new CountProofResult({});
            if (data.proof != null) {
                message.proof = CountProof.fromObject(data.proof);
            }
            if (data.evm_proof_bytes != null) {
                message.evm_proof_bytes = data.evm_proof_bytes;
            }
            return message;
        }
        toObject() {
            const data: {
                proof?: ReturnType<typeof CountProof.prototype.toObject>;
                evm_proof_bytes?: Uint8Array;
            } = {};
            if (this.proof != null) {
                data.proof = this.proof.toObject();
            }
            if (this.evm_proof_bytes != null) {
                data.evm_proof_bytes = this.evm_proof_bytes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_proof)
                writer.writeMessage(1, this.proof, () => this.proof.serialize(writer));
            if (this.evm_proof_bytes.length)
                writer.writeBytes(2, this.evm_proof_bytes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CountProofResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CountProofResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.proof, () => message.proof = CountProof.deserialize(reader));
                        break;
                    case 2:
                        message.evm_proof_bytes = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CountProofResult {
            return CountProofResult.deserialize(bytes);
        }
    }
    export class SingleProof extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block_height?: number;
            oracle_data_proof?: OracleDataProof;
            block_relay_proof?: BlockRelayProof;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_height" in data && data.block_height != undefined) {
                    this.block_height = data.block_height;
                }
                if ("oracle_data_proof" in data && data.oracle_data_proof != undefined) {
                    this.oracle_data_proof = data.oracle_data_proof;
                }
                if ("block_relay_proof" in data && data.block_relay_proof != undefined) {
                    this.block_relay_proof = data.block_relay_proof;
                }
            }
        }
        get block_height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set block_height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get oracle_data_proof() {
            return pb_1.Message.getWrapperField(this, OracleDataProof, 2) as OracleDataProof;
        }
        set oracle_data_proof(value: OracleDataProof) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_oracle_data_proof() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get block_relay_proof() {
            return pb_1.Message.getWrapperField(this, BlockRelayProof, 3) as BlockRelayProof;
        }
        set block_relay_proof(value: BlockRelayProof) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_block_relay_proof() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            block_height?: number;
            oracle_data_proof?: ReturnType<typeof OracleDataProof.prototype.toObject>;
            block_relay_proof?: ReturnType<typeof BlockRelayProof.prototype.toObject>;
        }): SingleProof {
            const message = new SingleProof({});
            if (data.block_height != null) {
                message.block_height = data.block_height;
            }
            if (data.oracle_data_proof != null) {
                message.oracle_data_proof = OracleDataProof.fromObject(data.oracle_data_proof);
            }
            if (data.block_relay_proof != null) {
                message.block_relay_proof = BlockRelayProof.fromObject(data.block_relay_proof);
            }
            return message;
        }
        toObject() {
            const data: {
                block_height?: number;
                oracle_data_proof?: ReturnType<typeof OracleDataProof.prototype.toObject>;
                block_relay_proof?: ReturnType<typeof BlockRelayProof.prototype.toObject>;
            } = {};
            if (this.block_height != null) {
                data.block_height = this.block_height;
            }
            if (this.oracle_data_proof != null) {
                data.oracle_data_proof = this.oracle_data_proof.toObject();
            }
            if (this.block_relay_proof != null) {
                data.block_relay_proof = this.block_relay_proof.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_height != 0)
                writer.writeUint64(1, this.block_height);
            if (this.has_oracle_data_proof)
                writer.writeMessage(2, this.oracle_data_proof, () => this.oracle_data_proof.serialize(writer));
            if (this.has_block_relay_proof)
                writer.writeMessage(3, this.block_relay_proof, () => this.block_relay_proof.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SingleProof {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SingleProof();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_height = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.oracle_data_proof, () => message.oracle_data_proof = OracleDataProof.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.block_relay_proof, () => message.block_relay_proof = BlockRelayProof.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SingleProof {
            return SingleProof.deserialize(bytes);
        }
    }
    export class MultiProof extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block_height?: number;
            oracle_data_multi_proof?: OracleDataProof[];
            block_relay_proof?: BlockRelayProof;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_height" in data && data.block_height != undefined) {
                    this.block_height = data.block_height;
                }
                if ("oracle_data_multi_proof" in data && data.oracle_data_multi_proof != undefined) {
                    this.oracle_data_multi_proof = data.oracle_data_multi_proof;
                }
                if ("block_relay_proof" in data && data.block_relay_proof != undefined) {
                    this.block_relay_proof = data.block_relay_proof;
                }
            }
        }
        get block_height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set block_height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get oracle_data_multi_proof() {
            return pb_1.Message.getRepeatedWrapperField(this, OracleDataProof, 2) as OracleDataProof[];
        }
        set oracle_data_multi_proof(value: OracleDataProof[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get block_relay_proof() {
            return pb_1.Message.getWrapperField(this, BlockRelayProof, 3) as BlockRelayProof;
        }
        set block_relay_proof(value: BlockRelayProof) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_block_relay_proof() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            block_height?: number;
            oracle_data_multi_proof?: ReturnType<typeof OracleDataProof.prototype.toObject>[];
            block_relay_proof?: ReturnType<typeof BlockRelayProof.prototype.toObject>;
        }): MultiProof {
            const message = new MultiProof({});
            if (data.block_height != null) {
                message.block_height = data.block_height;
            }
            if (data.oracle_data_multi_proof != null) {
                message.oracle_data_multi_proof = data.oracle_data_multi_proof.map(item => OracleDataProof.fromObject(item));
            }
            if (data.block_relay_proof != null) {
                message.block_relay_proof = BlockRelayProof.fromObject(data.block_relay_proof);
            }
            return message;
        }
        toObject() {
            const data: {
                block_height?: number;
                oracle_data_multi_proof?: ReturnType<typeof OracleDataProof.prototype.toObject>[];
                block_relay_proof?: ReturnType<typeof BlockRelayProof.prototype.toObject>;
            } = {};
            if (this.block_height != null) {
                data.block_height = this.block_height;
            }
            if (this.oracle_data_multi_proof != null) {
                data.oracle_data_multi_proof = this.oracle_data_multi_proof.map((item: OracleDataProof) => item.toObject());
            }
            if (this.block_relay_proof != null) {
                data.block_relay_proof = this.block_relay_proof.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_height != 0)
                writer.writeUint64(1, this.block_height);
            if (this.oracle_data_multi_proof.length)
                writer.writeRepeatedMessage(2, this.oracle_data_multi_proof, (item: OracleDataProof) => item.serialize(writer));
            if (this.has_block_relay_proof)
                writer.writeMessage(3, this.block_relay_proof, () => this.block_relay_proof.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultiProof {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultiProof();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_height = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.oracle_data_multi_proof, () => pb_1.Message.addToRepeatedWrapperField(message, 2, OracleDataProof.deserialize(reader), OracleDataProof));
                        break;
                    case 3:
                        reader.readMessage(message.block_relay_proof, () => message.block_relay_proof = BlockRelayProof.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultiProof {
            return MultiProof.deserialize(bytes);
        }
    }
    export class CountProof extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block_height?: number;
            count_proof?: RequestsCountProof;
            block_relay_proof?: BlockRelayProof;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_height" in data && data.block_height != undefined) {
                    this.block_height = data.block_height;
                }
                if ("count_proof" in data && data.count_proof != undefined) {
                    this.count_proof = data.count_proof;
                }
                if ("block_relay_proof" in data && data.block_relay_proof != undefined) {
                    this.block_relay_proof = data.block_relay_proof;
                }
            }
        }
        get block_height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set block_height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get count_proof() {
            return pb_1.Message.getWrapperField(this, RequestsCountProof, 2) as RequestsCountProof;
        }
        set count_proof(value: RequestsCountProof) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_count_proof() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get block_relay_proof() {
            return pb_1.Message.getWrapperField(this, BlockRelayProof, 3) as BlockRelayProof;
        }
        set block_relay_proof(value: BlockRelayProof) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_block_relay_proof() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            block_height?: number;
            count_proof?: ReturnType<typeof RequestsCountProof.prototype.toObject>;
            block_relay_proof?: ReturnType<typeof BlockRelayProof.prototype.toObject>;
        }): CountProof {
            const message = new CountProof({});
            if (data.block_height != null) {
                message.block_height = data.block_height;
            }
            if (data.count_proof != null) {
                message.count_proof = RequestsCountProof.fromObject(data.count_proof);
            }
            if (data.block_relay_proof != null) {
                message.block_relay_proof = BlockRelayProof.fromObject(data.block_relay_proof);
            }
            return message;
        }
        toObject() {
            const data: {
                block_height?: number;
                count_proof?: ReturnType<typeof RequestsCountProof.prototype.toObject>;
                block_relay_proof?: ReturnType<typeof BlockRelayProof.prototype.toObject>;
            } = {};
            if (this.block_height != null) {
                data.block_height = this.block_height;
            }
            if (this.count_proof != null) {
                data.count_proof = this.count_proof.toObject();
            }
            if (this.block_relay_proof != null) {
                data.block_relay_proof = this.block_relay_proof.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_height != 0)
                writer.writeUint64(1, this.block_height);
            if (this.has_count_proof)
                writer.writeMessage(2, this.count_proof, () => this.count_proof.serialize(writer));
            if (this.has_block_relay_proof)
                writer.writeMessage(3, this.block_relay_proof, () => this.block_relay_proof.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CountProof {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CountProof();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_height = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.count_proof, () => message.count_proof = RequestsCountProof.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.block_relay_proof, () => message.block_relay_proof = BlockRelayProof.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CountProof {
            return CountProof.deserialize(bytes);
        }
    }
    export class OracleDataProof extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: dependency_3.band.oracle.v1.Result;
            version?: number;
            merkle_paths?: IAVLMerklePath[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("merkle_paths" in data && data.merkle_paths != undefined) {
                    this.merkle_paths = data.merkle_paths;
                }
            }
        }
        get result() {
            return pb_1.Message.getWrapperField(this, dependency_3.band.oracle.v1.Result, 1) as dependency_3.band.oracle.v1.Result;
        }
        set result(value: dependency_3.band.oracle.v1.Result) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_result() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set version(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get merkle_paths() {
            return pb_1.Message.getRepeatedWrapperField(this, IAVLMerklePath, 3) as IAVLMerklePath[];
        }
        set merkle_paths(value: IAVLMerklePath[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            result?: ReturnType<typeof dependency_3.band.oracle.v1.Result.prototype.toObject>;
            version?: number;
            merkle_paths?: ReturnType<typeof IAVLMerklePath.prototype.toObject>[];
        }): OracleDataProof {
            const message = new OracleDataProof({});
            if (data.result != null) {
                message.result = dependency_3.band.oracle.v1.Result.fromObject(data.result);
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.merkle_paths != null) {
                message.merkle_paths = data.merkle_paths.map(item => IAVLMerklePath.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                result?: ReturnType<typeof dependency_3.band.oracle.v1.Result.prototype.toObject>;
                version?: number;
                merkle_paths?: ReturnType<typeof IAVLMerklePath.prototype.toObject>[];
            } = {};
            if (this.result != null) {
                data.result = this.result.toObject();
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.merkle_paths != null) {
                data.merkle_paths = this.merkle_paths.map((item: IAVLMerklePath) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_result)
                writer.writeMessage(1, this.result, () => this.result.serialize(writer));
            if (this.version != 0)
                writer.writeUint64(2, this.version);
            if (this.merkle_paths.length)
                writer.writeRepeatedMessage(3, this.merkle_paths, (item: IAVLMerklePath) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OracleDataProof {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OracleDataProof();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.result, () => message.result = dependency_3.band.oracle.v1.Result.deserialize(reader));
                        break;
                    case 2:
                        message.version = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.merkle_paths, () => pb_1.Message.addToRepeatedWrapperField(message, 3, IAVLMerklePath.deserialize(reader), IAVLMerklePath));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OracleDataProof {
            return OracleDataProof.deserialize(bytes);
        }
    }
    export class IAVLMerklePath extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            is_data_on_right?: boolean;
            subtree_height?: number;
            subtree_size?: number;
            subtree_version?: number;
            sibling_hash?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_data_on_right" in data && data.is_data_on_right != undefined) {
                    this.is_data_on_right = data.is_data_on_right;
                }
                if ("subtree_height" in data && data.subtree_height != undefined) {
                    this.subtree_height = data.subtree_height;
                }
                if ("subtree_size" in data && data.subtree_size != undefined) {
                    this.subtree_size = data.subtree_size;
                }
                if ("subtree_version" in data && data.subtree_version != undefined) {
                    this.subtree_version = data.subtree_version;
                }
                if ("sibling_hash" in data && data.sibling_hash != undefined) {
                    this.sibling_hash = data.sibling_hash;
                }
            }
        }
        get is_data_on_right() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set is_data_on_right(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get subtree_height() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set subtree_height(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get subtree_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set subtree_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get subtree_version() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set subtree_version(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get sibling_hash() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set sibling_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            is_data_on_right?: boolean;
            subtree_height?: number;
            subtree_size?: number;
            subtree_version?: number;
            sibling_hash?: Uint8Array;
        }): IAVLMerklePath {
            const message = new IAVLMerklePath({});
            if (data.is_data_on_right != null) {
                message.is_data_on_right = data.is_data_on_right;
            }
            if (data.subtree_height != null) {
                message.subtree_height = data.subtree_height;
            }
            if (data.subtree_size != null) {
                message.subtree_size = data.subtree_size;
            }
            if (data.subtree_version != null) {
                message.subtree_version = data.subtree_version;
            }
            if (data.sibling_hash != null) {
                message.sibling_hash = data.sibling_hash;
            }
            return message;
        }
        toObject() {
            const data: {
                is_data_on_right?: boolean;
                subtree_height?: number;
                subtree_size?: number;
                subtree_version?: number;
                sibling_hash?: Uint8Array;
            } = {};
            if (this.is_data_on_right != null) {
                data.is_data_on_right = this.is_data_on_right;
            }
            if (this.subtree_height != null) {
                data.subtree_height = this.subtree_height;
            }
            if (this.subtree_size != null) {
                data.subtree_size = this.subtree_size;
            }
            if (this.subtree_version != null) {
                data.subtree_version = this.subtree_version;
            }
            if (this.sibling_hash != null) {
                data.sibling_hash = this.sibling_hash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_data_on_right != false)
                writer.writeBool(1, this.is_data_on_right);
            if (this.subtree_height != 0)
                writer.writeUint32(2, this.subtree_height);
            if (this.subtree_size != 0)
                writer.writeUint64(3, this.subtree_size);
            if (this.subtree_version != 0)
                writer.writeUint64(4, this.subtree_version);
            if (this.sibling_hash.length)
                writer.writeBytes(5, this.sibling_hash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IAVLMerklePath {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IAVLMerklePath();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_data_on_right = reader.readBool();
                        break;
                    case 2:
                        message.subtree_height = reader.readUint32();
                        break;
                    case 3:
                        message.subtree_size = reader.readUint64();
                        break;
                    case 4:
                        message.subtree_version = reader.readUint64();
                        break;
                    case 5:
                        message.sibling_hash = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IAVLMerklePath {
            return IAVLMerklePath.deserialize(bytes);
        }
    }
    export class BlockRelayProof extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            multi_store_proof?: MultiStoreProof;
            block_header_merkle_parts?: BlockHeaderMerkleParts;
            common_encoded_vote_part?: CommonEncodedVotePart;
            signatures?: TMSignature[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("multi_store_proof" in data && data.multi_store_proof != undefined) {
                    this.multi_store_proof = data.multi_store_proof;
                }
                if ("block_header_merkle_parts" in data && data.block_header_merkle_parts != undefined) {
                    this.block_header_merkle_parts = data.block_header_merkle_parts;
                }
                if ("common_encoded_vote_part" in data && data.common_encoded_vote_part != undefined) {
                    this.common_encoded_vote_part = data.common_encoded_vote_part;
                }
                if ("signatures" in data && data.signatures != undefined) {
                    this.signatures = data.signatures;
                }
            }
        }
        get multi_store_proof() {
            return pb_1.Message.getWrapperField(this, MultiStoreProof, 1) as MultiStoreProof;
        }
        set multi_store_proof(value: MultiStoreProof) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_multi_store_proof() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get block_header_merkle_parts() {
            return pb_1.Message.getWrapperField(this, BlockHeaderMerkleParts, 2) as BlockHeaderMerkleParts;
        }
        set block_header_merkle_parts(value: BlockHeaderMerkleParts) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_block_header_merkle_parts() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get common_encoded_vote_part() {
            return pb_1.Message.getWrapperField(this, CommonEncodedVotePart, 3) as CommonEncodedVotePart;
        }
        set common_encoded_vote_part(value: CommonEncodedVotePart) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_common_encoded_vote_part() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get signatures() {
            return pb_1.Message.getRepeatedWrapperField(this, TMSignature, 4) as TMSignature[];
        }
        set signatures(value: TMSignature[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            multi_store_proof?: ReturnType<typeof MultiStoreProof.prototype.toObject>;
            block_header_merkle_parts?: ReturnType<typeof BlockHeaderMerkleParts.prototype.toObject>;
            common_encoded_vote_part?: ReturnType<typeof CommonEncodedVotePart.prototype.toObject>;
            signatures?: ReturnType<typeof TMSignature.prototype.toObject>[];
        }): BlockRelayProof {
            const message = new BlockRelayProof({});
            if (data.multi_store_proof != null) {
                message.multi_store_proof = MultiStoreProof.fromObject(data.multi_store_proof);
            }
            if (data.block_header_merkle_parts != null) {
                message.block_header_merkle_parts = BlockHeaderMerkleParts.fromObject(data.block_header_merkle_parts);
            }
            if (data.common_encoded_vote_part != null) {
                message.common_encoded_vote_part = CommonEncodedVotePart.fromObject(data.common_encoded_vote_part);
            }
            if (data.signatures != null) {
                message.signatures = data.signatures.map(item => TMSignature.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                multi_store_proof?: ReturnType<typeof MultiStoreProof.prototype.toObject>;
                block_header_merkle_parts?: ReturnType<typeof BlockHeaderMerkleParts.prototype.toObject>;
                common_encoded_vote_part?: ReturnType<typeof CommonEncodedVotePart.prototype.toObject>;
                signatures?: ReturnType<typeof TMSignature.prototype.toObject>[];
            } = {};
            if (this.multi_store_proof != null) {
                data.multi_store_proof = this.multi_store_proof.toObject();
            }
            if (this.block_header_merkle_parts != null) {
                data.block_header_merkle_parts = this.block_header_merkle_parts.toObject();
            }
            if (this.common_encoded_vote_part != null) {
                data.common_encoded_vote_part = this.common_encoded_vote_part.toObject();
            }
            if (this.signatures != null) {
                data.signatures = this.signatures.map((item: TMSignature) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_multi_store_proof)
                writer.writeMessage(1, this.multi_store_proof, () => this.multi_store_proof.serialize(writer));
            if (this.has_block_header_merkle_parts)
                writer.writeMessage(2, this.block_header_merkle_parts, () => this.block_header_merkle_parts.serialize(writer));
            if (this.has_common_encoded_vote_part)
                writer.writeMessage(3, this.common_encoded_vote_part, () => this.common_encoded_vote_part.serialize(writer));
            if (this.signatures.length)
                writer.writeRepeatedMessage(4, this.signatures, (item: TMSignature) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockRelayProof {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockRelayProof();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.multi_store_proof, () => message.multi_store_proof = MultiStoreProof.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.block_header_merkle_parts, () => message.block_header_merkle_parts = BlockHeaderMerkleParts.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.common_encoded_vote_part, () => message.common_encoded_vote_part = CommonEncodedVotePart.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.signatures, () => pb_1.Message.addToRepeatedWrapperField(message, 4, TMSignature.deserialize(reader), TMSignature));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockRelayProof {
            return BlockRelayProof.deserialize(bytes);
        }
    }
    export class MultiStoreProof extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            oracle_iavl_state_hash?: Uint8Array;
            mint_store_merkle_hash?: Uint8Array;
            params_to_restake_stores_merkle_hash?: Uint8Array;
            rollingseed_to_transfer_stores_merkle_hash?: Uint8Array;
            tss_to_upgrade_stores_merkle_hash?: Uint8Array;
            auth_to_icahost_stores_merkle_hash?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("oracle_iavl_state_hash" in data && data.oracle_iavl_state_hash != undefined) {
                    this.oracle_iavl_state_hash = data.oracle_iavl_state_hash;
                }
                if ("mint_store_merkle_hash" in data && data.mint_store_merkle_hash != undefined) {
                    this.mint_store_merkle_hash = data.mint_store_merkle_hash;
                }
                if ("params_to_restake_stores_merkle_hash" in data && data.params_to_restake_stores_merkle_hash != undefined) {
                    this.params_to_restake_stores_merkle_hash = data.params_to_restake_stores_merkle_hash;
                }
                if ("rollingseed_to_transfer_stores_merkle_hash" in data && data.rollingseed_to_transfer_stores_merkle_hash != undefined) {
                    this.rollingseed_to_transfer_stores_merkle_hash = data.rollingseed_to_transfer_stores_merkle_hash;
                }
                if ("tss_to_upgrade_stores_merkle_hash" in data && data.tss_to_upgrade_stores_merkle_hash != undefined) {
                    this.tss_to_upgrade_stores_merkle_hash = data.tss_to_upgrade_stores_merkle_hash;
                }
                if ("auth_to_icahost_stores_merkle_hash" in data && data.auth_to_icahost_stores_merkle_hash != undefined) {
                    this.auth_to_icahost_stores_merkle_hash = data.auth_to_icahost_stores_merkle_hash;
                }
            }
        }
        get oracle_iavl_state_hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set oracle_iavl_state_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get mint_store_merkle_hash() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set mint_store_merkle_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get params_to_restake_stores_merkle_hash() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set params_to_restake_stores_merkle_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get rollingseed_to_transfer_stores_merkle_hash() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set rollingseed_to_transfer_stores_merkle_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get tss_to_upgrade_stores_merkle_hash() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set tss_to_upgrade_stores_merkle_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get auth_to_icahost_stores_merkle_hash() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
        }
        set auth_to_icahost_stores_merkle_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            oracle_iavl_state_hash?: Uint8Array;
            mint_store_merkle_hash?: Uint8Array;
            params_to_restake_stores_merkle_hash?: Uint8Array;
            rollingseed_to_transfer_stores_merkle_hash?: Uint8Array;
            tss_to_upgrade_stores_merkle_hash?: Uint8Array;
            auth_to_icahost_stores_merkle_hash?: Uint8Array;
        }): MultiStoreProof {
            const message = new MultiStoreProof({});
            if (data.oracle_iavl_state_hash != null) {
                message.oracle_iavl_state_hash = data.oracle_iavl_state_hash;
            }
            if (data.mint_store_merkle_hash != null) {
                message.mint_store_merkle_hash = data.mint_store_merkle_hash;
            }
            if (data.params_to_restake_stores_merkle_hash != null) {
                message.params_to_restake_stores_merkle_hash = data.params_to_restake_stores_merkle_hash;
            }
            if (data.rollingseed_to_transfer_stores_merkle_hash != null) {
                message.rollingseed_to_transfer_stores_merkle_hash = data.rollingseed_to_transfer_stores_merkle_hash;
            }
            if (data.tss_to_upgrade_stores_merkle_hash != null) {
                message.tss_to_upgrade_stores_merkle_hash = data.tss_to_upgrade_stores_merkle_hash;
            }
            if (data.auth_to_icahost_stores_merkle_hash != null) {
                message.auth_to_icahost_stores_merkle_hash = data.auth_to_icahost_stores_merkle_hash;
            }
            return message;
        }
        toObject() {
            const data: {
                oracle_iavl_state_hash?: Uint8Array;
                mint_store_merkle_hash?: Uint8Array;
                params_to_restake_stores_merkle_hash?: Uint8Array;
                rollingseed_to_transfer_stores_merkle_hash?: Uint8Array;
                tss_to_upgrade_stores_merkle_hash?: Uint8Array;
                auth_to_icahost_stores_merkle_hash?: Uint8Array;
            } = {};
            if (this.oracle_iavl_state_hash != null) {
                data.oracle_iavl_state_hash = this.oracle_iavl_state_hash;
            }
            if (this.mint_store_merkle_hash != null) {
                data.mint_store_merkle_hash = this.mint_store_merkle_hash;
            }
            if (this.params_to_restake_stores_merkle_hash != null) {
                data.params_to_restake_stores_merkle_hash = this.params_to_restake_stores_merkle_hash;
            }
            if (this.rollingseed_to_transfer_stores_merkle_hash != null) {
                data.rollingseed_to_transfer_stores_merkle_hash = this.rollingseed_to_transfer_stores_merkle_hash;
            }
            if (this.tss_to_upgrade_stores_merkle_hash != null) {
                data.tss_to_upgrade_stores_merkle_hash = this.tss_to_upgrade_stores_merkle_hash;
            }
            if (this.auth_to_icahost_stores_merkle_hash != null) {
                data.auth_to_icahost_stores_merkle_hash = this.auth_to_icahost_stores_merkle_hash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.oracle_iavl_state_hash.length)
                writer.writeBytes(1, this.oracle_iavl_state_hash);
            if (this.mint_store_merkle_hash.length)
                writer.writeBytes(2, this.mint_store_merkle_hash);
            if (this.params_to_restake_stores_merkle_hash.length)
                writer.writeBytes(3, this.params_to_restake_stores_merkle_hash);
            if (this.rollingseed_to_transfer_stores_merkle_hash.length)
                writer.writeBytes(4, this.rollingseed_to_transfer_stores_merkle_hash);
            if (this.tss_to_upgrade_stores_merkle_hash.length)
                writer.writeBytes(5, this.tss_to_upgrade_stores_merkle_hash);
            if (this.auth_to_icahost_stores_merkle_hash.length)
                writer.writeBytes(6, this.auth_to_icahost_stores_merkle_hash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultiStoreProof {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultiStoreProof();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.oracle_iavl_state_hash = reader.readBytes();
                        break;
                    case 2:
                        message.mint_store_merkle_hash = reader.readBytes();
                        break;
                    case 3:
                        message.params_to_restake_stores_merkle_hash = reader.readBytes();
                        break;
                    case 4:
                        message.rollingseed_to_transfer_stores_merkle_hash = reader.readBytes();
                        break;
                    case 5:
                        message.tss_to_upgrade_stores_merkle_hash = reader.readBytes();
                        break;
                    case 6:
                        message.auth_to_icahost_stores_merkle_hash = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultiStoreProof {
            return MultiStoreProof.deserialize(bytes);
        }
    }
    export class BlockHeaderMerkleParts extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version_and_chain_id_hash?: Uint8Array;
            height?: number;
            time_second?: number;
            time_nano_second?: number;
            last_block_id_and_other?: Uint8Array;
            next_validator_hash_and_consensus_hash?: Uint8Array;
            last_results_hash?: Uint8Array;
            evidence_and_proposer_hash?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version_and_chain_id_hash" in data && data.version_and_chain_id_hash != undefined) {
                    this.version_and_chain_id_hash = data.version_and_chain_id_hash;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("time_second" in data && data.time_second != undefined) {
                    this.time_second = data.time_second;
                }
                if ("time_nano_second" in data && data.time_nano_second != undefined) {
                    this.time_nano_second = data.time_nano_second;
                }
                if ("last_block_id_and_other" in data && data.last_block_id_and_other != undefined) {
                    this.last_block_id_and_other = data.last_block_id_and_other;
                }
                if ("next_validator_hash_and_consensus_hash" in data && data.next_validator_hash_and_consensus_hash != undefined) {
                    this.next_validator_hash_and_consensus_hash = data.next_validator_hash_and_consensus_hash;
                }
                if ("last_results_hash" in data && data.last_results_hash != undefined) {
                    this.last_results_hash = data.last_results_hash;
                }
                if ("evidence_and_proposer_hash" in data && data.evidence_and_proposer_hash != undefined) {
                    this.evidence_and_proposer_hash = data.evidence_and_proposer_hash;
                }
            }
        }
        get version_and_chain_id_hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set version_and_chain_id_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get time_second() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set time_second(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get time_nano_second() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set time_nano_second(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get last_block_id_and_other() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set last_block_id_and_other(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get next_validator_hash_and_consensus_hash() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
        }
        set next_validator_hash_and_consensus_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get last_results_hash() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set last_results_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        get evidence_and_proposer_hash() {
            return pb_1.Message.getFieldWithDefault(this, 8, new Uint8Array(0)) as Uint8Array;
        }
        set evidence_and_proposer_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            version_and_chain_id_hash?: Uint8Array;
            height?: number;
            time_second?: number;
            time_nano_second?: number;
            last_block_id_and_other?: Uint8Array;
            next_validator_hash_and_consensus_hash?: Uint8Array;
            last_results_hash?: Uint8Array;
            evidence_and_proposer_hash?: Uint8Array;
        }): BlockHeaderMerkleParts {
            const message = new BlockHeaderMerkleParts({});
            if (data.version_and_chain_id_hash != null) {
                message.version_and_chain_id_hash = data.version_and_chain_id_hash;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.time_second != null) {
                message.time_second = data.time_second;
            }
            if (data.time_nano_second != null) {
                message.time_nano_second = data.time_nano_second;
            }
            if (data.last_block_id_and_other != null) {
                message.last_block_id_and_other = data.last_block_id_and_other;
            }
            if (data.next_validator_hash_and_consensus_hash != null) {
                message.next_validator_hash_and_consensus_hash = data.next_validator_hash_and_consensus_hash;
            }
            if (data.last_results_hash != null) {
                message.last_results_hash = data.last_results_hash;
            }
            if (data.evidence_and_proposer_hash != null) {
                message.evidence_and_proposer_hash = data.evidence_and_proposer_hash;
            }
            return message;
        }
        toObject() {
            const data: {
                version_and_chain_id_hash?: Uint8Array;
                height?: number;
                time_second?: number;
                time_nano_second?: number;
                last_block_id_and_other?: Uint8Array;
                next_validator_hash_and_consensus_hash?: Uint8Array;
                last_results_hash?: Uint8Array;
                evidence_and_proposer_hash?: Uint8Array;
            } = {};
            if (this.version_and_chain_id_hash != null) {
                data.version_and_chain_id_hash = this.version_and_chain_id_hash;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.time_second != null) {
                data.time_second = this.time_second;
            }
            if (this.time_nano_second != null) {
                data.time_nano_second = this.time_nano_second;
            }
            if (this.last_block_id_and_other != null) {
                data.last_block_id_and_other = this.last_block_id_and_other;
            }
            if (this.next_validator_hash_and_consensus_hash != null) {
                data.next_validator_hash_and_consensus_hash = this.next_validator_hash_and_consensus_hash;
            }
            if (this.last_results_hash != null) {
                data.last_results_hash = this.last_results_hash;
            }
            if (this.evidence_and_proposer_hash != null) {
                data.evidence_and_proposer_hash = this.evidence_and_proposer_hash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version_and_chain_id_hash.length)
                writer.writeBytes(1, this.version_and_chain_id_hash);
            if (this.height != 0)
                writer.writeUint64(2, this.height);
            if (this.time_second != 0)
                writer.writeUint64(3, this.time_second);
            if (this.time_nano_second != 0)
                writer.writeUint32(4, this.time_nano_second);
            if (this.last_block_id_and_other.length)
                writer.writeBytes(5, this.last_block_id_and_other);
            if (this.next_validator_hash_and_consensus_hash.length)
                writer.writeBytes(6, this.next_validator_hash_and_consensus_hash);
            if (this.last_results_hash.length)
                writer.writeBytes(7, this.last_results_hash);
            if (this.evidence_and_proposer_hash.length)
                writer.writeBytes(8, this.evidence_and_proposer_hash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockHeaderMerkleParts {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockHeaderMerkleParts();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version_and_chain_id_hash = reader.readBytes();
                        break;
                    case 2:
                        message.height = reader.readUint64();
                        break;
                    case 3:
                        message.time_second = reader.readUint64();
                        break;
                    case 4:
                        message.time_nano_second = reader.readUint32();
                        break;
                    case 5:
                        message.last_block_id_and_other = reader.readBytes();
                        break;
                    case 6:
                        message.next_validator_hash_and_consensus_hash = reader.readBytes();
                        break;
                    case 7:
                        message.last_results_hash = reader.readBytes();
                        break;
                    case 8:
                        message.evidence_and_proposer_hash = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockHeaderMerkleParts {
            return BlockHeaderMerkleParts.deserialize(bytes);
        }
    }
    export class CommonEncodedVotePart extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signed_data_prefix?: Uint8Array;
            signed_data_suffix?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signed_data_prefix" in data && data.signed_data_prefix != undefined) {
                    this.signed_data_prefix = data.signed_data_prefix;
                }
                if ("signed_data_suffix" in data && data.signed_data_suffix != undefined) {
                    this.signed_data_suffix = data.signed_data_suffix;
                }
            }
        }
        get signed_data_prefix() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set signed_data_prefix(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get signed_data_suffix() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set signed_data_suffix(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            signed_data_prefix?: Uint8Array;
            signed_data_suffix?: Uint8Array;
        }): CommonEncodedVotePart {
            const message = new CommonEncodedVotePart({});
            if (data.signed_data_prefix != null) {
                message.signed_data_prefix = data.signed_data_prefix;
            }
            if (data.signed_data_suffix != null) {
                message.signed_data_suffix = data.signed_data_suffix;
            }
            return message;
        }
        toObject() {
            const data: {
                signed_data_prefix?: Uint8Array;
                signed_data_suffix?: Uint8Array;
            } = {};
            if (this.signed_data_prefix != null) {
                data.signed_data_prefix = this.signed_data_prefix;
            }
            if (this.signed_data_suffix != null) {
                data.signed_data_suffix = this.signed_data_suffix;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signed_data_prefix.length)
                writer.writeBytes(1, this.signed_data_prefix);
            if (this.signed_data_suffix.length)
                writer.writeBytes(2, this.signed_data_suffix);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommonEncodedVotePart {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommonEncodedVotePart();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signed_data_prefix = reader.readBytes();
                        break;
                    case 2:
                        message.signed_data_suffix = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommonEncodedVotePart {
            return CommonEncodedVotePart.deserialize(bytes);
        }
    }
    export class TMSignature extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            r?: Uint8Array;
            s?: Uint8Array;
            v?: number;
            encoded_timestamp?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("r" in data && data.r != undefined) {
                    this.r = data.r;
                }
                if ("s" in data && data.s != undefined) {
                    this.s = data.s;
                }
                if ("v" in data && data.v != undefined) {
                    this.v = data.v;
                }
                if ("encoded_timestamp" in data && data.encoded_timestamp != undefined) {
                    this.encoded_timestamp = data.encoded_timestamp;
                }
            }
        }
        get r() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set r(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get s() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set s(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get v() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set v(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get encoded_timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set encoded_timestamp(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            r?: Uint8Array;
            s?: Uint8Array;
            v?: number;
            encoded_timestamp?: Uint8Array;
        }): TMSignature {
            const message = new TMSignature({});
            if (data.r != null) {
                message.r = data.r;
            }
            if (data.s != null) {
                message.s = data.s;
            }
            if (data.v != null) {
                message.v = data.v;
            }
            if (data.encoded_timestamp != null) {
                message.encoded_timestamp = data.encoded_timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                r?: Uint8Array;
                s?: Uint8Array;
                v?: number;
                encoded_timestamp?: Uint8Array;
            } = {};
            if (this.r != null) {
                data.r = this.r;
            }
            if (this.s != null) {
                data.s = this.s;
            }
            if (this.v != null) {
                data.v = this.v;
            }
            if (this.encoded_timestamp != null) {
                data.encoded_timestamp = this.encoded_timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.r.length)
                writer.writeBytes(1, this.r);
            if (this.s.length)
                writer.writeBytes(2, this.s);
            if (this.v != 0)
                writer.writeUint32(3, this.v);
            if (this.encoded_timestamp.length)
                writer.writeBytes(4, this.encoded_timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TMSignature {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TMSignature();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.r = reader.readBytes();
                        break;
                    case 2:
                        message.s = reader.readBytes();
                        break;
                    case 3:
                        message.v = reader.readUint32();
                        break;
                    case 4:
                        message.encoded_timestamp = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TMSignature {
            return TMSignature.deserialize(bytes);
        }
    }
    export class RequestsCountProof extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            count?: number;
            version?: number;
            merkle_paths?: IAVLMerklePath[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("merkle_paths" in data && data.merkle_paths != undefined) {
                    this.merkle_paths = data.merkle_paths;
                }
            }
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set version(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get merkle_paths() {
            return pb_1.Message.getRepeatedWrapperField(this, IAVLMerklePath, 3) as IAVLMerklePath[];
        }
        set merkle_paths(value: IAVLMerklePath[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            count?: number;
            version?: number;
            merkle_paths?: ReturnType<typeof IAVLMerklePath.prototype.toObject>[];
        }): RequestsCountProof {
            const message = new RequestsCountProof({});
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.merkle_paths != null) {
                message.merkle_paths = data.merkle_paths.map(item => IAVLMerklePath.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                count?: number;
                version?: number;
                merkle_paths?: ReturnType<typeof IAVLMerklePath.prototype.toObject>[];
            } = {};
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.merkle_paths != null) {
                data.merkle_paths = this.merkle_paths.map((item: IAVLMerklePath) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.count != 0)
                writer.writeUint64(1, this.count);
            if (this.version != 0)
                writer.writeUint64(2, this.version);
            if (this.merkle_paths.length)
                writer.writeRepeatedMessage(3, this.merkle_paths, (item: IAVLMerklePath) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestsCountProof {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestsCountProof();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.count = reader.readUint64();
                        break;
                    case 2:
                        message.version = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.merkle_paths, () => pb_1.Message.addToRepeatedWrapperField(message, 3, IAVLMerklePath.deserialize(reader), IAVLMerklePath));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestsCountProof {
            return RequestsCountProof.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedServiceService {
        static definition = {
            Proof: {
                path: "/band.base.oracle.v1.Service/Proof",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ProofRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ProofRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ProofResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ProofResponse.deserialize(new Uint8Array(bytes))
            },
            MultiProof: {
                path: "/band.base.oracle.v1.Service/MultiProof",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MultiProofRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MultiProofRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MultiProofResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MultiProofResponse.deserialize(new Uint8Array(bytes))
            },
            RequestCountProof: {
                path: "/band.base.oracle.v1.Service/RequestCountProof",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RequestCountProofRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RequestCountProofRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RequestCountProofResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RequestCountProofResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Proof(call: grpc_1.ServerUnaryCall<ProofRequest, ProofResponse>, callback: grpc_1.sendUnaryData<ProofResponse>): void;
        abstract MultiProof(call: grpc_1.ServerUnaryCall<MultiProofRequest, MultiProofResponse>, callback: grpc_1.sendUnaryData<MultiProofResponse>): void;
        abstract RequestCountProof(call: grpc_1.ServerUnaryCall<RequestCountProofRequest, RequestCountProofResponse>, callback: grpc_1.sendUnaryData<RequestCountProofResponse>): void;
    }
    export class ServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedServiceService.definition, "Service", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Proof: GrpcUnaryServiceInterface<ProofRequest, ProofResponse> = (message: ProofRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ProofResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ProofResponse>, callback?: grpc_1.requestCallback<ProofResponse>): grpc_1.ClientUnaryCall => {
            return super.Proof(message, metadata, options, callback);
        };
        MultiProof: GrpcUnaryServiceInterface<MultiProofRequest, MultiProofResponse> = (message: MultiProofRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MultiProofResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MultiProofResponse>, callback?: grpc_1.requestCallback<MultiProofResponse>): grpc_1.ClientUnaryCall => {
            return super.MultiProof(message, metadata, options, callback);
        };
        RequestCountProof: GrpcUnaryServiceInterface<RequestCountProofRequest, RequestCountProofResponse> = (message: RequestCountProofRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RequestCountProofResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RequestCountProofResponse>, callback?: grpc_1.requestCallback<RequestCountProofResponse>): grpc_1.ClientUnaryCall => {
            return super.RequestCountProof(message, metadata, options, callback);
        };
    }
}
