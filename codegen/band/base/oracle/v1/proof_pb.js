// source: band/base/oracle/v1/proof.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_api_annotations_pb = require('../../../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var gogoproto_gogo_pb = require('../../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var band_oracle_v1_oracle_pb = require('../../../../band/oracle/v1/oracle_pb.js');
goog.object.extend(proto, band_oracle_v1_oracle_pb);
goog.exportSymbol('proto.band.base.oracle.v1.BlockHeaderMerkleParts', null, global);
goog.exportSymbol('proto.band.base.oracle.v1.BlockRelayProof', null, global);
goog.exportSymbol('proto.band.base.oracle.v1.CommonEncodedVotePart', null, global);
goog.exportSymbol('proto.band.base.oracle.v1.CountProof', null, global);
goog.exportSymbol('proto.band.base.oracle.v1.CountProofResult', null, global);
goog.exportSymbol('proto.band.base.oracle.v1.IAVLMerklePath', null, global);
goog.exportSymbol('proto.band.base.oracle.v1.MultiProof', null, global);
goog.exportSymbol('proto.band.base.oracle.v1.MultiProofRequest', null, global);
goog.exportSymbol('proto.band.base.oracle.v1.MultiProofResponse', null, global);
goog.exportSymbol('proto.band.base.oracle.v1.MultiProofResult', null, global);
goog.exportSymbol('proto.band.base.oracle.v1.MultiStoreProof', null, global);
goog.exportSymbol('proto.band.base.oracle.v1.OracleDataProof', null, global);
goog.exportSymbol('proto.band.base.oracle.v1.ProofRequest', null, global);
goog.exportSymbol('proto.band.base.oracle.v1.ProofResponse', null, global);
goog.exportSymbol('proto.band.base.oracle.v1.RequestCountProofRequest', null, global);
goog.exportSymbol('proto.band.base.oracle.v1.RequestCountProofResponse', null, global);
goog.exportSymbol('proto.band.base.oracle.v1.RequestsCountProof', null, global);
goog.exportSymbol('proto.band.base.oracle.v1.SingleProof', null, global);
goog.exportSymbol('proto.band.base.oracle.v1.SingleProofResult', null, global);
goog.exportSymbol('proto.band.base.oracle.v1.TMSignature', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.ProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.band.base.oracle.v1.ProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.ProofRequest.displayName = 'proto.band.base.oracle.v1.ProofRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.ProofResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.band.base.oracle.v1.ProofResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.ProofResponse.displayName = 'proto.band.base.oracle.v1.ProofResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.MultiProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.band.base.oracle.v1.MultiProofRequest.repeatedFields_, null);
};
goog.inherits(proto.band.base.oracle.v1.MultiProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.MultiProofRequest.displayName = 'proto.band.base.oracle.v1.MultiProofRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.MultiProofResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.band.base.oracle.v1.MultiProofResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.MultiProofResponse.displayName = 'proto.band.base.oracle.v1.MultiProofResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.RequestCountProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.band.base.oracle.v1.RequestCountProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.RequestCountProofRequest.displayName = 'proto.band.base.oracle.v1.RequestCountProofRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.RequestCountProofResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.band.base.oracle.v1.RequestCountProofResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.RequestCountProofResponse.displayName = 'proto.band.base.oracle.v1.RequestCountProofResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.SingleProofResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.band.base.oracle.v1.SingleProofResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.SingleProofResult.displayName = 'proto.band.base.oracle.v1.SingleProofResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.MultiProofResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.band.base.oracle.v1.MultiProofResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.MultiProofResult.displayName = 'proto.band.base.oracle.v1.MultiProofResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.CountProofResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.band.base.oracle.v1.CountProofResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.CountProofResult.displayName = 'proto.band.base.oracle.v1.CountProofResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.SingleProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.band.base.oracle.v1.SingleProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.SingleProof.displayName = 'proto.band.base.oracle.v1.SingleProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.MultiProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.band.base.oracle.v1.MultiProof.repeatedFields_, null);
};
goog.inherits(proto.band.base.oracle.v1.MultiProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.MultiProof.displayName = 'proto.band.base.oracle.v1.MultiProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.CountProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.band.base.oracle.v1.CountProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.CountProof.displayName = 'proto.band.base.oracle.v1.CountProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.OracleDataProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.band.base.oracle.v1.OracleDataProof.repeatedFields_, null);
};
goog.inherits(proto.band.base.oracle.v1.OracleDataProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.OracleDataProof.displayName = 'proto.band.base.oracle.v1.OracleDataProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.IAVLMerklePath = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.band.base.oracle.v1.IAVLMerklePath, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.IAVLMerklePath.displayName = 'proto.band.base.oracle.v1.IAVLMerklePath';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.BlockRelayProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.band.base.oracle.v1.BlockRelayProof.repeatedFields_, null);
};
goog.inherits(proto.band.base.oracle.v1.BlockRelayProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.BlockRelayProof.displayName = 'proto.band.base.oracle.v1.BlockRelayProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.MultiStoreProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.band.base.oracle.v1.MultiStoreProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.MultiStoreProof.displayName = 'proto.band.base.oracle.v1.MultiStoreProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.band.base.oracle.v1.BlockHeaderMerkleParts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.BlockHeaderMerkleParts.displayName = 'proto.band.base.oracle.v1.BlockHeaderMerkleParts';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.CommonEncodedVotePart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.band.base.oracle.v1.CommonEncodedVotePart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.CommonEncodedVotePart.displayName = 'proto.band.base.oracle.v1.CommonEncodedVotePart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.TMSignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.band.base.oracle.v1.TMSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.TMSignature.displayName = 'proto.band.base.oracle.v1.TMSignature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.band.base.oracle.v1.RequestsCountProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.band.base.oracle.v1.RequestsCountProof.repeatedFields_, null);
};
goog.inherits(proto.band.base.oracle.v1.RequestsCountProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.band.base.oracle.v1.RequestsCountProof.displayName = 'proto.band.base.oracle.v1.RequestsCountProof';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.ProofRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.ProofRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.ProofRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.ProofRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.ProofRequest}
 */
proto.band.base.oracle.v1.ProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.ProofRequest;
  return proto.band.base.oracle.v1.ProofRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.ProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.ProofRequest}
 */
proto.band.base.oracle.v1.ProofRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.ProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.ProofRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.ProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.ProofRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional uint64 request_id = 1;
 * @return {number}
 */
proto.band.base.oracle.v1.ProofRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.band.base.oracle.v1.ProofRequest} returns this
 */
proto.band.base.oracle.v1.ProofRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 height = 2;
 * @return {number}
 */
proto.band.base.oracle.v1.ProofRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.band.base.oracle.v1.ProofRequest} returns this
 */
proto.band.base.oracle.v1.ProofRequest.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.ProofResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.ProofResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.ProofResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.ProofResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: (f = msg.getResult()) && proto.band.base.oracle.v1.SingleProofResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.ProofResponse}
 */
proto.band.base.oracle.v1.ProofResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.ProofResponse;
  return proto.band.base.oracle.v1.ProofResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.ProofResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.ProofResponse}
 */
proto.band.base.oracle.v1.ProofResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 2:
      var value = new proto.band.base.oracle.v1.SingleProofResult;
      reader.readMessage(value,proto.band.base.oracle.v1.SingleProofResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.ProofResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.ProofResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.ProofResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.ProofResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.band.base.oracle.v1.SingleProofResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.band.base.oracle.v1.ProofResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.band.base.oracle.v1.ProofResponse} returns this
 */
proto.band.base.oracle.v1.ProofResponse.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional SingleProofResult result = 2;
 * @return {?proto.band.base.oracle.v1.SingleProofResult}
 */
proto.band.base.oracle.v1.ProofResponse.prototype.getResult = function() {
  return /** @type{?proto.band.base.oracle.v1.SingleProofResult} */ (
    jspb.Message.getWrapperField(this, proto.band.base.oracle.v1.SingleProofResult, 2));
};


/**
 * @param {?proto.band.base.oracle.v1.SingleProofResult|undefined} value
 * @return {!proto.band.base.oracle.v1.ProofResponse} returns this
*/
proto.band.base.oracle.v1.ProofResponse.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.band.base.oracle.v1.ProofResponse} returns this
 */
proto.band.base.oracle.v1.ProofResponse.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.band.base.oracle.v1.ProofResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.band.base.oracle.v1.MultiProofRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.MultiProofRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.MultiProofRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.MultiProofRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.MultiProofRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.MultiProofRequest}
 */
proto.band.base.oracle.v1.MultiProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.MultiProofRequest;
  return proto.band.base.oracle.v1.MultiProofRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.MultiProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.MultiProofRequest}
 */
proto.band.base.oracle.v1.MultiProofRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRequestIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.MultiProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.MultiProofRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.MultiProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.MultiProofRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestIdsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
};


/**
 * repeated uint64 request_ids = 1;
 * @return {!Array<number>}
 */
proto.band.base.oracle.v1.MultiProofRequest.prototype.getRequestIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.band.base.oracle.v1.MultiProofRequest} returns this
 */
proto.band.base.oracle.v1.MultiProofRequest.prototype.setRequestIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.band.base.oracle.v1.MultiProofRequest} returns this
 */
proto.band.base.oracle.v1.MultiProofRequest.prototype.addRequestIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.band.base.oracle.v1.MultiProofRequest} returns this
 */
proto.band.base.oracle.v1.MultiProofRequest.prototype.clearRequestIdsList = function() {
  return this.setRequestIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.MultiProofResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.MultiProofResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.MultiProofResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.MultiProofResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: (f = msg.getResult()) && proto.band.base.oracle.v1.MultiProofResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.MultiProofResponse}
 */
proto.band.base.oracle.v1.MultiProofResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.MultiProofResponse;
  return proto.band.base.oracle.v1.MultiProofResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.MultiProofResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.MultiProofResponse}
 */
proto.band.base.oracle.v1.MultiProofResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 2:
      var value = new proto.band.base.oracle.v1.MultiProofResult;
      reader.readMessage(value,proto.band.base.oracle.v1.MultiProofResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.MultiProofResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.MultiProofResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.MultiProofResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.MultiProofResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.band.base.oracle.v1.MultiProofResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.band.base.oracle.v1.MultiProofResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.band.base.oracle.v1.MultiProofResponse} returns this
 */
proto.band.base.oracle.v1.MultiProofResponse.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional MultiProofResult result = 2;
 * @return {?proto.band.base.oracle.v1.MultiProofResult}
 */
proto.band.base.oracle.v1.MultiProofResponse.prototype.getResult = function() {
  return /** @type{?proto.band.base.oracle.v1.MultiProofResult} */ (
    jspb.Message.getWrapperField(this, proto.band.base.oracle.v1.MultiProofResult, 2));
};


/**
 * @param {?proto.band.base.oracle.v1.MultiProofResult|undefined} value
 * @return {!proto.band.base.oracle.v1.MultiProofResponse} returns this
*/
proto.band.base.oracle.v1.MultiProofResponse.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.band.base.oracle.v1.MultiProofResponse} returns this
 */
proto.band.base.oracle.v1.MultiProofResponse.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.band.base.oracle.v1.MultiProofResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.RequestCountProofRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.RequestCountProofRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.RequestCountProofRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.RequestCountProofRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.RequestCountProofRequest}
 */
proto.band.base.oracle.v1.RequestCountProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.RequestCountProofRequest;
  return proto.band.base.oracle.v1.RequestCountProofRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.RequestCountProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.RequestCountProofRequest}
 */
proto.band.base.oracle.v1.RequestCountProofRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.RequestCountProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.RequestCountProofRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.RequestCountProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.RequestCountProofRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.RequestCountProofResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.RequestCountProofResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.RequestCountProofResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.RequestCountProofResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: (f = msg.getResult()) && proto.band.base.oracle.v1.CountProofResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.RequestCountProofResponse}
 */
proto.band.base.oracle.v1.RequestCountProofResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.RequestCountProofResponse;
  return proto.band.base.oracle.v1.RequestCountProofResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.RequestCountProofResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.RequestCountProofResponse}
 */
proto.band.base.oracle.v1.RequestCountProofResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 2:
      var value = new proto.band.base.oracle.v1.CountProofResult;
      reader.readMessage(value,proto.band.base.oracle.v1.CountProofResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.RequestCountProofResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.RequestCountProofResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.RequestCountProofResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.RequestCountProofResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.band.base.oracle.v1.CountProofResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.band.base.oracle.v1.RequestCountProofResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.band.base.oracle.v1.RequestCountProofResponse} returns this
 */
proto.band.base.oracle.v1.RequestCountProofResponse.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional CountProofResult result = 2;
 * @return {?proto.band.base.oracle.v1.CountProofResult}
 */
proto.band.base.oracle.v1.RequestCountProofResponse.prototype.getResult = function() {
  return /** @type{?proto.band.base.oracle.v1.CountProofResult} */ (
    jspb.Message.getWrapperField(this, proto.band.base.oracle.v1.CountProofResult, 2));
};


/**
 * @param {?proto.band.base.oracle.v1.CountProofResult|undefined} value
 * @return {!proto.band.base.oracle.v1.RequestCountProofResponse} returns this
*/
proto.band.base.oracle.v1.RequestCountProofResponse.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.band.base.oracle.v1.RequestCountProofResponse} returns this
 */
proto.band.base.oracle.v1.RequestCountProofResponse.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.band.base.oracle.v1.RequestCountProofResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.SingleProofResult.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.SingleProofResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.SingleProofResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.SingleProofResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    proof: (f = msg.getProof()) && proto.band.base.oracle.v1.SingleProof.toObject(includeInstance, f),
    evmProofBytes: msg.getEvmProofBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.SingleProofResult}
 */
proto.band.base.oracle.v1.SingleProofResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.SingleProofResult;
  return proto.band.base.oracle.v1.SingleProofResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.SingleProofResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.SingleProofResult}
 */
proto.band.base.oracle.v1.SingleProofResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.band.base.oracle.v1.SingleProof;
      reader.readMessage(value,proto.band.base.oracle.v1.SingleProof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEvmProofBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.SingleProofResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.SingleProofResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.SingleProofResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.SingleProofResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.band.base.oracle.v1.SingleProof.serializeBinaryToWriter
    );
  }
  f = message.getEvmProofBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional SingleProof proof = 1;
 * @return {?proto.band.base.oracle.v1.SingleProof}
 */
proto.band.base.oracle.v1.SingleProofResult.prototype.getProof = function() {
  return /** @type{?proto.band.base.oracle.v1.SingleProof} */ (
    jspb.Message.getWrapperField(this, proto.band.base.oracle.v1.SingleProof, 1));
};


/**
 * @param {?proto.band.base.oracle.v1.SingleProof|undefined} value
 * @return {!proto.band.base.oracle.v1.SingleProofResult} returns this
*/
proto.band.base.oracle.v1.SingleProofResult.prototype.setProof = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.band.base.oracle.v1.SingleProofResult} returns this
 */
proto.band.base.oracle.v1.SingleProofResult.prototype.clearProof = function() {
  return this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.band.base.oracle.v1.SingleProofResult.prototype.hasProof = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes evm_proof_bytes = 2;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.SingleProofResult.prototype.getEvmProofBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes evm_proof_bytes = 2;
 * This is a type-conversion wrapper around `getEvmProofBytes()`
 * @return {string}
 */
proto.band.base.oracle.v1.SingleProofResult.prototype.getEvmProofBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEvmProofBytes()));
};


/**
 * optional bytes evm_proof_bytes = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvmProofBytes()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.SingleProofResult.prototype.getEvmProofBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEvmProofBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.SingleProofResult} returns this
 */
proto.band.base.oracle.v1.SingleProofResult.prototype.setEvmProofBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.MultiProofResult.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.MultiProofResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.MultiProofResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.MultiProofResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    proof: (f = msg.getProof()) && proto.band.base.oracle.v1.MultiProof.toObject(includeInstance, f),
    evmProofBytes: msg.getEvmProofBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.MultiProofResult}
 */
proto.band.base.oracle.v1.MultiProofResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.MultiProofResult;
  return proto.band.base.oracle.v1.MultiProofResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.MultiProofResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.MultiProofResult}
 */
proto.band.base.oracle.v1.MultiProofResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.band.base.oracle.v1.MultiProof;
      reader.readMessage(value,proto.band.base.oracle.v1.MultiProof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEvmProofBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.MultiProofResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.MultiProofResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.MultiProofResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.MultiProofResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.band.base.oracle.v1.MultiProof.serializeBinaryToWriter
    );
  }
  f = message.getEvmProofBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional MultiProof proof = 1;
 * @return {?proto.band.base.oracle.v1.MultiProof}
 */
proto.band.base.oracle.v1.MultiProofResult.prototype.getProof = function() {
  return /** @type{?proto.band.base.oracle.v1.MultiProof} */ (
    jspb.Message.getWrapperField(this, proto.band.base.oracle.v1.MultiProof, 1));
};


/**
 * @param {?proto.band.base.oracle.v1.MultiProof|undefined} value
 * @return {!proto.band.base.oracle.v1.MultiProofResult} returns this
*/
proto.band.base.oracle.v1.MultiProofResult.prototype.setProof = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.band.base.oracle.v1.MultiProofResult} returns this
 */
proto.band.base.oracle.v1.MultiProofResult.prototype.clearProof = function() {
  return this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.band.base.oracle.v1.MultiProofResult.prototype.hasProof = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes evm_proof_bytes = 2;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.MultiProofResult.prototype.getEvmProofBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes evm_proof_bytes = 2;
 * This is a type-conversion wrapper around `getEvmProofBytes()`
 * @return {string}
 */
proto.band.base.oracle.v1.MultiProofResult.prototype.getEvmProofBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEvmProofBytes()));
};


/**
 * optional bytes evm_proof_bytes = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvmProofBytes()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.MultiProofResult.prototype.getEvmProofBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEvmProofBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.MultiProofResult} returns this
 */
proto.band.base.oracle.v1.MultiProofResult.prototype.setEvmProofBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.CountProofResult.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.CountProofResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.CountProofResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.CountProofResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    proof: (f = msg.getProof()) && proto.band.base.oracle.v1.CountProof.toObject(includeInstance, f),
    evmProofBytes: msg.getEvmProofBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.CountProofResult}
 */
proto.band.base.oracle.v1.CountProofResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.CountProofResult;
  return proto.band.base.oracle.v1.CountProofResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.CountProofResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.CountProofResult}
 */
proto.band.base.oracle.v1.CountProofResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.band.base.oracle.v1.CountProof;
      reader.readMessage(value,proto.band.base.oracle.v1.CountProof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEvmProofBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.CountProofResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.CountProofResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.CountProofResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.CountProofResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.band.base.oracle.v1.CountProof.serializeBinaryToWriter
    );
  }
  f = message.getEvmProofBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional CountProof proof = 1;
 * @return {?proto.band.base.oracle.v1.CountProof}
 */
proto.band.base.oracle.v1.CountProofResult.prototype.getProof = function() {
  return /** @type{?proto.band.base.oracle.v1.CountProof} */ (
    jspb.Message.getWrapperField(this, proto.band.base.oracle.v1.CountProof, 1));
};


/**
 * @param {?proto.band.base.oracle.v1.CountProof|undefined} value
 * @return {!proto.band.base.oracle.v1.CountProofResult} returns this
*/
proto.band.base.oracle.v1.CountProofResult.prototype.setProof = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.band.base.oracle.v1.CountProofResult} returns this
 */
proto.band.base.oracle.v1.CountProofResult.prototype.clearProof = function() {
  return this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.band.base.oracle.v1.CountProofResult.prototype.hasProof = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes evm_proof_bytes = 2;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.CountProofResult.prototype.getEvmProofBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes evm_proof_bytes = 2;
 * This is a type-conversion wrapper around `getEvmProofBytes()`
 * @return {string}
 */
proto.band.base.oracle.v1.CountProofResult.prototype.getEvmProofBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEvmProofBytes()));
};


/**
 * optional bytes evm_proof_bytes = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvmProofBytes()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.CountProofResult.prototype.getEvmProofBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEvmProofBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.CountProofResult} returns this
 */
proto.band.base.oracle.v1.CountProofResult.prototype.setEvmProofBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.SingleProof.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.SingleProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.SingleProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.SingleProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    oracleDataProof: (f = msg.getOracleDataProof()) && proto.band.base.oracle.v1.OracleDataProof.toObject(includeInstance, f),
    blockRelayProof: (f = msg.getBlockRelayProof()) && proto.band.base.oracle.v1.BlockRelayProof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.SingleProof}
 */
proto.band.base.oracle.v1.SingleProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.SingleProof;
  return proto.band.base.oracle.v1.SingleProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.SingleProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.SingleProof}
 */
proto.band.base.oracle.v1.SingleProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 2:
      var value = new proto.band.base.oracle.v1.OracleDataProof;
      reader.readMessage(value,proto.band.base.oracle.v1.OracleDataProof.deserializeBinaryFromReader);
      msg.setOracleDataProof(value);
      break;
    case 3:
      var value = new proto.band.base.oracle.v1.BlockRelayProof;
      reader.readMessage(value,proto.band.base.oracle.v1.BlockRelayProof.deserializeBinaryFromReader);
      msg.setBlockRelayProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.SingleProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.SingleProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.SingleProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.SingleProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOracleDataProof();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.band.base.oracle.v1.OracleDataProof.serializeBinaryToWriter
    );
  }
  f = message.getBlockRelayProof();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.band.base.oracle.v1.BlockRelayProof.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 block_height = 1;
 * @return {number}
 */
proto.band.base.oracle.v1.SingleProof.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.band.base.oracle.v1.SingleProof} returns this
 */
proto.band.base.oracle.v1.SingleProof.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional OracleDataProof oracle_data_proof = 2;
 * @return {?proto.band.base.oracle.v1.OracleDataProof}
 */
proto.band.base.oracle.v1.SingleProof.prototype.getOracleDataProof = function() {
  return /** @type{?proto.band.base.oracle.v1.OracleDataProof} */ (
    jspb.Message.getWrapperField(this, proto.band.base.oracle.v1.OracleDataProof, 2));
};


/**
 * @param {?proto.band.base.oracle.v1.OracleDataProof|undefined} value
 * @return {!proto.band.base.oracle.v1.SingleProof} returns this
*/
proto.band.base.oracle.v1.SingleProof.prototype.setOracleDataProof = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.band.base.oracle.v1.SingleProof} returns this
 */
proto.band.base.oracle.v1.SingleProof.prototype.clearOracleDataProof = function() {
  return this.setOracleDataProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.band.base.oracle.v1.SingleProof.prototype.hasOracleDataProof = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BlockRelayProof block_relay_proof = 3;
 * @return {?proto.band.base.oracle.v1.BlockRelayProof}
 */
proto.band.base.oracle.v1.SingleProof.prototype.getBlockRelayProof = function() {
  return /** @type{?proto.band.base.oracle.v1.BlockRelayProof} */ (
    jspb.Message.getWrapperField(this, proto.band.base.oracle.v1.BlockRelayProof, 3));
};


/**
 * @param {?proto.band.base.oracle.v1.BlockRelayProof|undefined} value
 * @return {!proto.band.base.oracle.v1.SingleProof} returns this
*/
proto.band.base.oracle.v1.SingleProof.prototype.setBlockRelayProof = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.band.base.oracle.v1.SingleProof} returns this
 */
proto.band.base.oracle.v1.SingleProof.prototype.clearBlockRelayProof = function() {
  return this.setBlockRelayProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.band.base.oracle.v1.SingleProof.prototype.hasBlockRelayProof = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.band.base.oracle.v1.MultiProof.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.MultiProof.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.MultiProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.MultiProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.MultiProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    oracleDataMultiProofList: jspb.Message.toObjectList(msg.getOracleDataMultiProofList(),
    proto.band.base.oracle.v1.OracleDataProof.toObject, includeInstance),
    blockRelayProof: (f = msg.getBlockRelayProof()) && proto.band.base.oracle.v1.BlockRelayProof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.MultiProof}
 */
proto.band.base.oracle.v1.MultiProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.MultiProof;
  return proto.band.base.oracle.v1.MultiProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.MultiProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.MultiProof}
 */
proto.band.base.oracle.v1.MultiProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 2:
      var value = new proto.band.base.oracle.v1.OracleDataProof;
      reader.readMessage(value,proto.band.base.oracle.v1.OracleDataProof.deserializeBinaryFromReader);
      msg.addOracleDataMultiProof(value);
      break;
    case 3:
      var value = new proto.band.base.oracle.v1.BlockRelayProof;
      reader.readMessage(value,proto.band.base.oracle.v1.BlockRelayProof.deserializeBinaryFromReader);
      msg.setBlockRelayProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.MultiProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.MultiProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.MultiProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.MultiProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOracleDataMultiProofList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.band.base.oracle.v1.OracleDataProof.serializeBinaryToWriter
    );
  }
  f = message.getBlockRelayProof();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.band.base.oracle.v1.BlockRelayProof.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 block_height = 1;
 * @return {number}
 */
proto.band.base.oracle.v1.MultiProof.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.band.base.oracle.v1.MultiProof} returns this
 */
proto.band.base.oracle.v1.MultiProof.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated OracleDataProof oracle_data_multi_proof = 2;
 * @return {!Array<!proto.band.base.oracle.v1.OracleDataProof>}
 */
proto.band.base.oracle.v1.MultiProof.prototype.getOracleDataMultiProofList = function() {
  return /** @type{!Array<!proto.band.base.oracle.v1.OracleDataProof>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.band.base.oracle.v1.OracleDataProof, 2));
};


/**
 * @param {!Array<!proto.band.base.oracle.v1.OracleDataProof>} value
 * @return {!proto.band.base.oracle.v1.MultiProof} returns this
*/
proto.band.base.oracle.v1.MultiProof.prototype.setOracleDataMultiProofList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.band.base.oracle.v1.OracleDataProof=} opt_value
 * @param {number=} opt_index
 * @return {!proto.band.base.oracle.v1.OracleDataProof}
 */
proto.band.base.oracle.v1.MultiProof.prototype.addOracleDataMultiProof = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.band.base.oracle.v1.OracleDataProof, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.band.base.oracle.v1.MultiProof} returns this
 */
proto.band.base.oracle.v1.MultiProof.prototype.clearOracleDataMultiProofList = function() {
  return this.setOracleDataMultiProofList([]);
};


/**
 * optional BlockRelayProof block_relay_proof = 3;
 * @return {?proto.band.base.oracle.v1.BlockRelayProof}
 */
proto.band.base.oracle.v1.MultiProof.prototype.getBlockRelayProof = function() {
  return /** @type{?proto.band.base.oracle.v1.BlockRelayProof} */ (
    jspb.Message.getWrapperField(this, proto.band.base.oracle.v1.BlockRelayProof, 3));
};


/**
 * @param {?proto.band.base.oracle.v1.BlockRelayProof|undefined} value
 * @return {!proto.band.base.oracle.v1.MultiProof} returns this
*/
proto.band.base.oracle.v1.MultiProof.prototype.setBlockRelayProof = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.band.base.oracle.v1.MultiProof} returns this
 */
proto.band.base.oracle.v1.MultiProof.prototype.clearBlockRelayProof = function() {
  return this.setBlockRelayProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.band.base.oracle.v1.MultiProof.prototype.hasBlockRelayProof = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.CountProof.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.CountProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.CountProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.CountProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    countProof: (f = msg.getCountProof()) && proto.band.base.oracle.v1.RequestsCountProof.toObject(includeInstance, f),
    blockRelayProof: (f = msg.getBlockRelayProof()) && proto.band.base.oracle.v1.BlockRelayProof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.CountProof}
 */
proto.band.base.oracle.v1.CountProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.CountProof;
  return proto.band.base.oracle.v1.CountProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.CountProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.CountProof}
 */
proto.band.base.oracle.v1.CountProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 2:
      var value = new proto.band.base.oracle.v1.RequestsCountProof;
      reader.readMessage(value,proto.band.base.oracle.v1.RequestsCountProof.deserializeBinaryFromReader);
      msg.setCountProof(value);
      break;
    case 3:
      var value = new proto.band.base.oracle.v1.BlockRelayProof;
      reader.readMessage(value,proto.band.base.oracle.v1.BlockRelayProof.deserializeBinaryFromReader);
      msg.setBlockRelayProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.CountProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.CountProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.CountProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.CountProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCountProof();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.band.base.oracle.v1.RequestsCountProof.serializeBinaryToWriter
    );
  }
  f = message.getBlockRelayProof();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.band.base.oracle.v1.BlockRelayProof.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 block_height = 1;
 * @return {number}
 */
proto.band.base.oracle.v1.CountProof.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.band.base.oracle.v1.CountProof} returns this
 */
proto.band.base.oracle.v1.CountProof.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional RequestsCountProof count_proof = 2;
 * @return {?proto.band.base.oracle.v1.RequestsCountProof}
 */
proto.band.base.oracle.v1.CountProof.prototype.getCountProof = function() {
  return /** @type{?proto.band.base.oracle.v1.RequestsCountProof} */ (
    jspb.Message.getWrapperField(this, proto.band.base.oracle.v1.RequestsCountProof, 2));
};


/**
 * @param {?proto.band.base.oracle.v1.RequestsCountProof|undefined} value
 * @return {!proto.band.base.oracle.v1.CountProof} returns this
*/
proto.band.base.oracle.v1.CountProof.prototype.setCountProof = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.band.base.oracle.v1.CountProof} returns this
 */
proto.band.base.oracle.v1.CountProof.prototype.clearCountProof = function() {
  return this.setCountProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.band.base.oracle.v1.CountProof.prototype.hasCountProof = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BlockRelayProof block_relay_proof = 3;
 * @return {?proto.band.base.oracle.v1.BlockRelayProof}
 */
proto.band.base.oracle.v1.CountProof.prototype.getBlockRelayProof = function() {
  return /** @type{?proto.band.base.oracle.v1.BlockRelayProof} */ (
    jspb.Message.getWrapperField(this, proto.band.base.oracle.v1.BlockRelayProof, 3));
};


/**
 * @param {?proto.band.base.oracle.v1.BlockRelayProof|undefined} value
 * @return {!proto.band.base.oracle.v1.CountProof} returns this
*/
proto.band.base.oracle.v1.CountProof.prototype.setBlockRelayProof = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.band.base.oracle.v1.CountProof} returns this
 */
proto.band.base.oracle.v1.CountProof.prototype.clearBlockRelayProof = function() {
  return this.setBlockRelayProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.band.base.oracle.v1.CountProof.prototype.hasBlockRelayProof = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.band.base.oracle.v1.OracleDataProof.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.OracleDataProof.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.OracleDataProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.OracleDataProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.OracleDataProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && band_oracle_v1_oracle_pb.Result.toObject(includeInstance, f),
    version: jspb.Message.getFieldWithDefault(msg, 2, 0),
    merklePathsList: jspb.Message.toObjectList(msg.getMerklePathsList(),
    proto.band.base.oracle.v1.IAVLMerklePath.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.OracleDataProof}
 */
proto.band.base.oracle.v1.OracleDataProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.OracleDataProof;
  return proto.band.base.oracle.v1.OracleDataProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.OracleDataProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.OracleDataProof}
 */
proto.band.base.oracle.v1.OracleDataProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new band_oracle_v1_oracle_pb.Result;
      reader.readMessage(value,band_oracle_v1_oracle_pb.Result.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 3:
      var value = new proto.band.base.oracle.v1.IAVLMerklePath;
      reader.readMessage(value,proto.band.base.oracle.v1.IAVLMerklePath.deserializeBinaryFromReader);
      msg.addMerklePaths(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.OracleDataProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.OracleDataProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.OracleDataProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.OracleDataProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      band_oracle_v1_oracle_pb.Result.serializeBinaryToWriter
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMerklePathsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.band.base.oracle.v1.IAVLMerklePath.serializeBinaryToWriter
    );
  }
};


/**
 * optional band.oracle.v1.Result result = 1;
 * @return {?proto.band.oracle.v1.Result}
 */
proto.band.base.oracle.v1.OracleDataProof.prototype.getResult = function() {
  return /** @type{?proto.band.oracle.v1.Result} */ (
    jspb.Message.getWrapperField(this, band_oracle_v1_oracle_pb.Result, 1));
};


/**
 * @param {?proto.band.oracle.v1.Result|undefined} value
 * @return {!proto.band.base.oracle.v1.OracleDataProof} returns this
*/
proto.band.base.oracle.v1.OracleDataProof.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.band.base.oracle.v1.OracleDataProof} returns this
 */
proto.band.base.oracle.v1.OracleDataProof.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.band.base.oracle.v1.OracleDataProof.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 version = 2;
 * @return {number}
 */
proto.band.base.oracle.v1.OracleDataProof.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.band.base.oracle.v1.OracleDataProof} returns this
 */
proto.band.base.oracle.v1.OracleDataProof.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated IAVLMerklePath merkle_paths = 3;
 * @return {!Array<!proto.band.base.oracle.v1.IAVLMerklePath>}
 */
proto.band.base.oracle.v1.OracleDataProof.prototype.getMerklePathsList = function() {
  return /** @type{!Array<!proto.band.base.oracle.v1.IAVLMerklePath>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.band.base.oracle.v1.IAVLMerklePath, 3));
};


/**
 * @param {!Array<!proto.band.base.oracle.v1.IAVLMerklePath>} value
 * @return {!proto.band.base.oracle.v1.OracleDataProof} returns this
*/
proto.band.base.oracle.v1.OracleDataProof.prototype.setMerklePathsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.band.base.oracle.v1.IAVLMerklePath=} opt_value
 * @param {number=} opt_index
 * @return {!proto.band.base.oracle.v1.IAVLMerklePath}
 */
proto.band.base.oracle.v1.OracleDataProof.prototype.addMerklePaths = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.band.base.oracle.v1.IAVLMerklePath, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.band.base.oracle.v1.OracleDataProof} returns this
 */
proto.band.base.oracle.v1.OracleDataProof.prototype.clearMerklePathsList = function() {
  return this.setMerklePathsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.IAVLMerklePath.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.IAVLMerklePath.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.IAVLMerklePath} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.IAVLMerklePath.toObject = function(includeInstance, msg) {
  var f, obj = {
    isDataOnRight: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    subtreeHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    subtreeSize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    subtreeVersion: jspb.Message.getFieldWithDefault(msg, 4, 0),
    siblingHash: msg.getSiblingHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.IAVLMerklePath}
 */
proto.band.base.oracle.v1.IAVLMerklePath.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.IAVLMerklePath;
  return proto.band.base.oracle.v1.IAVLMerklePath.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.IAVLMerklePath} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.IAVLMerklePath}
 */
proto.band.base.oracle.v1.IAVLMerklePath.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDataOnRight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSubtreeHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubtreeSize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubtreeVersion(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSiblingHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.IAVLMerklePath.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.IAVLMerklePath.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.IAVLMerklePath} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.IAVLMerklePath.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsDataOnRight();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSubtreeHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSubtreeSize();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSubtreeVersion();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSiblingHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional bool is_data_on_right = 1;
 * @return {boolean}
 */
proto.band.base.oracle.v1.IAVLMerklePath.prototype.getIsDataOnRight = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.band.base.oracle.v1.IAVLMerklePath} returns this
 */
proto.band.base.oracle.v1.IAVLMerklePath.prototype.setIsDataOnRight = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint32 subtree_height = 2;
 * @return {number}
 */
proto.band.base.oracle.v1.IAVLMerklePath.prototype.getSubtreeHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.band.base.oracle.v1.IAVLMerklePath} returns this
 */
proto.band.base.oracle.v1.IAVLMerklePath.prototype.setSubtreeHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 subtree_size = 3;
 * @return {number}
 */
proto.band.base.oracle.v1.IAVLMerklePath.prototype.getSubtreeSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.band.base.oracle.v1.IAVLMerklePath} returns this
 */
proto.band.base.oracle.v1.IAVLMerklePath.prototype.setSubtreeSize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 subtree_version = 4;
 * @return {number}
 */
proto.band.base.oracle.v1.IAVLMerklePath.prototype.getSubtreeVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.band.base.oracle.v1.IAVLMerklePath} returns this
 */
proto.band.base.oracle.v1.IAVLMerklePath.prototype.setSubtreeVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes sibling_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.IAVLMerklePath.prototype.getSiblingHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes sibling_hash = 5;
 * This is a type-conversion wrapper around `getSiblingHash()`
 * @return {string}
 */
proto.band.base.oracle.v1.IAVLMerklePath.prototype.getSiblingHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSiblingHash()));
};


/**
 * optional bytes sibling_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSiblingHash()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.IAVLMerklePath.prototype.getSiblingHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSiblingHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.IAVLMerklePath} returns this
 */
proto.band.base.oracle.v1.IAVLMerklePath.prototype.setSiblingHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.band.base.oracle.v1.BlockRelayProof.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.BlockRelayProof.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.BlockRelayProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.BlockRelayProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.BlockRelayProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    multiStoreProof: (f = msg.getMultiStoreProof()) && proto.band.base.oracle.v1.MultiStoreProof.toObject(includeInstance, f),
    blockHeaderMerkleParts: (f = msg.getBlockHeaderMerkleParts()) && proto.band.base.oracle.v1.BlockHeaderMerkleParts.toObject(includeInstance, f),
    commonEncodedVotePart: (f = msg.getCommonEncodedVotePart()) && proto.band.base.oracle.v1.CommonEncodedVotePart.toObject(includeInstance, f),
    signaturesList: jspb.Message.toObjectList(msg.getSignaturesList(),
    proto.band.base.oracle.v1.TMSignature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.BlockRelayProof}
 */
proto.band.base.oracle.v1.BlockRelayProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.BlockRelayProof;
  return proto.band.base.oracle.v1.BlockRelayProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.BlockRelayProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.BlockRelayProof}
 */
proto.band.base.oracle.v1.BlockRelayProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.band.base.oracle.v1.MultiStoreProof;
      reader.readMessage(value,proto.band.base.oracle.v1.MultiStoreProof.deserializeBinaryFromReader);
      msg.setMultiStoreProof(value);
      break;
    case 2:
      var value = new proto.band.base.oracle.v1.BlockHeaderMerkleParts;
      reader.readMessage(value,proto.band.base.oracle.v1.BlockHeaderMerkleParts.deserializeBinaryFromReader);
      msg.setBlockHeaderMerkleParts(value);
      break;
    case 3:
      var value = new proto.band.base.oracle.v1.CommonEncodedVotePart;
      reader.readMessage(value,proto.band.base.oracle.v1.CommonEncodedVotePart.deserializeBinaryFromReader);
      msg.setCommonEncodedVotePart(value);
      break;
    case 4:
      var value = new proto.band.base.oracle.v1.TMSignature;
      reader.readMessage(value,proto.band.base.oracle.v1.TMSignature.deserializeBinaryFromReader);
      msg.addSignatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.BlockRelayProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.BlockRelayProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.BlockRelayProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.BlockRelayProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMultiStoreProof();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.band.base.oracle.v1.MultiStoreProof.serializeBinaryToWriter
    );
  }
  f = message.getBlockHeaderMerkleParts();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.band.base.oracle.v1.BlockHeaderMerkleParts.serializeBinaryToWriter
    );
  }
  f = message.getCommonEncodedVotePart();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.band.base.oracle.v1.CommonEncodedVotePart.serializeBinaryToWriter
    );
  }
  f = message.getSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.band.base.oracle.v1.TMSignature.serializeBinaryToWriter
    );
  }
};


/**
 * optional MultiStoreProof multi_store_proof = 1;
 * @return {?proto.band.base.oracle.v1.MultiStoreProof}
 */
proto.band.base.oracle.v1.BlockRelayProof.prototype.getMultiStoreProof = function() {
  return /** @type{?proto.band.base.oracle.v1.MultiStoreProof} */ (
    jspb.Message.getWrapperField(this, proto.band.base.oracle.v1.MultiStoreProof, 1));
};


/**
 * @param {?proto.band.base.oracle.v1.MultiStoreProof|undefined} value
 * @return {!proto.band.base.oracle.v1.BlockRelayProof} returns this
*/
proto.band.base.oracle.v1.BlockRelayProof.prototype.setMultiStoreProof = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.band.base.oracle.v1.BlockRelayProof} returns this
 */
proto.band.base.oracle.v1.BlockRelayProof.prototype.clearMultiStoreProof = function() {
  return this.setMultiStoreProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.band.base.oracle.v1.BlockRelayProof.prototype.hasMultiStoreProof = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BlockHeaderMerkleParts block_header_merkle_parts = 2;
 * @return {?proto.band.base.oracle.v1.BlockHeaderMerkleParts}
 */
proto.band.base.oracle.v1.BlockRelayProof.prototype.getBlockHeaderMerkleParts = function() {
  return /** @type{?proto.band.base.oracle.v1.BlockHeaderMerkleParts} */ (
    jspb.Message.getWrapperField(this, proto.band.base.oracle.v1.BlockHeaderMerkleParts, 2));
};


/**
 * @param {?proto.band.base.oracle.v1.BlockHeaderMerkleParts|undefined} value
 * @return {!proto.band.base.oracle.v1.BlockRelayProof} returns this
*/
proto.band.base.oracle.v1.BlockRelayProof.prototype.setBlockHeaderMerkleParts = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.band.base.oracle.v1.BlockRelayProof} returns this
 */
proto.band.base.oracle.v1.BlockRelayProof.prototype.clearBlockHeaderMerkleParts = function() {
  return this.setBlockHeaderMerkleParts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.band.base.oracle.v1.BlockRelayProof.prototype.hasBlockHeaderMerkleParts = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CommonEncodedVotePart common_encoded_vote_part = 3;
 * @return {?proto.band.base.oracle.v1.CommonEncodedVotePart}
 */
proto.band.base.oracle.v1.BlockRelayProof.prototype.getCommonEncodedVotePart = function() {
  return /** @type{?proto.band.base.oracle.v1.CommonEncodedVotePart} */ (
    jspb.Message.getWrapperField(this, proto.band.base.oracle.v1.CommonEncodedVotePart, 3));
};


/**
 * @param {?proto.band.base.oracle.v1.CommonEncodedVotePart|undefined} value
 * @return {!proto.band.base.oracle.v1.BlockRelayProof} returns this
*/
proto.band.base.oracle.v1.BlockRelayProof.prototype.setCommonEncodedVotePart = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.band.base.oracle.v1.BlockRelayProof} returns this
 */
proto.band.base.oracle.v1.BlockRelayProof.prototype.clearCommonEncodedVotePart = function() {
  return this.setCommonEncodedVotePart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.band.base.oracle.v1.BlockRelayProof.prototype.hasCommonEncodedVotePart = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated TMSignature signatures = 4;
 * @return {!Array<!proto.band.base.oracle.v1.TMSignature>}
 */
proto.band.base.oracle.v1.BlockRelayProof.prototype.getSignaturesList = function() {
  return /** @type{!Array<!proto.band.base.oracle.v1.TMSignature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.band.base.oracle.v1.TMSignature, 4));
};


/**
 * @param {!Array<!proto.band.base.oracle.v1.TMSignature>} value
 * @return {!proto.band.base.oracle.v1.BlockRelayProof} returns this
*/
proto.band.base.oracle.v1.BlockRelayProof.prototype.setSignaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.band.base.oracle.v1.TMSignature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.band.base.oracle.v1.TMSignature}
 */
proto.band.base.oracle.v1.BlockRelayProof.prototype.addSignatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.band.base.oracle.v1.TMSignature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.band.base.oracle.v1.BlockRelayProof} returns this
 */
proto.band.base.oracle.v1.BlockRelayProof.prototype.clearSignaturesList = function() {
  return this.setSignaturesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.MultiStoreProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.MultiStoreProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.MultiStoreProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    oracleIavlStateHash: msg.getOracleIavlStateHash_asB64(),
    mintStoreMerkleHash: msg.getMintStoreMerkleHash_asB64(),
    paramsToRollingseedStoresMerkleHash: msg.getParamsToRollingseedStoresMerkleHash_asB64(),
    slashingToTssStoresMerkleHash: msg.getSlashingToTssStoresMerkleHash_asB64(),
    upgradeStoreMerkleHash: msg.getUpgradeStoreMerkleHash_asB64(),
    authToIcahostStoresMerkleHash: msg.getAuthToIcahostStoresMerkleHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.MultiStoreProof}
 */
proto.band.base.oracle.v1.MultiStoreProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.MultiStoreProof;
  return proto.band.base.oracle.v1.MultiStoreProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.MultiStoreProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.MultiStoreProof}
 */
proto.band.base.oracle.v1.MultiStoreProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOracleIavlStateHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMintStoreMerkleHash(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParamsToRollingseedStoresMerkleHash(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSlashingToTssStoresMerkleHash(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUpgradeStoreMerkleHash(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthToIcahostStoresMerkleHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.MultiStoreProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.MultiStoreProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.MultiStoreProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOracleIavlStateHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMintStoreMerkleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getParamsToRollingseedStoresMerkleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSlashingToTssStoresMerkleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getUpgradeStoreMerkleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getAuthToIcahostStoresMerkleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional bytes oracle_iavl_state_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.getOracleIavlStateHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes oracle_iavl_state_hash = 1;
 * This is a type-conversion wrapper around `getOracleIavlStateHash()`
 * @return {string}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.getOracleIavlStateHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOracleIavlStateHash()));
};


/**
 * optional bytes oracle_iavl_state_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOracleIavlStateHash()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.getOracleIavlStateHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOracleIavlStateHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.MultiStoreProof} returns this
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.setOracleIavlStateHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes mint_store_merkle_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.getMintStoreMerkleHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes mint_store_merkle_hash = 2;
 * This is a type-conversion wrapper around `getMintStoreMerkleHash()`
 * @return {string}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.getMintStoreMerkleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMintStoreMerkleHash()));
};


/**
 * optional bytes mint_store_merkle_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMintStoreMerkleHash()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.getMintStoreMerkleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMintStoreMerkleHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.MultiStoreProof} returns this
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.setMintStoreMerkleHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes params_to_rollingseed_stores_merkle_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.getParamsToRollingseedStoresMerkleHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes params_to_rollingseed_stores_merkle_hash = 3;
 * This is a type-conversion wrapper around `getParamsToRollingseedStoresMerkleHash()`
 * @return {string}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.getParamsToRollingseedStoresMerkleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParamsToRollingseedStoresMerkleHash()));
};


/**
 * optional bytes params_to_rollingseed_stores_merkle_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParamsToRollingseedStoresMerkleHash()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.getParamsToRollingseedStoresMerkleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParamsToRollingseedStoresMerkleHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.MultiStoreProof} returns this
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.setParamsToRollingseedStoresMerkleHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes slashing_to_tss_stores_merkle_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.getSlashingToTssStoresMerkleHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes slashing_to_tss_stores_merkle_hash = 4;
 * This is a type-conversion wrapper around `getSlashingToTssStoresMerkleHash()`
 * @return {string}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.getSlashingToTssStoresMerkleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSlashingToTssStoresMerkleHash()));
};


/**
 * optional bytes slashing_to_tss_stores_merkle_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSlashingToTssStoresMerkleHash()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.getSlashingToTssStoresMerkleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSlashingToTssStoresMerkleHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.MultiStoreProof} returns this
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.setSlashingToTssStoresMerkleHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes upgrade_store_merkle_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.getUpgradeStoreMerkleHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes upgrade_store_merkle_hash = 5;
 * This is a type-conversion wrapper around `getUpgradeStoreMerkleHash()`
 * @return {string}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.getUpgradeStoreMerkleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUpgradeStoreMerkleHash()));
};


/**
 * optional bytes upgrade_store_merkle_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUpgradeStoreMerkleHash()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.getUpgradeStoreMerkleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUpgradeStoreMerkleHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.MultiStoreProof} returns this
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.setUpgradeStoreMerkleHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes auth_to_icahost_stores_merkle_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.getAuthToIcahostStoresMerkleHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes auth_to_icahost_stores_merkle_hash = 6;
 * This is a type-conversion wrapper around `getAuthToIcahostStoresMerkleHash()`
 * @return {string}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.getAuthToIcahostStoresMerkleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthToIcahostStoresMerkleHash()));
};


/**
 * optional bytes auth_to_icahost_stores_merkle_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthToIcahostStoresMerkleHash()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.getAuthToIcahostStoresMerkleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthToIcahostStoresMerkleHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.MultiStoreProof} returns this
 */
proto.band.base.oracle.v1.MultiStoreProof.prototype.setAuthToIcahostStoresMerkleHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.BlockHeaderMerkleParts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.BlockHeaderMerkleParts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.toObject = function(includeInstance, msg) {
  var f, obj = {
    versionAndChainIdHash: msg.getVersionAndChainIdHash_asB64(),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timeSecond: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timeNanoSecond: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lastBlockIdAndOther: msg.getLastBlockIdAndOther_asB64(),
    nextValidatorHashAndConsensusHash: msg.getNextValidatorHashAndConsensusHash_asB64(),
    lastResultsHash: msg.getLastResultsHash_asB64(),
    evidenceAndProposerHash: msg.getEvidenceAndProposerHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.BlockHeaderMerkleParts}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.BlockHeaderMerkleParts;
  return proto.band.base.oracle.v1.BlockHeaderMerkleParts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.BlockHeaderMerkleParts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.BlockHeaderMerkleParts}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVersionAndChainIdHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeSecond(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeNanoSecond(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastBlockIdAndOther(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNextValidatorHashAndConsensusHash(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastResultsHash(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEvidenceAndProposerHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.BlockHeaderMerkleParts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.BlockHeaderMerkleParts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersionAndChainIdHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTimeSecond();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTimeNanoSecond();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getLastBlockIdAndOther_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getNextValidatorHashAndConsensusHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getLastResultsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getEvidenceAndProposerHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional bytes version_and_chain_id_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.getVersionAndChainIdHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes version_and_chain_id_hash = 1;
 * This is a type-conversion wrapper around `getVersionAndChainIdHash()`
 * @return {string}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.getVersionAndChainIdHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVersionAndChainIdHash()));
};


/**
 * optional bytes version_and_chain_id_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVersionAndChainIdHash()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.getVersionAndChainIdHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVersionAndChainIdHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.BlockHeaderMerkleParts} returns this
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.setVersionAndChainIdHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.band.base.oracle.v1.BlockHeaderMerkleParts} returns this
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 time_second = 3;
 * @return {number}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.getTimeSecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.band.base.oracle.v1.BlockHeaderMerkleParts} returns this
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.setTimeSecond = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 time_nano_second = 4;
 * @return {number}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.getTimeNanoSecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.band.base.oracle.v1.BlockHeaderMerkleParts} returns this
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.setTimeNanoSecond = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes last_block_id_and_other = 5;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.getLastBlockIdAndOther = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes last_block_id_and_other = 5;
 * This is a type-conversion wrapper around `getLastBlockIdAndOther()`
 * @return {string}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.getLastBlockIdAndOther_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastBlockIdAndOther()));
};


/**
 * optional bytes last_block_id_and_other = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastBlockIdAndOther()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.getLastBlockIdAndOther_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastBlockIdAndOther()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.BlockHeaderMerkleParts} returns this
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.setLastBlockIdAndOther = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes next_validator_hash_and_consensus_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.getNextValidatorHashAndConsensusHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes next_validator_hash_and_consensus_hash = 6;
 * This is a type-conversion wrapper around `getNextValidatorHashAndConsensusHash()`
 * @return {string}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.getNextValidatorHashAndConsensusHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNextValidatorHashAndConsensusHash()));
};


/**
 * optional bytes next_validator_hash_and_consensus_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNextValidatorHashAndConsensusHash()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.getNextValidatorHashAndConsensusHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNextValidatorHashAndConsensusHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.BlockHeaderMerkleParts} returns this
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.setNextValidatorHashAndConsensusHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes last_results_hash = 7;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.getLastResultsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes last_results_hash = 7;
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {string}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.getLastResultsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastResultsHash()));
};


/**
 * optional bytes last_results_hash = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.getLastResultsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastResultsHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.BlockHeaderMerkleParts} returns this
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.setLastResultsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes evidence_and_proposer_hash = 8;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.getEvidenceAndProposerHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes evidence_and_proposer_hash = 8;
 * This is a type-conversion wrapper around `getEvidenceAndProposerHash()`
 * @return {string}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.getEvidenceAndProposerHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEvidenceAndProposerHash()));
};


/**
 * optional bytes evidence_and_proposer_hash = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvidenceAndProposerHash()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.getEvidenceAndProposerHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEvidenceAndProposerHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.BlockHeaderMerkleParts} returns this
 */
proto.band.base.oracle.v1.BlockHeaderMerkleParts.prototype.setEvidenceAndProposerHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.CommonEncodedVotePart.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.CommonEncodedVotePart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.CommonEncodedVotePart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.CommonEncodedVotePart.toObject = function(includeInstance, msg) {
  var f, obj = {
    signedDataPrefix: msg.getSignedDataPrefix_asB64(),
    signedDataSuffix: msg.getSignedDataSuffix_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.CommonEncodedVotePart}
 */
proto.band.base.oracle.v1.CommonEncodedVotePart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.CommonEncodedVotePart;
  return proto.band.base.oracle.v1.CommonEncodedVotePart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.CommonEncodedVotePart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.CommonEncodedVotePart}
 */
proto.band.base.oracle.v1.CommonEncodedVotePart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignedDataPrefix(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignedDataSuffix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.CommonEncodedVotePart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.CommonEncodedVotePart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.CommonEncodedVotePart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.CommonEncodedVotePart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignedDataPrefix_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignedDataSuffix_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes signed_data_prefix = 1;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.CommonEncodedVotePart.prototype.getSignedDataPrefix = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes signed_data_prefix = 1;
 * This is a type-conversion wrapper around `getSignedDataPrefix()`
 * @return {string}
 */
proto.band.base.oracle.v1.CommonEncodedVotePart.prototype.getSignedDataPrefix_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignedDataPrefix()));
};


/**
 * optional bytes signed_data_prefix = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignedDataPrefix()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.CommonEncodedVotePart.prototype.getSignedDataPrefix_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignedDataPrefix()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.CommonEncodedVotePart} returns this
 */
proto.band.base.oracle.v1.CommonEncodedVotePart.prototype.setSignedDataPrefix = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes signed_data_suffix = 2;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.CommonEncodedVotePart.prototype.getSignedDataSuffix = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signed_data_suffix = 2;
 * This is a type-conversion wrapper around `getSignedDataSuffix()`
 * @return {string}
 */
proto.band.base.oracle.v1.CommonEncodedVotePart.prototype.getSignedDataSuffix_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignedDataSuffix()));
};


/**
 * optional bytes signed_data_suffix = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignedDataSuffix()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.CommonEncodedVotePart.prototype.getSignedDataSuffix_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignedDataSuffix()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.CommonEncodedVotePart} returns this
 */
proto.band.base.oracle.v1.CommonEncodedVotePart.prototype.setSignedDataSuffix = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.TMSignature.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.TMSignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.TMSignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.TMSignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    r: msg.getR_asB64(),
    s: msg.getS_asB64(),
    v: jspb.Message.getFieldWithDefault(msg, 3, 0),
    encodedTimestamp: msg.getEncodedTimestamp_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.TMSignature}
 */
proto.band.base.oracle.v1.TMSignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.TMSignature;
  return proto.band.base.oracle.v1.TMSignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.TMSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.TMSignature}
 */
proto.band.base.oracle.v1.TMSignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setR(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setS(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setV(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncodedTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.TMSignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.TMSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.TMSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.TMSignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getR_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getS_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getV();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getEncodedTimestamp_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes r = 1;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.TMSignature.prototype.getR = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes r = 1;
 * This is a type-conversion wrapper around `getR()`
 * @return {string}
 */
proto.band.base.oracle.v1.TMSignature.prototype.getR_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getR()));
};


/**
 * optional bytes r = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getR()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.TMSignature.prototype.getR_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getR()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.TMSignature} returns this
 */
proto.band.base.oracle.v1.TMSignature.prototype.setR = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes s = 2;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.TMSignature.prototype.getS = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes s = 2;
 * This is a type-conversion wrapper around `getS()`
 * @return {string}
 */
proto.band.base.oracle.v1.TMSignature.prototype.getS_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getS()));
};


/**
 * optional bytes s = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getS()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.TMSignature.prototype.getS_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getS()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.TMSignature} returns this
 */
proto.band.base.oracle.v1.TMSignature.prototype.setS = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 v = 3;
 * @return {number}
 */
proto.band.base.oracle.v1.TMSignature.prototype.getV = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.band.base.oracle.v1.TMSignature} returns this
 */
proto.band.base.oracle.v1.TMSignature.prototype.setV = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes encoded_timestamp = 4;
 * @return {!(string|Uint8Array)}
 */
proto.band.base.oracle.v1.TMSignature.prototype.getEncodedTimestamp = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes encoded_timestamp = 4;
 * This is a type-conversion wrapper around `getEncodedTimestamp()`
 * @return {string}
 */
proto.band.base.oracle.v1.TMSignature.prototype.getEncodedTimestamp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncodedTimestamp()));
};


/**
 * optional bytes encoded_timestamp = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncodedTimestamp()`
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.TMSignature.prototype.getEncodedTimestamp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncodedTimestamp()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.band.base.oracle.v1.TMSignature} returns this
 */
proto.band.base.oracle.v1.TMSignature.prototype.setEncodedTimestamp = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.band.base.oracle.v1.RequestsCountProof.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.band.base.oracle.v1.RequestsCountProof.prototype.toObject = function(opt_includeInstance) {
  return proto.band.base.oracle.v1.RequestsCountProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.band.base.oracle.v1.RequestsCountProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.RequestsCountProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0),
    version: jspb.Message.getFieldWithDefault(msg, 2, 0),
    merklePathsList: jspb.Message.toObjectList(msg.getMerklePathsList(),
    proto.band.base.oracle.v1.IAVLMerklePath.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.band.base.oracle.v1.RequestsCountProof}
 */
proto.band.base.oracle.v1.RequestsCountProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.band.base.oracle.v1.RequestsCountProof;
  return proto.band.base.oracle.v1.RequestsCountProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.band.base.oracle.v1.RequestsCountProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.band.base.oracle.v1.RequestsCountProof}
 */
proto.band.base.oracle.v1.RequestsCountProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 3:
      var value = new proto.band.base.oracle.v1.IAVLMerklePath;
      reader.readMessage(value,proto.band.base.oracle.v1.IAVLMerklePath.deserializeBinaryFromReader);
      msg.addMerklePaths(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.band.base.oracle.v1.RequestsCountProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.band.base.oracle.v1.RequestsCountProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.band.base.oracle.v1.RequestsCountProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.band.base.oracle.v1.RequestsCountProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMerklePathsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.band.base.oracle.v1.IAVLMerklePath.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 count = 1;
 * @return {number}
 */
proto.band.base.oracle.v1.RequestsCountProof.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.band.base.oracle.v1.RequestsCountProof} returns this
 */
proto.band.base.oracle.v1.RequestsCountProof.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 version = 2;
 * @return {number}
 */
proto.band.base.oracle.v1.RequestsCountProof.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.band.base.oracle.v1.RequestsCountProof} returns this
 */
proto.band.base.oracle.v1.RequestsCountProof.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated IAVLMerklePath merkle_paths = 3;
 * @return {!Array<!proto.band.base.oracle.v1.IAVLMerklePath>}
 */
proto.band.base.oracle.v1.RequestsCountProof.prototype.getMerklePathsList = function() {
  return /** @type{!Array<!proto.band.base.oracle.v1.IAVLMerklePath>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.band.base.oracle.v1.IAVLMerklePath, 3));
};


/**
 * @param {!Array<!proto.band.base.oracle.v1.IAVLMerklePath>} value
 * @return {!proto.band.base.oracle.v1.RequestsCountProof} returns this
*/
proto.band.base.oracle.v1.RequestsCountProof.prototype.setMerklePathsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.band.base.oracle.v1.IAVLMerklePath=} opt_value
 * @param {number=} opt_index
 * @return {!proto.band.base.oracle.v1.IAVLMerklePath}
 */
proto.band.base.oracle.v1.RequestsCountProof.prototype.addMerklePaths = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.band.base.oracle.v1.IAVLMerklePath, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.band.base.oracle.v1.RequestsCountProof} returns this
 */
proto.band.base.oracle.v1.RequestsCountProof.prototype.clearMerklePathsList = function() {
  return this.setMerklePathsList([]);
};


goog.object.extend(exports, proto.band.base.oracle.v1);
