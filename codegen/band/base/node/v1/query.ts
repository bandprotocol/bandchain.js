/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/base/node/v1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../google/api/annotations";
import * as dependency_2 from "./../../../../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace band.base.node.v1 {
    export class ChainIDRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ChainIDRequest {
            const message = new ChainIDRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChainIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChainIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChainIDRequest {
            return ChainIDRequest.deserialize(bytes);
        }
    }
    export class ChainIDResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chain_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chain_id" in data && data.chain_id != undefined) {
                    this.chain_id = data.chain_id;
                }
            }
        }
        get chain_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set chain_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            chain_id?: string;
        }): ChainIDResponse {
            const message = new ChainIDResponse({});
            if (data.chain_id != null) {
                message.chain_id = data.chain_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chain_id?: string;
            } = {};
            if (this.chain_id != null) {
                data.chain_id = this.chain_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chain_id.length)
                writer.writeString(1, this.chain_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChainIDResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChainIDResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chain_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChainIDResponse {
            return ChainIDResponse.deserialize(bytes);
        }
    }
    export class EVMValidatorsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): EVMValidatorsRequest {
            const message = new EVMValidatorsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EVMValidatorsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EVMValidatorsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EVMValidatorsRequest {
            return EVMValidatorsRequest.deserialize(bytes);
        }
    }
    export class EVMValidatorsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block_height?: number;
            validators?: ValidatorMinimal[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_height" in data && data.block_height != undefined) {
                    this.block_height = data.block_height;
                }
                if ("validators" in data && data.validators != undefined) {
                    this.validators = data.validators;
                }
            }
        }
        get block_height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set block_height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get validators() {
            return pb_1.Message.getRepeatedWrapperField(this, ValidatorMinimal, 2) as ValidatorMinimal[];
        }
        set validators(value: ValidatorMinimal[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            block_height?: number;
            validators?: ReturnType<typeof ValidatorMinimal.prototype.toObject>[];
        }): EVMValidatorsResponse {
            const message = new EVMValidatorsResponse({});
            if (data.block_height != null) {
                message.block_height = data.block_height;
            }
            if (data.validators != null) {
                message.validators = data.validators.map(item => ValidatorMinimal.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                block_height?: number;
                validators?: ReturnType<typeof ValidatorMinimal.prototype.toObject>[];
            } = {};
            if (this.block_height != null) {
                data.block_height = this.block_height;
            }
            if (this.validators != null) {
                data.validators = this.validators.map((item: ValidatorMinimal) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_height != 0)
                writer.writeInt64(1, this.block_height);
            if (this.validators.length)
                writer.writeRepeatedMessage(2, this.validators, (item: ValidatorMinimal) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EVMValidatorsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EVMValidatorsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_height = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.validators, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ValidatorMinimal.deserialize(reader), ValidatorMinimal));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EVMValidatorsResponse {
            return EVMValidatorsResponse.deserialize(bytes);
        }
    }
    export class ValidatorMinimal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            voting_power?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("voting_power" in data && data.voting_power != undefined) {
                    this.voting_power = data.voting_power;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get voting_power() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set voting_power(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            address?: string;
            voting_power?: number;
        }): ValidatorMinimal {
            const message = new ValidatorMinimal({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.voting_power != null) {
                message.voting_power = data.voting_power;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                voting_power?: number;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.voting_power != null) {
                data.voting_power = this.voting_power;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.voting_power != 0)
                writer.writeInt64(2, this.voting_power);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidatorMinimal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidatorMinimal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.voting_power = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidatorMinimal {
            return ValidatorMinimal.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedServiceService {
        static definition = {
            ChainID: {
                path: "/band.base.node.v1.Service/ChainID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChainIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChainIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChainIDResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChainIDResponse.deserialize(new Uint8Array(bytes))
            },
            EVMValidators: {
                path: "/band.base.node.v1.Service/EVMValidators",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EVMValidatorsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EVMValidatorsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EVMValidatorsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EVMValidatorsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract ChainID(call: grpc_1.ServerUnaryCall<ChainIDRequest, ChainIDResponse>, callback: grpc_1.sendUnaryData<ChainIDResponse>): void;
        abstract EVMValidators(call: grpc_1.ServerUnaryCall<EVMValidatorsRequest, EVMValidatorsResponse>, callback: grpc_1.sendUnaryData<EVMValidatorsResponse>): void;
    }
    export class ServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedServiceService.definition, "Service", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        ChainID: GrpcUnaryServiceInterface<ChainIDRequest, ChainIDResponse> = (message: ChainIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChainIDResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChainIDResponse>, callback?: grpc_1.requestCallback<ChainIDResponse>): grpc_1.ClientUnaryCall => {
            return super.ChainID(message, metadata, options, callback);
        };
        EVMValidators: GrpcUnaryServiceInterface<EVMValidatorsRequest, EVMValidatorsResponse> = (message: EVMValidatorsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EVMValidatorsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EVMValidatorsResponse>, callback?: grpc_1.requestCallback<EVMValidatorsResponse>): grpc_1.ClientUnaryCall => {
            return super.EVMValidators(message, metadata, options, callback);
        };
    }
}
