/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/restake/v1beta1/types.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../../../amino/amino";
import * as dependency_3 from "./../../../cosmos_proto/cosmos";
import * as dependency_4 from "./../../../cosmos/base/v1beta1/coin";
import * as pb_1 from "google-protobuf";
export namespace band.restake.v1beta1 {
    export class Vault extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
            is_active?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("is_active" in data && data.is_active != undefined) {
                    this.is_active = data.is_active;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_active() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set is_active(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: string;
            is_active?: boolean;
        }): Vault {
            const message = new Vault({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.is_active != null) {
                message.is_active = data.is_active;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                is_active?: boolean;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.is_active != null) {
                data.is_active = this.is_active;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (this.is_active != false)
                writer.writeBool(2, this.is_active);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Vault {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vault();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        message.is_active = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Vault {
            return Vault.deserialize(bytes);
        }
    }
    export class Lock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            staker_address?: string;
            key?: string;
            power?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("staker_address" in data && data.staker_address != undefined) {
                    this.staker_address = data.staker_address;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("power" in data && data.power != undefined) {
                    this.power = data.power;
                }
            }
        }
        get staker_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set staker_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get power() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set power(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            staker_address?: string;
            key?: string;
            power?: string;
        }): Lock {
            const message = new Lock({});
            if (data.staker_address != null) {
                message.staker_address = data.staker_address;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.power != null) {
                message.power = data.power;
            }
            return message;
        }
        toObject() {
            const data: {
                staker_address?: string;
                key?: string;
                power?: string;
            } = {};
            if (this.staker_address != null) {
                data.staker_address = this.staker_address;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.power != null) {
                data.power = this.power;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.staker_address.length)
                writer.writeString(1, this.staker_address);
            if (this.key.length)
                writer.writeString(2, this.key);
            if (this.power.length)
                writer.writeString(3, this.power);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Lock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Lock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.staker_address = reader.readString();
                        break;
                    case 2:
                        message.key = reader.readString();
                        break;
                    case 3:
                        message.power = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Lock {
            return Lock.deserialize(bytes);
        }
    }
    export class Stake extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            staker_address?: string;
            coins?: dependency_4.cosmos.base.v1beta1.Coin[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("staker_address" in data && data.staker_address != undefined) {
                    this.staker_address = data.staker_address;
                }
                if ("coins" in data && data.coins != undefined) {
                    this.coins = data.coins;
                }
            }
        }
        get staker_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set staker_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get coins() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.cosmos.base.v1beta1.Coin, 2) as dependency_4.cosmos.base.v1beta1.Coin[];
        }
        set coins(value: dependency_4.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            staker_address?: string;
            coins?: ReturnType<typeof dependency_4.cosmos.base.v1beta1.Coin.prototype.toObject>[];
        }): Stake {
            const message = new Stake({});
            if (data.staker_address != null) {
                message.staker_address = data.staker_address;
            }
            if (data.coins != null) {
                message.coins = data.coins.map(item => dependency_4.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                staker_address?: string;
                coins?: ReturnType<typeof dependency_4.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            } = {};
            if (this.staker_address != null) {
                data.staker_address = this.staker_address;
            }
            if (this.coins != null) {
                data.coins = this.coins.map((item: dependency_4.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.staker_address.length)
                writer.writeString(1, this.staker_address);
            if (this.coins.length)
                writer.writeRepeatedMessage(2, this.coins, (item: dependency_4.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Stake {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Stake();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.staker_address = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.coins, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_4.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_4.cosmos.base.v1beta1.Coin));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Stake {
            return Stake.deserialize(bytes);
        }
    }
    export class LockResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
            power?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("power" in data && data.power != undefined) {
                    this.power = data.power;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get power() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set power(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: string;
            power?: string;
        }): LockResponse {
            const message = new LockResponse({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.power != null) {
                message.power = data.power;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                power?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.power != null) {
                data.power = this.power;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (this.power.length)
                writer.writeString(2, this.power);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LockResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LockResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        message.power = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LockResponse {
            return LockResponse.deserialize(bytes);
        }
    }
}
