/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/restake/v1beta1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../../../google/api/annotations";
import * as dependency_3 from "./../../../cosmos/base/query/v1beta1/pagination";
import * as dependency_4 from "./../../../cosmos_proto/cosmos";
import * as dependency_5 from "./types";
import * as dependency_6 from "./genesis";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace band.restake.v1beta1 {
    export class QueryVaultsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pagination?: dependency_3.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_3.cosmos.base.query.v1beta1.PageRequest, 1) as dependency_3.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_3.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            pagination?: ReturnType<typeof dependency_3.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }): QueryVaultsRequest {
            const message = new QueryVaultsRequest({});
            if (data.pagination != null) {
                message.pagination = dependency_3.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                pagination?: ReturnType<typeof dependency_3.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_pagination)
                writer.writeMessage(1, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryVaultsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryVaultsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_3.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryVaultsRequest {
            return QueryVaultsRequest.deserialize(bytes);
        }
    }
    export class QueryVaultsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vaults?: dependency_5.band.restake.v1beta1.Vault[];
            pagination?: dependency_3.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vaults" in data && data.vaults != undefined) {
                    this.vaults = data.vaults;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get vaults() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.band.restake.v1beta1.Vault, 1) as dependency_5.band.restake.v1beta1.Vault[];
        }
        set vaults(value: dependency_5.band.restake.v1beta1.Vault[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_3.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_3.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_3.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            vaults?: ReturnType<typeof dependency_5.band.restake.v1beta1.Vault.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_3.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }): QueryVaultsResponse {
            const message = new QueryVaultsResponse({});
            if (data.vaults != null) {
                message.vaults = data.vaults.map(item => dependency_5.band.restake.v1beta1.Vault.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_3.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                vaults?: ReturnType<typeof dependency_5.band.restake.v1beta1.Vault.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_3.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.vaults != null) {
                data.vaults = this.vaults.map((item: dependency_5.band.restake.v1beta1.Vault) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.vaults.length)
                writer.writeRepeatedMessage(1, this.vaults, (item: dependency_5.band.restake.v1beta1.Vault) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryVaultsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryVaultsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.vaults, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.band.restake.v1beta1.Vault.deserialize(reader), dependency_5.band.restake.v1beta1.Vault));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_3.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryVaultsResponse {
            return QueryVaultsResponse.deserialize(bytes);
        }
    }
    export class QueryVaultRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            key?: string;
        }): QueryVaultRequest {
            const message = new QueryVaultRequest({});
            if (data.key != null) {
                message.key = data.key;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryVaultRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryVaultRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryVaultRequest {
            return QueryVaultRequest.deserialize(bytes);
        }
    }
    export class QueryVaultResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vault?: dependency_5.band.restake.v1beta1.Vault;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vault" in data && data.vault != undefined) {
                    this.vault = data.vault;
                }
            }
        }
        get vault() {
            return pb_1.Message.getWrapperField(this, dependency_5.band.restake.v1beta1.Vault, 1) as dependency_5.band.restake.v1beta1.Vault;
        }
        set vault(value: dependency_5.band.restake.v1beta1.Vault) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_vault() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            vault?: ReturnType<typeof dependency_5.band.restake.v1beta1.Vault.prototype.toObject>;
        }): QueryVaultResponse {
            const message = new QueryVaultResponse({});
            if (data.vault != null) {
                message.vault = dependency_5.band.restake.v1beta1.Vault.fromObject(data.vault);
            }
            return message;
        }
        toObject() {
            const data: {
                vault?: ReturnType<typeof dependency_5.band.restake.v1beta1.Vault.prototype.toObject>;
            } = {};
            if (this.vault != null) {
                data.vault = this.vault.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_vault)
                writer.writeMessage(1, this.vault, () => this.vault.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryVaultResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryVaultResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.vault, () => message.vault = dependency_5.band.restake.v1beta1.Vault.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryVaultResponse {
            return QueryVaultResponse.deserialize(bytes);
        }
    }
    export class QueryLocksRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            staker_address?: string;
            pagination?: dependency_3.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("staker_address" in data && data.staker_address != undefined) {
                    this.staker_address = data.staker_address;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get staker_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set staker_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_3.cosmos.base.query.v1beta1.PageRequest, 2) as dependency_3.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_3.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            staker_address?: string;
            pagination?: ReturnType<typeof dependency_3.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }): QueryLocksRequest {
            const message = new QueryLocksRequest({});
            if (data.staker_address != null) {
                message.staker_address = data.staker_address;
            }
            if (data.pagination != null) {
                message.pagination = dependency_3.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                staker_address?: string;
                pagination?: ReturnType<typeof dependency_3.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.staker_address != null) {
                data.staker_address = this.staker_address;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.staker_address.length)
                writer.writeString(1, this.staker_address);
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryLocksRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryLocksRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.staker_address = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_3.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryLocksRequest {
            return QueryLocksRequest.deserialize(bytes);
        }
    }
    export class QueryLocksResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            locks?: dependency_5.band.restake.v1beta1.LockResponse[];
            pagination?: dependency_3.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("locks" in data && data.locks != undefined) {
                    this.locks = data.locks;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get locks() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.band.restake.v1beta1.LockResponse, 1) as dependency_5.band.restake.v1beta1.LockResponse[];
        }
        set locks(value: dependency_5.band.restake.v1beta1.LockResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_3.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_3.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_3.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            locks?: ReturnType<typeof dependency_5.band.restake.v1beta1.LockResponse.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_3.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }): QueryLocksResponse {
            const message = new QueryLocksResponse({});
            if (data.locks != null) {
                message.locks = data.locks.map(item => dependency_5.band.restake.v1beta1.LockResponse.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_3.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                locks?: ReturnType<typeof dependency_5.band.restake.v1beta1.LockResponse.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_3.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.locks != null) {
                data.locks = this.locks.map((item: dependency_5.band.restake.v1beta1.LockResponse) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.locks.length)
                writer.writeRepeatedMessage(1, this.locks, (item: dependency_5.band.restake.v1beta1.LockResponse) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryLocksResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryLocksResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.locks, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.band.restake.v1beta1.LockResponse.deserialize(reader), dependency_5.band.restake.v1beta1.LockResponse));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_3.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryLocksResponse {
            return QueryLocksResponse.deserialize(bytes);
        }
    }
    export class QueryLockRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            staker_address?: string;
            key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("staker_address" in data && data.staker_address != undefined) {
                    this.staker_address = data.staker_address;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get staker_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set staker_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            staker_address?: string;
            key?: string;
        }): QueryLockRequest {
            const message = new QueryLockRequest({});
            if (data.staker_address != null) {
                message.staker_address = data.staker_address;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            return message;
        }
        toObject() {
            const data: {
                staker_address?: string;
                key?: string;
            } = {};
            if (this.staker_address != null) {
                data.staker_address = this.staker_address;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.staker_address.length)
                writer.writeString(1, this.staker_address);
            if (this.key.length)
                writer.writeString(2, this.key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryLockRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryLockRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.staker_address = reader.readString();
                        break;
                    case 2:
                        message.key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryLockRequest {
            return QueryLockRequest.deserialize(bytes);
        }
    }
    export class QueryLockResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            lock?: dependency_5.band.restake.v1beta1.LockResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("lock" in data && data.lock != undefined) {
                    this.lock = data.lock;
                }
            }
        }
        get lock() {
            return pb_1.Message.getWrapperField(this, dependency_5.band.restake.v1beta1.LockResponse, 1) as dependency_5.band.restake.v1beta1.LockResponse;
        }
        set lock(value: dependency_5.band.restake.v1beta1.LockResponse) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_lock() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            lock?: ReturnType<typeof dependency_5.band.restake.v1beta1.LockResponse.prototype.toObject>;
        }): QueryLockResponse {
            const message = new QueryLockResponse({});
            if (data.lock != null) {
                message.lock = dependency_5.band.restake.v1beta1.LockResponse.fromObject(data.lock);
            }
            return message;
        }
        toObject() {
            const data: {
                lock?: ReturnType<typeof dependency_5.band.restake.v1beta1.LockResponse.prototype.toObject>;
            } = {};
            if (this.lock != null) {
                data.lock = this.lock.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_lock)
                writer.writeMessage(1, this.lock, () => this.lock.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryLockResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryLockResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.lock, () => message.lock = dependency_5.band.restake.v1beta1.LockResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryLockResponse {
            return QueryLockResponse.deserialize(bytes);
        }
    }
    export class QueryStakeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            staker_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("staker_address" in data && data.staker_address != undefined) {
                    this.staker_address = data.staker_address;
                }
            }
        }
        get staker_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set staker_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            staker_address?: string;
        }): QueryStakeRequest {
            const message = new QueryStakeRequest({});
            if (data.staker_address != null) {
                message.staker_address = data.staker_address;
            }
            return message;
        }
        toObject() {
            const data: {
                staker_address?: string;
            } = {};
            if (this.staker_address != null) {
                data.staker_address = this.staker_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.staker_address.length)
                writer.writeString(1, this.staker_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryStakeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryStakeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.staker_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryStakeRequest {
            return QueryStakeRequest.deserialize(bytes);
        }
    }
    export class QueryStakeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stake?: dependency_5.band.restake.v1beta1.Stake;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stake" in data && data.stake != undefined) {
                    this.stake = data.stake;
                }
            }
        }
        get stake() {
            return pb_1.Message.getWrapperField(this, dependency_5.band.restake.v1beta1.Stake, 1) as dependency_5.band.restake.v1beta1.Stake;
        }
        set stake(value: dependency_5.band.restake.v1beta1.Stake) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_stake() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            stake?: ReturnType<typeof dependency_5.band.restake.v1beta1.Stake.prototype.toObject>;
        }): QueryStakeResponse {
            const message = new QueryStakeResponse({});
            if (data.stake != null) {
                message.stake = dependency_5.band.restake.v1beta1.Stake.fromObject(data.stake);
            }
            return message;
        }
        toObject() {
            const data: {
                stake?: ReturnType<typeof dependency_5.band.restake.v1beta1.Stake.prototype.toObject>;
            } = {};
            if (this.stake != null) {
                data.stake = this.stake.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_stake)
                writer.writeMessage(1, this.stake, () => this.stake.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryStakeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryStakeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.stake, () => message.stake = dependency_5.band.restake.v1beta1.Stake.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryStakeResponse {
            return QueryStakeResponse.deserialize(bytes);
        }
    }
    export class QueryParamsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryParamsRequest {
            const message = new QueryParamsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsRequest {
            return QueryParamsRequest.deserialize(bytes);
        }
    }
    export class QueryParamsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            params?: dependency_6.band.restake.v1beta1.Params;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
            }
        }
        get params() {
            return pb_1.Message.getWrapperField(this, dependency_6.band.restake.v1beta1.Params, 1) as dependency_6.band.restake.v1beta1.Params;
        }
        set params(value: dependency_6.band.restake.v1beta1.Params) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            params?: ReturnType<typeof dependency_6.band.restake.v1beta1.Params.prototype.toObject>;
        }): QueryParamsResponse {
            const message = new QueryParamsResponse({});
            if (data.params != null) {
                message.params = dependency_6.band.restake.v1beta1.Params.fromObject(data.params);
            }
            return message;
        }
        toObject() {
            const data: {
                params?: ReturnType<typeof dependency_6.band.restake.v1beta1.Params.prototype.toObject>;
            } = {};
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_params)
                writer.writeMessage(1, this.params, () => this.params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.params, () => message.params = dependency_6.band.restake.v1beta1.Params.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsResponse {
            return QueryParamsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedQueryService {
        static definition = {
            Vaults: {
                path: "/band.restake.v1beta1.Query/Vaults",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryVaultsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryVaultsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryVaultsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryVaultsResponse.deserialize(new Uint8Array(bytes))
            },
            Vault: {
                path: "/band.restake.v1beta1.Query/Vault",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryVaultRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryVaultRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryVaultResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryVaultResponse.deserialize(new Uint8Array(bytes))
            },
            Locks: {
                path: "/band.restake.v1beta1.Query/Locks",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryLocksRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryLocksRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryLocksResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryLocksResponse.deserialize(new Uint8Array(bytes))
            },
            Lock: {
                path: "/band.restake.v1beta1.Query/Lock",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryLockRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryLockRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryLockResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryLockResponse.deserialize(new Uint8Array(bytes))
            },
            Stake: {
                path: "/band.restake.v1beta1.Query/Stake",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryStakeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryStakeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryStakeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryStakeResponse.deserialize(new Uint8Array(bytes))
            },
            Params: {
                path: "/band.restake.v1beta1.Query/Params",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryParamsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryParamsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryParamsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryParamsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Vaults(call: grpc_1.ServerUnaryCall<QueryVaultsRequest, QueryVaultsResponse>, callback: grpc_1.sendUnaryData<QueryVaultsResponse>): void;
        abstract Vault(call: grpc_1.ServerUnaryCall<QueryVaultRequest, QueryVaultResponse>, callback: grpc_1.sendUnaryData<QueryVaultResponse>): void;
        abstract Locks(call: grpc_1.ServerUnaryCall<QueryLocksRequest, QueryLocksResponse>, callback: grpc_1.sendUnaryData<QueryLocksResponse>): void;
        abstract Lock(call: grpc_1.ServerUnaryCall<QueryLockRequest, QueryLockResponse>, callback: grpc_1.sendUnaryData<QueryLockResponse>): void;
        abstract Stake(call: grpc_1.ServerUnaryCall<QueryStakeRequest, QueryStakeResponse>, callback: grpc_1.sendUnaryData<QueryStakeResponse>): void;
        abstract Params(call: grpc_1.ServerUnaryCall<QueryParamsRequest, QueryParamsResponse>, callback: grpc_1.sendUnaryData<QueryParamsResponse>): void;
    }
    export class QueryClient extends grpc_1.makeGenericClientConstructor(UnimplementedQueryService.definition, "Query", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Vaults: GrpcUnaryServiceInterface<QueryVaultsRequest, QueryVaultsResponse> = (message: QueryVaultsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryVaultsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryVaultsResponse>, callback?: grpc_1.requestCallback<QueryVaultsResponse>): grpc_1.ClientUnaryCall => {
            return super.Vaults(message, metadata, options, callback);
        };
        Vault: GrpcUnaryServiceInterface<QueryVaultRequest, QueryVaultResponse> = (message: QueryVaultRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryVaultResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryVaultResponse>, callback?: grpc_1.requestCallback<QueryVaultResponse>): grpc_1.ClientUnaryCall => {
            return super.Vault(message, metadata, options, callback);
        };
        Locks: GrpcUnaryServiceInterface<QueryLocksRequest, QueryLocksResponse> = (message: QueryLocksRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryLocksResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryLocksResponse>, callback?: grpc_1.requestCallback<QueryLocksResponse>): grpc_1.ClientUnaryCall => {
            return super.Locks(message, metadata, options, callback);
        };
        Lock: GrpcUnaryServiceInterface<QueryLockRequest, QueryLockResponse> = (message: QueryLockRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryLockResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryLockResponse>, callback?: grpc_1.requestCallback<QueryLockResponse>): grpc_1.ClientUnaryCall => {
            return super.Lock(message, metadata, options, callback);
        };
        Stake: GrpcUnaryServiceInterface<QueryStakeRequest, QueryStakeResponse> = (message: QueryStakeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryStakeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryStakeResponse>, callback?: grpc_1.requestCallback<QueryStakeResponse>): grpc_1.ClientUnaryCall => {
            return super.Stake(message, metadata, options, callback);
        };
        Params: GrpcUnaryServiceInterface<QueryParamsRequest, QueryParamsResponse> = (message: QueryParamsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryParamsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryParamsResponse>, callback?: grpc_1.requestCallback<QueryParamsResponse>): grpc_1.ClientUnaryCall => {
            return super.Params(message, metadata, options, callback);
        };
    }
}
