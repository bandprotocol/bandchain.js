/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/oracle/v1/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./oracle";
import * as dependency_3 from "./../../../cosmos/base/v1beta1/coin";
import * as dependency_4 from "./../../../cosmos_proto/cosmos";
import * as dependency_5 from "./../../../cosmos/msg/v1/msg";
import * as dependency_6 from "./../../../amino/amino";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace band.oracle.v1 {
    export class MsgRequestData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            oracle_script_id?: number;
            calldata?: Uint8Array;
            ask_count?: number;
            min_count?: number;
            client_id?: string;
            fee_limit?: dependency_3.cosmos.base.v1beta1.Coin[];
            prepare_gas?: number;
            execute_gas?: number;
            sender?: string;
            tss_encoder?: dependency_2.band.oracle.v1.Encoder;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("oracle_script_id" in data && data.oracle_script_id != undefined) {
                    this.oracle_script_id = data.oracle_script_id;
                }
                if ("calldata" in data && data.calldata != undefined) {
                    this.calldata = data.calldata;
                }
                if ("ask_count" in data && data.ask_count != undefined) {
                    this.ask_count = data.ask_count;
                }
                if ("min_count" in data && data.min_count != undefined) {
                    this.min_count = data.min_count;
                }
                if ("client_id" in data && data.client_id != undefined) {
                    this.client_id = data.client_id;
                }
                if ("fee_limit" in data && data.fee_limit != undefined) {
                    this.fee_limit = data.fee_limit;
                }
                if ("prepare_gas" in data && data.prepare_gas != undefined) {
                    this.prepare_gas = data.prepare_gas;
                }
                if ("execute_gas" in data && data.execute_gas != undefined) {
                    this.execute_gas = data.execute_gas;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("tss_encoder" in data && data.tss_encoder != undefined) {
                    this.tss_encoder = data.tss_encoder;
                }
            }
        }
        get oracle_script_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set oracle_script_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get calldata() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set calldata(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get ask_count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set ask_count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get min_count() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set min_count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get client_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set client_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get fee_limit() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.cosmos.base.v1beta1.Coin, 6) as dependency_3.cosmos.base.v1beta1.Coin[];
        }
        set fee_limit(value: dependency_3.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get prepare_gas() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set prepare_gas(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get execute_gas() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set execute_gas(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get tss_encoder() {
            return pb_1.Message.getFieldWithDefault(this, 10, dependency_2.band.oracle.v1.Encoder.ENCODER_UNSPECIFIED) as dependency_2.band.oracle.v1.Encoder;
        }
        set tss_encoder(value: dependency_2.band.oracle.v1.Encoder) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            oracle_script_id?: number;
            calldata?: Uint8Array;
            ask_count?: number;
            min_count?: number;
            client_id?: string;
            fee_limit?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            prepare_gas?: number;
            execute_gas?: number;
            sender?: string;
            tss_encoder?: dependency_2.band.oracle.v1.Encoder;
        }): MsgRequestData {
            const message = new MsgRequestData({});
            if (data.oracle_script_id != null) {
                message.oracle_script_id = data.oracle_script_id;
            }
            if (data.calldata != null) {
                message.calldata = data.calldata;
            }
            if (data.ask_count != null) {
                message.ask_count = data.ask_count;
            }
            if (data.min_count != null) {
                message.min_count = data.min_count;
            }
            if (data.client_id != null) {
                message.client_id = data.client_id;
            }
            if (data.fee_limit != null) {
                message.fee_limit = data.fee_limit.map(item => dependency_3.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            if (data.prepare_gas != null) {
                message.prepare_gas = data.prepare_gas;
            }
            if (data.execute_gas != null) {
                message.execute_gas = data.execute_gas;
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.tss_encoder != null) {
                message.tss_encoder = data.tss_encoder;
            }
            return message;
        }
        toObject() {
            const data: {
                oracle_script_id?: number;
                calldata?: Uint8Array;
                ask_count?: number;
                min_count?: number;
                client_id?: string;
                fee_limit?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>[];
                prepare_gas?: number;
                execute_gas?: number;
                sender?: string;
                tss_encoder?: dependency_2.band.oracle.v1.Encoder;
            } = {};
            if (this.oracle_script_id != null) {
                data.oracle_script_id = this.oracle_script_id;
            }
            if (this.calldata != null) {
                data.calldata = this.calldata;
            }
            if (this.ask_count != null) {
                data.ask_count = this.ask_count;
            }
            if (this.min_count != null) {
                data.min_count = this.min_count;
            }
            if (this.client_id != null) {
                data.client_id = this.client_id;
            }
            if (this.fee_limit != null) {
                data.fee_limit = this.fee_limit.map((item: dependency_3.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            if (this.prepare_gas != null) {
                data.prepare_gas = this.prepare_gas;
            }
            if (this.execute_gas != null) {
                data.execute_gas = this.execute_gas;
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.tss_encoder != null) {
                data.tss_encoder = this.tss_encoder;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.oracle_script_id != 0)
                writer.writeUint64(1, this.oracle_script_id);
            if (this.calldata.length)
                writer.writeBytes(2, this.calldata);
            if (this.ask_count != 0)
                writer.writeUint64(3, this.ask_count);
            if (this.min_count != 0)
                writer.writeUint64(4, this.min_count);
            if (this.client_id.length)
                writer.writeString(5, this.client_id);
            if (this.fee_limit.length)
                writer.writeRepeatedMessage(6, this.fee_limit, (item: dependency_3.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (this.prepare_gas != 0)
                writer.writeUint64(7, this.prepare_gas);
            if (this.execute_gas != 0)
                writer.writeUint64(8, this.execute_gas);
            if (this.sender.length)
                writer.writeString(9, this.sender);
            if (this.tss_encoder != dependency_2.band.oracle.v1.Encoder.ENCODER_UNSPECIFIED)
                writer.writeEnum(10, this.tss_encoder);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRequestData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRequestData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.oracle_script_id = reader.readUint64();
                        break;
                    case 2:
                        message.calldata = reader.readBytes();
                        break;
                    case 3:
                        message.ask_count = reader.readUint64();
                        break;
                    case 4:
                        message.min_count = reader.readUint64();
                        break;
                    case 5:
                        message.client_id = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.fee_limit, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_3.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_3.cosmos.base.v1beta1.Coin));
                        break;
                    case 7:
                        message.prepare_gas = reader.readUint64();
                        break;
                    case 8:
                        message.execute_gas = reader.readUint64();
                        break;
                    case 9:
                        message.sender = reader.readString();
                        break;
                    case 10:
                        message.tss_encoder = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRequestData {
            return MsgRequestData.deserialize(bytes);
        }
    }
    export class MsgRequestDataResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgRequestDataResponse {
            const message = new MsgRequestDataResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRequestDataResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRequestDataResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRequestDataResponse {
            return MsgRequestDataResponse.deserialize(bytes);
        }
    }
    export class MsgReportData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_id?: number;
            raw_reports?: dependency_2.band.oracle.v1.RawReport[];
            validator?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("raw_reports" in data && data.raw_reports != undefined) {
                    this.raw_reports = data.raw_reports;
                }
                if ("validator" in data && data.validator != undefined) {
                    this.validator = data.validator;
                }
            }
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get raw_reports() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.band.oracle.v1.RawReport, 2) as dependency_2.band.oracle.v1.RawReport[];
        }
        set raw_reports(value: dependency_2.band.oracle.v1.RawReport[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get validator() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set validator(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            request_id?: number;
            raw_reports?: ReturnType<typeof dependency_2.band.oracle.v1.RawReport.prototype.toObject>[];
            validator?: string;
        }): MsgReportData {
            const message = new MsgReportData({});
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.raw_reports != null) {
                message.raw_reports = data.raw_reports.map(item => dependency_2.band.oracle.v1.RawReport.fromObject(item));
            }
            if (data.validator != null) {
                message.validator = data.validator;
            }
            return message;
        }
        toObject() {
            const data: {
                request_id?: number;
                raw_reports?: ReturnType<typeof dependency_2.band.oracle.v1.RawReport.prototype.toObject>[];
                validator?: string;
            } = {};
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.raw_reports != null) {
                data.raw_reports = this.raw_reports.map((item: dependency_2.band.oracle.v1.RawReport) => item.toObject());
            }
            if (this.validator != null) {
                data.validator = this.validator;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_id != 0)
                writer.writeUint64(1, this.request_id);
            if (this.raw_reports.length)
                writer.writeRepeatedMessage(2, this.raw_reports, (item: dependency_2.band.oracle.v1.RawReport) => item.serialize(writer));
            if (this.validator.length)
                writer.writeString(3, this.validator);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgReportData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgReportData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.raw_reports, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.band.oracle.v1.RawReport.deserialize(reader), dependency_2.band.oracle.v1.RawReport));
                        break;
                    case 3:
                        message.validator = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgReportData {
            return MsgReportData.deserialize(bytes);
        }
    }
    export class MsgReportDataResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgReportDataResponse {
            const message = new MsgReportDataResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgReportDataResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgReportDataResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgReportDataResponse {
            return MsgReportDataResponse.deserialize(bytes);
        }
    }
    export class MsgCreateDataSource extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            description?: string;
            executable?: Uint8Array;
            fee?: dependency_3.cosmos.base.v1beta1.Coin[];
            treasury?: string;
            owner?: string;
            sender?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("executable" in data && data.executable != undefined) {
                    this.executable = data.executable;
                }
                if ("fee" in data && data.fee != undefined) {
                    this.fee = data.fee;
                }
                if ("treasury" in data && data.treasury != undefined) {
                    this.treasury = data.treasury;
                }
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get executable() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set executable(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get fee() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.cosmos.base.v1beta1.Coin, 4) as dependency_3.cosmos.base.v1beta1.Coin[];
        }
        set fee(value: dependency_3.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get treasury() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set treasury(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            name?: string;
            description?: string;
            executable?: Uint8Array;
            fee?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            treasury?: string;
            owner?: string;
            sender?: string;
        }): MsgCreateDataSource {
            const message = new MsgCreateDataSource({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.executable != null) {
                message.executable = data.executable;
            }
            if (data.fee != null) {
                message.fee = data.fee.map(item => dependency_3.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            if (data.treasury != null) {
                message.treasury = data.treasury;
            }
            if (data.owner != null) {
                message.owner = data.owner;
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                description?: string;
                executable?: Uint8Array;
                fee?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>[];
                treasury?: string;
                owner?: string;
                sender?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.executable != null) {
                data.executable = this.executable;
            }
            if (this.fee != null) {
                data.fee = this.fee.map((item: dependency_3.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            if (this.treasury != null) {
                data.treasury = this.treasury;
            }
            if (this.owner != null) {
                data.owner = this.owner;
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.executable.length)
                writer.writeBytes(3, this.executable);
            if (this.fee.length)
                writer.writeRepeatedMessage(4, this.fee, (item: dependency_3.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (this.treasury.length)
                writer.writeString(5, this.treasury);
            if (this.owner.length)
                writer.writeString(6, this.owner);
            if (this.sender.length)
                writer.writeString(7, this.sender);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCreateDataSource {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateDataSource();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.executable = reader.readBytes();
                        break;
                    case 4:
                        reader.readMessage(message.fee, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_3.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_3.cosmos.base.v1beta1.Coin));
                        break;
                    case 5:
                        message.treasury = reader.readString();
                        break;
                    case 6:
                        message.owner = reader.readString();
                        break;
                    case 7:
                        message.sender = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCreateDataSource {
            return MsgCreateDataSource.deserialize(bytes);
        }
    }
    export class MsgCreateDataSourceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgCreateDataSourceResponse {
            const message = new MsgCreateDataSourceResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCreateDataSourceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateDataSourceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCreateDataSourceResponse {
            return MsgCreateDataSourceResponse.deserialize(bytes);
        }
    }
    export class MsgEditDataSource extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data_source_id?: number;
            name?: string;
            description?: string;
            executable?: Uint8Array;
            fee?: dependency_3.cosmos.base.v1beta1.Coin[];
            treasury?: string;
            owner?: string;
            sender?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data_source_id" in data && data.data_source_id != undefined) {
                    this.data_source_id = data.data_source_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("executable" in data && data.executable != undefined) {
                    this.executable = data.executable;
                }
                if ("fee" in data && data.fee != undefined) {
                    this.fee = data.fee;
                }
                if ("treasury" in data && data.treasury != undefined) {
                    this.treasury = data.treasury;
                }
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
            }
        }
        get data_source_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set data_source_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get executable() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set executable(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get fee() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.cosmos.base.v1beta1.Coin, 5) as dependency_3.cosmos.base.v1beta1.Coin[];
        }
        set fee(value: dependency_3.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get treasury() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set treasury(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            data_source_id?: number;
            name?: string;
            description?: string;
            executable?: Uint8Array;
            fee?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            treasury?: string;
            owner?: string;
            sender?: string;
        }): MsgEditDataSource {
            const message = new MsgEditDataSource({});
            if (data.data_source_id != null) {
                message.data_source_id = data.data_source_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.executable != null) {
                message.executable = data.executable;
            }
            if (data.fee != null) {
                message.fee = data.fee.map(item => dependency_3.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            if (data.treasury != null) {
                message.treasury = data.treasury;
            }
            if (data.owner != null) {
                message.owner = data.owner;
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            return message;
        }
        toObject() {
            const data: {
                data_source_id?: number;
                name?: string;
                description?: string;
                executable?: Uint8Array;
                fee?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>[];
                treasury?: string;
                owner?: string;
                sender?: string;
            } = {};
            if (this.data_source_id != null) {
                data.data_source_id = this.data_source_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.executable != null) {
                data.executable = this.executable;
            }
            if (this.fee != null) {
                data.fee = this.fee.map((item: dependency_3.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            if (this.treasury != null) {
                data.treasury = this.treasury;
            }
            if (this.owner != null) {
                data.owner = this.owner;
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data_source_id != 0)
                writer.writeUint64(1, this.data_source_id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.executable.length)
                writer.writeBytes(4, this.executable);
            if (this.fee.length)
                writer.writeRepeatedMessage(5, this.fee, (item: dependency_3.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (this.treasury.length)
                writer.writeString(6, this.treasury);
            if (this.owner.length)
                writer.writeString(7, this.owner);
            if (this.sender.length)
                writer.writeString(8, this.sender);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgEditDataSource {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgEditDataSource();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data_source_id = reader.readUint64();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.executable = reader.readBytes();
                        break;
                    case 5:
                        reader.readMessage(message.fee, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_3.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_3.cosmos.base.v1beta1.Coin));
                        break;
                    case 6:
                        message.treasury = reader.readString();
                        break;
                    case 7:
                        message.owner = reader.readString();
                        break;
                    case 8:
                        message.sender = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgEditDataSource {
            return MsgEditDataSource.deserialize(bytes);
        }
    }
    export class MsgEditDataSourceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgEditDataSourceResponse {
            const message = new MsgEditDataSourceResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgEditDataSourceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgEditDataSourceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgEditDataSourceResponse {
            return MsgEditDataSourceResponse.deserialize(bytes);
        }
    }
    export class MsgCreateOracleScript extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            description?: string;
            schema?: string;
            source_code_url?: string;
            code?: Uint8Array;
            owner?: string;
            sender?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("schema" in data && data.schema != undefined) {
                    this.schema = data.schema;
                }
                if ("source_code_url" in data && data.source_code_url != undefined) {
                    this.source_code_url = data.source_code_url;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get schema() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set schema(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get source_code_url() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set source_code_url(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set code(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            name?: string;
            description?: string;
            schema?: string;
            source_code_url?: string;
            code?: Uint8Array;
            owner?: string;
            sender?: string;
        }): MsgCreateOracleScript {
            const message = new MsgCreateOracleScript({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.schema != null) {
                message.schema = data.schema;
            }
            if (data.source_code_url != null) {
                message.source_code_url = data.source_code_url;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.owner != null) {
                message.owner = data.owner;
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                description?: string;
                schema?: string;
                source_code_url?: string;
                code?: Uint8Array;
                owner?: string;
                sender?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.schema != null) {
                data.schema = this.schema;
            }
            if (this.source_code_url != null) {
                data.source_code_url = this.source_code_url;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.owner != null) {
                data.owner = this.owner;
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.schema.length)
                writer.writeString(3, this.schema);
            if (this.source_code_url.length)
                writer.writeString(4, this.source_code_url);
            if (this.code.length)
                writer.writeBytes(5, this.code);
            if (this.owner.length)
                writer.writeString(6, this.owner);
            if (this.sender.length)
                writer.writeString(7, this.sender);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCreateOracleScript {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateOracleScript();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.schema = reader.readString();
                        break;
                    case 4:
                        message.source_code_url = reader.readString();
                        break;
                    case 5:
                        message.code = reader.readBytes();
                        break;
                    case 6:
                        message.owner = reader.readString();
                        break;
                    case 7:
                        message.sender = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCreateOracleScript {
            return MsgCreateOracleScript.deserialize(bytes);
        }
    }
    export class MsgCreateOracleScriptResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgCreateOracleScriptResponse {
            const message = new MsgCreateOracleScriptResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCreateOracleScriptResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateOracleScriptResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCreateOracleScriptResponse {
            return MsgCreateOracleScriptResponse.deserialize(bytes);
        }
    }
    export class MsgEditOracleScript extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            oracle_script_id?: number;
            name?: string;
            description?: string;
            schema?: string;
            source_code_url?: string;
            code?: Uint8Array;
            owner?: string;
            sender?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("oracle_script_id" in data && data.oracle_script_id != undefined) {
                    this.oracle_script_id = data.oracle_script_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("schema" in data && data.schema != undefined) {
                    this.schema = data.schema;
                }
                if ("source_code_url" in data && data.source_code_url != undefined) {
                    this.source_code_url = data.source_code_url;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
            }
        }
        get oracle_script_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set oracle_script_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get schema() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set schema(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get source_code_url() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set source_code_url(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
        }
        set code(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            oracle_script_id?: number;
            name?: string;
            description?: string;
            schema?: string;
            source_code_url?: string;
            code?: Uint8Array;
            owner?: string;
            sender?: string;
        }): MsgEditOracleScript {
            const message = new MsgEditOracleScript({});
            if (data.oracle_script_id != null) {
                message.oracle_script_id = data.oracle_script_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.schema != null) {
                message.schema = data.schema;
            }
            if (data.source_code_url != null) {
                message.source_code_url = data.source_code_url;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.owner != null) {
                message.owner = data.owner;
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            return message;
        }
        toObject() {
            const data: {
                oracle_script_id?: number;
                name?: string;
                description?: string;
                schema?: string;
                source_code_url?: string;
                code?: Uint8Array;
                owner?: string;
                sender?: string;
            } = {};
            if (this.oracle_script_id != null) {
                data.oracle_script_id = this.oracle_script_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.schema != null) {
                data.schema = this.schema;
            }
            if (this.source_code_url != null) {
                data.source_code_url = this.source_code_url;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.owner != null) {
                data.owner = this.owner;
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.oracle_script_id != 0)
                writer.writeUint64(1, this.oracle_script_id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.schema.length)
                writer.writeString(4, this.schema);
            if (this.source_code_url.length)
                writer.writeString(5, this.source_code_url);
            if (this.code.length)
                writer.writeBytes(6, this.code);
            if (this.owner.length)
                writer.writeString(7, this.owner);
            if (this.sender.length)
                writer.writeString(8, this.sender);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgEditOracleScript {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgEditOracleScript();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.oracle_script_id = reader.readUint64();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.schema = reader.readString();
                        break;
                    case 5:
                        message.source_code_url = reader.readString();
                        break;
                    case 6:
                        message.code = reader.readBytes();
                        break;
                    case 7:
                        message.owner = reader.readString();
                        break;
                    case 8:
                        message.sender = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgEditOracleScript {
            return MsgEditOracleScript.deserialize(bytes);
        }
    }
    export class MsgEditOracleScriptResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgEditOracleScriptResponse {
            const message = new MsgEditOracleScriptResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgEditOracleScriptResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgEditOracleScriptResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgEditOracleScriptResponse {
            return MsgEditOracleScriptResponse.deserialize(bytes);
        }
    }
    export class MsgActivate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validator?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator" in data && data.validator != undefined) {
                    this.validator = data.validator;
                }
            }
        }
        get validator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set validator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            validator?: string;
        }): MsgActivate {
            const message = new MsgActivate({});
            if (data.validator != null) {
                message.validator = data.validator;
            }
            return message;
        }
        toObject() {
            const data: {
                validator?: string;
            } = {};
            if (this.validator != null) {
                data.validator = this.validator;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validator.length)
                writer.writeString(1, this.validator);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgActivate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgActivate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.validator = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgActivate {
            return MsgActivate.deserialize(bytes);
        }
    }
    export class MsgActivateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgActivateResponse {
            const message = new MsgActivateResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgActivateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgActivateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgActivateResponse {
            return MsgActivateResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateParams extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            authority?: string;
            params?: dependency_2.band.oracle.v1.Params;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("authority" in data && data.authority != undefined) {
                    this.authority = data.authority;
                }
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
            }
        }
        get authority() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set authority(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get params() {
            return pb_1.Message.getWrapperField(this, dependency_2.band.oracle.v1.Params, 2) as dependency_2.band.oracle.v1.Params;
        }
        set params(value: dependency_2.band.oracle.v1.Params) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_params() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            authority?: string;
            params?: ReturnType<typeof dependency_2.band.oracle.v1.Params.prototype.toObject>;
        }): MsgUpdateParams {
            const message = new MsgUpdateParams({});
            if (data.authority != null) {
                message.authority = data.authority;
            }
            if (data.params != null) {
                message.params = dependency_2.band.oracle.v1.Params.fromObject(data.params);
            }
            return message;
        }
        toObject() {
            const data: {
                authority?: string;
                params?: ReturnType<typeof dependency_2.band.oracle.v1.Params.prototype.toObject>;
            } = {};
            if (this.authority != null) {
                data.authority = this.authority;
            }
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.authority.length)
                writer.writeString(1, this.authority);
            if (this.has_params)
                writer.writeMessage(2, this.params, () => this.params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateParams {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateParams();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.authority = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.params, () => message.params = dependency_2.band.oracle.v1.Params.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateParams {
            return MsgUpdateParams.deserialize(bytes);
        }
    }
    export class MsgUpdateParamsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateParamsResponse {
            const message = new MsgUpdateParamsResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateParamsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateParamsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateParamsResponse {
            return MsgUpdateParamsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedMsgService {
        static definition = {
            RequestData: {
                path: "/band.oracle.v1.Msg/RequestData",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgRequestData) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgRequestData.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgRequestDataResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgRequestDataResponse.deserialize(new Uint8Array(bytes))
            },
            ReportData: {
                path: "/band.oracle.v1.Msg/ReportData",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgReportData) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgReportData.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgReportDataResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgReportDataResponse.deserialize(new Uint8Array(bytes))
            },
            CreateDataSource: {
                path: "/band.oracle.v1.Msg/CreateDataSource",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgCreateDataSource) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgCreateDataSource.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgCreateDataSourceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgCreateDataSourceResponse.deserialize(new Uint8Array(bytes))
            },
            EditDataSource: {
                path: "/band.oracle.v1.Msg/EditDataSource",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgEditDataSource) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgEditDataSource.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgEditDataSourceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgEditDataSourceResponse.deserialize(new Uint8Array(bytes))
            },
            CreateOracleScript: {
                path: "/band.oracle.v1.Msg/CreateOracleScript",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgCreateOracleScript) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgCreateOracleScript.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgCreateOracleScriptResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgCreateOracleScriptResponse.deserialize(new Uint8Array(bytes))
            },
            EditOracleScript: {
                path: "/band.oracle.v1.Msg/EditOracleScript",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgEditOracleScript) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgEditOracleScript.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgEditOracleScriptResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgEditOracleScriptResponse.deserialize(new Uint8Array(bytes))
            },
            Activate: {
                path: "/band.oracle.v1.Msg/Activate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgActivate) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgActivate.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgActivateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgActivateResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateParams: {
                path: "/band.oracle.v1.Msg/UpdateParams",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgUpdateParams) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgUpdateParams.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgUpdateParamsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgUpdateParamsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract RequestData(call: grpc_1.ServerUnaryCall<MsgRequestData, MsgRequestDataResponse>, callback: grpc_1.sendUnaryData<MsgRequestDataResponse>): void;
        abstract ReportData(call: grpc_1.ServerUnaryCall<MsgReportData, MsgReportDataResponse>, callback: grpc_1.sendUnaryData<MsgReportDataResponse>): void;
        abstract CreateDataSource(call: grpc_1.ServerUnaryCall<MsgCreateDataSource, MsgCreateDataSourceResponse>, callback: grpc_1.sendUnaryData<MsgCreateDataSourceResponse>): void;
        abstract EditDataSource(call: grpc_1.ServerUnaryCall<MsgEditDataSource, MsgEditDataSourceResponse>, callback: grpc_1.sendUnaryData<MsgEditDataSourceResponse>): void;
        abstract CreateOracleScript(call: grpc_1.ServerUnaryCall<MsgCreateOracleScript, MsgCreateOracleScriptResponse>, callback: grpc_1.sendUnaryData<MsgCreateOracleScriptResponse>): void;
        abstract EditOracleScript(call: grpc_1.ServerUnaryCall<MsgEditOracleScript, MsgEditOracleScriptResponse>, callback: grpc_1.sendUnaryData<MsgEditOracleScriptResponse>): void;
        abstract Activate(call: grpc_1.ServerUnaryCall<MsgActivate, MsgActivateResponse>, callback: grpc_1.sendUnaryData<MsgActivateResponse>): void;
        abstract UpdateParams(call: grpc_1.ServerUnaryCall<MsgUpdateParams, MsgUpdateParamsResponse>, callback: grpc_1.sendUnaryData<MsgUpdateParamsResponse>): void;
    }
    export class MsgClient extends grpc_1.makeGenericClientConstructor(UnimplementedMsgService.definition, "Msg", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        RequestData: GrpcUnaryServiceInterface<MsgRequestData, MsgRequestDataResponse> = (message: MsgRequestData, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgRequestDataResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgRequestDataResponse>, callback?: grpc_1.requestCallback<MsgRequestDataResponse>): grpc_1.ClientUnaryCall => {
            return super.RequestData(message, metadata, options, callback);
        };
        ReportData: GrpcUnaryServiceInterface<MsgReportData, MsgReportDataResponse> = (message: MsgReportData, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgReportDataResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgReportDataResponse>, callback?: grpc_1.requestCallback<MsgReportDataResponse>): grpc_1.ClientUnaryCall => {
            return super.ReportData(message, metadata, options, callback);
        };
        CreateDataSource: GrpcUnaryServiceInterface<MsgCreateDataSource, MsgCreateDataSourceResponse> = (message: MsgCreateDataSource, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgCreateDataSourceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgCreateDataSourceResponse>, callback?: grpc_1.requestCallback<MsgCreateDataSourceResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateDataSource(message, metadata, options, callback);
        };
        EditDataSource: GrpcUnaryServiceInterface<MsgEditDataSource, MsgEditDataSourceResponse> = (message: MsgEditDataSource, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgEditDataSourceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgEditDataSourceResponse>, callback?: grpc_1.requestCallback<MsgEditDataSourceResponse>): grpc_1.ClientUnaryCall => {
            return super.EditDataSource(message, metadata, options, callback);
        };
        CreateOracleScript: GrpcUnaryServiceInterface<MsgCreateOracleScript, MsgCreateOracleScriptResponse> = (message: MsgCreateOracleScript, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgCreateOracleScriptResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgCreateOracleScriptResponse>, callback?: grpc_1.requestCallback<MsgCreateOracleScriptResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateOracleScript(message, metadata, options, callback);
        };
        EditOracleScript: GrpcUnaryServiceInterface<MsgEditOracleScript, MsgEditOracleScriptResponse> = (message: MsgEditOracleScript, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgEditOracleScriptResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgEditOracleScriptResponse>, callback?: grpc_1.requestCallback<MsgEditOracleScriptResponse>): grpc_1.ClientUnaryCall => {
            return super.EditOracleScript(message, metadata, options, callback);
        };
        Activate: GrpcUnaryServiceInterface<MsgActivate, MsgActivateResponse> = (message: MsgActivate, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgActivateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgActivateResponse>, callback?: grpc_1.requestCallback<MsgActivateResponse>): grpc_1.ClientUnaryCall => {
            return super.Activate(message, metadata, options, callback);
        };
        UpdateParams: GrpcUnaryServiceInterface<MsgUpdateParams, MsgUpdateParamsResponse> = (message: MsgUpdateParams, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateParamsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateParamsResponse>, callback?: grpc_1.requestCallback<MsgUpdateParamsResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateParams(message, metadata, options, callback);
        };
    }
}
