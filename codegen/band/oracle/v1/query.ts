/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/oracle/v1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../../../google/api/annotations";
import * as dependency_3 from "./../../../cosmos_proto/cosmos";
import * as dependency_4 from "./oracle";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace band.oracle.v1 {
    export class QueryCountsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryCountsRequest {
            const message = new QueryCountsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCountsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCountsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCountsRequest {
            return QueryCountsRequest.deserialize(bytes);
        }
    }
    export class QueryCountsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data_source_count?: number;
            oracle_script_count?: number;
            request_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data_source_count" in data && data.data_source_count != undefined) {
                    this.data_source_count = data.data_source_count;
                }
                if ("oracle_script_count" in data && data.oracle_script_count != undefined) {
                    this.oracle_script_count = data.oracle_script_count;
                }
                if ("request_count" in data && data.request_count != undefined) {
                    this.request_count = data.request_count;
                }
            }
        }
        get data_source_count() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set data_source_count(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get oracle_script_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set oracle_script_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set request_count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            data_source_count?: number;
            oracle_script_count?: number;
            request_count?: number;
        }): QueryCountsResponse {
            const message = new QueryCountsResponse({});
            if (data.data_source_count != null) {
                message.data_source_count = data.data_source_count;
            }
            if (data.oracle_script_count != null) {
                message.oracle_script_count = data.oracle_script_count;
            }
            if (data.request_count != null) {
                message.request_count = data.request_count;
            }
            return message;
        }
        toObject() {
            const data: {
                data_source_count?: number;
                oracle_script_count?: number;
                request_count?: number;
            } = {};
            if (this.data_source_count != null) {
                data.data_source_count = this.data_source_count;
            }
            if (this.oracle_script_count != null) {
                data.oracle_script_count = this.oracle_script_count;
            }
            if (this.request_count != null) {
                data.request_count = this.request_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data_source_count != 0)
                writer.writeUint64(1, this.data_source_count);
            if (this.oracle_script_count != 0)
                writer.writeUint64(2, this.oracle_script_count);
            if (this.request_count != 0)
                writer.writeUint64(3, this.request_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCountsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCountsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data_source_count = reader.readUint64();
                        break;
                    case 2:
                        message.oracle_script_count = reader.readUint64();
                        break;
                    case 3:
                        message.request_count = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCountsResponse {
            return QueryCountsResponse.deserialize(bytes);
        }
    }
    export class QueryDataRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data_hash?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data_hash" in data && data.data_hash != undefined) {
                    this.data_hash = data.data_hash;
                }
            }
        }
        get data_hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set data_hash(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            data_hash?: string;
        }): QueryDataRequest {
            const message = new QueryDataRequest({});
            if (data.data_hash != null) {
                message.data_hash = data.data_hash;
            }
            return message;
        }
        toObject() {
            const data: {
                data_hash?: string;
            } = {};
            if (this.data_hash != null) {
                data.data_hash = this.data_hash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data_hash.length)
                writer.writeString(1, this.data_hash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDataRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDataRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data_hash = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDataRequest {
            return QueryDataRequest.deserialize(bytes);
        }
    }
    export class QueryDataResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            data?: Uint8Array;
        }): QueryDataResponse {
            const message = new QueryDataResponse({});
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeBytes(1, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDataResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDataResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDataResponse {
            return QueryDataResponse.deserialize(bytes);
        }
    }
    export class QueryDataSourceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data_source_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data_source_id" in data && data.data_source_id != undefined) {
                    this.data_source_id = data.data_source_id;
                }
            }
        }
        get data_source_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set data_source_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            data_source_id?: number;
        }): QueryDataSourceRequest {
            const message = new QueryDataSourceRequest({});
            if (data.data_source_id != null) {
                message.data_source_id = data.data_source_id;
            }
            return message;
        }
        toObject() {
            const data: {
                data_source_id?: number;
            } = {};
            if (this.data_source_id != null) {
                data.data_source_id = this.data_source_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data_source_id != 0)
                writer.writeUint64(1, this.data_source_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDataSourceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDataSourceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data_source_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDataSourceRequest {
            return QueryDataSourceRequest.deserialize(bytes);
        }
    }
    export class QueryDataSourceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data_source?: dependency_4.band.oracle.v1.DataSource;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data_source" in data && data.data_source != undefined) {
                    this.data_source = data.data_source;
                }
            }
        }
        get data_source() {
            return pb_1.Message.getWrapperField(this, dependency_4.band.oracle.v1.DataSource, 1) as dependency_4.band.oracle.v1.DataSource;
        }
        set data_source(value: dependency_4.band.oracle.v1.DataSource) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_data_source() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            data_source?: ReturnType<typeof dependency_4.band.oracle.v1.DataSource.prototype.toObject>;
        }): QueryDataSourceResponse {
            const message = new QueryDataSourceResponse({});
            if (data.data_source != null) {
                message.data_source = dependency_4.band.oracle.v1.DataSource.fromObject(data.data_source);
            }
            return message;
        }
        toObject() {
            const data: {
                data_source?: ReturnType<typeof dependency_4.band.oracle.v1.DataSource.prototype.toObject>;
            } = {};
            if (this.data_source != null) {
                data.data_source = this.data_source.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_data_source)
                writer.writeMessage(1, this.data_source, () => this.data_source.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDataSourceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDataSourceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.data_source, () => message.data_source = dependency_4.band.oracle.v1.DataSource.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDataSourceResponse {
            return QueryDataSourceResponse.deserialize(bytes);
        }
    }
    export class QueryOracleScriptRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            oracle_script_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("oracle_script_id" in data && data.oracle_script_id != undefined) {
                    this.oracle_script_id = data.oracle_script_id;
                }
            }
        }
        get oracle_script_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set oracle_script_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            oracle_script_id?: number;
        }): QueryOracleScriptRequest {
            const message = new QueryOracleScriptRequest({});
            if (data.oracle_script_id != null) {
                message.oracle_script_id = data.oracle_script_id;
            }
            return message;
        }
        toObject() {
            const data: {
                oracle_script_id?: number;
            } = {};
            if (this.oracle_script_id != null) {
                data.oracle_script_id = this.oracle_script_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.oracle_script_id != 0)
                writer.writeUint64(1, this.oracle_script_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryOracleScriptRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryOracleScriptRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.oracle_script_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryOracleScriptRequest {
            return QueryOracleScriptRequest.deserialize(bytes);
        }
    }
    export class QueryOracleScriptResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            oracle_script?: dependency_4.band.oracle.v1.OracleScript;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("oracle_script" in data && data.oracle_script != undefined) {
                    this.oracle_script = data.oracle_script;
                }
            }
        }
        get oracle_script() {
            return pb_1.Message.getWrapperField(this, dependency_4.band.oracle.v1.OracleScript, 1) as dependency_4.band.oracle.v1.OracleScript;
        }
        set oracle_script(value: dependency_4.band.oracle.v1.OracleScript) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_oracle_script() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            oracle_script?: ReturnType<typeof dependency_4.band.oracle.v1.OracleScript.prototype.toObject>;
        }): QueryOracleScriptResponse {
            const message = new QueryOracleScriptResponse({});
            if (data.oracle_script != null) {
                message.oracle_script = dependency_4.band.oracle.v1.OracleScript.fromObject(data.oracle_script);
            }
            return message;
        }
        toObject() {
            const data: {
                oracle_script?: ReturnType<typeof dependency_4.band.oracle.v1.OracleScript.prototype.toObject>;
            } = {};
            if (this.oracle_script != null) {
                data.oracle_script = this.oracle_script.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_oracle_script)
                writer.writeMessage(1, this.oracle_script, () => this.oracle_script.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryOracleScriptResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryOracleScriptResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.oracle_script, () => message.oracle_script = dependency_4.band.oracle.v1.OracleScript.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryOracleScriptResponse {
            return QueryOracleScriptResponse.deserialize(bytes);
        }
    }
    export class QueryRequestRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
            }
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            request_id?: number;
        }): QueryRequestRequest {
            const message = new QueryRequestRequest({});
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            return message;
        }
        toObject() {
            const data: {
                request_id?: number;
            } = {};
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_id != 0)
                writer.writeUint64(1, this.request_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryRequestRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryRequestRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryRequestRequest {
            return QueryRequestRequest.deserialize(bytes);
        }
    }
    export class QueryRequestResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request?: dependency_4.band.oracle.v1.Request;
            reports?: dependency_4.band.oracle.v1.Report[];
            result?: dependency_4.band.oracle.v1.Result;
            signing?: dependency_4.band.oracle.v1.SigningResult;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request" in data && data.request != undefined) {
                    this.request = data.request;
                }
                if ("reports" in data && data.reports != undefined) {
                    this.reports = data.reports;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("signing" in data && data.signing != undefined) {
                    this.signing = data.signing;
                }
            }
        }
        get request() {
            return pb_1.Message.getWrapperField(this, dependency_4.band.oracle.v1.Request, 1) as dependency_4.band.oracle.v1.Request;
        }
        set request(value: dependency_4.band.oracle.v1.Request) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get reports() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.band.oracle.v1.Report, 2) as dependency_4.band.oracle.v1.Report[];
        }
        set reports(value: dependency_4.band.oracle.v1.Report[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get result() {
            return pb_1.Message.getWrapperField(this, dependency_4.band.oracle.v1.Result, 3) as dependency_4.band.oracle.v1.Result;
        }
        set result(value: dependency_4.band.oracle.v1.Result) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_result() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get signing() {
            return pb_1.Message.getWrapperField(this, dependency_4.band.oracle.v1.SigningResult, 4) as dependency_4.band.oracle.v1.SigningResult;
        }
        set signing(value: dependency_4.band.oracle.v1.SigningResult) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_signing() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            request?: ReturnType<typeof dependency_4.band.oracle.v1.Request.prototype.toObject>;
            reports?: ReturnType<typeof dependency_4.band.oracle.v1.Report.prototype.toObject>[];
            result?: ReturnType<typeof dependency_4.band.oracle.v1.Result.prototype.toObject>;
            signing?: ReturnType<typeof dependency_4.band.oracle.v1.SigningResult.prototype.toObject>;
        }): QueryRequestResponse {
            const message = new QueryRequestResponse({});
            if (data.request != null) {
                message.request = dependency_4.band.oracle.v1.Request.fromObject(data.request);
            }
            if (data.reports != null) {
                message.reports = data.reports.map(item => dependency_4.band.oracle.v1.Report.fromObject(item));
            }
            if (data.result != null) {
                message.result = dependency_4.band.oracle.v1.Result.fromObject(data.result);
            }
            if (data.signing != null) {
                message.signing = dependency_4.band.oracle.v1.SigningResult.fromObject(data.signing);
            }
            return message;
        }
        toObject() {
            const data: {
                request?: ReturnType<typeof dependency_4.band.oracle.v1.Request.prototype.toObject>;
                reports?: ReturnType<typeof dependency_4.band.oracle.v1.Report.prototype.toObject>[];
                result?: ReturnType<typeof dependency_4.band.oracle.v1.Result.prototype.toObject>;
                signing?: ReturnType<typeof dependency_4.band.oracle.v1.SigningResult.prototype.toObject>;
            } = {};
            if (this.request != null) {
                data.request = this.request.toObject();
            }
            if (this.reports != null) {
                data.reports = this.reports.map((item: dependency_4.band.oracle.v1.Report) => item.toObject());
            }
            if (this.result != null) {
                data.result = this.result.toObject();
            }
            if (this.signing != null) {
                data.signing = this.signing.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_request)
                writer.writeMessage(1, this.request, () => this.request.serialize(writer));
            if (this.reports.length)
                writer.writeRepeatedMessage(2, this.reports, (item: dependency_4.band.oracle.v1.Report) => item.serialize(writer));
            if (this.has_result)
                writer.writeMessage(3, this.result, () => this.result.serialize(writer));
            if (this.has_signing)
                writer.writeMessage(4, this.signing, () => this.signing.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryRequestResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryRequestResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.request, () => message.request = dependency_4.band.oracle.v1.Request.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.reports, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_4.band.oracle.v1.Report.deserialize(reader), dependency_4.band.oracle.v1.Report));
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = dependency_4.band.oracle.v1.Result.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.signing, () => message.signing = dependency_4.band.oracle.v1.SigningResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryRequestResponse {
            return QueryRequestResponse.deserialize(bytes);
        }
    }
    export class QueryPendingRequestsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validator_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator_address" in data && data.validator_address != undefined) {
                    this.validator_address = data.validator_address;
                }
            }
        }
        get validator_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set validator_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            validator_address?: string;
        }): QueryPendingRequestsRequest {
            const message = new QueryPendingRequestsRequest({});
            if (data.validator_address != null) {
                message.validator_address = data.validator_address;
            }
            return message;
        }
        toObject() {
            const data: {
                validator_address?: string;
            } = {};
            if (this.validator_address != null) {
                data.validator_address = this.validator_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validator_address.length)
                writer.writeString(1, this.validator_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPendingRequestsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPendingRequestsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.validator_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPendingRequestsRequest {
            return QueryPendingRequestsRequest.deserialize(bytes);
        }
    }
    export class QueryPendingRequestsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_ids" in data && data.request_ids != undefined) {
                    this.request_ids = data.request_ids;
                }
            }
        }
        get request_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set request_ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            request_ids?: number[];
        }): QueryPendingRequestsResponse {
            const message = new QueryPendingRequestsResponse({});
            if (data.request_ids != null) {
                message.request_ids = data.request_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                request_ids?: number[];
            } = {};
            if (this.request_ids != null) {
                data.request_ids = this.request_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_ids.length)
                writer.writePackedUint64(1, this.request_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPendingRequestsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPendingRequestsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_ids = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPendingRequestsResponse {
            return QueryPendingRequestsResponse.deserialize(bytes);
        }
    }
    export class QueryParamsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryParamsRequest {
            const message = new QueryParamsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsRequest {
            return QueryParamsRequest.deserialize(bytes);
        }
    }
    export class QueryParamsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            params?: dependency_4.band.oracle.v1.Params;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
            }
        }
        get params() {
            return pb_1.Message.getWrapperField(this, dependency_4.band.oracle.v1.Params, 1) as dependency_4.band.oracle.v1.Params;
        }
        set params(value: dependency_4.band.oracle.v1.Params) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            params?: ReturnType<typeof dependency_4.band.oracle.v1.Params.prototype.toObject>;
        }): QueryParamsResponse {
            const message = new QueryParamsResponse({});
            if (data.params != null) {
                message.params = dependency_4.band.oracle.v1.Params.fromObject(data.params);
            }
            return message;
        }
        toObject() {
            const data: {
                params?: ReturnType<typeof dependency_4.band.oracle.v1.Params.prototype.toObject>;
            } = {};
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_params)
                writer.writeMessage(1, this.params, () => this.params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.params, () => message.params = dependency_4.band.oracle.v1.Params.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsResponse {
            return QueryParamsResponse.deserialize(bytes);
        }
    }
    export class QueryValidatorRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validator_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator_address" in data && data.validator_address != undefined) {
                    this.validator_address = data.validator_address;
                }
            }
        }
        get validator_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set validator_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            validator_address?: string;
        }): QueryValidatorRequest {
            const message = new QueryValidatorRequest({});
            if (data.validator_address != null) {
                message.validator_address = data.validator_address;
            }
            return message;
        }
        toObject() {
            const data: {
                validator_address?: string;
            } = {};
            if (this.validator_address != null) {
                data.validator_address = this.validator_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validator_address.length)
                writer.writeString(1, this.validator_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryValidatorRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryValidatorRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.validator_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryValidatorRequest {
            return QueryValidatorRequest.deserialize(bytes);
        }
    }
    export class QueryValidatorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_4.band.oracle.v1.ValidatorStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getWrapperField(this, dependency_4.band.oracle.v1.ValidatorStatus, 1) as dependency_4.band.oracle.v1.ValidatorStatus;
        }
        set status(value: dependency_4.band.oracle.v1.ValidatorStatus) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_status() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            status?: ReturnType<typeof dependency_4.band.oracle.v1.ValidatorStatus.prototype.toObject>;
        }): QueryValidatorResponse {
            const message = new QueryValidatorResponse({});
            if (data.status != null) {
                message.status = dependency_4.band.oracle.v1.ValidatorStatus.fromObject(data.status);
            }
            return message;
        }
        toObject() {
            const data: {
                status?: ReturnType<typeof dependency_4.band.oracle.v1.ValidatorStatus.prototype.toObject>;
            } = {};
            if (this.status != null) {
                data.status = this.status.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_status)
                writer.writeMessage(1, this.status, () => this.status.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryValidatorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryValidatorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.status, () => message.status = dependency_4.band.oracle.v1.ValidatorStatus.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryValidatorResponse {
            return QueryValidatorResponse.deserialize(bytes);
        }
    }
    export class QueryIsReporterRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validator_address?: string;
            reporter_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator_address" in data && data.validator_address != undefined) {
                    this.validator_address = data.validator_address;
                }
                if ("reporter_address" in data && data.reporter_address != undefined) {
                    this.reporter_address = data.reporter_address;
                }
            }
        }
        get validator_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set validator_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get reporter_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set reporter_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            validator_address?: string;
            reporter_address?: string;
        }): QueryIsReporterRequest {
            const message = new QueryIsReporterRequest({});
            if (data.validator_address != null) {
                message.validator_address = data.validator_address;
            }
            if (data.reporter_address != null) {
                message.reporter_address = data.reporter_address;
            }
            return message;
        }
        toObject() {
            const data: {
                validator_address?: string;
                reporter_address?: string;
            } = {};
            if (this.validator_address != null) {
                data.validator_address = this.validator_address;
            }
            if (this.reporter_address != null) {
                data.reporter_address = this.reporter_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validator_address.length)
                writer.writeString(1, this.validator_address);
            if (this.reporter_address.length)
                writer.writeString(2, this.reporter_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryIsReporterRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryIsReporterRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.validator_address = reader.readString();
                        break;
                    case 2:
                        message.reporter_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryIsReporterRequest {
            return QueryIsReporterRequest.deserialize(bytes);
        }
    }
    export class QueryIsReporterResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            is_reporter?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_reporter" in data && data.is_reporter != undefined) {
                    this.is_reporter = data.is_reporter;
                }
            }
        }
        get is_reporter() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set is_reporter(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            is_reporter?: boolean;
        }): QueryIsReporterResponse {
            const message = new QueryIsReporterResponse({});
            if (data.is_reporter != null) {
                message.is_reporter = data.is_reporter;
            }
            return message;
        }
        toObject() {
            const data: {
                is_reporter?: boolean;
            } = {};
            if (this.is_reporter != null) {
                data.is_reporter = this.is_reporter;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_reporter != false)
                writer.writeBool(1, this.is_reporter);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryIsReporterResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryIsReporterResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_reporter = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryIsReporterResponse {
            return QueryIsReporterResponse.deserialize(bytes);
        }
    }
    export class QueryReportersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validator_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator_address" in data && data.validator_address != undefined) {
                    this.validator_address = data.validator_address;
                }
            }
        }
        get validator_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set validator_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            validator_address?: string;
        }): QueryReportersRequest {
            const message = new QueryReportersRequest({});
            if (data.validator_address != null) {
                message.validator_address = data.validator_address;
            }
            return message;
        }
        toObject() {
            const data: {
                validator_address?: string;
            } = {};
            if (this.validator_address != null) {
                data.validator_address = this.validator_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validator_address.length)
                writer.writeString(1, this.validator_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryReportersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryReportersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.validator_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryReportersRequest {
            return QueryReportersRequest.deserialize(bytes);
        }
    }
    export class QueryReportersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            reporter?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("reporter" in data && data.reporter != undefined) {
                    this.reporter = data.reporter;
                }
            }
        }
        get reporter() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set reporter(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            reporter?: string[];
        }): QueryReportersResponse {
            const message = new QueryReportersResponse({});
            if (data.reporter != null) {
                message.reporter = data.reporter;
            }
            return message;
        }
        toObject() {
            const data: {
                reporter?: string[];
            } = {};
            if (this.reporter != null) {
                data.reporter = this.reporter;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.reporter.length)
                writer.writeRepeatedString(1, this.reporter);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryReportersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryReportersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryReportersResponse {
            return QueryReportersResponse.deserialize(bytes);
        }
    }
    export class QueryActiveValidatorsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryActiveValidatorsRequest {
            const message = new QueryActiveValidatorsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryActiveValidatorsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryActiveValidatorsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryActiveValidatorsRequest {
            return QueryActiveValidatorsRequest.deserialize(bytes);
        }
    }
    export class QueryActiveValidatorsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validators?: dependency_4.band.oracle.v1.ActiveValidator[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validators" in data && data.validators != undefined) {
                    this.validators = data.validators;
                }
            }
        }
        get validators() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.band.oracle.v1.ActiveValidator, 1) as dependency_4.band.oracle.v1.ActiveValidator[];
        }
        set validators(value: dependency_4.band.oracle.v1.ActiveValidator[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            validators?: ReturnType<typeof dependency_4.band.oracle.v1.ActiveValidator.prototype.toObject>[];
        }): QueryActiveValidatorsResponse {
            const message = new QueryActiveValidatorsResponse({});
            if (data.validators != null) {
                message.validators = data.validators.map(item => dependency_4.band.oracle.v1.ActiveValidator.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                validators?: ReturnType<typeof dependency_4.band.oracle.v1.ActiveValidator.prototype.toObject>[];
            } = {};
            if (this.validators != null) {
                data.validators = this.validators.map((item: dependency_4.band.oracle.v1.ActiveValidator) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validators.length)
                writer.writeRepeatedMessage(1, this.validators, (item: dependency_4.band.oracle.v1.ActiveValidator) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryActiveValidatorsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryActiveValidatorsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.validators, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.band.oracle.v1.ActiveValidator.deserialize(reader), dependency_4.band.oracle.v1.ActiveValidator));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryActiveValidatorsResponse {
            return QueryActiveValidatorsResponse.deserialize(bytes);
        }
    }
    export class QueryRequestSearchRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            oracle_script_id?: number;
            calldata?: string;
            ask_count?: number;
            min_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("oracle_script_id" in data && data.oracle_script_id != undefined) {
                    this.oracle_script_id = data.oracle_script_id;
                }
                if ("calldata" in data && data.calldata != undefined) {
                    this.calldata = data.calldata;
                }
                if ("ask_count" in data && data.ask_count != undefined) {
                    this.ask_count = data.ask_count;
                }
                if ("min_count" in data && data.min_count != undefined) {
                    this.min_count = data.min_count;
                }
            }
        }
        get oracle_script_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set oracle_script_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get calldata() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set calldata(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get ask_count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set ask_count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get min_count() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set min_count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            oracle_script_id?: number;
            calldata?: string;
            ask_count?: number;
            min_count?: number;
        }): QueryRequestSearchRequest {
            const message = new QueryRequestSearchRequest({});
            if (data.oracle_script_id != null) {
                message.oracle_script_id = data.oracle_script_id;
            }
            if (data.calldata != null) {
                message.calldata = data.calldata;
            }
            if (data.ask_count != null) {
                message.ask_count = data.ask_count;
            }
            if (data.min_count != null) {
                message.min_count = data.min_count;
            }
            return message;
        }
        toObject() {
            const data: {
                oracle_script_id?: number;
                calldata?: string;
                ask_count?: number;
                min_count?: number;
            } = {};
            if (this.oracle_script_id != null) {
                data.oracle_script_id = this.oracle_script_id;
            }
            if (this.calldata != null) {
                data.calldata = this.calldata;
            }
            if (this.ask_count != null) {
                data.ask_count = this.ask_count;
            }
            if (this.min_count != null) {
                data.min_count = this.min_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.oracle_script_id != 0)
                writer.writeUint64(1, this.oracle_script_id);
            if (this.calldata.length)
                writer.writeString(2, this.calldata);
            if (this.ask_count != 0)
                writer.writeUint64(3, this.ask_count);
            if (this.min_count != 0)
                writer.writeUint64(4, this.min_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryRequestSearchRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryRequestSearchRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.oracle_script_id = reader.readUint64();
                        break;
                    case 2:
                        message.calldata = reader.readString();
                        break;
                    case 3:
                        message.ask_count = reader.readUint64();
                        break;
                    case 4:
                        message.min_count = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryRequestSearchRequest {
            return QueryRequestSearchRequest.deserialize(bytes);
        }
    }
    export class QueryRequestSearchResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request?: QueryRequestResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request" in data && data.request != undefined) {
                    this.request = data.request;
                }
            }
        }
        get request() {
            return pb_1.Message.getWrapperField(this, QueryRequestResponse, 1) as QueryRequestResponse;
        }
        set request(value: QueryRequestResponse) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            request?: ReturnType<typeof QueryRequestResponse.prototype.toObject>;
        }): QueryRequestSearchResponse {
            const message = new QueryRequestSearchResponse({});
            if (data.request != null) {
                message.request = QueryRequestResponse.fromObject(data.request);
            }
            return message;
        }
        toObject() {
            const data: {
                request?: ReturnType<typeof QueryRequestResponse.prototype.toObject>;
            } = {};
            if (this.request != null) {
                data.request = this.request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_request)
                writer.writeMessage(1, this.request, () => this.request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryRequestSearchResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryRequestSearchResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.request, () => message.request = QueryRequestResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryRequestSearchResponse {
            return QueryRequestSearchResponse.deserialize(bytes);
        }
    }
    export class QueryRequestPriceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            symbols?: string[];
            ask_count?: number;
            min_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("symbols" in data && data.symbols != undefined) {
                    this.symbols = data.symbols;
                }
                if ("ask_count" in data && data.ask_count != undefined) {
                    this.ask_count = data.ask_count;
                }
                if ("min_count" in data && data.min_count != undefined) {
                    this.min_count = data.min_count;
                }
            }
        }
        get symbols() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set symbols(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get ask_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set ask_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get min_count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set min_count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            symbols?: string[];
            ask_count?: number;
            min_count?: number;
        }): QueryRequestPriceRequest {
            const message = new QueryRequestPriceRequest({});
            if (data.symbols != null) {
                message.symbols = data.symbols;
            }
            if (data.ask_count != null) {
                message.ask_count = data.ask_count;
            }
            if (data.min_count != null) {
                message.min_count = data.min_count;
            }
            return message;
        }
        toObject() {
            const data: {
                symbols?: string[];
                ask_count?: number;
                min_count?: number;
            } = {};
            if (this.symbols != null) {
                data.symbols = this.symbols;
            }
            if (this.ask_count != null) {
                data.ask_count = this.ask_count;
            }
            if (this.min_count != null) {
                data.min_count = this.min_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.symbols.length)
                writer.writeRepeatedString(1, this.symbols);
            if (this.ask_count != 0)
                writer.writeUint64(2, this.ask_count);
            if (this.min_count != 0)
                writer.writeUint64(3, this.min_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryRequestPriceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryRequestPriceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        message.ask_count = reader.readUint64();
                        break;
                    case 3:
                        message.min_count = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryRequestPriceRequest {
            return QueryRequestPriceRequest.deserialize(bytes);
        }
    }
    export class QueryRequestPriceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            price_results?: dependency_4.band.oracle.v1.PriceResult[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("price_results" in data && data.price_results != undefined) {
                    this.price_results = data.price_results;
                }
            }
        }
        get price_results() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.band.oracle.v1.PriceResult, 1) as dependency_4.band.oracle.v1.PriceResult[];
        }
        set price_results(value: dependency_4.band.oracle.v1.PriceResult[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            price_results?: ReturnType<typeof dependency_4.band.oracle.v1.PriceResult.prototype.toObject>[];
        }): QueryRequestPriceResponse {
            const message = new QueryRequestPriceResponse({});
            if (data.price_results != null) {
                message.price_results = data.price_results.map(item => dependency_4.band.oracle.v1.PriceResult.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                price_results?: ReturnType<typeof dependency_4.band.oracle.v1.PriceResult.prototype.toObject>[];
            } = {};
            if (this.price_results != null) {
                data.price_results = this.price_results.map((item: dependency_4.band.oracle.v1.PriceResult) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.price_results.length)
                writer.writeRepeatedMessage(1, this.price_results, (item: dependency_4.band.oracle.v1.PriceResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryRequestPriceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryRequestPriceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.price_results, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.band.oracle.v1.PriceResult.deserialize(reader), dependency_4.band.oracle.v1.PriceResult));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryRequestPriceResponse {
            return QueryRequestPriceResponse.deserialize(bytes);
        }
    }
    export class QueryRequestVerificationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chain_id?: string;
            validator?: string;
            request_id?: number;
            external_id?: number;
            data_source_id?: number;
            reporter?: string;
            signature?: Uint8Array;
            max_delay?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chain_id" in data && data.chain_id != undefined) {
                    this.chain_id = data.chain_id;
                }
                if ("validator" in data && data.validator != undefined) {
                    this.validator = data.validator;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("external_id" in data && data.external_id != undefined) {
                    this.external_id = data.external_id;
                }
                if ("data_source_id" in data && data.data_source_id != undefined) {
                    this.data_source_id = data.data_source_id;
                }
                if ("reporter" in data && data.reporter != undefined) {
                    this.reporter = data.reporter;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("max_delay" in data && data.max_delay != undefined) {
                    this.max_delay = data.max_delay;
                }
            }
        }
        get chain_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set chain_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get validator() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set validator(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get external_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set external_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get data_source_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set data_source_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get reporter() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set reporter(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        get max_delay() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set max_delay(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            chain_id?: string;
            validator?: string;
            request_id?: number;
            external_id?: number;
            data_source_id?: number;
            reporter?: string;
            signature?: Uint8Array;
            max_delay?: number;
        }): QueryRequestVerificationRequest {
            const message = new QueryRequestVerificationRequest({});
            if (data.chain_id != null) {
                message.chain_id = data.chain_id;
            }
            if (data.validator != null) {
                message.validator = data.validator;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.external_id != null) {
                message.external_id = data.external_id;
            }
            if (data.data_source_id != null) {
                message.data_source_id = data.data_source_id;
            }
            if (data.reporter != null) {
                message.reporter = data.reporter;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            if (data.max_delay != null) {
                message.max_delay = data.max_delay;
            }
            return message;
        }
        toObject() {
            const data: {
                chain_id?: string;
                validator?: string;
                request_id?: number;
                external_id?: number;
                data_source_id?: number;
                reporter?: string;
                signature?: Uint8Array;
                max_delay?: number;
            } = {};
            if (this.chain_id != null) {
                data.chain_id = this.chain_id;
            }
            if (this.validator != null) {
                data.validator = this.validator;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.external_id != null) {
                data.external_id = this.external_id;
            }
            if (this.data_source_id != null) {
                data.data_source_id = this.data_source_id;
            }
            if (this.reporter != null) {
                data.reporter = this.reporter;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            if (this.max_delay != null) {
                data.max_delay = this.max_delay;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chain_id.length)
                writer.writeString(1, this.chain_id);
            if (this.validator.length)
                writer.writeString(2, this.validator);
            if (this.request_id != 0)
                writer.writeUint64(3, this.request_id);
            if (this.external_id != 0)
                writer.writeUint64(4, this.external_id);
            if (this.data_source_id != 0)
                writer.writeUint64(5, this.data_source_id);
            if (this.reporter.length)
                writer.writeString(6, this.reporter);
            if (this.signature.length)
                writer.writeBytes(7, this.signature);
            if (this.max_delay != 0)
                writer.writeUint64(8, this.max_delay);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryRequestVerificationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryRequestVerificationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chain_id = reader.readString();
                        break;
                    case 2:
                        message.validator = reader.readString();
                        break;
                    case 3:
                        message.request_id = reader.readUint64();
                        break;
                    case 4:
                        message.external_id = reader.readUint64();
                        break;
                    case 5:
                        message.data_source_id = reader.readUint64();
                        break;
                    case 6:
                        message.reporter = reader.readString();
                        break;
                    case 7:
                        message.signature = reader.readBytes();
                        break;
                    case 8:
                        message.max_delay = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryRequestVerificationRequest {
            return QueryRequestVerificationRequest.deserialize(bytes);
        }
    }
    export class QueryRequestVerificationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chain_id?: string;
            validator?: string;
            request_id?: number;
            external_id?: number;
            data_source_id?: number;
            is_delay?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chain_id" in data && data.chain_id != undefined) {
                    this.chain_id = data.chain_id;
                }
                if ("validator" in data && data.validator != undefined) {
                    this.validator = data.validator;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("external_id" in data && data.external_id != undefined) {
                    this.external_id = data.external_id;
                }
                if ("data_source_id" in data && data.data_source_id != undefined) {
                    this.data_source_id = data.data_source_id;
                }
                if ("is_delay" in data && data.is_delay != undefined) {
                    this.is_delay = data.is_delay;
                }
            }
        }
        get chain_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set chain_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get validator() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set validator(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get external_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set external_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get data_source_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set data_source_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get is_delay() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set is_delay(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            chain_id?: string;
            validator?: string;
            request_id?: number;
            external_id?: number;
            data_source_id?: number;
            is_delay?: boolean;
        }): QueryRequestVerificationResponse {
            const message = new QueryRequestVerificationResponse({});
            if (data.chain_id != null) {
                message.chain_id = data.chain_id;
            }
            if (data.validator != null) {
                message.validator = data.validator;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.external_id != null) {
                message.external_id = data.external_id;
            }
            if (data.data_source_id != null) {
                message.data_source_id = data.data_source_id;
            }
            if (data.is_delay != null) {
                message.is_delay = data.is_delay;
            }
            return message;
        }
        toObject() {
            const data: {
                chain_id?: string;
                validator?: string;
                request_id?: number;
                external_id?: number;
                data_source_id?: number;
                is_delay?: boolean;
            } = {};
            if (this.chain_id != null) {
                data.chain_id = this.chain_id;
            }
            if (this.validator != null) {
                data.validator = this.validator;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.external_id != null) {
                data.external_id = this.external_id;
            }
            if (this.data_source_id != null) {
                data.data_source_id = this.data_source_id;
            }
            if (this.is_delay != null) {
                data.is_delay = this.is_delay;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chain_id.length)
                writer.writeString(1, this.chain_id);
            if (this.validator.length)
                writer.writeString(2, this.validator);
            if (this.request_id != 0)
                writer.writeUint64(3, this.request_id);
            if (this.external_id != 0)
                writer.writeUint64(4, this.external_id);
            if (this.data_source_id != 0)
                writer.writeUint64(5, this.data_source_id);
            if (this.is_delay != false)
                writer.writeBool(6, this.is_delay);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryRequestVerificationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryRequestVerificationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chain_id = reader.readString();
                        break;
                    case 2:
                        message.validator = reader.readString();
                        break;
                    case 3:
                        message.request_id = reader.readUint64();
                        break;
                    case 4:
                        message.external_id = reader.readUint64();
                        break;
                    case 5:
                        message.data_source_id = reader.readUint64();
                        break;
                    case 6:
                        message.is_delay = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryRequestVerificationResponse {
            return QueryRequestVerificationResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedQueryService {
        static definition = {
            Counts: {
                path: "/band.oracle.v1.Query/Counts",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryCountsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryCountsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryCountsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryCountsResponse.deserialize(new Uint8Array(bytes))
            },
            Data: {
                path: "/band.oracle.v1.Query/Data",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryDataRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryDataRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryDataResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryDataResponse.deserialize(new Uint8Array(bytes))
            },
            DataSource: {
                path: "/band.oracle.v1.Query/DataSource",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryDataSourceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryDataSourceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryDataSourceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryDataSourceResponse.deserialize(new Uint8Array(bytes))
            },
            OracleScript: {
                path: "/band.oracle.v1.Query/OracleScript",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryOracleScriptRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryOracleScriptRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryOracleScriptResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryOracleScriptResponse.deserialize(new Uint8Array(bytes))
            },
            Request: {
                path: "/band.oracle.v1.Query/Request",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryRequestRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryRequestRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryRequestResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryRequestResponse.deserialize(new Uint8Array(bytes))
            },
            PendingRequests: {
                path: "/band.oracle.v1.Query/PendingRequests",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryPendingRequestsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryPendingRequestsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryPendingRequestsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryPendingRequestsResponse.deserialize(new Uint8Array(bytes))
            },
            Validator: {
                path: "/band.oracle.v1.Query/Validator",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryValidatorRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryValidatorRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryValidatorResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryValidatorResponse.deserialize(new Uint8Array(bytes))
            },
            IsReporter: {
                path: "/band.oracle.v1.Query/IsReporter",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryIsReporterRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryIsReporterRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryIsReporterResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryIsReporterResponse.deserialize(new Uint8Array(bytes))
            },
            Reporters: {
                path: "/band.oracle.v1.Query/Reporters",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryReportersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryReportersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryReportersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryReportersResponse.deserialize(new Uint8Array(bytes))
            },
            ActiveValidators: {
                path: "/band.oracle.v1.Query/ActiveValidators",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryActiveValidatorsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryActiveValidatorsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryActiveValidatorsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryActiveValidatorsResponse.deserialize(new Uint8Array(bytes))
            },
            Params: {
                path: "/band.oracle.v1.Query/Params",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryParamsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryParamsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryParamsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryParamsResponse.deserialize(new Uint8Array(bytes))
            },
            RequestSearch: {
                path: "/band.oracle.v1.Query/RequestSearch",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryRequestSearchRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryRequestSearchRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryRequestSearchResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryRequestSearchResponse.deserialize(new Uint8Array(bytes))
            },
            RequestPrice: {
                path: "/band.oracle.v1.Query/RequestPrice",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryRequestPriceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryRequestPriceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryRequestPriceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryRequestPriceResponse.deserialize(new Uint8Array(bytes))
            },
            RequestVerification: {
                path: "/band.oracle.v1.Query/RequestVerification",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryRequestVerificationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryRequestVerificationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryRequestVerificationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryRequestVerificationResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Counts(call: grpc_1.ServerUnaryCall<QueryCountsRequest, QueryCountsResponse>, callback: grpc_1.sendUnaryData<QueryCountsResponse>): void;
        abstract Data(call: grpc_1.ServerUnaryCall<QueryDataRequest, QueryDataResponse>, callback: grpc_1.sendUnaryData<QueryDataResponse>): void;
        abstract DataSource(call: grpc_1.ServerUnaryCall<QueryDataSourceRequest, QueryDataSourceResponse>, callback: grpc_1.sendUnaryData<QueryDataSourceResponse>): void;
        abstract OracleScript(call: grpc_1.ServerUnaryCall<QueryOracleScriptRequest, QueryOracleScriptResponse>, callback: grpc_1.sendUnaryData<QueryOracleScriptResponse>): void;
        abstract Request(call: grpc_1.ServerUnaryCall<QueryRequestRequest, QueryRequestResponse>, callback: grpc_1.sendUnaryData<QueryRequestResponse>): void;
        abstract PendingRequests(call: grpc_1.ServerUnaryCall<QueryPendingRequestsRequest, QueryPendingRequestsResponse>, callback: grpc_1.sendUnaryData<QueryPendingRequestsResponse>): void;
        abstract Validator(call: grpc_1.ServerUnaryCall<QueryValidatorRequest, QueryValidatorResponse>, callback: grpc_1.sendUnaryData<QueryValidatorResponse>): void;
        abstract IsReporter(call: grpc_1.ServerUnaryCall<QueryIsReporterRequest, QueryIsReporterResponse>, callback: grpc_1.sendUnaryData<QueryIsReporterResponse>): void;
        abstract Reporters(call: grpc_1.ServerUnaryCall<QueryReportersRequest, QueryReportersResponse>, callback: grpc_1.sendUnaryData<QueryReportersResponse>): void;
        abstract ActiveValidators(call: grpc_1.ServerUnaryCall<QueryActiveValidatorsRequest, QueryActiveValidatorsResponse>, callback: grpc_1.sendUnaryData<QueryActiveValidatorsResponse>): void;
        abstract Params(call: grpc_1.ServerUnaryCall<QueryParamsRequest, QueryParamsResponse>, callback: grpc_1.sendUnaryData<QueryParamsResponse>): void;
        abstract RequestSearch(call: grpc_1.ServerUnaryCall<QueryRequestSearchRequest, QueryRequestSearchResponse>, callback: grpc_1.sendUnaryData<QueryRequestSearchResponse>): void;
        abstract RequestPrice(call: grpc_1.ServerUnaryCall<QueryRequestPriceRequest, QueryRequestPriceResponse>, callback: grpc_1.sendUnaryData<QueryRequestPriceResponse>): void;
        abstract RequestVerification(call: grpc_1.ServerUnaryCall<QueryRequestVerificationRequest, QueryRequestVerificationResponse>, callback: grpc_1.sendUnaryData<QueryRequestVerificationResponse>): void;
    }
    export class QueryClient extends grpc_1.makeGenericClientConstructor(UnimplementedQueryService.definition, "Query", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Counts: GrpcUnaryServiceInterface<QueryCountsRequest, QueryCountsResponse> = (message: QueryCountsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryCountsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryCountsResponse>, callback?: grpc_1.requestCallback<QueryCountsResponse>): grpc_1.ClientUnaryCall => {
            return super.Counts(message, metadata, options, callback);
        };
        Data: GrpcUnaryServiceInterface<QueryDataRequest, QueryDataResponse> = (message: QueryDataRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryDataResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryDataResponse>, callback?: grpc_1.requestCallback<QueryDataResponse>): grpc_1.ClientUnaryCall => {
            return super.Data(message, metadata, options, callback);
        };
        DataSource: GrpcUnaryServiceInterface<QueryDataSourceRequest, QueryDataSourceResponse> = (message: QueryDataSourceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryDataSourceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryDataSourceResponse>, callback?: grpc_1.requestCallback<QueryDataSourceResponse>): grpc_1.ClientUnaryCall => {
            return super.DataSource(message, metadata, options, callback);
        };
        OracleScript: GrpcUnaryServiceInterface<QueryOracleScriptRequest, QueryOracleScriptResponse> = (message: QueryOracleScriptRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryOracleScriptResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryOracleScriptResponse>, callback?: grpc_1.requestCallback<QueryOracleScriptResponse>): grpc_1.ClientUnaryCall => {
            return super.OracleScript(message, metadata, options, callback);
        };
        Request: GrpcUnaryServiceInterface<QueryRequestRequest, QueryRequestResponse> = (message: QueryRequestRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryRequestResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryRequestResponse>, callback?: grpc_1.requestCallback<QueryRequestResponse>): grpc_1.ClientUnaryCall => {
            return super.Request(message, metadata, options, callback);
        };
        PendingRequests: GrpcUnaryServiceInterface<QueryPendingRequestsRequest, QueryPendingRequestsResponse> = (message: QueryPendingRequestsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryPendingRequestsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryPendingRequestsResponse>, callback?: grpc_1.requestCallback<QueryPendingRequestsResponse>): grpc_1.ClientUnaryCall => {
            return super.PendingRequests(message, metadata, options, callback);
        };
        Validator: GrpcUnaryServiceInterface<QueryValidatorRequest, QueryValidatorResponse> = (message: QueryValidatorRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryValidatorResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryValidatorResponse>, callback?: grpc_1.requestCallback<QueryValidatorResponse>): grpc_1.ClientUnaryCall => {
            return super.Validator(message, metadata, options, callback);
        };
        IsReporter: GrpcUnaryServiceInterface<QueryIsReporterRequest, QueryIsReporterResponse> = (message: QueryIsReporterRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryIsReporterResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryIsReporterResponse>, callback?: grpc_1.requestCallback<QueryIsReporterResponse>): grpc_1.ClientUnaryCall => {
            return super.IsReporter(message, metadata, options, callback);
        };
        Reporters: GrpcUnaryServiceInterface<QueryReportersRequest, QueryReportersResponse> = (message: QueryReportersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryReportersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryReportersResponse>, callback?: grpc_1.requestCallback<QueryReportersResponse>): grpc_1.ClientUnaryCall => {
            return super.Reporters(message, metadata, options, callback);
        };
        ActiveValidators: GrpcUnaryServiceInterface<QueryActiveValidatorsRequest, QueryActiveValidatorsResponse> = (message: QueryActiveValidatorsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryActiveValidatorsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryActiveValidatorsResponse>, callback?: grpc_1.requestCallback<QueryActiveValidatorsResponse>): grpc_1.ClientUnaryCall => {
            return super.ActiveValidators(message, metadata, options, callback);
        };
        Params: GrpcUnaryServiceInterface<QueryParamsRequest, QueryParamsResponse> = (message: QueryParamsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryParamsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryParamsResponse>, callback?: grpc_1.requestCallback<QueryParamsResponse>): grpc_1.ClientUnaryCall => {
            return super.Params(message, metadata, options, callback);
        };
        RequestSearch: GrpcUnaryServiceInterface<QueryRequestSearchRequest, QueryRequestSearchResponse> = (message: QueryRequestSearchRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryRequestSearchResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryRequestSearchResponse>, callback?: grpc_1.requestCallback<QueryRequestSearchResponse>): grpc_1.ClientUnaryCall => {
            return super.RequestSearch(message, metadata, options, callback);
        };
        RequestPrice: GrpcUnaryServiceInterface<QueryRequestPriceRequest, QueryRequestPriceResponse> = (message: QueryRequestPriceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryRequestPriceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryRequestPriceResponse>, callback?: grpc_1.requestCallback<QueryRequestPriceResponse>): grpc_1.ClientUnaryCall => {
            return super.RequestPrice(message, metadata, options, callback);
        };
        RequestVerification: GrpcUnaryServiceInterface<QueryRequestVerificationRequest, QueryRequestVerificationResponse> = (message: QueryRequestVerificationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryRequestVerificationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryRequestVerificationResponse>, callback?: grpc_1.requestCallback<QueryRequestVerificationResponse>): grpc_1.ClientUnaryCall => {
            return super.RequestVerification(message, metadata, options, callback);
        };
    }
}
