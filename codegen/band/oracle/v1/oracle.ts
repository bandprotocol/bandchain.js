/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/oracle/v1/oracle.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../../../google/protobuf/timestamp";
import * as dependency_3 from "./../../../cosmos/base/v1beta1/coin";
import * as pb_1 from "google-protobuf";
export namespace band.oracle.v1 {
    export enum ResolveStatus {
        RESOLVE_STATUS_OPEN_UNSPECIFIED = 0,
        RESOLVE_STATUS_SUCCESS = 1,
        RESOLVE_STATUS_FAILURE = 2,
        RESOLVE_STATUS_EXPIRED = 3
    }
    export enum Encoder {
        ENCODER_UNSPECIFIED = 0,
        ENCODER_PROTO = 1,
        ENCODER_FULL_ABI = 2,
        ENCODER_PARTIAL_ABI = 3
    }
    export class DataSource extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner?: string;
            name?: string;
            description?: string;
            filename?: string;
            treasury?: string;
            fee?: dependency_3.cosmos.base.v1beta1.Coin[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("filename" in data && data.filename != undefined) {
                    this.filename = data.filename;
                }
                if ("treasury" in data && data.treasury != undefined) {
                    this.treasury = data.treasury;
                }
                if ("fee" in data && data.fee != undefined) {
                    this.fee = data.fee;
                }
            }
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get filename() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set filename(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get treasury() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set treasury(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get fee() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.cosmos.base.v1beta1.Coin, 6) as dependency_3.cosmos.base.v1beta1.Coin[];
        }
        set fee(value: dependency_3.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            owner?: string;
            name?: string;
            description?: string;
            filename?: string;
            treasury?: string;
            fee?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>[];
        }): DataSource {
            const message = new DataSource({});
            if (data.owner != null) {
                message.owner = data.owner;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.filename != null) {
                message.filename = data.filename;
            }
            if (data.treasury != null) {
                message.treasury = data.treasury;
            }
            if (data.fee != null) {
                message.fee = data.fee.map(item => dependency_3.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                owner?: string;
                name?: string;
                description?: string;
                filename?: string;
                treasury?: string;
                fee?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            } = {};
            if (this.owner != null) {
                data.owner = this.owner;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.filename != null) {
                data.filename = this.filename;
            }
            if (this.treasury != null) {
                data.treasury = this.treasury;
            }
            if (this.fee != null) {
                data.fee = this.fee.map((item: dependency_3.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner.length)
                writer.writeString(1, this.owner);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.filename.length)
                writer.writeString(4, this.filename);
            if (this.treasury.length)
                writer.writeString(5, this.treasury);
            if (this.fee.length)
                writer.writeRepeatedMessage(6, this.fee, (item: dependency_3.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataSource {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataSource();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.filename = reader.readString();
                        break;
                    case 5:
                        message.treasury = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.fee, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_3.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_3.cosmos.base.v1beta1.Coin));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DataSource {
            return DataSource.deserialize(bytes);
        }
    }
    export class OracleScript extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner?: string;
            name?: string;
            description?: string;
            filename?: string;
            schema?: string;
            source_code_url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("filename" in data && data.filename != undefined) {
                    this.filename = data.filename;
                }
                if ("schema" in data && data.schema != undefined) {
                    this.schema = data.schema;
                }
                if ("source_code_url" in data && data.source_code_url != undefined) {
                    this.source_code_url = data.source_code_url;
                }
            }
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get filename() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set filename(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get schema() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set schema(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get source_code_url() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set source_code_url(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            owner?: string;
            name?: string;
            description?: string;
            filename?: string;
            schema?: string;
            source_code_url?: string;
        }): OracleScript {
            const message = new OracleScript({});
            if (data.owner != null) {
                message.owner = data.owner;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.filename != null) {
                message.filename = data.filename;
            }
            if (data.schema != null) {
                message.schema = data.schema;
            }
            if (data.source_code_url != null) {
                message.source_code_url = data.source_code_url;
            }
            return message;
        }
        toObject() {
            const data: {
                owner?: string;
                name?: string;
                description?: string;
                filename?: string;
                schema?: string;
                source_code_url?: string;
            } = {};
            if (this.owner != null) {
                data.owner = this.owner;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.filename != null) {
                data.filename = this.filename;
            }
            if (this.schema != null) {
                data.schema = this.schema;
            }
            if (this.source_code_url != null) {
                data.source_code_url = this.source_code_url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner.length)
                writer.writeString(1, this.owner);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.filename.length)
                writer.writeString(4, this.filename);
            if (this.schema.length)
                writer.writeString(5, this.schema);
            if (this.source_code_url.length)
                writer.writeString(6, this.source_code_url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OracleScript {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OracleScript();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.filename = reader.readString();
                        break;
                    case 5:
                        message.schema = reader.readString();
                        break;
                    case 6:
                        message.source_code_url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OracleScript {
            return OracleScript.deserialize(bytes);
        }
    }
    export class RawRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            external_id?: number;
            data_source_id?: number;
            calldata?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("external_id" in data && data.external_id != undefined) {
                    this.external_id = data.external_id;
                }
                if ("data_source_id" in data && data.data_source_id != undefined) {
                    this.data_source_id = data.data_source_id;
                }
                if ("calldata" in data && data.calldata != undefined) {
                    this.calldata = data.calldata;
                }
            }
        }
        get external_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set external_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get data_source_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set data_source_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get calldata() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set calldata(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            external_id?: number;
            data_source_id?: number;
            calldata?: Uint8Array;
        }): RawRequest {
            const message = new RawRequest({});
            if (data.external_id != null) {
                message.external_id = data.external_id;
            }
            if (data.data_source_id != null) {
                message.data_source_id = data.data_source_id;
            }
            if (data.calldata != null) {
                message.calldata = data.calldata;
            }
            return message;
        }
        toObject() {
            const data: {
                external_id?: number;
                data_source_id?: number;
                calldata?: Uint8Array;
            } = {};
            if (this.external_id != null) {
                data.external_id = this.external_id;
            }
            if (this.data_source_id != null) {
                data.data_source_id = this.data_source_id;
            }
            if (this.calldata != null) {
                data.calldata = this.calldata;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.external_id != 0)
                writer.writeUint64(1, this.external_id);
            if (this.data_source_id != 0)
                writer.writeUint64(2, this.data_source_id);
            if (this.calldata.length)
                writer.writeBytes(3, this.calldata);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RawRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RawRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.external_id = reader.readUint64();
                        break;
                    case 2:
                        message.data_source_id = reader.readUint64();
                        break;
                    case 3:
                        message.calldata = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RawRequest {
            return RawRequest.deserialize(bytes);
        }
    }
    export class RawReport extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            external_id?: number;
            exit_code?: number;
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("external_id" in data && data.external_id != undefined) {
                    this.external_id = data.external_id;
                }
                if ("exit_code" in data && data.exit_code != undefined) {
                    this.exit_code = data.exit_code;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get external_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set external_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get exit_code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set exit_code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            external_id?: number;
            exit_code?: number;
            data?: Uint8Array;
        }): RawReport {
            const message = new RawReport({});
            if (data.external_id != null) {
                message.external_id = data.external_id;
            }
            if (data.exit_code != null) {
                message.exit_code = data.exit_code;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                external_id?: number;
                exit_code?: number;
                data?: Uint8Array;
            } = {};
            if (this.external_id != null) {
                data.external_id = this.external_id;
            }
            if (this.exit_code != null) {
                data.exit_code = this.exit_code;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.external_id != 0)
                writer.writeUint64(1, this.external_id);
            if (this.exit_code != 0)
                writer.writeUint32(2, this.exit_code);
            if (this.data.length)
                writer.writeBytes(3, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RawReport {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RawReport();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.external_id = reader.readUint64();
                        break;
                    case 2:
                        message.exit_code = reader.readUint32();
                        break;
                    case 3:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RawReport {
            return RawReport.deserialize(bytes);
        }
    }
    export class Request extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            oracle_script_id?: number;
            calldata?: Uint8Array;
            requested_validators?: string[];
            min_count?: number;
            request_height?: number;
            request_time?: number;
            client_id?: string;
            raw_requests?: RawRequest[];
            ibc_channel?: IBCChannel;
            execute_gas?: number;
            tss_encoder?: Encoder;
            requester?: string;
            fee_limit?: dependency_3.cosmos.base.v1beta1.Coin[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 8, 13], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("oracle_script_id" in data && data.oracle_script_id != undefined) {
                    this.oracle_script_id = data.oracle_script_id;
                }
                if ("calldata" in data && data.calldata != undefined) {
                    this.calldata = data.calldata;
                }
                if ("requested_validators" in data && data.requested_validators != undefined) {
                    this.requested_validators = data.requested_validators;
                }
                if ("min_count" in data && data.min_count != undefined) {
                    this.min_count = data.min_count;
                }
                if ("request_height" in data && data.request_height != undefined) {
                    this.request_height = data.request_height;
                }
                if ("request_time" in data && data.request_time != undefined) {
                    this.request_time = data.request_time;
                }
                if ("client_id" in data && data.client_id != undefined) {
                    this.client_id = data.client_id;
                }
                if ("raw_requests" in data && data.raw_requests != undefined) {
                    this.raw_requests = data.raw_requests;
                }
                if ("ibc_channel" in data && data.ibc_channel != undefined) {
                    this.ibc_channel = data.ibc_channel;
                }
                if ("execute_gas" in data && data.execute_gas != undefined) {
                    this.execute_gas = data.execute_gas;
                }
                if ("tss_encoder" in data && data.tss_encoder != undefined) {
                    this.tss_encoder = data.tss_encoder;
                }
                if ("requester" in data && data.requester != undefined) {
                    this.requester = data.requester;
                }
                if ("fee_limit" in data && data.fee_limit != undefined) {
                    this.fee_limit = data.fee_limit;
                }
            }
        }
        get oracle_script_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set oracle_script_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get calldata() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set calldata(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get requested_validators() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set requested_validators(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get min_count() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set min_count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get request_height() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set request_height(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get request_time() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set request_time(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get client_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set client_id(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get raw_requests() {
            return pb_1.Message.getRepeatedWrapperField(this, RawRequest, 8) as RawRequest[];
        }
        set raw_requests(value: RawRequest[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get ibc_channel() {
            return pb_1.Message.getWrapperField(this, IBCChannel, 9) as IBCChannel;
        }
        set ibc_channel(value: IBCChannel) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_ibc_channel() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get execute_gas() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set execute_gas(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get tss_encoder() {
            return pb_1.Message.getFieldWithDefault(this, 11, Encoder.ENCODER_UNSPECIFIED) as Encoder;
        }
        set tss_encoder(value: Encoder) {
            pb_1.Message.setField(this, 11, value);
        }
        get requester() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set requester(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get fee_limit() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.cosmos.base.v1beta1.Coin, 13) as dependency_3.cosmos.base.v1beta1.Coin[];
        }
        set fee_limit(value: dependency_3.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 13, value);
        }
        static fromObject(data: {
            oracle_script_id?: number;
            calldata?: Uint8Array;
            requested_validators?: string[];
            min_count?: number;
            request_height?: number;
            request_time?: number;
            client_id?: string;
            raw_requests?: ReturnType<typeof RawRequest.prototype.toObject>[];
            ibc_channel?: ReturnType<typeof IBCChannel.prototype.toObject>;
            execute_gas?: number;
            tss_encoder?: Encoder;
            requester?: string;
            fee_limit?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>[];
        }): Request {
            const message = new Request({});
            if (data.oracle_script_id != null) {
                message.oracle_script_id = data.oracle_script_id;
            }
            if (data.calldata != null) {
                message.calldata = data.calldata;
            }
            if (data.requested_validators != null) {
                message.requested_validators = data.requested_validators;
            }
            if (data.min_count != null) {
                message.min_count = data.min_count;
            }
            if (data.request_height != null) {
                message.request_height = data.request_height;
            }
            if (data.request_time != null) {
                message.request_time = data.request_time;
            }
            if (data.client_id != null) {
                message.client_id = data.client_id;
            }
            if (data.raw_requests != null) {
                message.raw_requests = data.raw_requests.map(item => RawRequest.fromObject(item));
            }
            if (data.ibc_channel != null) {
                message.ibc_channel = IBCChannel.fromObject(data.ibc_channel);
            }
            if (data.execute_gas != null) {
                message.execute_gas = data.execute_gas;
            }
            if (data.tss_encoder != null) {
                message.tss_encoder = data.tss_encoder;
            }
            if (data.requester != null) {
                message.requester = data.requester;
            }
            if (data.fee_limit != null) {
                message.fee_limit = data.fee_limit.map(item => dependency_3.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                oracle_script_id?: number;
                calldata?: Uint8Array;
                requested_validators?: string[];
                min_count?: number;
                request_height?: number;
                request_time?: number;
                client_id?: string;
                raw_requests?: ReturnType<typeof RawRequest.prototype.toObject>[];
                ibc_channel?: ReturnType<typeof IBCChannel.prototype.toObject>;
                execute_gas?: number;
                tss_encoder?: Encoder;
                requester?: string;
                fee_limit?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            } = {};
            if (this.oracle_script_id != null) {
                data.oracle_script_id = this.oracle_script_id;
            }
            if (this.calldata != null) {
                data.calldata = this.calldata;
            }
            if (this.requested_validators != null) {
                data.requested_validators = this.requested_validators;
            }
            if (this.min_count != null) {
                data.min_count = this.min_count;
            }
            if (this.request_height != null) {
                data.request_height = this.request_height;
            }
            if (this.request_time != null) {
                data.request_time = this.request_time;
            }
            if (this.client_id != null) {
                data.client_id = this.client_id;
            }
            if (this.raw_requests != null) {
                data.raw_requests = this.raw_requests.map((item: RawRequest) => item.toObject());
            }
            if (this.ibc_channel != null) {
                data.ibc_channel = this.ibc_channel.toObject();
            }
            if (this.execute_gas != null) {
                data.execute_gas = this.execute_gas;
            }
            if (this.tss_encoder != null) {
                data.tss_encoder = this.tss_encoder;
            }
            if (this.requester != null) {
                data.requester = this.requester;
            }
            if (this.fee_limit != null) {
                data.fee_limit = this.fee_limit.map((item: dependency_3.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.oracle_script_id != 0)
                writer.writeUint64(1, this.oracle_script_id);
            if (this.calldata.length)
                writer.writeBytes(2, this.calldata);
            if (this.requested_validators.length)
                writer.writeRepeatedString(3, this.requested_validators);
            if (this.min_count != 0)
                writer.writeUint64(4, this.min_count);
            if (this.request_height != 0)
                writer.writeInt64(5, this.request_height);
            if (this.request_time != 0)
                writer.writeInt64(6, this.request_time);
            if (this.client_id.length)
                writer.writeString(7, this.client_id);
            if (this.raw_requests.length)
                writer.writeRepeatedMessage(8, this.raw_requests, (item: RawRequest) => item.serialize(writer));
            if (this.has_ibc_channel)
                writer.writeMessage(9, this.ibc_channel, () => this.ibc_channel.serialize(writer));
            if (this.execute_gas != 0)
                writer.writeUint64(10, this.execute_gas);
            if (this.tss_encoder != Encoder.ENCODER_UNSPECIFIED)
                writer.writeEnum(11, this.tss_encoder);
            if (this.requester.length)
                writer.writeString(12, this.requester);
            if (this.fee_limit.length)
                writer.writeRepeatedMessage(13, this.fee_limit, (item: dependency_3.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.oracle_script_id = reader.readUint64();
                        break;
                    case 2:
                        message.calldata = reader.readBytes();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.min_count = reader.readUint64();
                        break;
                    case 5:
                        message.request_height = reader.readInt64();
                        break;
                    case 6:
                        message.request_time = reader.readInt64();
                        break;
                    case 7:
                        message.client_id = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.raw_requests, () => pb_1.Message.addToRepeatedWrapperField(message, 8, RawRequest.deserialize(reader), RawRequest));
                        break;
                    case 9:
                        reader.readMessage(message.ibc_channel, () => message.ibc_channel = IBCChannel.deserialize(reader));
                        break;
                    case 10:
                        message.execute_gas = reader.readUint64();
                        break;
                    case 11:
                        message.tss_encoder = reader.readEnum();
                        break;
                    case 12:
                        message.requester = reader.readString();
                        break;
                    case 13:
                        reader.readMessage(message.fee_limit, () => pb_1.Message.addToRepeatedWrapperField(message, 13, dependency_3.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_3.cosmos.base.v1beta1.Coin));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Request {
            return Request.deserialize(bytes);
        }
    }
    export class Report extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validator?: string;
            in_before_resolve?: boolean;
            raw_reports?: RawReport[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator" in data && data.validator != undefined) {
                    this.validator = data.validator;
                }
                if ("in_before_resolve" in data && data.in_before_resolve != undefined) {
                    this.in_before_resolve = data.in_before_resolve;
                }
                if ("raw_reports" in data && data.raw_reports != undefined) {
                    this.raw_reports = data.raw_reports;
                }
            }
        }
        get validator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set validator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get in_before_resolve() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set in_before_resolve(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get raw_reports() {
            return pb_1.Message.getRepeatedWrapperField(this, RawReport, 3) as RawReport[];
        }
        set raw_reports(value: RawReport[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            validator?: string;
            in_before_resolve?: boolean;
            raw_reports?: ReturnType<typeof RawReport.prototype.toObject>[];
        }): Report {
            const message = new Report({});
            if (data.validator != null) {
                message.validator = data.validator;
            }
            if (data.in_before_resolve != null) {
                message.in_before_resolve = data.in_before_resolve;
            }
            if (data.raw_reports != null) {
                message.raw_reports = data.raw_reports.map(item => RawReport.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                validator?: string;
                in_before_resolve?: boolean;
                raw_reports?: ReturnType<typeof RawReport.prototype.toObject>[];
            } = {};
            if (this.validator != null) {
                data.validator = this.validator;
            }
            if (this.in_before_resolve != null) {
                data.in_before_resolve = this.in_before_resolve;
            }
            if (this.raw_reports != null) {
                data.raw_reports = this.raw_reports.map((item: RawReport) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validator.length)
                writer.writeString(1, this.validator);
            if (this.in_before_resolve != false)
                writer.writeBool(2, this.in_before_resolve);
            if (this.raw_reports.length)
                writer.writeRepeatedMessage(3, this.raw_reports, (item: RawReport) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Report {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Report();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.validator = reader.readString();
                        break;
                    case 2:
                        message.in_before_resolve = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.raw_reports, () => pb_1.Message.addToRepeatedWrapperField(message, 3, RawReport.deserialize(reader), RawReport));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Report {
            return Report.deserialize(bytes);
        }
    }
    export class OracleRequestPacketData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            client_id?: string;
            oracle_script_id?: number;
            calldata?: Uint8Array;
            ask_count?: number;
            min_count?: number;
            fee_limit?: dependency_3.cosmos.base.v1beta1.Coin[];
            prepare_gas?: number;
            execute_gas?: number;
            tss_encoder?: Encoder;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("client_id" in data && data.client_id != undefined) {
                    this.client_id = data.client_id;
                }
                if ("oracle_script_id" in data && data.oracle_script_id != undefined) {
                    this.oracle_script_id = data.oracle_script_id;
                }
                if ("calldata" in data && data.calldata != undefined) {
                    this.calldata = data.calldata;
                }
                if ("ask_count" in data && data.ask_count != undefined) {
                    this.ask_count = data.ask_count;
                }
                if ("min_count" in data && data.min_count != undefined) {
                    this.min_count = data.min_count;
                }
                if ("fee_limit" in data && data.fee_limit != undefined) {
                    this.fee_limit = data.fee_limit;
                }
                if ("prepare_gas" in data && data.prepare_gas != undefined) {
                    this.prepare_gas = data.prepare_gas;
                }
                if ("execute_gas" in data && data.execute_gas != undefined) {
                    this.execute_gas = data.execute_gas;
                }
                if ("tss_encoder" in data && data.tss_encoder != undefined) {
                    this.tss_encoder = data.tss_encoder;
                }
            }
        }
        get client_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set client_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get oracle_script_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set oracle_script_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get calldata() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set calldata(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get ask_count() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set ask_count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get min_count() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set min_count(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get fee_limit() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.cosmos.base.v1beta1.Coin, 6) as dependency_3.cosmos.base.v1beta1.Coin[];
        }
        set fee_limit(value: dependency_3.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get prepare_gas() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set prepare_gas(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get execute_gas() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set execute_gas(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get tss_encoder() {
            return pb_1.Message.getFieldWithDefault(this, 9, Encoder.ENCODER_UNSPECIFIED) as Encoder;
        }
        set tss_encoder(value: Encoder) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            client_id?: string;
            oracle_script_id?: number;
            calldata?: Uint8Array;
            ask_count?: number;
            min_count?: number;
            fee_limit?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            prepare_gas?: number;
            execute_gas?: number;
            tss_encoder?: Encoder;
        }): OracleRequestPacketData {
            const message = new OracleRequestPacketData({});
            if (data.client_id != null) {
                message.client_id = data.client_id;
            }
            if (data.oracle_script_id != null) {
                message.oracle_script_id = data.oracle_script_id;
            }
            if (data.calldata != null) {
                message.calldata = data.calldata;
            }
            if (data.ask_count != null) {
                message.ask_count = data.ask_count;
            }
            if (data.min_count != null) {
                message.min_count = data.min_count;
            }
            if (data.fee_limit != null) {
                message.fee_limit = data.fee_limit.map(item => dependency_3.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            if (data.prepare_gas != null) {
                message.prepare_gas = data.prepare_gas;
            }
            if (data.execute_gas != null) {
                message.execute_gas = data.execute_gas;
            }
            if (data.tss_encoder != null) {
                message.tss_encoder = data.tss_encoder;
            }
            return message;
        }
        toObject() {
            const data: {
                client_id?: string;
                oracle_script_id?: number;
                calldata?: Uint8Array;
                ask_count?: number;
                min_count?: number;
                fee_limit?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>[];
                prepare_gas?: number;
                execute_gas?: number;
                tss_encoder?: Encoder;
            } = {};
            if (this.client_id != null) {
                data.client_id = this.client_id;
            }
            if (this.oracle_script_id != null) {
                data.oracle_script_id = this.oracle_script_id;
            }
            if (this.calldata != null) {
                data.calldata = this.calldata;
            }
            if (this.ask_count != null) {
                data.ask_count = this.ask_count;
            }
            if (this.min_count != null) {
                data.min_count = this.min_count;
            }
            if (this.fee_limit != null) {
                data.fee_limit = this.fee_limit.map((item: dependency_3.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            if (this.prepare_gas != null) {
                data.prepare_gas = this.prepare_gas;
            }
            if (this.execute_gas != null) {
                data.execute_gas = this.execute_gas;
            }
            if (this.tss_encoder != null) {
                data.tss_encoder = this.tss_encoder;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.client_id.length)
                writer.writeString(1, this.client_id);
            if (this.oracle_script_id != 0)
                writer.writeUint64(2, this.oracle_script_id);
            if (this.calldata.length)
                writer.writeBytes(3, this.calldata);
            if (this.ask_count != 0)
                writer.writeUint64(4, this.ask_count);
            if (this.min_count != 0)
                writer.writeUint64(5, this.min_count);
            if (this.fee_limit.length)
                writer.writeRepeatedMessage(6, this.fee_limit, (item: dependency_3.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (this.prepare_gas != 0)
                writer.writeUint64(7, this.prepare_gas);
            if (this.execute_gas != 0)
                writer.writeUint64(8, this.execute_gas);
            if (this.tss_encoder != Encoder.ENCODER_UNSPECIFIED)
                writer.writeEnum(9, this.tss_encoder);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OracleRequestPacketData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OracleRequestPacketData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.client_id = reader.readString();
                        break;
                    case 2:
                        message.oracle_script_id = reader.readUint64();
                        break;
                    case 3:
                        message.calldata = reader.readBytes();
                        break;
                    case 4:
                        message.ask_count = reader.readUint64();
                        break;
                    case 5:
                        message.min_count = reader.readUint64();
                        break;
                    case 6:
                        reader.readMessage(message.fee_limit, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_3.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_3.cosmos.base.v1beta1.Coin));
                        break;
                    case 7:
                        message.prepare_gas = reader.readUint64();
                        break;
                    case 8:
                        message.execute_gas = reader.readUint64();
                        break;
                    case 9:
                        message.tss_encoder = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OracleRequestPacketData {
            return OracleRequestPacketData.deserialize(bytes);
        }
    }
    export class OracleRequestPacketAcknowledgement extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
            }
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            request_id?: number;
        }): OracleRequestPacketAcknowledgement {
            const message = new OracleRequestPacketAcknowledgement({});
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            return message;
        }
        toObject() {
            const data: {
                request_id?: number;
            } = {};
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_id != 0)
                writer.writeUint64(1, this.request_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OracleRequestPacketAcknowledgement {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OracleRequestPacketAcknowledgement();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OracleRequestPacketAcknowledgement {
            return OracleRequestPacketAcknowledgement.deserialize(bytes);
        }
    }
    export class OracleResponsePacketData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            client_id?: string;
            request_id?: number;
            ans_count?: number;
            request_time?: number;
            resolve_time?: number;
            resolve_status?: ResolveStatus;
            result?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("client_id" in data && data.client_id != undefined) {
                    this.client_id = data.client_id;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("ans_count" in data && data.ans_count != undefined) {
                    this.ans_count = data.ans_count;
                }
                if ("request_time" in data && data.request_time != undefined) {
                    this.request_time = data.request_time;
                }
                if ("resolve_time" in data && data.resolve_time != undefined) {
                    this.resolve_time = data.resolve_time;
                }
                if ("resolve_status" in data && data.resolve_status != undefined) {
                    this.resolve_status = data.resolve_status;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get client_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set client_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get ans_count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set ans_count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get request_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set request_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get resolve_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set resolve_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get resolve_status() {
            return pb_1.Message.getFieldWithDefault(this, 6, ResolveStatus.RESOLVE_STATUS_OPEN_UNSPECIFIED) as ResolveStatus;
        }
        set resolve_status(value: ResolveStatus) {
            pb_1.Message.setField(this, 6, value);
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set result(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            client_id?: string;
            request_id?: number;
            ans_count?: number;
            request_time?: number;
            resolve_time?: number;
            resolve_status?: ResolveStatus;
            result?: Uint8Array;
        }): OracleResponsePacketData {
            const message = new OracleResponsePacketData({});
            if (data.client_id != null) {
                message.client_id = data.client_id;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.ans_count != null) {
                message.ans_count = data.ans_count;
            }
            if (data.request_time != null) {
                message.request_time = data.request_time;
            }
            if (data.resolve_time != null) {
                message.resolve_time = data.resolve_time;
            }
            if (data.resolve_status != null) {
                message.resolve_status = data.resolve_status;
            }
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                client_id?: string;
                request_id?: number;
                ans_count?: number;
                request_time?: number;
                resolve_time?: number;
                resolve_status?: ResolveStatus;
                result?: Uint8Array;
            } = {};
            if (this.client_id != null) {
                data.client_id = this.client_id;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.ans_count != null) {
                data.ans_count = this.ans_count;
            }
            if (this.request_time != null) {
                data.request_time = this.request_time;
            }
            if (this.resolve_time != null) {
                data.resolve_time = this.resolve_time;
            }
            if (this.resolve_status != null) {
                data.resolve_status = this.resolve_status;
            }
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.client_id.length)
                writer.writeString(1, this.client_id);
            if (this.request_id != 0)
                writer.writeUint64(2, this.request_id);
            if (this.ans_count != 0)
                writer.writeUint64(3, this.ans_count);
            if (this.request_time != 0)
                writer.writeInt64(4, this.request_time);
            if (this.resolve_time != 0)
                writer.writeInt64(5, this.resolve_time);
            if (this.resolve_status != ResolveStatus.RESOLVE_STATUS_OPEN_UNSPECIFIED)
                writer.writeEnum(6, this.resolve_status);
            if (this.result.length)
                writer.writeBytes(7, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OracleResponsePacketData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OracleResponsePacketData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.client_id = reader.readString();
                        break;
                    case 2:
                        message.request_id = reader.readUint64();
                        break;
                    case 3:
                        message.ans_count = reader.readUint64();
                        break;
                    case 4:
                        message.request_time = reader.readInt64();
                        break;
                    case 5:
                        message.resolve_time = reader.readInt64();
                        break;
                    case 6:
                        message.resolve_status = reader.readEnum();
                        break;
                    case 7:
                        message.result = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OracleResponsePacketData {
            return OracleResponsePacketData.deserialize(bytes);
        }
    }
    export class Result extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            client_id?: string;
            oracle_script_id?: number;
            calldata?: Uint8Array;
            ask_count?: number;
            min_count?: number;
            request_id?: number;
            ans_count?: number;
            request_time?: number;
            resolve_time?: number;
            resolve_status?: ResolveStatus;
            result?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("client_id" in data && data.client_id != undefined) {
                    this.client_id = data.client_id;
                }
                if ("oracle_script_id" in data && data.oracle_script_id != undefined) {
                    this.oracle_script_id = data.oracle_script_id;
                }
                if ("calldata" in data && data.calldata != undefined) {
                    this.calldata = data.calldata;
                }
                if ("ask_count" in data && data.ask_count != undefined) {
                    this.ask_count = data.ask_count;
                }
                if ("min_count" in data && data.min_count != undefined) {
                    this.min_count = data.min_count;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("ans_count" in data && data.ans_count != undefined) {
                    this.ans_count = data.ans_count;
                }
                if ("request_time" in data && data.request_time != undefined) {
                    this.request_time = data.request_time;
                }
                if ("resolve_time" in data && data.resolve_time != undefined) {
                    this.resolve_time = data.resolve_time;
                }
                if ("resolve_status" in data && data.resolve_status != undefined) {
                    this.resolve_status = data.resolve_status;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get client_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set client_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get oracle_script_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set oracle_script_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get calldata() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set calldata(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get ask_count() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set ask_count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get min_count() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set min_count(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get ans_count() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set ans_count(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get request_time() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set request_time(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get resolve_time() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set resolve_time(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get resolve_status() {
            return pb_1.Message.getFieldWithDefault(this, 10, ResolveStatus.RESOLVE_STATUS_OPEN_UNSPECIFIED) as ResolveStatus;
        }
        set resolve_status(value: ResolveStatus) {
            pb_1.Message.setField(this, 10, value);
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 11, new Uint8Array(0)) as Uint8Array;
        }
        set result(value: Uint8Array) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            client_id?: string;
            oracle_script_id?: number;
            calldata?: Uint8Array;
            ask_count?: number;
            min_count?: number;
            request_id?: number;
            ans_count?: number;
            request_time?: number;
            resolve_time?: number;
            resolve_status?: ResolveStatus;
            result?: Uint8Array;
        }): Result {
            const message = new Result({});
            if (data.client_id != null) {
                message.client_id = data.client_id;
            }
            if (data.oracle_script_id != null) {
                message.oracle_script_id = data.oracle_script_id;
            }
            if (data.calldata != null) {
                message.calldata = data.calldata;
            }
            if (data.ask_count != null) {
                message.ask_count = data.ask_count;
            }
            if (data.min_count != null) {
                message.min_count = data.min_count;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.ans_count != null) {
                message.ans_count = data.ans_count;
            }
            if (data.request_time != null) {
                message.request_time = data.request_time;
            }
            if (data.resolve_time != null) {
                message.resolve_time = data.resolve_time;
            }
            if (data.resolve_status != null) {
                message.resolve_status = data.resolve_status;
            }
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                client_id?: string;
                oracle_script_id?: number;
                calldata?: Uint8Array;
                ask_count?: number;
                min_count?: number;
                request_id?: number;
                ans_count?: number;
                request_time?: number;
                resolve_time?: number;
                resolve_status?: ResolveStatus;
                result?: Uint8Array;
            } = {};
            if (this.client_id != null) {
                data.client_id = this.client_id;
            }
            if (this.oracle_script_id != null) {
                data.oracle_script_id = this.oracle_script_id;
            }
            if (this.calldata != null) {
                data.calldata = this.calldata;
            }
            if (this.ask_count != null) {
                data.ask_count = this.ask_count;
            }
            if (this.min_count != null) {
                data.min_count = this.min_count;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.ans_count != null) {
                data.ans_count = this.ans_count;
            }
            if (this.request_time != null) {
                data.request_time = this.request_time;
            }
            if (this.resolve_time != null) {
                data.resolve_time = this.resolve_time;
            }
            if (this.resolve_status != null) {
                data.resolve_status = this.resolve_status;
            }
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.client_id.length)
                writer.writeString(1, this.client_id);
            if (this.oracle_script_id != 0)
                writer.writeUint64(2, this.oracle_script_id);
            if (this.calldata.length)
                writer.writeBytes(3, this.calldata);
            if (this.ask_count != 0)
                writer.writeUint64(4, this.ask_count);
            if (this.min_count != 0)
                writer.writeUint64(5, this.min_count);
            if (this.request_id != 0)
                writer.writeUint64(6, this.request_id);
            if (this.ans_count != 0)
                writer.writeUint64(7, this.ans_count);
            if (this.request_time != 0)
                writer.writeInt64(8, this.request_time);
            if (this.resolve_time != 0)
                writer.writeInt64(9, this.resolve_time);
            if (this.resolve_status != ResolveStatus.RESOLVE_STATUS_OPEN_UNSPECIFIED)
                writer.writeEnum(10, this.resolve_status);
            if (this.result.length)
                writer.writeBytes(11, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Result {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Result();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.client_id = reader.readString();
                        break;
                    case 2:
                        message.oracle_script_id = reader.readUint64();
                        break;
                    case 3:
                        message.calldata = reader.readBytes();
                        break;
                    case 4:
                        message.ask_count = reader.readUint64();
                        break;
                    case 5:
                        message.min_count = reader.readUint64();
                        break;
                    case 6:
                        message.request_id = reader.readUint64();
                        break;
                    case 7:
                        message.ans_count = reader.readUint64();
                        break;
                    case 8:
                        message.request_time = reader.readInt64();
                        break;
                    case 9:
                        message.resolve_time = reader.readInt64();
                        break;
                    case 10:
                        message.resolve_status = reader.readEnum();
                        break;
                    case 11:
                        message.result = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Result {
            return Result.deserialize(bytes);
        }
    }
    export class SigningResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signing_id?: number;
            error_codespace?: string;
            error_code?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signing_id" in data && data.signing_id != undefined) {
                    this.signing_id = data.signing_id;
                }
                if ("error_codespace" in data && data.error_codespace != undefined) {
                    this.error_codespace = data.error_codespace;
                }
                if ("error_code" in data && data.error_code != undefined) {
                    this.error_code = data.error_code;
                }
            }
        }
        get signing_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set signing_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get error_codespace() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set error_codespace(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get error_code() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set error_code(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            signing_id?: number;
            error_codespace?: string;
            error_code?: number;
        }): SigningResult {
            const message = new SigningResult({});
            if (data.signing_id != null) {
                message.signing_id = data.signing_id;
            }
            if (data.error_codespace != null) {
                message.error_codespace = data.error_codespace;
            }
            if (data.error_code != null) {
                message.error_code = data.error_code;
            }
            return message;
        }
        toObject() {
            const data: {
                signing_id?: number;
                error_codespace?: string;
                error_code?: number;
            } = {};
            if (this.signing_id != null) {
                data.signing_id = this.signing_id;
            }
            if (this.error_codespace != null) {
                data.error_codespace = this.error_codespace;
            }
            if (this.error_code != null) {
                data.error_code = this.error_code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signing_id != 0)
                writer.writeUint64(1, this.signing_id);
            if (this.error_codespace.length)
                writer.writeString(2, this.error_codespace);
            if (this.error_code != 0)
                writer.writeUint64(3, this.error_code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SigningResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SigningResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signing_id = reader.readUint64();
                        break;
                    case 2:
                        message.error_codespace = reader.readString();
                        break;
                    case 3:
                        message.error_code = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SigningResult {
            return SigningResult.deserialize(bytes);
        }
    }
    export class ValidatorStatus extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            is_active?: boolean;
            since?: dependency_2.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_active" in data && data.is_active != undefined) {
                    this.is_active = data.is_active;
                }
                if ("since" in data && data.since != undefined) {
                    this.since = data.since;
                }
            }
        }
        get is_active() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set is_active(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get since() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 2) as dependency_2.google.protobuf.Timestamp;
        }
        set since(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_since() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            is_active?: boolean;
            since?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        }): ValidatorStatus {
            const message = new ValidatorStatus({});
            if (data.is_active != null) {
                message.is_active = data.is_active;
            }
            if (data.since != null) {
                message.since = dependency_2.google.protobuf.Timestamp.fromObject(data.since);
            }
            return message;
        }
        toObject() {
            const data: {
                is_active?: boolean;
                since?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.is_active != null) {
                data.is_active = this.is_active;
            }
            if (this.since != null) {
                data.since = this.since.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_active != false)
                writer.writeBool(1, this.is_active);
            if (this.has_since)
                writer.writeMessage(2, this.since, () => this.since.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidatorStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidatorStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_active = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.since, () => message.since = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidatorStatus {
            return ValidatorStatus.deserialize(bytes);
        }
    }
    export class ActiveValidator extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            power?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("power" in data && data.power != undefined) {
                    this.power = data.power;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get power() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set power(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            address?: string;
            power?: number;
        }): ActiveValidator {
            const message = new ActiveValidator({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.power != null) {
                message.power = data.power;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                power?: number;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.power != null) {
                data.power = this.power;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.power != 0)
                writer.writeUint64(2, this.power);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActiveValidator {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActiveValidator();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.power = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActiveValidator {
            return ActiveValidator.deserialize(bytes);
        }
    }
    export class Params extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            max_raw_request_count?: number;
            max_ask_count?: number;
            max_calldata_size?: number;
            max_report_data_size?: number;
            expiration_block_count?: number;
            base_owasm_gas?: number;
            per_validator_request_gas?: number;
            sampling_try_count?: number;
            oracle_reward_percentage?: number;
            inactive_penalty_duration?: number;
            ibc_request_enabled?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("max_raw_request_count" in data && data.max_raw_request_count != undefined) {
                    this.max_raw_request_count = data.max_raw_request_count;
                }
                if ("max_ask_count" in data && data.max_ask_count != undefined) {
                    this.max_ask_count = data.max_ask_count;
                }
                if ("max_calldata_size" in data && data.max_calldata_size != undefined) {
                    this.max_calldata_size = data.max_calldata_size;
                }
                if ("max_report_data_size" in data && data.max_report_data_size != undefined) {
                    this.max_report_data_size = data.max_report_data_size;
                }
                if ("expiration_block_count" in data && data.expiration_block_count != undefined) {
                    this.expiration_block_count = data.expiration_block_count;
                }
                if ("base_owasm_gas" in data && data.base_owasm_gas != undefined) {
                    this.base_owasm_gas = data.base_owasm_gas;
                }
                if ("per_validator_request_gas" in data && data.per_validator_request_gas != undefined) {
                    this.per_validator_request_gas = data.per_validator_request_gas;
                }
                if ("sampling_try_count" in data && data.sampling_try_count != undefined) {
                    this.sampling_try_count = data.sampling_try_count;
                }
                if ("oracle_reward_percentage" in data && data.oracle_reward_percentage != undefined) {
                    this.oracle_reward_percentage = data.oracle_reward_percentage;
                }
                if ("inactive_penalty_duration" in data && data.inactive_penalty_duration != undefined) {
                    this.inactive_penalty_duration = data.inactive_penalty_duration;
                }
                if ("ibc_request_enabled" in data && data.ibc_request_enabled != undefined) {
                    this.ibc_request_enabled = data.ibc_request_enabled;
                }
            }
        }
        get max_raw_request_count() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set max_raw_request_count(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get max_ask_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set max_ask_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get max_calldata_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set max_calldata_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get max_report_data_size() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set max_report_data_size(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get expiration_block_count() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set expiration_block_count(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get base_owasm_gas() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set base_owasm_gas(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get per_validator_request_gas() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set per_validator_request_gas(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get sampling_try_count() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set sampling_try_count(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get oracle_reward_percentage() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set oracle_reward_percentage(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get inactive_penalty_duration() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set inactive_penalty_duration(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get ibc_request_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set ibc_request_enabled(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            max_raw_request_count?: number;
            max_ask_count?: number;
            max_calldata_size?: number;
            max_report_data_size?: number;
            expiration_block_count?: number;
            base_owasm_gas?: number;
            per_validator_request_gas?: number;
            sampling_try_count?: number;
            oracle_reward_percentage?: number;
            inactive_penalty_duration?: number;
            ibc_request_enabled?: boolean;
        }): Params {
            const message = new Params({});
            if (data.max_raw_request_count != null) {
                message.max_raw_request_count = data.max_raw_request_count;
            }
            if (data.max_ask_count != null) {
                message.max_ask_count = data.max_ask_count;
            }
            if (data.max_calldata_size != null) {
                message.max_calldata_size = data.max_calldata_size;
            }
            if (data.max_report_data_size != null) {
                message.max_report_data_size = data.max_report_data_size;
            }
            if (data.expiration_block_count != null) {
                message.expiration_block_count = data.expiration_block_count;
            }
            if (data.base_owasm_gas != null) {
                message.base_owasm_gas = data.base_owasm_gas;
            }
            if (data.per_validator_request_gas != null) {
                message.per_validator_request_gas = data.per_validator_request_gas;
            }
            if (data.sampling_try_count != null) {
                message.sampling_try_count = data.sampling_try_count;
            }
            if (data.oracle_reward_percentage != null) {
                message.oracle_reward_percentage = data.oracle_reward_percentage;
            }
            if (data.inactive_penalty_duration != null) {
                message.inactive_penalty_duration = data.inactive_penalty_duration;
            }
            if (data.ibc_request_enabled != null) {
                message.ibc_request_enabled = data.ibc_request_enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                max_raw_request_count?: number;
                max_ask_count?: number;
                max_calldata_size?: number;
                max_report_data_size?: number;
                expiration_block_count?: number;
                base_owasm_gas?: number;
                per_validator_request_gas?: number;
                sampling_try_count?: number;
                oracle_reward_percentage?: number;
                inactive_penalty_duration?: number;
                ibc_request_enabled?: boolean;
            } = {};
            if (this.max_raw_request_count != null) {
                data.max_raw_request_count = this.max_raw_request_count;
            }
            if (this.max_ask_count != null) {
                data.max_ask_count = this.max_ask_count;
            }
            if (this.max_calldata_size != null) {
                data.max_calldata_size = this.max_calldata_size;
            }
            if (this.max_report_data_size != null) {
                data.max_report_data_size = this.max_report_data_size;
            }
            if (this.expiration_block_count != null) {
                data.expiration_block_count = this.expiration_block_count;
            }
            if (this.base_owasm_gas != null) {
                data.base_owasm_gas = this.base_owasm_gas;
            }
            if (this.per_validator_request_gas != null) {
                data.per_validator_request_gas = this.per_validator_request_gas;
            }
            if (this.sampling_try_count != null) {
                data.sampling_try_count = this.sampling_try_count;
            }
            if (this.oracle_reward_percentage != null) {
                data.oracle_reward_percentage = this.oracle_reward_percentage;
            }
            if (this.inactive_penalty_duration != null) {
                data.inactive_penalty_duration = this.inactive_penalty_duration;
            }
            if (this.ibc_request_enabled != null) {
                data.ibc_request_enabled = this.ibc_request_enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.max_raw_request_count != 0)
                writer.writeUint64(1, this.max_raw_request_count);
            if (this.max_ask_count != 0)
                writer.writeUint64(2, this.max_ask_count);
            if (this.max_calldata_size != 0)
                writer.writeUint64(3, this.max_calldata_size);
            if (this.max_report_data_size != 0)
                writer.writeUint64(4, this.max_report_data_size);
            if (this.expiration_block_count != 0)
                writer.writeUint64(5, this.expiration_block_count);
            if (this.base_owasm_gas != 0)
                writer.writeUint64(6, this.base_owasm_gas);
            if (this.per_validator_request_gas != 0)
                writer.writeUint64(7, this.per_validator_request_gas);
            if (this.sampling_try_count != 0)
                writer.writeUint64(8, this.sampling_try_count);
            if (this.oracle_reward_percentage != 0)
                writer.writeUint64(9, this.oracle_reward_percentage);
            if (this.inactive_penalty_duration != 0)
                writer.writeUint64(10, this.inactive_penalty_duration);
            if (this.ibc_request_enabled != false)
                writer.writeBool(11, this.ibc_request_enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Params {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Params();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.max_raw_request_count = reader.readUint64();
                        break;
                    case 2:
                        message.max_ask_count = reader.readUint64();
                        break;
                    case 3:
                        message.max_calldata_size = reader.readUint64();
                        break;
                    case 4:
                        message.max_report_data_size = reader.readUint64();
                        break;
                    case 5:
                        message.expiration_block_count = reader.readUint64();
                        break;
                    case 6:
                        message.base_owasm_gas = reader.readUint64();
                        break;
                    case 7:
                        message.per_validator_request_gas = reader.readUint64();
                        break;
                    case 8:
                        message.sampling_try_count = reader.readUint64();
                        break;
                    case 9:
                        message.oracle_reward_percentage = reader.readUint64();
                        break;
                    case 10:
                        message.inactive_penalty_duration = reader.readUint64();
                        break;
                    case 11:
                        message.ibc_request_enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Params {
            return Params.deserialize(bytes);
        }
    }
    export class PendingResolveList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_ids" in data && data.request_ids != undefined) {
                    this.request_ids = data.request_ids;
                }
            }
        }
        get request_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set request_ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            request_ids?: number[];
        }): PendingResolveList {
            const message = new PendingResolveList({});
            if (data.request_ids != null) {
                message.request_ids = data.request_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                request_ids?: number[];
            } = {};
            if (this.request_ids != null) {
                data.request_ids = this.request_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_ids.length)
                writer.writePackedUint64(1, this.request_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PendingResolveList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PendingResolveList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_ids = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PendingResolveList {
            return PendingResolveList.deserialize(bytes);
        }
    }
    export class IBCChannel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            port_id?: string;
            channel_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
                if ("channel_id" in data && data.channel_id != undefined) {
                    this.channel_id = data.channel_id;
                }
            }
        }
        get port_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set port_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get channel_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set channel_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            port_id?: string;
            channel_id?: string;
        }): IBCChannel {
            const message = new IBCChannel({});
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            if (data.channel_id != null) {
                message.channel_id = data.channel_id;
            }
            return message;
        }
        toObject() {
            const data: {
                port_id?: string;
                channel_id?: string;
            } = {};
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            if (this.channel_id != null) {
                data.channel_id = this.channel_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.port_id.length)
                writer.writeString(1, this.port_id);
            if (this.channel_id.length)
                writer.writeString(2, this.channel_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IBCChannel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IBCChannel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.port_id = reader.readString();
                        break;
                    case 2:
                        message.channel_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IBCChannel {
            return IBCChannel.deserialize(bytes);
        }
    }
    export class RequestVerification extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chain_id?: string;
            validator?: string;
            request_id?: number;
            external_id?: number;
            data_source_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chain_id" in data && data.chain_id != undefined) {
                    this.chain_id = data.chain_id;
                }
                if ("validator" in data && data.validator != undefined) {
                    this.validator = data.validator;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("external_id" in data && data.external_id != undefined) {
                    this.external_id = data.external_id;
                }
                if ("data_source_id" in data && data.data_source_id != undefined) {
                    this.data_source_id = data.data_source_id;
                }
            }
        }
        get chain_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set chain_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get validator() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set validator(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get external_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set external_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get data_source_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set data_source_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            chain_id?: string;
            validator?: string;
            request_id?: number;
            external_id?: number;
            data_source_id?: number;
        }): RequestVerification {
            const message = new RequestVerification({});
            if (data.chain_id != null) {
                message.chain_id = data.chain_id;
            }
            if (data.validator != null) {
                message.validator = data.validator;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.external_id != null) {
                message.external_id = data.external_id;
            }
            if (data.data_source_id != null) {
                message.data_source_id = data.data_source_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chain_id?: string;
                validator?: string;
                request_id?: number;
                external_id?: number;
                data_source_id?: number;
            } = {};
            if (this.chain_id != null) {
                data.chain_id = this.chain_id;
            }
            if (this.validator != null) {
                data.validator = this.validator;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.external_id != null) {
                data.external_id = this.external_id;
            }
            if (this.data_source_id != null) {
                data.data_source_id = this.data_source_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chain_id.length)
                writer.writeString(1, this.chain_id);
            if (this.validator.length)
                writer.writeString(2, this.validator);
            if (this.request_id != 0)
                writer.writeUint64(3, this.request_id);
            if (this.external_id != 0)
                writer.writeUint64(4, this.external_id);
            if (this.data_source_id != 0)
                writer.writeUint64(5, this.data_source_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestVerification {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestVerification();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chain_id = reader.readString();
                        break;
                    case 2:
                        message.validator = reader.readString();
                        break;
                    case 3:
                        message.request_id = reader.readUint64();
                        break;
                    case 4:
                        message.external_id = reader.readUint64();
                        break;
                    case 5:
                        message.data_source_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestVerification {
            return RequestVerification.deserialize(bytes);
        }
    }
    export class PriceResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            symbol?: string;
            multiplier?: number;
            px?: number;
            request_id?: number;
            resolve_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("symbol" in data && data.symbol != undefined) {
                    this.symbol = data.symbol;
                }
                if ("multiplier" in data && data.multiplier != undefined) {
                    this.multiplier = data.multiplier;
                }
                if ("px" in data && data.px != undefined) {
                    this.px = data.px;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("resolve_time" in data && data.resolve_time != undefined) {
                    this.resolve_time = data.resolve_time;
                }
            }
        }
        get symbol() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set symbol(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get multiplier() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set multiplier(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get px() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set px(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get resolve_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set resolve_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            symbol?: string;
            multiplier?: number;
            px?: number;
            request_id?: number;
            resolve_time?: number;
        }): PriceResult {
            const message = new PriceResult({});
            if (data.symbol != null) {
                message.symbol = data.symbol;
            }
            if (data.multiplier != null) {
                message.multiplier = data.multiplier;
            }
            if (data.px != null) {
                message.px = data.px;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.resolve_time != null) {
                message.resolve_time = data.resolve_time;
            }
            return message;
        }
        toObject() {
            const data: {
                symbol?: string;
                multiplier?: number;
                px?: number;
                request_id?: number;
                resolve_time?: number;
            } = {};
            if (this.symbol != null) {
                data.symbol = this.symbol;
            }
            if (this.multiplier != null) {
                data.multiplier = this.multiplier;
            }
            if (this.px != null) {
                data.px = this.px;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.resolve_time != null) {
                data.resolve_time = this.resolve_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.symbol.length)
                writer.writeString(1, this.symbol);
            if (this.multiplier != 0)
                writer.writeUint64(2, this.multiplier);
            if (this.px != 0)
                writer.writeUint64(3, this.px);
            if (this.request_id != 0)
                writer.writeUint64(4, this.request_id);
            if (this.resolve_time != 0)
                writer.writeInt64(5, this.resolve_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PriceResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PriceResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.symbol = reader.readString();
                        break;
                    case 2:
                        message.multiplier = reader.readUint64();
                        break;
                    case 3:
                        message.px = reader.readUint64();
                        break;
                    case 4:
                        message.request_id = reader.readUint64();
                        break;
                    case 5:
                        message.resolve_time = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PriceResult {
            return PriceResult.deserialize(bytes);
        }
    }
    export class OracleResultSignatureOrder extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_id?: number;
            encoder?: Encoder;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("encoder" in data && data.encoder != undefined) {
                    this.encoder = data.encoder;
                }
            }
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get encoder() {
            return pb_1.Message.getFieldWithDefault(this, 3, Encoder.ENCODER_UNSPECIFIED) as Encoder;
        }
        set encoder(value: Encoder) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            request_id?: number;
            encoder?: Encoder;
        }): OracleResultSignatureOrder {
            const message = new OracleResultSignatureOrder({});
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.encoder != null) {
                message.encoder = data.encoder;
            }
            return message;
        }
        toObject() {
            const data: {
                request_id?: number;
                encoder?: Encoder;
            } = {};
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.encoder != null) {
                data.encoder = this.encoder;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_id != 0)
                writer.writeUint64(1, this.request_id);
            if (this.encoder != Encoder.ENCODER_UNSPECIFIED)
                writer.writeEnum(3, this.encoder);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OracleResultSignatureOrder {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OracleResultSignatureOrder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_id = reader.readUint64();
                        break;
                    case 3:
                        message.encoder = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OracleResultSignatureOrder {
            return OracleResultSignatureOrder.deserialize(bytes);
        }
    }
}
