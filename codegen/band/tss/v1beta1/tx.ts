/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/tss/v1beta1/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../../../amino/amino";
import * as dependency_3 from "./../../../cosmos_proto/cosmos";
import * as dependency_4 from "./../../../cosmos/msg/v1/msg";
import * as dependency_5 from "./tss";
import * as dependency_6 from "./genesis";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace band.tss.v1beta1 {
    export class MsgSubmitDKGRound1 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            round1_info?: dependency_5.band.tss.v1beta1.Round1Info;
            sender?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("round1_info" in data && data.round1_info != undefined) {
                    this.round1_info = data.round1_info;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get round1_info() {
            return pb_1.Message.getWrapperField(this, dependency_5.band.tss.v1beta1.Round1Info, 2) as dependency_5.band.tss.v1beta1.Round1Info;
        }
        set round1_info(value: dependency_5.band.tss.v1beta1.Round1Info) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_round1_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            group_id?: number;
            round1_info?: ReturnType<typeof dependency_5.band.tss.v1beta1.Round1Info.prototype.toObject>;
            sender?: string;
        }): MsgSubmitDKGRound1 {
            const message = new MsgSubmitDKGRound1({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.round1_info != null) {
                message.round1_info = dependency_5.band.tss.v1beta1.Round1Info.fromObject(data.round1_info);
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                round1_info?: ReturnType<typeof dependency_5.band.tss.v1beta1.Round1Info.prototype.toObject>;
                sender?: string;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.round1_info != null) {
                data.round1_info = this.round1_info.toObject();
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint64(1, this.group_id);
            if (this.has_round1_info)
                writer.writeMessage(2, this.round1_info, () => this.round1_info.serialize(writer));
            if (this.sender.length)
                writer.writeString(3, this.sender);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSubmitDKGRound1 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSubmitDKGRound1();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.round1_info, () => message.round1_info = dependency_5.band.tss.v1beta1.Round1Info.deserialize(reader));
                        break;
                    case 3:
                        message.sender = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSubmitDKGRound1 {
            return MsgSubmitDKGRound1.deserialize(bytes);
        }
    }
    export class MsgSubmitDKGRound1Response extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgSubmitDKGRound1Response {
            const message = new MsgSubmitDKGRound1Response({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSubmitDKGRound1Response {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSubmitDKGRound1Response();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSubmitDKGRound1Response {
            return MsgSubmitDKGRound1Response.deserialize(bytes);
        }
    }
    export class MsgSubmitDKGRound2 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            round2_info?: dependency_5.band.tss.v1beta1.Round2Info;
            sender?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("round2_info" in data && data.round2_info != undefined) {
                    this.round2_info = data.round2_info;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get round2_info() {
            return pb_1.Message.getWrapperField(this, dependency_5.band.tss.v1beta1.Round2Info, 2) as dependency_5.band.tss.v1beta1.Round2Info;
        }
        set round2_info(value: dependency_5.band.tss.v1beta1.Round2Info) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_round2_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            group_id?: number;
            round2_info?: ReturnType<typeof dependency_5.band.tss.v1beta1.Round2Info.prototype.toObject>;
            sender?: string;
        }): MsgSubmitDKGRound2 {
            const message = new MsgSubmitDKGRound2({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.round2_info != null) {
                message.round2_info = dependency_5.band.tss.v1beta1.Round2Info.fromObject(data.round2_info);
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                round2_info?: ReturnType<typeof dependency_5.band.tss.v1beta1.Round2Info.prototype.toObject>;
                sender?: string;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.round2_info != null) {
                data.round2_info = this.round2_info.toObject();
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint64(1, this.group_id);
            if (this.has_round2_info)
                writer.writeMessage(2, this.round2_info, () => this.round2_info.serialize(writer));
            if (this.sender.length)
                writer.writeString(3, this.sender);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSubmitDKGRound2 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSubmitDKGRound2();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.round2_info, () => message.round2_info = dependency_5.band.tss.v1beta1.Round2Info.deserialize(reader));
                        break;
                    case 3:
                        message.sender = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSubmitDKGRound2 {
            return MsgSubmitDKGRound2.deserialize(bytes);
        }
    }
    export class MsgSubmitDKGRound2Response extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgSubmitDKGRound2Response {
            const message = new MsgSubmitDKGRound2Response({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSubmitDKGRound2Response {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSubmitDKGRound2Response();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSubmitDKGRound2Response {
            return MsgSubmitDKGRound2Response.deserialize(bytes);
        }
    }
    export class MsgComplain extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            complaints?: dependency_5.band.tss.v1beta1.Complaint[];
            sender?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("complaints" in data && data.complaints != undefined) {
                    this.complaints = data.complaints;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get complaints() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.band.tss.v1beta1.Complaint, 2) as dependency_5.band.tss.v1beta1.Complaint[];
        }
        set complaints(value: dependency_5.band.tss.v1beta1.Complaint[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            group_id?: number;
            complaints?: ReturnType<typeof dependency_5.band.tss.v1beta1.Complaint.prototype.toObject>[];
            sender?: string;
        }): MsgComplain {
            const message = new MsgComplain({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.complaints != null) {
                message.complaints = data.complaints.map(item => dependency_5.band.tss.v1beta1.Complaint.fromObject(item));
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                complaints?: ReturnType<typeof dependency_5.band.tss.v1beta1.Complaint.prototype.toObject>[];
                sender?: string;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.complaints != null) {
                data.complaints = this.complaints.map((item: dependency_5.band.tss.v1beta1.Complaint) => item.toObject());
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint64(1, this.group_id);
            if (this.complaints.length)
                writer.writeRepeatedMessage(2, this.complaints, (item: dependency_5.band.tss.v1beta1.Complaint) => item.serialize(writer));
            if (this.sender.length)
                writer.writeString(3, this.sender);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgComplain {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgComplain();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.complaints, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_5.band.tss.v1beta1.Complaint.deserialize(reader), dependency_5.band.tss.v1beta1.Complaint));
                        break;
                    case 3:
                        message.sender = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgComplain {
            return MsgComplain.deserialize(bytes);
        }
    }
    export class MsgComplainResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgComplainResponse {
            const message = new MsgComplainResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgComplainResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgComplainResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgComplainResponse {
            return MsgComplainResponse.deserialize(bytes);
        }
    }
    export class MsgConfirm extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            member_id?: number;
            own_pub_key_sig?: Uint8Array;
            sender?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("member_id" in data && data.member_id != undefined) {
                    this.member_id = data.member_id;
                }
                if ("own_pub_key_sig" in data && data.own_pub_key_sig != undefined) {
                    this.own_pub_key_sig = data.own_pub_key_sig;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get member_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set member_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get own_pub_key_sig() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set own_pub_key_sig(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            group_id?: number;
            member_id?: number;
            own_pub_key_sig?: Uint8Array;
            sender?: string;
        }): MsgConfirm {
            const message = new MsgConfirm({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.member_id != null) {
                message.member_id = data.member_id;
            }
            if (data.own_pub_key_sig != null) {
                message.own_pub_key_sig = data.own_pub_key_sig;
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                member_id?: number;
                own_pub_key_sig?: Uint8Array;
                sender?: string;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.member_id != null) {
                data.member_id = this.member_id;
            }
            if (this.own_pub_key_sig != null) {
                data.own_pub_key_sig = this.own_pub_key_sig;
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint64(1, this.group_id);
            if (this.member_id != 0)
                writer.writeUint64(2, this.member_id);
            if (this.own_pub_key_sig.length)
                writer.writeBytes(3, this.own_pub_key_sig);
            if (this.sender.length)
                writer.writeString(4, this.sender);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgConfirm {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgConfirm();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint64();
                        break;
                    case 2:
                        message.member_id = reader.readUint64();
                        break;
                    case 3:
                        message.own_pub_key_sig = reader.readBytes();
                        break;
                    case 4:
                        message.sender = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgConfirm {
            return MsgConfirm.deserialize(bytes);
        }
    }
    export class MsgConfirmResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgConfirmResponse {
            const message = new MsgConfirmResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgConfirmResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgConfirmResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgConfirmResponse {
            return MsgConfirmResponse.deserialize(bytes);
        }
    }
    export class MsgSubmitDEs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            des?: dependency_5.band.tss.v1beta1.DE[];
            sender?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("des" in data && data.des != undefined) {
                    this.des = data.des;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
            }
        }
        get des() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.band.tss.v1beta1.DE, 1) as dependency_5.band.tss.v1beta1.DE[];
        }
        set des(value: dependency_5.band.tss.v1beta1.DE[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            des?: ReturnType<typeof dependency_5.band.tss.v1beta1.DE.prototype.toObject>[];
            sender?: string;
        }): MsgSubmitDEs {
            const message = new MsgSubmitDEs({});
            if (data.des != null) {
                message.des = data.des.map(item => dependency_5.band.tss.v1beta1.DE.fromObject(item));
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            return message;
        }
        toObject() {
            const data: {
                des?: ReturnType<typeof dependency_5.band.tss.v1beta1.DE.prototype.toObject>[];
                sender?: string;
            } = {};
            if (this.des != null) {
                data.des = this.des.map((item: dependency_5.band.tss.v1beta1.DE) => item.toObject());
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.des.length)
                writer.writeRepeatedMessage(1, this.des, (item: dependency_5.band.tss.v1beta1.DE) => item.serialize(writer));
            if (this.sender.length)
                writer.writeString(2, this.sender);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSubmitDEs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSubmitDEs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.des, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.band.tss.v1beta1.DE.deserialize(reader), dependency_5.band.tss.v1beta1.DE));
                        break;
                    case 2:
                        message.sender = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSubmitDEs {
            return MsgSubmitDEs.deserialize(bytes);
        }
    }
    export class MsgSubmitDEsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgSubmitDEsResponse {
            const message = new MsgSubmitDEsResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSubmitDEsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSubmitDEsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSubmitDEsResponse {
            return MsgSubmitDEsResponse.deserialize(bytes);
        }
    }
    export class MsgResetDE extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sender?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
            }
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            sender?: string;
        }): MsgResetDE {
            const message = new MsgResetDE({});
            if (data.sender != null) {
                message.sender = data.sender;
            }
            return message;
        }
        toObject() {
            const data: {
                sender?: string;
            } = {};
            if (this.sender != null) {
                data.sender = this.sender;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sender.length)
                writer.writeString(1, this.sender);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgResetDE {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgResetDE();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sender = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgResetDE {
            return MsgResetDE.deserialize(bytes);
        }
    }
    export class MsgResetDEResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgResetDEResponse {
            const message = new MsgResetDEResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgResetDEResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgResetDEResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgResetDEResponse {
            return MsgResetDEResponse.deserialize(bytes);
        }
    }
    export class MsgSubmitSignature extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signing_id?: number;
            member_id?: number;
            signature?: Uint8Array;
            signer?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signing_id" in data && data.signing_id != undefined) {
                    this.signing_id = data.signing_id;
                }
                if ("member_id" in data && data.member_id != undefined) {
                    this.member_id = data.member_id;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("signer" in data && data.signer != undefined) {
                    this.signer = data.signer;
                }
            }
        }
        get signing_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set signing_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get member_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set member_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get signer() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set signer(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            signing_id?: number;
            member_id?: number;
            signature?: Uint8Array;
            signer?: string;
        }): MsgSubmitSignature {
            const message = new MsgSubmitSignature({});
            if (data.signing_id != null) {
                message.signing_id = data.signing_id;
            }
            if (data.member_id != null) {
                message.member_id = data.member_id;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            if (data.signer != null) {
                message.signer = data.signer;
            }
            return message;
        }
        toObject() {
            const data: {
                signing_id?: number;
                member_id?: number;
                signature?: Uint8Array;
                signer?: string;
            } = {};
            if (this.signing_id != null) {
                data.signing_id = this.signing_id;
            }
            if (this.member_id != null) {
                data.member_id = this.member_id;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            if (this.signer != null) {
                data.signer = this.signer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signing_id != 0)
                writer.writeUint64(1, this.signing_id);
            if (this.member_id != 0)
                writer.writeUint64(2, this.member_id);
            if (this.signature.length)
                writer.writeBytes(3, this.signature);
            if (this.signer.length)
                writer.writeString(4, this.signer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSubmitSignature {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSubmitSignature();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signing_id = reader.readUint64();
                        break;
                    case 2:
                        message.member_id = reader.readUint64();
                        break;
                    case 3:
                        message.signature = reader.readBytes();
                        break;
                    case 4:
                        message.signer = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSubmitSignature {
            return MsgSubmitSignature.deserialize(bytes);
        }
    }
    export class MsgSubmitSignatureResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgSubmitSignatureResponse {
            const message = new MsgSubmitSignatureResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSubmitSignatureResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSubmitSignatureResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSubmitSignatureResponse {
            return MsgSubmitSignatureResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateParams extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            params?: dependency_6.band.tss.v1beta1.Params;
            authority?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
                if ("authority" in data && data.authority != undefined) {
                    this.authority = data.authority;
                }
            }
        }
        get params() {
            return pb_1.Message.getWrapperField(this, dependency_6.band.tss.v1beta1.Params, 1) as dependency_6.band.tss.v1beta1.Params;
        }
        set params(value: dependency_6.band.tss.v1beta1.Params) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get authority() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set authority(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            params?: ReturnType<typeof dependency_6.band.tss.v1beta1.Params.prototype.toObject>;
            authority?: string;
        }): MsgUpdateParams {
            const message = new MsgUpdateParams({});
            if (data.params != null) {
                message.params = dependency_6.band.tss.v1beta1.Params.fromObject(data.params);
            }
            if (data.authority != null) {
                message.authority = data.authority;
            }
            return message;
        }
        toObject() {
            const data: {
                params?: ReturnType<typeof dependency_6.band.tss.v1beta1.Params.prototype.toObject>;
                authority?: string;
            } = {};
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            if (this.authority != null) {
                data.authority = this.authority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_params)
                writer.writeMessage(1, this.params, () => this.params.serialize(writer));
            if (this.authority.length)
                writer.writeString(2, this.authority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateParams {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateParams();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.params, () => message.params = dependency_6.band.tss.v1beta1.Params.deserialize(reader));
                        break;
                    case 2:
                        message.authority = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateParams {
            return MsgUpdateParams.deserialize(bytes);
        }
    }
    export class MsgUpdateParamsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateParamsResponse {
            const message = new MsgUpdateParamsResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateParamsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateParamsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateParamsResponse {
            return MsgUpdateParamsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedMsgService {
        static definition = {
            SubmitDKGRound1: {
                path: "/band.tss.v1beta1.Msg/SubmitDKGRound1",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgSubmitDKGRound1) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgSubmitDKGRound1.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgSubmitDKGRound1Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgSubmitDKGRound1Response.deserialize(new Uint8Array(bytes))
            },
            SubmitDKGRound2: {
                path: "/band.tss.v1beta1.Msg/SubmitDKGRound2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgSubmitDKGRound2) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgSubmitDKGRound2.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgSubmitDKGRound2Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgSubmitDKGRound2Response.deserialize(new Uint8Array(bytes))
            },
            Complain: {
                path: "/band.tss.v1beta1.Msg/Complain",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgComplain) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgComplain.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgComplainResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgComplainResponse.deserialize(new Uint8Array(bytes))
            },
            Confirm: {
                path: "/band.tss.v1beta1.Msg/Confirm",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgConfirm) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgConfirm.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgConfirmResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgConfirmResponse.deserialize(new Uint8Array(bytes))
            },
            SubmitDEs: {
                path: "/band.tss.v1beta1.Msg/SubmitDEs",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgSubmitDEs) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgSubmitDEs.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgSubmitDEsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgSubmitDEsResponse.deserialize(new Uint8Array(bytes))
            },
            ResetDE: {
                path: "/band.tss.v1beta1.Msg/ResetDE",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgResetDE) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgResetDE.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgResetDEResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgResetDEResponse.deserialize(new Uint8Array(bytes))
            },
            SubmitSignature: {
                path: "/band.tss.v1beta1.Msg/SubmitSignature",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgSubmitSignature) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgSubmitSignature.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgSubmitSignatureResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgSubmitSignatureResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateParams: {
                path: "/band.tss.v1beta1.Msg/UpdateParams",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgUpdateParams) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgUpdateParams.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgUpdateParamsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgUpdateParamsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract SubmitDKGRound1(call: grpc_1.ServerUnaryCall<MsgSubmitDKGRound1, MsgSubmitDKGRound1Response>, callback: grpc_1.sendUnaryData<MsgSubmitDKGRound1Response>): void;
        abstract SubmitDKGRound2(call: grpc_1.ServerUnaryCall<MsgSubmitDKGRound2, MsgSubmitDKGRound2Response>, callback: grpc_1.sendUnaryData<MsgSubmitDKGRound2Response>): void;
        abstract Complain(call: grpc_1.ServerUnaryCall<MsgComplain, MsgComplainResponse>, callback: grpc_1.sendUnaryData<MsgComplainResponse>): void;
        abstract Confirm(call: grpc_1.ServerUnaryCall<MsgConfirm, MsgConfirmResponse>, callback: grpc_1.sendUnaryData<MsgConfirmResponse>): void;
        abstract SubmitDEs(call: grpc_1.ServerUnaryCall<MsgSubmitDEs, MsgSubmitDEsResponse>, callback: grpc_1.sendUnaryData<MsgSubmitDEsResponse>): void;
        abstract ResetDE(call: grpc_1.ServerUnaryCall<MsgResetDE, MsgResetDEResponse>, callback: grpc_1.sendUnaryData<MsgResetDEResponse>): void;
        abstract SubmitSignature(call: grpc_1.ServerUnaryCall<MsgSubmitSignature, MsgSubmitSignatureResponse>, callback: grpc_1.sendUnaryData<MsgSubmitSignatureResponse>): void;
        abstract UpdateParams(call: grpc_1.ServerUnaryCall<MsgUpdateParams, MsgUpdateParamsResponse>, callback: grpc_1.sendUnaryData<MsgUpdateParamsResponse>): void;
    }
    export class MsgClient extends grpc_1.makeGenericClientConstructor(UnimplementedMsgService.definition, "Msg", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        SubmitDKGRound1: GrpcUnaryServiceInterface<MsgSubmitDKGRound1, MsgSubmitDKGRound1Response> = (message: MsgSubmitDKGRound1, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgSubmitDKGRound1Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgSubmitDKGRound1Response>, callback?: grpc_1.requestCallback<MsgSubmitDKGRound1Response>): grpc_1.ClientUnaryCall => {
            return super.SubmitDKGRound1(message, metadata, options, callback);
        };
        SubmitDKGRound2: GrpcUnaryServiceInterface<MsgSubmitDKGRound2, MsgSubmitDKGRound2Response> = (message: MsgSubmitDKGRound2, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgSubmitDKGRound2Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgSubmitDKGRound2Response>, callback?: grpc_1.requestCallback<MsgSubmitDKGRound2Response>): grpc_1.ClientUnaryCall => {
            return super.SubmitDKGRound2(message, metadata, options, callback);
        };
        Complain: GrpcUnaryServiceInterface<MsgComplain, MsgComplainResponse> = (message: MsgComplain, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgComplainResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgComplainResponse>, callback?: grpc_1.requestCallback<MsgComplainResponse>): grpc_1.ClientUnaryCall => {
            return super.Complain(message, metadata, options, callback);
        };
        Confirm: GrpcUnaryServiceInterface<MsgConfirm, MsgConfirmResponse> = (message: MsgConfirm, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgConfirmResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgConfirmResponse>, callback?: grpc_1.requestCallback<MsgConfirmResponse>): grpc_1.ClientUnaryCall => {
            return super.Confirm(message, metadata, options, callback);
        };
        SubmitDEs: GrpcUnaryServiceInterface<MsgSubmitDEs, MsgSubmitDEsResponse> = (message: MsgSubmitDEs, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgSubmitDEsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgSubmitDEsResponse>, callback?: grpc_1.requestCallback<MsgSubmitDEsResponse>): grpc_1.ClientUnaryCall => {
            return super.SubmitDEs(message, metadata, options, callback);
        };
        ResetDE: GrpcUnaryServiceInterface<MsgResetDE, MsgResetDEResponse> = (message: MsgResetDE, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgResetDEResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgResetDEResponse>, callback?: grpc_1.requestCallback<MsgResetDEResponse>): grpc_1.ClientUnaryCall => {
            return super.ResetDE(message, metadata, options, callback);
        };
        SubmitSignature: GrpcUnaryServiceInterface<MsgSubmitSignature, MsgSubmitSignatureResponse> = (message: MsgSubmitSignature, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgSubmitSignatureResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgSubmitSignatureResponse>, callback?: grpc_1.requestCallback<MsgSubmitSignatureResponse>): grpc_1.ClientUnaryCall => {
            return super.SubmitSignature(message, metadata, options, callback);
        };
        UpdateParams: GrpcUnaryServiceInterface<MsgUpdateParams, MsgUpdateParamsResponse> = (message: MsgUpdateParams, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateParamsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateParamsResponse>, callback?: grpc_1.requestCallback<MsgUpdateParamsResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateParams(message, metadata, options, callback);
        };
    }
}
