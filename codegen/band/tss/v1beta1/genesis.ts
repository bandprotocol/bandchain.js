/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/tss/v1beta1/genesis.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../../../cosmos_proto/cosmos";
import * as dependency_3 from "./tss";
import * as pb_1 from "google-protobuf";
export namespace band.tss.v1beta1 {
    export class GenesisState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            params?: Params;
            groups?: dependency_3.band.tss.v1beta1.Group[];
            members?: dependency_3.band.tss.v1beta1.Member[];
            des?: DEGenesis[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
                if ("groups" in data && data.groups != undefined) {
                    this.groups = data.groups;
                }
                if ("members" in data && data.members != undefined) {
                    this.members = data.members;
                }
                if ("des" in data && data.des != undefined) {
                    this.des = data.des;
                }
            }
        }
        get params() {
            return pb_1.Message.getWrapperField(this, Params, 1) as Params;
        }
        set params(value: Params) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get groups() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.band.tss.v1beta1.Group, 2) as dependency_3.band.tss.v1beta1.Group[];
        }
        set groups(value: dependency_3.band.tss.v1beta1.Group[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get members() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.band.tss.v1beta1.Member, 3) as dependency_3.band.tss.v1beta1.Member[];
        }
        set members(value: dependency_3.band.tss.v1beta1.Member[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get des() {
            return pb_1.Message.getRepeatedWrapperField(this, DEGenesis, 4) as DEGenesis[];
        }
        set des(value: DEGenesis[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            params?: ReturnType<typeof Params.prototype.toObject>;
            groups?: ReturnType<typeof dependency_3.band.tss.v1beta1.Group.prototype.toObject>[];
            members?: ReturnType<typeof dependency_3.band.tss.v1beta1.Member.prototype.toObject>[];
            des?: ReturnType<typeof DEGenesis.prototype.toObject>[];
        }): GenesisState {
            const message = new GenesisState({});
            if (data.params != null) {
                message.params = Params.fromObject(data.params);
            }
            if (data.groups != null) {
                message.groups = data.groups.map(item => dependency_3.band.tss.v1beta1.Group.fromObject(item));
            }
            if (data.members != null) {
                message.members = data.members.map(item => dependency_3.band.tss.v1beta1.Member.fromObject(item));
            }
            if (data.des != null) {
                message.des = data.des.map(item => DEGenesis.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                params?: ReturnType<typeof Params.prototype.toObject>;
                groups?: ReturnType<typeof dependency_3.band.tss.v1beta1.Group.prototype.toObject>[];
                members?: ReturnType<typeof dependency_3.band.tss.v1beta1.Member.prototype.toObject>[];
                des?: ReturnType<typeof DEGenesis.prototype.toObject>[];
            } = {};
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            if (this.groups != null) {
                data.groups = this.groups.map((item: dependency_3.band.tss.v1beta1.Group) => item.toObject());
            }
            if (this.members != null) {
                data.members = this.members.map((item: dependency_3.band.tss.v1beta1.Member) => item.toObject());
            }
            if (this.des != null) {
                data.des = this.des.map((item: DEGenesis) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_params)
                writer.writeMessage(1, this.params, () => this.params.serialize(writer));
            if (this.groups.length)
                writer.writeRepeatedMessage(2, this.groups, (item: dependency_3.band.tss.v1beta1.Group) => item.serialize(writer));
            if (this.members.length)
                writer.writeRepeatedMessage(3, this.members, (item: dependency_3.band.tss.v1beta1.Member) => item.serialize(writer));
            if (this.des.length)
                writer.writeRepeatedMessage(4, this.des, (item: DEGenesis) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenesisState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenesisState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.params, () => message.params = Params.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.groups, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.band.tss.v1beta1.Group.deserialize(reader), dependency_3.band.tss.v1beta1.Group));
                        break;
                    case 3:
                        reader.readMessage(message.members, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_3.band.tss.v1beta1.Member.deserialize(reader), dependency_3.band.tss.v1beta1.Member));
                        break;
                    case 4:
                        reader.readMessage(message.des, () => pb_1.Message.addToRepeatedWrapperField(message, 4, DEGenesis.deserialize(reader), DEGenesis));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenesisState {
            return GenesisState.deserialize(bytes);
        }
    }
    export class Params extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            max_group_size?: number;
            max_de_size?: number;
            creation_period?: number;
            signing_period?: number;
            max_signing_attempt?: number;
            max_memo_length?: number;
            max_message_length?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("max_group_size" in data && data.max_group_size != undefined) {
                    this.max_group_size = data.max_group_size;
                }
                if ("max_de_size" in data && data.max_de_size != undefined) {
                    this.max_de_size = data.max_de_size;
                }
                if ("creation_period" in data && data.creation_period != undefined) {
                    this.creation_period = data.creation_period;
                }
                if ("signing_period" in data && data.signing_period != undefined) {
                    this.signing_period = data.signing_period;
                }
                if ("max_signing_attempt" in data && data.max_signing_attempt != undefined) {
                    this.max_signing_attempt = data.max_signing_attempt;
                }
                if ("max_memo_length" in data && data.max_memo_length != undefined) {
                    this.max_memo_length = data.max_memo_length;
                }
                if ("max_message_length" in data && data.max_message_length != undefined) {
                    this.max_message_length = data.max_message_length;
                }
            }
        }
        get max_group_size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set max_group_size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get max_de_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set max_de_size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get creation_period() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set creation_period(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get signing_period() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set signing_period(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get max_signing_attempt() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set max_signing_attempt(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get max_memo_length() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set max_memo_length(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get max_message_length() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set max_message_length(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            max_group_size?: number;
            max_de_size?: number;
            creation_period?: number;
            signing_period?: number;
            max_signing_attempt?: number;
            max_memo_length?: number;
            max_message_length?: number;
        }): Params {
            const message = new Params({});
            if (data.max_group_size != null) {
                message.max_group_size = data.max_group_size;
            }
            if (data.max_de_size != null) {
                message.max_de_size = data.max_de_size;
            }
            if (data.creation_period != null) {
                message.creation_period = data.creation_period;
            }
            if (data.signing_period != null) {
                message.signing_period = data.signing_period;
            }
            if (data.max_signing_attempt != null) {
                message.max_signing_attempt = data.max_signing_attempt;
            }
            if (data.max_memo_length != null) {
                message.max_memo_length = data.max_memo_length;
            }
            if (data.max_message_length != null) {
                message.max_message_length = data.max_message_length;
            }
            return message;
        }
        toObject() {
            const data: {
                max_group_size?: number;
                max_de_size?: number;
                creation_period?: number;
                signing_period?: number;
                max_signing_attempt?: number;
                max_memo_length?: number;
                max_message_length?: number;
            } = {};
            if (this.max_group_size != null) {
                data.max_group_size = this.max_group_size;
            }
            if (this.max_de_size != null) {
                data.max_de_size = this.max_de_size;
            }
            if (this.creation_period != null) {
                data.creation_period = this.creation_period;
            }
            if (this.signing_period != null) {
                data.signing_period = this.signing_period;
            }
            if (this.max_signing_attempt != null) {
                data.max_signing_attempt = this.max_signing_attempt;
            }
            if (this.max_memo_length != null) {
                data.max_memo_length = this.max_memo_length;
            }
            if (this.max_message_length != null) {
                data.max_message_length = this.max_message_length;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.max_group_size != 0)
                writer.writeUint64(1, this.max_group_size);
            if (this.max_de_size != 0)
                writer.writeUint64(2, this.max_de_size);
            if (this.creation_period != 0)
                writer.writeUint64(3, this.creation_period);
            if (this.signing_period != 0)
                writer.writeUint64(4, this.signing_period);
            if (this.max_signing_attempt != 0)
                writer.writeUint64(5, this.max_signing_attempt);
            if (this.max_memo_length != 0)
                writer.writeUint64(6, this.max_memo_length);
            if (this.max_message_length != 0)
                writer.writeUint64(7, this.max_message_length);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Params {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Params();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.max_group_size = reader.readUint64();
                        break;
                    case 2:
                        message.max_de_size = reader.readUint64();
                        break;
                    case 3:
                        message.creation_period = reader.readUint64();
                        break;
                    case 4:
                        message.signing_period = reader.readUint64();
                        break;
                    case 5:
                        message.max_signing_attempt = reader.readUint64();
                        break;
                    case 6:
                        message.max_memo_length = reader.readUint64();
                        break;
                    case 7:
                        message.max_message_length = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Params {
            return Params.deserialize(bytes);
        }
    }
    export class DEGenesis extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            de?: dependency_3.band.tss.v1beta1.DE;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("de" in data && data.de != undefined) {
                    this.de = data.de;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get de() {
            return pb_1.Message.getWrapperField(this, dependency_3.band.tss.v1beta1.DE, 2) as dependency_3.band.tss.v1beta1.DE;
        }
        set de(value: dependency_3.band.tss.v1beta1.DE) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_de() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            address?: string;
            de?: ReturnType<typeof dependency_3.band.tss.v1beta1.DE.prototype.toObject>;
        }): DEGenesis {
            const message = new DEGenesis({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.de != null) {
                message.de = dependency_3.band.tss.v1beta1.DE.fromObject(data.de);
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                de?: ReturnType<typeof dependency_3.band.tss.v1beta1.DE.prototype.toObject>;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.de != null) {
                data.de = this.de.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.has_de)
                writer.writeMessage(2, this.de, () => this.de.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DEGenesis {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DEGenesis();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.de, () => message.de = dependency_3.band.tss.v1beta1.DE.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DEGenesis {
            return DEGenesis.deserialize(bytes);
        }
    }
}
