/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/tss/v1beta1/tss.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../../../cosmos_proto/cosmos";
import * as dependency_3 from "./../../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace band.tss.v1beta1 {
    export enum SigningStatus {
        SIGNING_STATUS_UNSPECIFIED = 0,
        SIGNING_STATUS_WAITING = 1,
        SIGNING_STATUS_SUCCESS = 2,
        SIGNING_STATUS_FALLEN = 3
    }
    export enum GroupStatus {
        GROUP_STATUS_UNSPECIFIED = 0,
        GROUP_STATUS_ROUND_1 = 1,
        GROUP_STATUS_ROUND_2 = 2,
        GROUP_STATUS_ROUND_3 = 3,
        GROUP_STATUS_ACTIVE = 4,
        GROUP_STATUS_EXPIRED = 5,
        GROUP_STATUS_FALLEN = 6
    }
    export enum ComplaintStatus {
        COMPLAINT_STATUS_UNSPECIFIED = 0,
        COMPLAINT_STATUS_SUCCESS = 1,
        COMPLAINT_STATUS_FAILED = 2
    }
    export class Group extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            size?: number;
            threshold?: number;
            pub_key?: Uint8Array;
            status?: GroupStatus;
            created_height?: number;
            module_owner?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
                if ("threshold" in data && data.threshold != undefined) {
                    this.threshold = data.threshold;
                }
                if ("pub_key" in data && data.pub_key != undefined) {
                    this.pub_key = data.pub_key;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("created_height" in data && data.created_height != undefined) {
                    this.created_height = data.created_height;
                }
                if ("module_owner" in data && data.module_owner != undefined) {
                    this.module_owner = data.module_owner;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get threshold() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set threshold(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get pub_key() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set pub_key(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, GroupStatus.GROUP_STATUS_UNSPECIFIED) as GroupStatus;
        }
        set status(value: GroupStatus) {
            pb_1.Message.setField(this, 5, value);
        }
        get created_height() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set created_height(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get module_owner() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set module_owner(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            id?: number;
            size?: number;
            threshold?: number;
            pub_key?: Uint8Array;
            status?: GroupStatus;
            created_height?: number;
            module_owner?: string;
        }): Group {
            const message = new Group({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            if (data.threshold != null) {
                message.threshold = data.threshold;
            }
            if (data.pub_key != null) {
                message.pub_key = data.pub_key;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.created_height != null) {
                message.created_height = data.created_height;
            }
            if (data.module_owner != null) {
                message.module_owner = data.module_owner;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                size?: number;
                threshold?: number;
                pub_key?: Uint8Array;
                status?: GroupStatus;
                created_height?: number;
                module_owner?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            if (this.threshold != null) {
                data.threshold = this.threshold;
            }
            if (this.pub_key != null) {
                data.pub_key = this.pub_key;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.created_height != null) {
                data.created_height = this.created_height;
            }
            if (this.module_owner != null) {
                data.module_owner = this.module_owner;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint64(1, this.id);
            if (this.size != 0)
                writer.writeUint64(2, this.size);
            if (this.threshold != 0)
                writer.writeUint64(3, this.threshold);
            if (this.pub_key.length)
                writer.writeBytes(4, this.pub_key);
            if (this.status != GroupStatus.GROUP_STATUS_UNSPECIFIED)
                writer.writeEnum(5, this.status);
            if (this.created_height != 0)
                writer.writeUint64(6, this.created_height);
            if (this.module_owner.length)
                writer.writeString(7, this.module_owner);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Group {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Group();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64();
                        break;
                    case 2:
                        message.size = reader.readUint64();
                        break;
                    case 3:
                        message.threshold = reader.readUint64();
                        break;
                    case 4:
                        message.pub_key = reader.readBytes();
                        break;
                    case 5:
                        message.status = reader.readEnum();
                        break;
                    case 6:
                        message.created_height = reader.readUint64();
                        break;
                    case 7:
                        message.module_owner = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Group {
            return Group.deserialize(bytes);
        }
    }
    export class GroupResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group?: Group;
            dkg_context?: Uint8Array;
            members?: Member[];
            round1_infos?: Round1Info[];
            round2_infos?: Round2Info[];
            complaints_with_status?: ComplaintsWithStatus[];
            confirms?: Confirm[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 5, 6, 7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
                if ("dkg_context" in data && data.dkg_context != undefined) {
                    this.dkg_context = data.dkg_context;
                }
                if ("members" in data && data.members != undefined) {
                    this.members = data.members;
                }
                if ("round1_infos" in data && data.round1_infos != undefined) {
                    this.round1_infos = data.round1_infos;
                }
                if ("round2_infos" in data && data.round2_infos != undefined) {
                    this.round2_infos = data.round2_infos;
                }
                if ("complaints_with_status" in data && data.complaints_with_status != undefined) {
                    this.complaints_with_status = data.complaints_with_status;
                }
                if ("confirms" in data && data.confirms != undefined) {
                    this.confirms = data.confirms;
                }
            }
        }
        get group() {
            return pb_1.Message.getWrapperField(this, Group, 1) as Group;
        }
        set group(value: Group) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_group() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get dkg_context() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set dkg_context(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get members() {
            return pb_1.Message.getRepeatedWrapperField(this, Member, 3) as Member[];
        }
        set members(value: Member[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get round1_infos() {
            return pb_1.Message.getRepeatedWrapperField(this, Round1Info, 4) as Round1Info[];
        }
        set round1_infos(value: Round1Info[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get round2_infos() {
            return pb_1.Message.getRepeatedWrapperField(this, Round2Info, 5) as Round2Info[];
        }
        set round2_infos(value: Round2Info[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get complaints_with_status() {
            return pb_1.Message.getRepeatedWrapperField(this, ComplaintsWithStatus, 6) as ComplaintsWithStatus[];
        }
        set complaints_with_status(value: ComplaintsWithStatus[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get confirms() {
            return pb_1.Message.getRepeatedWrapperField(this, Confirm, 7) as Confirm[];
        }
        set confirms(value: Confirm[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        static fromObject(data: {
            group?: ReturnType<typeof Group.prototype.toObject>;
            dkg_context?: Uint8Array;
            members?: ReturnType<typeof Member.prototype.toObject>[];
            round1_infos?: ReturnType<typeof Round1Info.prototype.toObject>[];
            round2_infos?: ReturnType<typeof Round2Info.prototype.toObject>[];
            complaints_with_status?: ReturnType<typeof ComplaintsWithStatus.prototype.toObject>[];
            confirms?: ReturnType<typeof Confirm.prototype.toObject>[];
        }): GroupResult {
            const message = new GroupResult({});
            if (data.group != null) {
                message.group = Group.fromObject(data.group);
            }
            if (data.dkg_context != null) {
                message.dkg_context = data.dkg_context;
            }
            if (data.members != null) {
                message.members = data.members.map(item => Member.fromObject(item));
            }
            if (data.round1_infos != null) {
                message.round1_infos = data.round1_infos.map(item => Round1Info.fromObject(item));
            }
            if (data.round2_infos != null) {
                message.round2_infos = data.round2_infos.map(item => Round2Info.fromObject(item));
            }
            if (data.complaints_with_status != null) {
                message.complaints_with_status = data.complaints_with_status.map(item => ComplaintsWithStatus.fromObject(item));
            }
            if (data.confirms != null) {
                message.confirms = data.confirms.map(item => Confirm.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                group?: ReturnType<typeof Group.prototype.toObject>;
                dkg_context?: Uint8Array;
                members?: ReturnType<typeof Member.prototype.toObject>[];
                round1_infos?: ReturnType<typeof Round1Info.prototype.toObject>[];
                round2_infos?: ReturnType<typeof Round2Info.prototype.toObject>[];
                complaints_with_status?: ReturnType<typeof ComplaintsWithStatus.prototype.toObject>[];
                confirms?: ReturnType<typeof Confirm.prototype.toObject>[];
            } = {};
            if (this.group != null) {
                data.group = this.group.toObject();
            }
            if (this.dkg_context != null) {
                data.dkg_context = this.dkg_context;
            }
            if (this.members != null) {
                data.members = this.members.map((item: Member) => item.toObject());
            }
            if (this.round1_infos != null) {
                data.round1_infos = this.round1_infos.map((item: Round1Info) => item.toObject());
            }
            if (this.round2_infos != null) {
                data.round2_infos = this.round2_infos.map((item: Round2Info) => item.toObject());
            }
            if (this.complaints_with_status != null) {
                data.complaints_with_status = this.complaints_with_status.map((item: ComplaintsWithStatus) => item.toObject());
            }
            if (this.confirms != null) {
                data.confirms = this.confirms.map((item: Confirm) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_group)
                writer.writeMessage(1, this.group, () => this.group.serialize(writer));
            if (this.dkg_context.length)
                writer.writeBytes(2, this.dkg_context);
            if (this.members.length)
                writer.writeRepeatedMessage(3, this.members, (item: Member) => item.serialize(writer));
            if (this.round1_infos.length)
                writer.writeRepeatedMessage(4, this.round1_infos, (item: Round1Info) => item.serialize(writer));
            if (this.round2_infos.length)
                writer.writeRepeatedMessage(5, this.round2_infos, (item: Round2Info) => item.serialize(writer));
            if (this.complaints_with_status.length)
                writer.writeRepeatedMessage(6, this.complaints_with_status, (item: ComplaintsWithStatus) => item.serialize(writer));
            if (this.confirms.length)
                writer.writeRepeatedMessage(7, this.confirms, (item: Confirm) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.group, () => message.group = Group.deserialize(reader));
                        break;
                    case 2:
                        message.dkg_context = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message.members, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Member.deserialize(reader), Member));
                        break;
                    case 4:
                        reader.readMessage(message.round1_infos, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Round1Info.deserialize(reader), Round1Info));
                        break;
                    case 5:
                        reader.readMessage(message.round2_infos, () => pb_1.Message.addToRepeatedWrapperField(message, 5, Round2Info.deserialize(reader), Round2Info));
                        break;
                    case 6:
                        reader.readMessage(message.complaints_with_status, () => pb_1.Message.addToRepeatedWrapperField(message, 6, ComplaintsWithStatus.deserialize(reader), ComplaintsWithStatus));
                        break;
                    case 7:
                        reader.readMessage(message.confirms, () => pb_1.Message.addToRepeatedWrapperField(message, 7, Confirm.deserialize(reader), Confirm));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupResult {
            return GroupResult.deserialize(bytes);
        }
    }
    export class Round1Info extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            member_id?: number;
            coefficient_commits?: Uint8Array[];
            one_time_pub_key?: Uint8Array;
            a0_signature?: Uint8Array;
            one_time_signature?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("member_id" in data && data.member_id != undefined) {
                    this.member_id = data.member_id;
                }
                if ("coefficient_commits" in data && data.coefficient_commits != undefined) {
                    this.coefficient_commits = data.coefficient_commits;
                }
                if ("one_time_pub_key" in data && data.one_time_pub_key != undefined) {
                    this.one_time_pub_key = data.one_time_pub_key;
                }
                if ("a0_signature" in data && data.a0_signature != undefined) {
                    this.a0_signature = data.a0_signature;
                }
                if ("one_time_signature" in data && data.one_time_signature != undefined) {
                    this.one_time_signature = data.one_time_signature;
                }
            }
        }
        get member_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set member_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get coefficient_commits() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
        }
        set coefficient_commits(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get one_time_pub_key() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set one_time_pub_key(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get a0_signature() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set a0_signature(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get one_time_signature() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set one_time_signature(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            member_id?: number;
            coefficient_commits?: Uint8Array[];
            one_time_pub_key?: Uint8Array;
            a0_signature?: Uint8Array;
            one_time_signature?: Uint8Array;
        }): Round1Info {
            const message = new Round1Info({});
            if (data.member_id != null) {
                message.member_id = data.member_id;
            }
            if (data.coefficient_commits != null) {
                message.coefficient_commits = data.coefficient_commits;
            }
            if (data.one_time_pub_key != null) {
                message.one_time_pub_key = data.one_time_pub_key;
            }
            if (data.a0_signature != null) {
                message.a0_signature = data.a0_signature;
            }
            if (data.one_time_signature != null) {
                message.one_time_signature = data.one_time_signature;
            }
            return message;
        }
        toObject() {
            const data: {
                member_id?: number;
                coefficient_commits?: Uint8Array[];
                one_time_pub_key?: Uint8Array;
                a0_signature?: Uint8Array;
                one_time_signature?: Uint8Array;
            } = {};
            if (this.member_id != null) {
                data.member_id = this.member_id;
            }
            if (this.coefficient_commits != null) {
                data.coefficient_commits = this.coefficient_commits;
            }
            if (this.one_time_pub_key != null) {
                data.one_time_pub_key = this.one_time_pub_key;
            }
            if (this.a0_signature != null) {
                data.a0_signature = this.a0_signature;
            }
            if (this.one_time_signature != null) {
                data.one_time_signature = this.one_time_signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.member_id != 0)
                writer.writeUint64(1, this.member_id);
            if (this.coefficient_commits.length)
                writer.writeRepeatedBytes(2, this.coefficient_commits);
            if (this.one_time_pub_key.length)
                writer.writeBytes(3, this.one_time_pub_key);
            if (this.a0_signature.length)
                writer.writeBytes(4, this.a0_signature);
            if (this.one_time_signature.length)
                writer.writeBytes(5, this.one_time_signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Round1Info {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Round1Info();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.member_id = reader.readUint64();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    case 3:
                        message.one_time_pub_key = reader.readBytes();
                        break;
                    case 4:
                        message.a0_signature = reader.readBytes();
                        break;
                    case 5:
                        message.one_time_signature = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Round1Info {
            return Round1Info.deserialize(bytes);
        }
    }
    export class Round2Info extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            member_id?: number;
            encrypted_secret_shares?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("member_id" in data && data.member_id != undefined) {
                    this.member_id = data.member_id;
                }
                if ("encrypted_secret_shares" in data && data.encrypted_secret_shares != undefined) {
                    this.encrypted_secret_shares = data.encrypted_secret_shares;
                }
            }
        }
        get member_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set member_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get encrypted_secret_shares() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
        }
        set encrypted_secret_shares(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            member_id?: number;
            encrypted_secret_shares?: Uint8Array[];
        }): Round2Info {
            const message = new Round2Info({});
            if (data.member_id != null) {
                message.member_id = data.member_id;
            }
            if (data.encrypted_secret_shares != null) {
                message.encrypted_secret_shares = data.encrypted_secret_shares;
            }
            return message;
        }
        toObject() {
            const data: {
                member_id?: number;
                encrypted_secret_shares?: Uint8Array[];
            } = {};
            if (this.member_id != null) {
                data.member_id = this.member_id;
            }
            if (this.encrypted_secret_shares != null) {
                data.encrypted_secret_shares = this.encrypted_secret_shares;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.member_id != 0)
                writer.writeUint64(1, this.member_id);
            if (this.encrypted_secret_shares.length)
                writer.writeRepeatedBytes(2, this.encrypted_secret_shares);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Round2Info {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Round2Info();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.member_id = reader.readUint64();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Round2Info {
            return Round2Info.deserialize(bytes);
        }
    }
    export class DE extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pub_d?: Uint8Array;
            pub_e?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pub_d" in data && data.pub_d != undefined) {
                    this.pub_d = data.pub_d;
                }
                if ("pub_e" in data && data.pub_e != undefined) {
                    this.pub_e = data.pub_e;
                }
            }
        }
        get pub_d() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set pub_d(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get pub_e() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set pub_e(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            pub_d?: Uint8Array;
            pub_e?: Uint8Array;
        }): DE {
            const message = new DE({});
            if (data.pub_d != null) {
                message.pub_d = data.pub_d;
            }
            if (data.pub_e != null) {
                message.pub_e = data.pub_e;
            }
            return message;
        }
        toObject() {
            const data: {
                pub_d?: Uint8Array;
                pub_e?: Uint8Array;
            } = {};
            if (this.pub_d != null) {
                data.pub_d = this.pub_d;
            }
            if (this.pub_e != null) {
                data.pub_e = this.pub_e;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pub_d.length)
                writer.writeBytes(1, this.pub_d);
            if (this.pub_e.length)
                writer.writeBytes(2, this.pub_e);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DE {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DE();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.pub_d = reader.readBytes();
                        break;
                    case 2:
                        message.pub_e = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DE {
            return DE.deserialize(bytes);
        }
    }
    export class DEQueue extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            head?: number;
            tail?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("head" in data && data.head != undefined) {
                    this.head = data.head;
                }
                if ("tail" in data && data.tail != undefined) {
                    this.tail = data.tail;
                }
            }
        }
        get head() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set head(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get tail() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set tail(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            head?: number;
            tail?: number;
        }): DEQueue {
            const message = new DEQueue({});
            if (data.head != null) {
                message.head = data.head;
            }
            if (data.tail != null) {
                message.tail = data.tail;
            }
            return message;
        }
        toObject() {
            const data: {
                head?: number;
                tail?: number;
            } = {};
            if (this.head != null) {
                data.head = this.head;
            }
            if (this.tail != null) {
                data.tail = this.tail;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.head != 0)
                writer.writeUint64(1, this.head);
            if (this.tail != 0)
                writer.writeUint64(2, this.tail);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DEQueue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DEQueue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.head = reader.readUint64();
                        break;
                    case 2:
                        message.tail = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DEQueue {
            return DEQueue.deserialize(bytes);
        }
    }
    export class Signing extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            current_attempt?: number;
            group_id?: number;
            group_pub_key?: Uint8Array;
            message?: Uint8Array;
            group_pub_nonce?: Uint8Array;
            signature?: Uint8Array;
            status?: SigningStatus;
            created_height?: number;
            created_timestamp?: dependency_3.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("current_attempt" in data && data.current_attempt != undefined) {
                    this.current_attempt = data.current_attempt;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_pub_key" in data && data.group_pub_key != undefined) {
                    this.group_pub_key = data.group_pub_key;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("group_pub_nonce" in data && data.group_pub_nonce != undefined) {
                    this.group_pub_nonce = data.group_pub_nonce;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("created_height" in data && data.created_height != undefined) {
                    this.created_height = data.created_height;
                }
                if ("created_timestamp" in data && data.created_timestamp != undefined) {
                    this.created_timestamp = data.created_timestamp;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get current_attempt() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set current_attempt(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get group_pub_key() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set group_pub_key(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set message(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get group_pub_nonce() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
        }
        set group_pub_nonce(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 8, SigningStatus.SIGNING_STATUS_UNSPECIFIED) as SigningStatus;
        }
        set status(value: SigningStatus) {
            pb_1.Message.setField(this, 8, value);
        }
        get created_height() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set created_height(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get created_timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 10) as dependency_3.google.protobuf.Timestamp;
        }
        set created_timestamp(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_created_timestamp() {
            return pb_1.Message.getField(this, 10) != null;
        }
        static fromObject(data: {
            id?: number;
            current_attempt?: number;
            group_id?: number;
            group_pub_key?: Uint8Array;
            message?: Uint8Array;
            group_pub_nonce?: Uint8Array;
            signature?: Uint8Array;
            status?: SigningStatus;
            created_height?: number;
            created_timestamp?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
        }): Signing {
            const message = new Signing({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.current_attempt != null) {
                message.current_attempt = data.current_attempt;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_pub_key != null) {
                message.group_pub_key = data.group_pub_key;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.group_pub_nonce != null) {
                message.group_pub_nonce = data.group_pub_nonce;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.created_height != null) {
                message.created_height = data.created_height;
            }
            if (data.created_timestamp != null) {
                message.created_timestamp = dependency_3.google.protobuf.Timestamp.fromObject(data.created_timestamp);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                current_attempt?: number;
                group_id?: number;
                group_pub_key?: Uint8Array;
                message?: Uint8Array;
                group_pub_nonce?: Uint8Array;
                signature?: Uint8Array;
                status?: SigningStatus;
                created_height?: number;
                created_timestamp?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.current_attempt != null) {
                data.current_attempt = this.current_attempt;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_pub_key != null) {
                data.group_pub_key = this.group_pub_key;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.group_pub_nonce != null) {
                data.group_pub_nonce = this.group_pub_nonce;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.created_height != null) {
                data.created_height = this.created_height;
            }
            if (this.created_timestamp != null) {
                data.created_timestamp = this.created_timestamp.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint64(1, this.id);
            if (this.current_attempt != 0)
                writer.writeUint64(2, this.current_attempt);
            if (this.group_id != 0)
                writer.writeUint64(3, this.group_id);
            if (this.group_pub_key.length)
                writer.writeBytes(4, this.group_pub_key);
            if (this.message.length)
                writer.writeBytes(5, this.message);
            if (this.group_pub_nonce.length)
                writer.writeBytes(6, this.group_pub_nonce);
            if (this.signature.length)
                writer.writeBytes(7, this.signature);
            if (this.status != SigningStatus.SIGNING_STATUS_UNSPECIFIED)
                writer.writeEnum(8, this.status);
            if (this.created_height != 0)
                writer.writeUint64(9, this.created_height);
            if (this.has_created_timestamp)
                writer.writeMessage(10, this.created_timestamp, () => this.created_timestamp.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Signing {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Signing();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64();
                        break;
                    case 2:
                        message.current_attempt = reader.readUint64();
                        break;
                    case 3:
                        message.group_id = reader.readUint64();
                        break;
                    case 4:
                        message.group_pub_key = reader.readBytes();
                        break;
                    case 5:
                        message.message = reader.readBytes();
                        break;
                    case 6:
                        message.group_pub_nonce = reader.readBytes();
                        break;
                    case 7:
                        message.signature = reader.readBytes();
                        break;
                    case 8:
                        message.status = reader.readEnum();
                        break;
                    case 9:
                        message.created_height = reader.readUint64();
                        break;
                    case 10:
                        reader.readMessage(message.created_timestamp, () => message.created_timestamp = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Signing {
            return Signing.deserialize(bytes);
        }
    }
    export class SigningAttempt extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signing_id?: number;
            attempt?: number;
            expired_height?: number;
            assigned_members?: AssignedMember[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signing_id" in data && data.signing_id != undefined) {
                    this.signing_id = data.signing_id;
                }
                if ("attempt" in data && data.attempt != undefined) {
                    this.attempt = data.attempt;
                }
                if ("expired_height" in data && data.expired_height != undefined) {
                    this.expired_height = data.expired_height;
                }
                if ("assigned_members" in data && data.assigned_members != undefined) {
                    this.assigned_members = data.assigned_members;
                }
            }
        }
        get signing_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set signing_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get attempt() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set attempt(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get expired_height() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set expired_height(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get assigned_members() {
            return pb_1.Message.getRepeatedWrapperField(this, AssignedMember, 4) as AssignedMember[];
        }
        set assigned_members(value: AssignedMember[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            signing_id?: number;
            attempt?: number;
            expired_height?: number;
            assigned_members?: ReturnType<typeof AssignedMember.prototype.toObject>[];
        }): SigningAttempt {
            const message = new SigningAttempt({});
            if (data.signing_id != null) {
                message.signing_id = data.signing_id;
            }
            if (data.attempt != null) {
                message.attempt = data.attempt;
            }
            if (data.expired_height != null) {
                message.expired_height = data.expired_height;
            }
            if (data.assigned_members != null) {
                message.assigned_members = data.assigned_members.map(item => AssignedMember.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                signing_id?: number;
                attempt?: number;
                expired_height?: number;
                assigned_members?: ReturnType<typeof AssignedMember.prototype.toObject>[];
            } = {};
            if (this.signing_id != null) {
                data.signing_id = this.signing_id;
            }
            if (this.attempt != null) {
                data.attempt = this.attempt;
            }
            if (this.expired_height != null) {
                data.expired_height = this.expired_height;
            }
            if (this.assigned_members != null) {
                data.assigned_members = this.assigned_members.map((item: AssignedMember) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signing_id != 0)
                writer.writeUint64(1, this.signing_id);
            if (this.attempt != 0)
                writer.writeUint64(2, this.attempt);
            if (this.expired_height != 0)
                writer.writeUint64(3, this.expired_height);
            if (this.assigned_members.length)
                writer.writeRepeatedMessage(4, this.assigned_members, (item: AssignedMember) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SigningAttempt {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SigningAttempt();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signing_id = reader.readUint64();
                        break;
                    case 2:
                        message.attempt = reader.readUint64();
                        break;
                    case 3:
                        message.expired_height = reader.readUint64();
                        break;
                    case 4:
                        reader.readMessage(message.assigned_members, () => pb_1.Message.addToRepeatedWrapperField(message, 4, AssignedMember.deserialize(reader), AssignedMember));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SigningAttempt {
            return SigningAttempt.deserialize(bytes);
        }
    }
    export class AssignedMember extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            member_id?: number;
            address?: string;
            pub_key?: Uint8Array;
            pub_d?: Uint8Array;
            pub_e?: Uint8Array;
            binding_factor?: Uint8Array;
            pub_nonce?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("member_id" in data && data.member_id != undefined) {
                    this.member_id = data.member_id;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("pub_key" in data && data.pub_key != undefined) {
                    this.pub_key = data.pub_key;
                }
                if ("pub_d" in data && data.pub_d != undefined) {
                    this.pub_d = data.pub_d;
                }
                if ("pub_e" in data && data.pub_e != undefined) {
                    this.pub_e = data.pub_e;
                }
                if ("binding_factor" in data && data.binding_factor != undefined) {
                    this.binding_factor = data.binding_factor;
                }
                if ("pub_nonce" in data && data.pub_nonce != undefined) {
                    this.pub_nonce = data.pub_nonce;
                }
            }
        }
        get member_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set member_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get pub_key() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set pub_key(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get pub_d() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set pub_d(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get pub_e() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set pub_e(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get binding_factor() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
        }
        set binding_factor(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get pub_nonce() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set pub_nonce(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            member_id?: number;
            address?: string;
            pub_key?: Uint8Array;
            pub_d?: Uint8Array;
            pub_e?: Uint8Array;
            binding_factor?: Uint8Array;
            pub_nonce?: Uint8Array;
        }): AssignedMember {
            const message = new AssignedMember({});
            if (data.member_id != null) {
                message.member_id = data.member_id;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.pub_key != null) {
                message.pub_key = data.pub_key;
            }
            if (data.pub_d != null) {
                message.pub_d = data.pub_d;
            }
            if (data.pub_e != null) {
                message.pub_e = data.pub_e;
            }
            if (data.binding_factor != null) {
                message.binding_factor = data.binding_factor;
            }
            if (data.pub_nonce != null) {
                message.pub_nonce = data.pub_nonce;
            }
            return message;
        }
        toObject() {
            const data: {
                member_id?: number;
                address?: string;
                pub_key?: Uint8Array;
                pub_d?: Uint8Array;
                pub_e?: Uint8Array;
                binding_factor?: Uint8Array;
                pub_nonce?: Uint8Array;
            } = {};
            if (this.member_id != null) {
                data.member_id = this.member_id;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.pub_key != null) {
                data.pub_key = this.pub_key;
            }
            if (this.pub_d != null) {
                data.pub_d = this.pub_d;
            }
            if (this.pub_e != null) {
                data.pub_e = this.pub_e;
            }
            if (this.binding_factor != null) {
                data.binding_factor = this.binding_factor;
            }
            if (this.pub_nonce != null) {
                data.pub_nonce = this.pub_nonce;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.member_id != 0)
                writer.writeUint64(1, this.member_id);
            if (this.address.length)
                writer.writeString(2, this.address);
            if (this.pub_key.length)
                writer.writeBytes(3, this.pub_key);
            if (this.pub_d.length)
                writer.writeBytes(4, this.pub_d);
            if (this.pub_e.length)
                writer.writeBytes(5, this.pub_e);
            if (this.binding_factor.length)
                writer.writeBytes(6, this.binding_factor);
            if (this.pub_nonce.length)
                writer.writeBytes(7, this.pub_nonce);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssignedMember {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssignedMember();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.member_id = reader.readUint64();
                        break;
                    case 2:
                        message.address = reader.readString();
                        break;
                    case 3:
                        message.pub_key = reader.readBytes();
                        break;
                    case 4:
                        message.pub_d = reader.readBytes();
                        break;
                    case 5:
                        message.pub_e = reader.readBytes();
                        break;
                    case 6:
                        message.binding_factor = reader.readBytes();
                        break;
                    case 7:
                        message.pub_nonce = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssignedMember {
            return AssignedMember.deserialize(bytes);
        }
    }
    export class PendingSignings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signing_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signing_ids" in data && data.signing_ids != undefined) {
                    this.signing_ids = data.signing_ids;
                }
            }
        }
        get signing_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set signing_ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            signing_ids?: number[];
        }): PendingSignings {
            const message = new PendingSignings({});
            if (data.signing_ids != null) {
                message.signing_ids = data.signing_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                signing_ids?: number[];
            } = {};
            if (this.signing_ids != null) {
                data.signing_ids = this.signing_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signing_ids.length)
                writer.writePackedUint64(1, this.signing_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PendingSignings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PendingSignings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signing_ids = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PendingSignings {
            return PendingSignings.deserialize(bytes);
        }
    }
    export class Member extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            group_id?: number;
            address?: string;
            pub_key?: Uint8Array;
            is_malicious?: boolean;
            is_active?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("pub_key" in data && data.pub_key != undefined) {
                    this.pub_key = data.pub_key;
                }
                if ("is_malicious" in data && data.is_malicious != undefined) {
                    this.is_malicious = data.is_malicious;
                }
                if ("is_active" in data && data.is_active != undefined) {
                    this.is_active = data.is_active;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get pub_key() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set pub_key(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get is_malicious() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set is_malicious(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get is_active() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set is_active(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            id?: number;
            group_id?: number;
            address?: string;
            pub_key?: Uint8Array;
            is_malicious?: boolean;
            is_active?: boolean;
        }): Member {
            const message = new Member({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.pub_key != null) {
                message.pub_key = data.pub_key;
            }
            if (data.is_malicious != null) {
                message.is_malicious = data.is_malicious;
            }
            if (data.is_active != null) {
                message.is_active = data.is_active;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                group_id?: number;
                address?: string;
                pub_key?: Uint8Array;
                is_malicious?: boolean;
                is_active?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.pub_key != null) {
                data.pub_key = this.pub_key;
            }
            if (this.is_malicious != null) {
                data.is_malicious = this.is_malicious;
            }
            if (this.is_active != null) {
                data.is_active = this.is_active;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint64(1, this.id);
            if (this.group_id != 0)
                writer.writeUint64(2, this.group_id);
            if (this.address.length)
                writer.writeString(3, this.address);
            if (this.pub_key.length)
                writer.writeBytes(4, this.pub_key);
            if (this.is_malicious != false)
                writer.writeBool(5, this.is_malicious);
            if (this.is_active != false)
                writer.writeBool(6, this.is_active);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Member {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Member();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64();
                        break;
                    case 2:
                        message.group_id = reader.readUint64();
                        break;
                    case 3:
                        message.address = reader.readString();
                        break;
                    case 4:
                        message.pub_key = reader.readBytes();
                        break;
                    case 5:
                        message.is_malicious = reader.readBool();
                        break;
                    case 6:
                        message.is_active = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Member {
            return Member.deserialize(bytes);
        }
    }
    export class Confirm extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            member_id?: number;
            own_pub_key_sig?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("member_id" in data && data.member_id != undefined) {
                    this.member_id = data.member_id;
                }
                if ("own_pub_key_sig" in data && data.own_pub_key_sig != undefined) {
                    this.own_pub_key_sig = data.own_pub_key_sig;
                }
            }
        }
        get member_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set member_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get own_pub_key_sig() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set own_pub_key_sig(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            member_id?: number;
            own_pub_key_sig?: Uint8Array;
        }): Confirm {
            const message = new Confirm({});
            if (data.member_id != null) {
                message.member_id = data.member_id;
            }
            if (data.own_pub_key_sig != null) {
                message.own_pub_key_sig = data.own_pub_key_sig;
            }
            return message;
        }
        toObject() {
            const data: {
                member_id?: number;
                own_pub_key_sig?: Uint8Array;
            } = {};
            if (this.member_id != null) {
                data.member_id = this.member_id;
            }
            if (this.own_pub_key_sig != null) {
                data.own_pub_key_sig = this.own_pub_key_sig;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.member_id != 0)
                writer.writeUint64(1, this.member_id);
            if (this.own_pub_key_sig.length)
                writer.writeBytes(2, this.own_pub_key_sig);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Confirm {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Confirm();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.member_id = reader.readUint64();
                        break;
                    case 2:
                        message.own_pub_key_sig = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Confirm {
            return Confirm.deserialize(bytes);
        }
    }
    export class Complaint extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            complainant?: number;
            respondent?: number;
            key_sym?: Uint8Array;
            signature?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("complainant" in data && data.complainant != undefined) {
                    this.complainant = data.complainant;
                }
                if ("respondent" in data && data.respondent != undefined) {
                    this.respondent = data.respondent;
                }
                if ("key_sym" in data && data.key_sym != undefined) {
                    this.key_sym = data.key_sym;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get complainant() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set complainant(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get respondent() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set respondent(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get key_sym() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set key_sym(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            complainant?: number;
            respondent?: number;
            key_sym?: Uint8Array;
            signature?: Uint8Array;
        }): Complaint {
            const message = new Complaint({});
            if (data.complainant != null) {
                message.complainant = data.complainant;
            }
            if (data.respondent != null) {
                message.respondent = data.respondent;
            }
            if (data.key_sym != null) {
                message.key_sym = data.key_sym;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                complainant?: number;
                respondent?: number;
                key_sym?: Uint8Array;
                signature?: Uint8Array;
            } = {};
            if (this.complainant != null) {
                data.complainant = this.complainant;
            }
            if (this.respondent != null) {
                data.respondent = this.respondent;
            }
            if (this.key_sym != null) {
                data.key_sym = this.key_sym;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.complainant != 0)
                writer.writeUint64(1, this.complainant);
            if (this.respondent != 0)
                writer.writeUint64(2, this.respondent);
            if (this.key_sym.length)
                writer.writeBytes(3, this.key_sym);
            if (this.signature.length)
                writer.writeBytes(4, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Complaint {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Complaint();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.complainant = reader.readUint64();
                        break;
                    case 2:
                        message.respondent = reader.readUint64();
                        break;
                    case 3:
                        message.key_sym = reader.readBytes();
                        break;
                    case 4:
                        message.signature = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Complaint {
            return Complaint.deserialize(bytes);
        }
    }
    export class ComplaintWithStatus extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            complaint?: Complaint;
            complaint_status?: ComplaintStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("complaint" in data && data.complaint != undefined) {
                    this.complaint = data.complaint;
                }
                if ("complaint_status" in data && data.complaint_status != undefined) {
                    this.complaint_status = data.complaint_status;
                }
            }
        }
        get complaint() {
            return pb_1.Message.getWrapperField(this, Complaint, 1) as Complaint;
        }
        set complaint(value: Complaint) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_complaint() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get complaint_status() {
            return pb_1.Message.getFieldWithDefault(this, 2, ComplaintStatus.COMPLAINT_STATUS_UNSPECIFIED) as ComplaintStatus;
        }
        set complaint_status(value: ComplaintStatus) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            complaint?: ReturnType<typeof Complaint.prototype.toObject>;
            complaint_status?: ComplaintStatus;
        }): ComplaintWithStatus {
            const message = new ComplaintWithStatus({});
            if (data.complaint != null) {
                message.complaint = Complaint.fromObject(data.complaint);
            }
            if (data.complaint_status != null) {
                message.complaint_status = data.complaint_status;
            }
            return message;
        }
        toObject() {
            const data: {
                complaint?: ReturnType<typeof Complaint.prototype.toObject>;
                complaint_status?: ComplaintStatus;
            } = {};
            if (this.complaint != null) {
                data.complaint = this.complaint.toObject();
            }
            if (this.complaint_status != null) {
                data.complaint_status = this.complaint_status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_complaint)
                writer.writeMessage(1, this.complaint, () => this.complaint.serialize(writer));
            if (this.complaint_status != ComplaintStatus.COMPLAINT_STATUS_UNSPECIFIED)
                writer.writeEnum(2, this.complaint_status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ComplaintWithStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ComplaintWithStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.complaint, () => message.complaint = Complaint.deserialize(reader));
                        break;
                    case 2:
                        message.complaint_status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ComplaintWithStatus {
            return ComplaintWithStatus.deserialize(bytes);
        }
    }
    export class ComplaintsWithStatus extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            member_id?: number;
            complaints_with_status?: ComplaintWithStatus[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("member_id" in data && data.member_id != undefined) {
                    this.member_id = data.member_id;
                }
                if ("complaints_with_status" in data && data.complaints_with_status != undefined) {
                    this.complaints_with_status = data.complaints_with_status;
                }
            }
        }
        get member_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set member_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get complaints_with_status() {
            return pb_1.Message.getRepeatedWrapperField(this, ComplaintWithStatus, 2) as ComplaintWithStatus[];
        }
        set complaints_with_status(value: ComplaintWithStatus[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            member_id?: number;
            complaints_with_status?: ReturnType<typeof ComplaintWithStatus.prototype.toObject>[];
        }): ComplaintsWithStatus {
            const message = new ComplaintsWithStatus({});
            if (data.member_id != null) {
                message.member_id = data.member_id;
            }
            if (data.complaints_with_status != null) {
                message.complaints_with_status = data.complaints_with_status.map(item => ComplaintWithStatus.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                member_id?: number;
                complaints_with_status?: ReturnType<typeof ComplaintWithStatus.prototype.toObject>[];
            } = {};
            if (this.member_id != null) {
                data.member_id = this.member_id;
            }
            if (this.complaints_with_status != null) {
                data.complaints_with_status = this.complaints_with_status.map((item: ComplaintWithStatus) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.member_id != 0)
                writer.writeUint64(1, this.member_id);
            if (this.complaints_with_status.length)
                writer.writeRepeatedMessage(2, this.complaints_with_status, (item: ComplaintWithStatus) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ComplaintsWithStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ComplaintsWithStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.member_id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.complaints_with_status, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ComplaintWithStatus.deserialize(reader), ComplaintWithStatus));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ComplaintsWithStatus {
            return ComplaintsWithStatus.deserialize(bytes);
        }
    }
    export class PendingProcessGroups extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_ids" in data && data.group_ids != undefined) {
                    this.group_ids = data.group_ids;
                }
            }
        }
        get group_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set group_ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            group_ids?: number[];
        }): PendingProcessGroups {
            const message = new PendingProcessGroups({});
            if (data.group_ids != null) {
                message.group_ids = data.group_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                group_ids?: number[];
            } = {};
            if (this.group_ids != null) {
                data.group_ids = this.group_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_ids.length)
                writer.writePackedUint64(1, this.group_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PendingProcessGroups {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PendingProcessGroups();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_ids = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PendingProcessGroups {
            return PendingProcessGroups.deserialize(bytes);
        }
    }
    export class PendingProcessSignings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signing_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signing_ids" in data && data.signing_ids != undefined) {
                    this.signing_ids = data.signing_ids;
                }
            }
        }
        get signing_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set signing_ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            signing_ids?: number[];
        }): PendingProcessSignings {
            const message = new PendingProcessSignings({});
            if (data.signing_ids != null) {
                message.signing_ids = data.signing_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                signing_ids?: number[];
            } = {};
            if (this.signing_ids != null) {
                data.signing_ids = this.signing_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signing_ids.length)
                writer.writePackedUint64(1, this.signing_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PendingProcessSignings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PendingProcessSignings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signing_ids = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PendingProcessSignings {
            return PendingProcessSignings.deserialize(bytes);
        }
    }
    export class PartialSignature extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signing_id?: number;
            signing_attempt?: number;
            member_id?: number;
            signature?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signing_id" in data && data.signing_id != undefined) {
                    this.signing_id = data.signing_id;
                }
                if ("signing_attempt" in data && data.signing_attempt != undefined) {
                    this.signing_attempt = data.signing_attempt;
                }
                if ("member_id" in data && data.member_id != undefined) {
                    this.member_id = data.member_id;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get signing_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set signing_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get signing_attempt() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set signing_attempt(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get member_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set member_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            signing_id?: number;
            signing_attempt?: number;
            member_id?: number;
            signature?: Uint8Array;
        }): PartialSignature {
            const message = new PartialSignature({});
            if (data.signing_id != null) {
                message.signing_id = data.signing_id;
            }
            if (data.signing_attempt != null) {
                message.signing_attempt = data.signing_attempt;
            }
            if (data.member_id != null) {
                message.member_id = data.member_id;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                signing_id?: number;
                signing_attempt?: number;
                member_id?: number;
                signature?: Uint8Array;
            } = {};
            if (this.signing_id != null) {
                data.signing_id = this.signing_id;
            }
            if (this.signing_attempt != null) {
                data.signing_attempt = this.signing_attempt;
            }
            if (this.member_id != null) {
                data.member_id = this.member_id;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signing_id != 0)
                writer.writeUint64(1, this.signing_id);
            if (this.signing_attempt != 0)
                writer.writeUint64(2, this.signing_attempt);
            if (this.member_id != 0)
                writer.writeUint64(3, this.member_id);
            if (this.signature.length)
                writer.writeBytes(4, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PartialSignature {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PartialSignature();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signing_id = reader.readUint64();
                        break;
                    case 2:
                        message.signing_attempt = reader.readUint64();
                        break;
                    case 3:
                        message.member_id = reader.readUint64();
                        break;
                    case 4:
                        message.signature = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PartialSignature {
            return PartialSignature.deserialize(bytes);
        }
    }
    export class TextSignatureOrder extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set message(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: Uint8Array;
        }): TextSignatureOrder {
            const message = new TextSignatureOrder({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: Uint8Array;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeBytes(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TextSignatureOrder {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TextSignatureOrder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TextSignatureOrder {
            return TextSignatureOrder.deserialize(bytes);
        }
    }
    export class EVMSignature extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            r_address?: Uint8Array;
            signature?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("r_address" in data && data.r_address != undefined) {
                    this.r_address = data.r_address;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get r_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set r_address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            r_address?: Uint8Array;
            signature?: Uint8Array;
        }): EVMSignature {
            const message = new EVMSignature({});
            if (data.r_address != null) {
                message.r_address = data.r_address;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                r_address?: Uint8Array;
                signature?: Uint8Array;
            } = {};
            if (this.r_address != null) {
                data.r_address = this.r_address;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.r_address.length)
                writer.writeBytes(1, this.r_address);
            if (this.signature.length)
                writer.writeBytes(2, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EVMSignature {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EVMSignature();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.r_address = reader.readBytes();
                        break;
                    case 2:
                        message.signature = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EVMSignature {
            return EVMSignature.deserialize(bytes);
        }
    }
    export class SigningResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signing?: Signing;
            current_signing_attempt?: SigningAttempt;
            evm_signature?: EVMSignature;
            received_partial_signatures?: PartialSignature[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signing" in data && data.signing != undefined) {
                    this.signing = data.signing;
                }
                if ("current_signing_attempt" in data && data.current_signing_attempt != undefined) {
                    this.current_signing_attempt = data.current_signing_attempt;
                }
                if ("evm_signature" in data && data.evm_signature != undefined) {
                    this.evm_signature = data.evm_signature;
                }
                if ("received_partial_signatures" in data && data.received_partial_signatures != undefined) {
                    this.received_partial_signatures = data.received_partial_signatures;
                }
            }
        }
        get signing() {
            return pb_1.Message.getWrapperField(this, Signing, 1) as Signing;
        }
        set signing(value: Signing) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_signing() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get current_signing_attempt() {
            return pb_1.Message.getWrapperField(this, SigningAttempt, 2) as SigningAttempt;
        }
        set current_signing_attempt(value: SigningAttempt) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_current_signing_attempt() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get evm_signature() {
            return pb_1.Message.getWrapperField(this, EVMSignature, 3) as EVMSignature;
        }
        set evm_signature(value: EVMSignature) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_evm_signature() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get received_partial_signatures() {
            return pb_1.Message.getRepeatedWrapperField(this, PartialSignature, 4) as PartialSignature[];
        }
        set received_partial_signatures(value: PartialSignature[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            signing?: ReturnType<typeof Signing.prototype.toObject>;
            current_signing_attempt?: ReturnType<typeof SigningAttempt.prototype.toObject>;
            evm_signature?: ReturnType<typeof EVMSignature.prototype.toObject>;
            received_partial_signatures?: ReturnType<typeof PartialSignature.prototype.toObject>[];
        }): SigningResult {
            const message = new SigningResult({});
            if (data.signing != null) {
                message.signing = Signing.fromObject(data.signing);
            }
            if (data.current_signing_attempt != null) {
                message.current_signing_attempt = SigningAttempt.fromObject(data.current_signing_attempt);
            }
            if (data.evm_signature != null) {
                message.evm_signature = EVMSignature.fromObject(data.evm_signature);
            }
            if (data.received_partial_signatures != null) {
                message.received_partial_signatures = data.received_partial_signatures.map(item => PartialSignature.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                signing?: ReturnType<typeof Signing.prototype.toObject>;
                current_signing_attempt?: ReturnType<typeof SigningAttempt.prototype.toObject>;
                evm_signature?: ReturnType<typeof EVMSignature.prototype.toObject>;
                received_partial_signatures?: ReturnType<typeof PartialSignature.prototype.toObject>[];
            } = {};
            if (this.signing != null) {
                data.signing = this.signing.toObject();
            }
            if (this.current_signing_attempt != null) {
                data.current_signing_attempt = this.current_signing_attempt.toObject();
            }
            if (this.evm_signature != null) {
                data.evm_signature = this.evm_signature.toObject();
            }
            if (this.received_partial_signatures != null) {
                data.received_partial_signatures = this.received_partial_signatures.map((item: PartialSignature) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_signing)
                writer.writeMessage(1, this.signing, () => this.signing.serialize(writer));
            if (this.has_current_signing_attempt)
                writer.writeMessage(2, this.current_signing_attempt, () => this.current_signing_attempt.serialize(writer));
            if (this.has_evm_signature)
                writer.writeMessage(3, this.evm_signature, () => this.evm_signature.serialize(writer));
            if (this.received_partial_signatures.length)
                writer.writeRepeatedMessage(4, this.received_partial_signatures, (item: PartialSignature) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SigningResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SigningResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.signing, () => message.signing = Signing.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.current_signing_attempt, () => message.current_signing_attempt = SigningAttempt.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.evm_signature, () => message.evm_signature = EVMSignature.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.received_partial_signatures, () => pb_1.Message.addToRepeatedWrapperField(message, 4, PartialSignature.deserialize(reader), PartialSignature));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SigningResult {
            return SigningResult.deserialize(bytes);
        }
    }
    export class SigningExpiration extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signing_id?: number;
            signing_attempt?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signing_id" in data && data.signing_id != undefined) {
                    this.signing_id = data.signing_id;
                }
                if ("signing_attempt" in data && data.signing_attempt != undefined) {
                    this.signing_attempt = data.signing_attempt;
                }
            }
        }
        get signing_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set signing_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get signing_attempt() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set signing_attempt(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            signing_id?: number;
            signing_attempt?: number;
        }): SigningExpiration {
            const message = new SigningExpiration({});
            if (data.signing_id != null) {
                message.signing_id = data.signing_id;
            }
            if (data.signing_attempt != null) {
                message.signing_attempt = data.signing_attempt;
            }
            return message;
        }
        toObject() {
            const data: {
                signing_id?: number;
                signing_attempt?: number;
            } = {};
            if (this.signing_id != null) {
                data.signing_id = this.signing_id;
            }
            if (this.signing_attempt != null) {
                data.signing_attempt = this.signing_attempt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signing_id != 0)
                writer.writeUint64(1, this.signing_id);
            if (this.signing_attempt != 0)
                writer.writeUint64(2, this.signing_attempt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SigningExpiration {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SigningExpiration();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signing_id = reader.readUint64();
                        break;
                    case 2:
                        message.signing_attempt = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SigningExpiration {
            return SigningExpiration.deserialize(bytes);
        }
    }
    export class SigningExpirations extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signing_expirations?: SigningExpiration[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signing_expirations" in data && data.signing_expirations != undefined) {
                    this.signing_expirations = data.signing_expirations;
                }
            }
        }
        get signing_expirations() {
            return pb_1.Message.getRepeatedWrapperField(this, SigningExpiration, 1) as SigningExpiration[];
        }
        set signing_expirations(value: SigningExpiration[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            signing_expirations?: ReturnType<typeof SigningExpiration.prototype.toObject>[];
        }): SigningExpirations {
            const message = new SigningExpirations({});
            if (data.signing_expirations != null) {
                message.signing_expirations = data.signing_expirations.map(item => SigningExpiration.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                signing_expirations?: ReturnType<typeof SigningExpiration.prototype.toObject>[];
            } = {};
            if (this.signing_expirations != null) {
                data.signing_expirations = this.signing_expirations.map((item: SigningExpiration) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signing_expirations.length)
                writer.writeRepeatedMessage(1, this.signing_expirations, (item: SigningExpiration) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SigningExpirations {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SigningExpirations();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.signing_expirations, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SigningExpiration.deserialize(reader), SigningExpiration));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SigningExpirations {
            return SigningExpirations.deserialize(bytes);
        }
    }
}
