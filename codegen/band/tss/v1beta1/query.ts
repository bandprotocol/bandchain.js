/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/tss/v1beta1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../../../cosmos/base/query/v1beta1/pagination";
import * as dependency_3 from "./../../../google/api/annotations";
import * as dependency_4 from "./tss";
import * as dependency_5 from "./genesis";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace band.tss.v1beta1 {
    export class QueryCountsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryCountsRequest {
            const message = new QueryCountsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCountsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCountsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCountsRequest {
            return QueryCountsRequest.deserialize(bytes);
        }
    }
    export class QueryCountsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_count?: number;
            signing_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_count" in data && data.group_count != undefined) {
                    this.group_count = data.group_count;
                }
                if ("signing_count" in data && data.signing_count != undefined) {
                    this.signing_count = data.signing_count;
                }
            }
        }
        get group_count() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_count(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get signing_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set signing_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            group_count?: number;
            signing_count?: number;
        }): QueryCountsResponse {
            const message = new QueryCountsResponse({});
            if (data.group_count != null) {
                message.group_count = data.group_count;
            }
            if (data.signing_count != null) {
                message.signing_count = data.signing_count;
            }
            return message;
        }
        toObject() {
            const data: {
                group_count?: number;
                signing_count?: number;
            } = {};
            if (this.group_count != null) {
                data.group_count = this.group_count;
            }
            if (this.signing_count != null) {
                data.signing_count = this.signing_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_count != 0)
                writer.writeUint64(1, this.group_count);
            if (this.signing_count != 0)
                writer.writeUint64(2, this.signing_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCountsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCountsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_count = reader.readUint64();
                        break;
                    case 2:
                        message.signing_count = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCountsResponse {
            return QueryCountsResponse.deserialize(bytes);
        }
    }
    export class QueryGroupRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            group_id?: number;
        }): QueryGroupRequest {
            const message = new QueryGroupRequest({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint64(1, this.group_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryGroupRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryGroupRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryGroupRequest {
            return QueryGroupRequest.deserialize(bytes);
        }
    }
    export class QueryGroupResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_result?: dependency_4.band.tss.v1beta1.GroupResult;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_result" in data && data.group_result != undefined) {
                    this.group_result = data.group_result;
                }
            }
        }
        get group_result() {
            return pb_1.Message.getWrapperField(this, dependency_4.band.tss.v1beta1.GroupResult, 1) as dependency_4.band.tss.v1beta1.GroupResult;
        }
        set group_result(value: dependency_4.band.tss.v1beta1.GroupResult) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_group_result() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            group_result?: ReturnType<typeof dependency_4.band.tss.v1beta1.GroupResult.prototype.toObject>;
        }): QueryGroupResponse {
            const message = new QueryGroupResponse({});
            if (data.group_result != null) {
                message.group_result = dependency_4.band.tss.v1beta1.GroupResult.fromObject(data.group_result);
            }
            return message;
        }
        toObject() {
            const data: {
                group_result?: ReturnType<typeof dependency_4.band.tss.v1beta1.GroupResult.prototype.toObject>;
            } = {};
            if (this.group_result != null) {
                data.group_result = this.group_result.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_group_result)
                writer.writeMessage(1, this.group_result, () => this.group_result.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryGroupResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryGroupResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.group_result, () => message.group_result = dependency_4.band.tss.v1beta1.GroupResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryGroupResponse {
            return QueryGroupResponse.deserialize(bytes);
        }
    }
    export class QueryGroupsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageRequest, 1) as dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }): QueryGroupsRequest {
            const message = new QueryGroupsRequest({});
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_pagination)
                writer.writeMessage(1, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryGroupsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryGroupsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryGroupsRequest {
            return QueryGroupsRequest.deserialize(bytes);
        }
    }
    export class QueryGroupsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            groups?: dependency_4.band.tss.v1beta1.GroupResult[];
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("groups" in data && data.groups != undefined) {
                    this.groups = data.groups;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get groups() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.band.tss.v1beta1.GroupResult, 1) as dependency_4.band.tss.v1beta1.GroupResult[];
        }
        set groups(value: dependency_4.band.tss.v1beta1.GroupResult[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_2.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            groups?: ReturnType<typeof dependency_4.band.tss.v1beta1.GroupResult.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }): QueryGroupsResponse {
            const message = new QueryGroupsResponse({});
            if (data.groups != null) {
                message.groups = data.groups.map(item => dependency_4.band.tss.v1beta1.GroupResult.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                groups?: ReturnType<typeof dependency_4.band.tss.v1beta1.GroupResult.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.groups != null) {
                data.groups = this.groups.map((item: dependency_4.band.tss.v1beta1.GroupResult) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.groups.length)
                writer.writeRepeatedMessage(1, this.groups, (item: dependency_4.band.tss.v1beta1.GroupResult) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryGroupsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryGroupsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.groups, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.band.tss.v1beta1.GroupResult.deserialize(reader), dependency_4.band.tss.v1beta1.GroupResult));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryGroupsResponse {
            return QueryGroupsResponse.deserialize(bytes);
        }
    }
    export class QueryMembersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            group_id?: number;
        }): QueryMembersRequest {
            const message = new QueryMembersRequest({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint64(1, this.group_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryMembersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryMembersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryMembersRequest {
            return QueryMembersRequest.deserialize(bytes);
        }
    }
    export class QueryMembersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            members?: dependency_4.band.tss.v1beta1.Member[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("members" in data && data.members != undefined) {
                    this.members = data.members;
                }
            }
        }
        get members() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.band.tss.v1beta1.Member, 1) as dependency_4.band.tss.v1beta1.Member[];
        }
        set members(value: dependency_4.band.tss.v1beta1.Member[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            members?: ReturnType<typeof dependency_4.band.tss.v1beta1.Member.prototype.toObject>[];
        }): QueryMembersResponse {
            const message = new QueryMembersResponse({});
            if (data.members != null) {
                message.members = data.members.map(item => dependency_4.band.tss.v1beta1.Member.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                members?: ReturnType<typeof dependency_4.band.tss.v1beta1.Member.prototype.toObject>[];
            } = {};
            if (this.members != null) {
                data.members = this.members.map((item: dependency_4.band.tss.v1beta1.Member) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.members.length)
                writer.writeRepeatedMessage(1, this.members, (item: dependency_4.band.tss.v1beta1.Member) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryMembersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryMembersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.members, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.band.tss.v1beta1.Member.deserialize(reader), dependency_4.band.tss.v1beta1.Member));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryMembersResponse {
            return QueryMembersResponse.deserialize(bytes);
        }
    }
    export class QueryIsGranteeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            granter?: string;
            grantee?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("granter" in data && data.granter != undefined) {
                    this.granter = data.granter;
                }
                if ("grantee" in data && data.grantee != undefined) {
                    this.grantee = data.grantee;
                }
            }
        }
        get granter() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set granter(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get grantee() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set grantee(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            granter?: string;
            grantee?: string;
        }): QueryIsGranteeRequest {
            const message = new QueryIsGranteeRequest({});
            if (data.granter != null) {
                message.granter = data.granter;
            }
            if (data.grantee != null) {
                message.grantee = data.grantee;
            }
            return message;
        }
        toObject() {
            const data: {
                granter?: string;
                grantee?: string;
            } = {};
            if (this.granter != null) {
                data.granter = this.granter;
            }
            if (this.grantee != null) {
                data.grantee = this.grantee;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.granter.length)
                writer.writeString(1, this.granter);
            if (this.grantee.length)
                writer.writeString(2, this.grantee);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryIsGranteeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryIsGranteeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.granter = reader.readString();
                        break;
                    case 2:
                        message.grantee = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryIsGranteeRequest {
            return QueryIsGranteeRequest.deserialize(bytes);
        }
    }
    export class QueryIsGranteeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            is_grantee?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_grantee" in data && data.is_grantee != undefined) {
                    this.is_grantee = data.is_grantee;
                }
            }
        }
        get is_grantee() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set is_grantee(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            is_grantee?: boolean;
        }): QueryIsGranteeResponse {
            const message = new QueryIsGranteeResponse({});
            if (data.is_grantee != null) {
                message.is_grantee = data.is_grantee;
            }
            return message;
        }
        toObject() {
            const data: {
                is_grantee?: boolean;
            } = {};
            if (this.is_grantee != null) {
                data.is_grantee = this.is_grantee;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_grantee != false)
                writer.writeBool(1, this.is_grantee);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryIsGranteeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryIsGranteeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_grantee = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryIsGranteeResponse {
            return QueryIsGranteeResponse.deserialize(bytes);
        }
    }
    export class QueryDERequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageRequest, 2) as dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            address?: string;
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }): QueryDERequest {
            const message = new QueryDERequest({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDERequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDERequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDERequest {
            return QueryDERequest.deserialize(bytes);
        }
    }
    export class QueryDEResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            des?: dependency_4.band.tss.v1beta1.DE[];
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("des" in data && data.des != undefined) {
                    this.des = data.des;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get des() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.band.tss.v1beta1.DE, 1) as dependency_4.band.tss.v1beta1.DE[];
        }
        set des(value: dependency_4.band.tss.v1beta1.DE[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_2.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            des?: ReturnType<typeof dependency_4.band.tss.v1beta1.DE.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }): QueryDEResponse {
            const message = new QueryDEResponse({});
            if (data.des != null) {
                message.des = data.des.map(item => dependency_4.band.tss.v1beta1.DE.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                des?: ReturnType<typeof dependency_4.band.tss.v1beta1.DE.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.des != null) {
                data.des = this.des.map((item: dependency_4.band.tss.v1beta1.DE) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.des.length)
                writer.writeRepeatedMessage(1, this.des, (item: dependency_4.band.tss.v1beta1.DE) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDEResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDEResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.des, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.band.tss.v1beta1.DE.deserialize(reader), dependency_4.band.tss.v1beta1.DE));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDEResponse {
            return QueryDEResponse.deserialize(bytes);
        }
    }
    export class QueryPendingGroupsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            address?: string;
        }): QueryPendingGroupsRequest {
            const message = new QueryPendingGroupsRequest({});
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPendingGroupsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPendingGroupsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPendingGroupsRequest {
            return QueryPendingGroupsRequest.deserialize(bytes);
        }
    }
    export class QueryPendingGroupsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pending_groups?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pending_groups" in data && data.pending_groups != undefined) {
                    this.pending_groups = data.pending_groups;
                }
            }
        }
        get pending_groups() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set pending_groups(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            pending_groups?: number[];
        }): QueryPendingGroupsResponse {
            const message = new QueryPendingGroupsResponse({});
            if (data.pending_groups != null) {
                message.pending_groups = data.pending_groups;
            }
            return message;
        }
        toObject() {
            const data: {
                pending_groups?: number[];
            } = {};
            if (this.pending_groups != null) {
                data.pending_groups = this.pending_groups;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pending_groups.length)
                writer.writePackedUint64(1, this.pending_groups);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPendingGroupsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPendingGroupsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.pending_groups = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPendingGroupsResponse {
            return QueryPendingGroupsResponse.deserialize(bytes);
        }
    }
    export class QueryPendingSigningsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            address?: string;
        }): QueryPendingSigningsRequest {
            const message = new QueryPendingSigningsRequest({});
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPendingSigningsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPendingSigningsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPendingSigningsRequest {
            return QueryPendingSigningsRequest.deserialize(bytes);
        }
    }
    export class QueryPendingSigningsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pending_signings?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pending_signings" in data && data.pending_signings != undefined) {
                    this.pending_signings = data.pending_signings;
                }
            }
        }
        get pending_signings() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set pending_signings(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            pending_signings?: number[];
        }): QueryPendingSigningsResponse {
            const message = new QueryPendingSigningsResponse({});
            if (data.pending_signings != null) {
                message.pending_signings = data.pending_signings;
            }
            return message;
        }
        toObject() {
            const data: {
                pending_signings?: number[];
            } = {};
            if (this.pending_signings != null) {
                data.pending_signings = this.pending_signings;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pending_signings.length)
                writer.writePackedUint64(1, this.pending_signings);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPendingSigningsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPendingSigningsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.pending_signings = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPendingSigningsResponse {
            return QueryPendingSigningsResponse.deserialize(bytes);
        }
    }
    export class QuerySigningRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signing_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signing_id" in data && data.signing_id != undefined) {
                    this.signing_id = data.signing_id;
                }
            }
        }
        get signing_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set signing_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            signing_id?: number;
        }): QuerySigningRequest {
            const message = new QuerySigningRequest({});
            if (data.signing_id != null) {
                message.signing_id = data.signing_id;
            }
            return message;
        }
        toObject() {
            const data: {
                signing_id?: number;
            } = {};
            if (this.signing_id != null) {
                data.signing_id = this.signing_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signing_id != 0)
                writer.writeUint64(1, this.signing_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuerySigningRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuerySigningRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signing_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuerySigningRequest {
            return QuerySigningRequest.deserialize(bytes);
        }
    }
    export class QuerySigningResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signing_result?: dependency_4.band.tss.v1beta1.SigningResult;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signing_result" in data && data.signing_result != undefined) {
                    this.signing_result = data.signing_result;
                }
            }
        }
        get signing_result() {
            return pb_1.Message.getWrapperField(this, dependency_4.band.tss.v1beta1.SigningResult, 1) as dependency_4.band.tss.v1beta1.SigningResult;
        }
        set signing_result(value: dependency_4.band.tss.v1beta1.SigningResult) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_signing_result() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            signing_result?: ReturnType<typeof dependency_4.band.tss.v1beta1.SigningResult.prototype.toObject>;
        }): QuerySigningResponse {
            const message = new QuerySigningResponse({});
            if (data.signing_result != null) {
                message.signing_result = dependency_4.band.tss.v1beta1.SigningResult.fromObject(data.signing_result);
            }
            return message;
        }
        toObject() {
            const data: {
                signing_result?: ReturnType<typeof dependency_4.band.tss.v1beta1.SigningResult.prototype.toObject>;
            } = {};
            if (this.signing_result != null) {
                data.signing_result = this.signing_result.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_signing_result)
                writer.writeMessage(1, this.signing_result, () => this.signing_result.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuerySigningResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuerySigningResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.signing_result, () => message.signing_result = dependency_4.band.tss.v1beta1.SigningResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuerySigningResponse {
            return QuerySigningResponse.deserialize(bytes);
        }
    }
    export class QuerySigningsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageRequest, 1) as dependency_2.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }): QuerySigningsRequest {
            const message = new QuerySigningsRequest({});
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_pagination)
                writer.writeMessage(1, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuerySigningsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuerySigningsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuerySigningsRequest {
            return QuerySigningsRequest.deserialize(bytes);
        }
    }
    export class QuerySigningsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signing_results?: dependency_4.band.tss.v1beta1.SigningResult[];
            pagination?: dependency_2.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signing_results" in data && data.signing_results != undefined) {
                    this.signing_results = data.signing_results;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get signing_results() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.band.tss.v1beta1.SigningResult, 1) as dependency_4.band.tss.v1beta1.SigningResult[];
        }
        set signing_results(value: dependency_4.band.tss.v1beta1.SigningResult[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_2.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_2.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            signing_results?: ReturnType<typeof dependency_4.band.tss.v1beta1.SigningResult.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }): QuerySigningsResponse {
            const message = new QuerySigningsResponse({});
            if (data.signing_results != null) {
                message.signing_results = data.signing_results.map(item => dependency_4.band.tss.v1beta1.SigningResult.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                signing_results?: ReturnType<typeof dependency_4.band.tss.v1beta1.SigningResult.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_2.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.signing_results != null) {
                data.signing_results = this.signing_results.map((item: dependency_4.band.tss.v1beta1.SigningResult) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signing_results.length)
                writer.writeRepeatedMessage(1, this.signing_results, (item: dependency_4.band.tss.v1beta1.SigningResult) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuerySigningsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuerySigningsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.signing_results, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.band.tss.v1beta1.SigningResult.deserialize(reader), dependency_4.band.tss.v1beta1.SigningResult));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuerySigningsResponse {
            return QuerySigningsResponse.deserialize(bytes);
        }
    }
    export class QueryParamsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryParamsRequest {
            const message = new QueryParamsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsRequest {
            return QueryParamsRequest.deserialize(bytes);
        }
    }
    export class QueryParamsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            params?: dependency_5.band.tss.v1beta1.Params;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
            }
        }
        get params() {
            return pb_1.Message.getWrapperField(this, dependency_5.band.tss.v1beta1.Params, 1) as dependency_5.band.tss.v1beta1.Params;
        }
        set params(value: dependency_5.band.tss.v1beta1.Params) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            params?: ReturnType<typeof dependency_5.band.tss.v1beta1.Params.prototype.toObject>;
        }): QueryParamsResponse {
            const message = new QueryParamsResponse({});
            if (data.params != null) {
                message.params = dependency_5.band.tss.v1beta1.Params.fromObject(data.params);
            }
            return message;
        }
        toObject() {
            const data: {
                params?: ReturnType<typeof dependency_5.band.tss.v1beta1.Params.prototype.toObject>;
            } = {};
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_params)
                writer.writeMessage(1, this.params, () => this.params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.params, () => message.params = dependency_5.band.tss.v1beta1.Params.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsResponse {
            return QueryParamsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedQueryService {
        static definition = {
            Counts: {
                path: "/band.tss.v1beta1.Query/Counts",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryCountsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryCountsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryCountsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryCountsResponse.deserialize(new Uint8Array(bytes))
            },
            Groups: {
                path: "/band.tss.v1beta1.Query/Groups",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryGroupsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryGroupsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryGroupsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryGroupsResponse.deserialize(new Uint8Array(bytes))
            },
            Group: {
                path: "/band.tss.v1beta1.Query/Group",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryGroupRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryGroupRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryGroupResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryGroupResponse.deserialize(new Uint8Array(bytes))
            },
            Members: {
                path: "/band.tss.v1beta1.Query/Members",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryMembersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryMembersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryMembersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryMembersResponse.deserialize(new Uint8Array(bytes))
            },
            IsGrantee: {
                path: "/band.tss.v1beta1.Query/IsGrantee",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryIsGranteeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryIsGranteeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryIsGranteeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryIsGranteeResponse.deserialize(new Uint8Array(bytes))
            },
            DE: {
                path: "/band.tss.v1beta1.Query/DE",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryDERequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryDERequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryDEResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryDEResponse.deserialize(new Uint8Array(bytes))
            },
            PendingGroups: {
                path: "/band.tss.v1beta1.Query/PendingGroups",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryPendingGroupsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryPendingGroupsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryPendingGroupsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryPendingGroupsResponse.deserialize(new Uint8Array(bytes))
            },
            PendingSignings: {
                path: "/band.tss.v1beta1.Query/PendingSignings",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryPendingSigningsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryPendingSigningsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryPendingSigningsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryPendingSigningsResponse.deserialize(new Uint8Array(bytes))
            },
            Signing: {
                path: "/band.tss.v1beta1.Query/Signing",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuerySigningRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuerySigningRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QuerySigningResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QuerySigningResponse.deserialize(new Uint8Array(bytes))
            },
            Signings: {
                path: "/band.tss.v1beta1.Query/Signings",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuerySigningsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuerySigningsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QuerySigningsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QuerySigningsResponse.deserialize(new Uint8Array(bytes))
            },
            Params: {
                path: "/band.tss.v1beta1.Query/Params",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryParamsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryParamsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryParamsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryParamsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Counts(call: grpc_1.ServerUnaryCall<QueryCountsRequest, QueryCountsResponse>, callback: grpc_1.sendUnaryData<QueryCountsResponse>): void;
        abstract Groups(call: grpc_1.ServerUnaryCall<QueryGroupsRequest, QueryGroupsResponse>, callback: grpc_1.sendUnaryData<QueryGroupsResponse>): void;
        abstract Group(call: grpc_1.ServerUnaryCall<QueryGroupRequest, QueryGroupResponse>, callback: grpc_1.sendUnaryData<QueryGroupResponse>): void;
        abstract Members(call: grpc_1.ServerUnaryCall<QueryMembersRequest, QueryMembersResponse>, callback: grpc_1.sendUnaryData<QueryMembersResponse>): void;
        abstract IsGrantee(call: grpc_1.ServerUnaryCall<QueryIsGranteeRequest, QueryIsGranteeResponse>, callback: grpc_1.sendUnaryData<QueryIsGranteeResponse>): void;
        abstract DE(call: grpc_1.ServerUnaryCall<QueryDERequest, QueryDEResponse>, callback: grpc_1.sendUnaryData<QueryDEResponse>): void;
        abstract PendingGroups(call: grpc_1.ServerUnaryCall<QueryPendingGroupsRequest, QueryPendingGroupsResponse>, callback: grpc_1.sendUnaryData<QueryPendingGroupsResponse>): void;
        abstract PendingSignings(call: grpc_1.ServerUnaryCall<QueryPendingSigningsRequest, QueryPendingSigningsResponse>, callback: grpc_1.sendUnaryData<QueryPendingSigningsResponse>): void;
        abstract Signing(call: grpc_1.ServerUnaryCall<QuerySigningRequest, QuerySigningResponse>, callback: grpc_1.sendUnaryData<QuerySigningResponse>): void;
        abstract Signings(call: grpc_1.ServerUnaryCall<QuerySigningsRequest, QuerySigningsResponse>, callback: grpc_1.sendUnaryData<QuerySigningsResponse>): void;
        abstract Params(call: grpc_1.ServerUnaryCall<QueryParamsRequest, QueryParamsResponse>, callback: grpc_1.sendUnaryData<QueryParamsResponse>): void;
    }
    export class QueryClient extends grpc_1.makeGenericClientConstructor(UnimplementedQueryService.definition, "Query", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Counts: GrpcUnaryServiceInterface<QueryCountsRequest, QueryCountsResponse> = (message: QueryCountsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryCountsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryCountsResponse>, callback?: grpc_1.requestCallback<QueryCountsResponse>): grpc_1.ClientUnaryCall => {
            return super.Counts(message, metadata, options, callback);
        };
        Groups: GrpcUnaryServiceInterface<QueryGroupsRequest, QueryGroupsResponse> = (message: QueryGroupsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryGroupsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryGroupsResponse>, callback?: grpc_1.requestCallback<QueryGroupsResponse>): grpc_1.ClientUnaryCall => {
            return super.Groups(message, metadata, options, callback);
        };
        Group: GrpcUnaryServiceInterface<QueryGroupRequest, QueryGroupResponse> = (message: QueryGroupRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryGroupResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryGroupResponse>, callback?: grpc_1.requestCallback<QueryGroupResponse>): grpc_1.ClientUnaryCall => {
            return super.Group(message, metadata, options, callback);
        };
        Members: GrpcUnaryServiceInterface<QueryMembersRequest, QueryMembersResponse> = (message: QueryMembersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryMembersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryMembersResponse>, callback?: grpc_1.requestCallback<QueryMembersResponse>): grpc_1.ClientUnaryCall => {
            return super.Members(message, metadata, options, callback);
        };
        IsGrantee: GrpcUnaryServiceInterface<QueryIsGranteeRequest, QueryIsGranteeResponse> = (message: QueryIsGranteeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryIsGranteeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryIsGranteeResponse>, callback?: grpc_1.requestCallback<QueryIsGranteeResponse>): grpc_1.ClientUnaryCall => {
            return super.IsGrantee(message, metadata, options, callback);
        };
        DE: GrpcUnaryServiceInterface<QueryDERequest, QueryDEResponse> = (message: QueryDERequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryDEResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryDEResponse>, callback?: grpc_1.requestCallback<QueryDEResponse>): grpc_1.ClientUnaryCall => {
            return super.DE(message, metadata, options, callback);
        };
        PendingGroups: GrpcUnaryServiceInterface<QueryPendingGroupsRequest, QueryPendingGroupsResponse> = (message: QueryPendingGroupsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryPendingGroupsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryPendingGroupsResponse>, callback?: grpc_1.requestCallback<QueryPendingGroupsResponse>): grpc_1.ClientUnaryCall => {
            return super.PendingGroups(message, metadata, options, callback);
        };
        PendingSignings: GrpcUnaryServiceInterface<QueryPendingSigningsRequest, QueryPendingSigningsResponse> = (message: QueryPendingSigningsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryPendingSigningsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryPendingSigningsResponse>, callback?: grpc_1.requestCallback<QueryPendingSigningsResponse>): grpc_1.ClientUnaryCall => {
            return super.PendingSignings(message, metadata, options, callback);
        };
        Signing: GrpcUnaryServiceInterface<QuerySigningRequest, QuerySigningResponse> = (message: QuerySigningRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QuerySigningResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QuerySigningResponse>, callback?: grpc_1.requestCallback<QuerySigningResponse>): grpc_1.ClientUnaryCall => {
            return super.Signing(message, metadata, options, callback);
        };
        Signings: GrpcUnaryServiceInterface<QuerySigningsRequest, QuerySigningsResponse> = (message: QuerySigningsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QuerySigningsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QuerySigningsResponse>, callback?: grpc_1.requestCallback<QuerySigningsResponse>): grpc_1.ClientUnaryCall => {
            return super.Signings(message, metadata, options, callback);
        };
        Params: GrpcUnaryServiceInterface<QueryParamsRequest, QueryParamsResponse> = (message: QueryParamsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryParamsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryParamsResponse>, callback?: grpc_1.requestCallback<QueryParamsResponse>): grpc_1.ClientUnaryCall => {
            return super.Params(message, metadata, options, callback);
        };
    }
}
