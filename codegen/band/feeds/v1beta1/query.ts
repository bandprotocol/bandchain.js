/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/feeds/v1beta1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../../../google/api/annotations";
import * as dependency_3 from "./../../../cosmos_proto/cosmos";
import * as dependency_4 from "./../../../cosmos/base/query/v1beta1/pagination";
import * as dependency_5 from "./feeds";
import * as dependency_6 from "./params";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace band.feeds.v1beta1 {
    export class QueryCurrentFeedsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryCurrentFeedsRequest {
            const message = new QueryCurrentFeedsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCurrentFeedsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCurrentFeedsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCurrentFeedsRequest {
            return QueryCurrentFeedsRequest.deserialize(bytes);
        }
    }
    export class QueryCurrentFeedsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            current_feeds?: dependency_5.band.feeds.v1beta1.CurrentFeedWithDeviations;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("current_feeds" in data && data.current_feeds != undefined) {
                    this.current_feeds = data.current_feeds;
                }
            }
        }
        get current_feeds() {
            return pb_1.Message.getWrapperField(this, dependency_5.band.feeds.v1beta1.CurrentFeedWithDeviations, 1) as dependency_5.band.feeds.v1beta1.CurrentFeedWithDeviations;
        }
        set current_feeds(value: dependency_5.band.feeds.v1beta1.CurrentFeedWithDeviations) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_current_feeds() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            current_feeds?: ReturnType<typeof dependency_5.band.feeds.v1beta1.CurrentFeedWithDeviations.prototype.toObject>;
        }): QueryCurrentFeedsResponse {
            const message = new QueryCurrentFeedsResponse({});
            if (data.current_feeds != null) {
                message.current_feeds = dependency_5.band.feeds.v1beta1.CurrentFeedWithDeviations.fromObject(data.current_feeds);
            }
            return message;
        }
        toObject() {
            const data: {
                current_feeds?: ReturnType<typeof dependency_5.band.feeds.v1beta1.CurrentFeedWithDeviations.prototype.toObject>;
            } = {};
            if (this.current_feeds != null) {
                data.current_feeds = this.current_feeds.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_current_feeds)
                writer.writeMessage(1, this.current_feeds, () => this.current_feeds.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCurrentFeedsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCurrentFeedsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.current_feeds, () => message.current_feeds = dependency_5.band.feeds.v1beta1.CurrentFeedWithDeviations.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCurrentFeedsResponse {
            return QueryCurrentFeedsResponse.deserialize(bytes);
        }
    }
    export class QueryIsFeederRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validator?: string;
            feeder?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator" in data && data.validator != undefined) {
                    this.validator = data.validator;
                }
                if ("feeder" in data && data.feeder != undefined) {
                    this.feeder = data.feeder;
                }
            }
        }
        get validator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set validator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get feeder() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set feeder(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            validator?: string;
            feeder?: string;
        }): QueryIsFeederRequest {
            const message = new QueryIsFeederRequest({});
            if (data.validator != null) {
                message.validator = data.validator;
            }
            if (data.feeder != null) {
                message.feeder = data.feeder;
            }
            return message;
        }
        toObject() {
            const data: {
                validator?: string;
                feeder?: string;
            } = {};
            if (this.validator != null) {
                data.validator = this.validator;
            }
            if (this.feeder != null) {
                data.feeder = this.feeder;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validator.length)
                writer.writeString(1, this.validator);
            if (this.feeder.length)
                writer.writeString(2, this.feeder);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryIsFeederRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryIsFeederRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.validator = reader.readString();
                        break;
                    case 2:
                        message.feeder = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryIsFeederRequest {
            return QueryIsFeederRequest.deserialize(bytes);
        }
    }
    export class QueryIsFeederResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            is_feeder?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_feeder" in data && data.is_feeder != undefined) {
                    this.is_feeder = data.is_feeder;
                }
            }
        }
        get is_feeder() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set is_feeder(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            is_feeder?: boolean;
        }): QueryIsFeederResponse {
            const message = new QueryIsFeederResponse({});
            if (data.is_feeder != null) {
                message.is_feeder = data.is_feeder;
            }
            return message;
        }
        toObject() {
            const data: {
                is_feeder?: boolean;
            } = {};
            if (this.is_feeder != null) {
                data.is_feeder = this.is_feeder;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_feeder != false)
                writer.writeBool(1, this.is_feeder);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryIsFeederResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryIsFeederResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_feeder = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryIsFeederResponse {
            return QueryIsFeederResponse.deserialize(bytes);
        }
    }
    export class QueryParamsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryParamsRequest {
            const message = new QueryParamsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsRequest {
            return QueryParamsRequest.deserialize(bytes);
        }
    }
    export class QueryParamsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            params?: dependency_6.band.feeds.v1beta1.Params;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
            }
        }
        get params() {
            return pb_1.Message.getWrapperField(this, dependency_6.band.feeds.v1beta1.Params, 1) as dependency_6.band.feeds.v1beta1.Params;
        }
        set params(value: dependency_6.band.feeds.v1beta1.Params) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            params?: ReturnType<typeof dependency_6.band.feeds.v1beta1.Params.prototype.toObject>;
        }): QueryParamsResponse {
            const message = new QueryParamsResponse({});
            if (data.params != null) {
                message.params = dependency_6.band.feeds.v1beta1.Params.fromObject(data.params);
            }
            return message;
        }
        toObject() {
            const data: {
                params?: ReturnType<typeof dependency_6.band.feeds.v1beta1.Params.prototype.toObject>;
            } = {};
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_params)
                writer.writeMessage(1, this.params, () => this.params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.params, () => message.params = dependency_6.band.feeds.v1beta1.Params.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsResponse {
            return QueryParamsResponse.deserialize(bytes);
        }
    }
    export class QueryPriceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signal_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signal_id" in data && data.signal_id != undefined) {
                    this.signal_id = data.signal_id;
                }
            }
        }
        get signal_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set signal_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            signal_id?: string;
        }): QueryPriceRequest {
            const message = new QueryPriceRequest({});
            if (data.signal_id != null) {
                message.signal_id = data.signal_id;
            }
            return message;
        }
        toObject() {
            const data: {
                signal_id?: string;
            } = {};
            if (this.signal_id != null) {
                data.signal_id = this.signal_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signal_id.length)
                writer.writeString(1, this.signal_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPriceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPriceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signal_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPriceRequest {
            return QueryPriceRequest.deserialize(bytes);
        }
    }
    export class QueryPriceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            price?: dependency_5.band.feeds.v1beta1.Price;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
            }
        }
        get price() {
            return pb_1.Message.getWrapperField(this, dependency_5.band.feeds.v1beta1.Price, 1) as dependency_5.band.feeds.v1beta1.Price;
        }
        set price(value: dependency_5.band.feeds.v1beta1.Price) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_price() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            price?: ReturnType<typeof dependency_5.band.feeds.v1beta1.Price.prototype.toObject>;
        }): QueryPriceResponse {
            const message = new QueryPriceResponse({});
            if (data.price != null) {
                message.price = dependency_5.band.feeds.v1beta1.Price.fromObject(data.price);
            }
            return message;
        }
        toObject() {
            const data: {
                price?: ReturnType<typeof dependency_5.band.feeds.v1beta1.Price.prototype.toObject>;
            } = {};
            if (this.price != null) {
                data.price = this.price.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_price)
                writer.writeMessage(1, this.price, () => this.price.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPriceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPriceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.price, () => message.price = dependency_5.band.feeds.v1beta1.Price.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPriceResponse {
            return QueryPriceResponse.deserialize(bytes);
        }
    }
    export class QueryPricesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signal_ids?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signal_ids" in data && data.signal_ids != undefined) {
                    this.signal_ids = data.signal_ids;
                }
            }
        }
        get signal_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set signal_ids(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            signal_ids?: string[];
        }): QueryPricesRequest {
            const message = new QueryPricesRequest({});
            if (data.signal_ids != null) {
                message.signal_ids = data.signal_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                signal_ids?: string[];
            } = {};
            if (this.signal_ids != null) {
                data.signal_ids = this.signal_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signal_ids.length)
                writer.writeRepeatedString(1, this.signal_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPricesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPricesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPricesRequest {
            return QueryPricesRequest.deserialize(bytes);
        }
    }
    export class QueryPricesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            prices?: dependency_5.band.feeds.v1beta1.Price[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("prices" in data && data.prices != undefined) {
                    this.prices = data.prices;
                }
            }
        }
        get prices() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.band.feeds.v1beta1.Price, 1) as dependency_5.band.feeds.v1beta1.Price[];
        }
        set prices(value: dependency_5.band.feeds.v1beta1.Price[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            prices?: ReturnType<typeof dependency_5.band.feeds.v1beta1.Price.prototype.toObject>[];
        }): QueryPricesResponse {
            const message = new QueryPricesResponse({});
            if (data.prices != null) {
                message.prices = data.prices.map(item => dependency_5.band.feeds.v1beta1.Price.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                prices?: ReturnType<typeof dependency_5.band.feeds.v1beta1.Price.prototype.toObject>[];
            } = {};
            if (this.prices != null) {
                data.prices = this.prices.map((item: dependency_5.band.feeds.v1beta1.Price) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.prices.length)
                writer.writeRepeatedMessage(1, this.prices, (item: dependency_5.band.feeds.v1beta1.Price) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPricesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPricesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.prices, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.band.feeds.v1beta1.Price.deserialize(reader), dependency_5.band.feeds.v1beta1.Price));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPricesResponse {
            return QueryPricesResponse.deserialize(bytes);
        }
    }
    export class QueryAllPricesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pagination?: dependency_4.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.base.query.v1beta1.PageRequest, 1) as dependency_4.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_4.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }): QueryAllPricesRequest {
            const message = new QueryAllPricesRequest({});
            if (data.pagination != null) {
                message.pagination = dependency_4.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_pagination)
                writer.writeMessage(1, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAllPricesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAllPricesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_4.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAllPricesRequest {
            return QueryAllPricesRequest.deserialize(bytes);
        }
    }
    export class QueryAllPricesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            prices?: dependency_5.band.feeds.v1beta1.Price[];
            pagination?: dependency_4.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("prices" in data && data.prices != undefined) {
                    this.prices = data.prices;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get prices() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.band.feeds.v1beta1.Price, 1) as dependency_5.band.feeds.v1beta1.Price[];
        }
        set prices(value: dependency_5.band.feeds.v1beta1.Price[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_4.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_4.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            prices?: ReturnType<typeof dependency_5.band.feeds.v1beta1.Price.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }): QueryAllPricesResponse {
            const message = new QueryAllPricesResponse({});
            if (data.prices != null) {
                message.prices = data.prices.map(item => dependency_5.band.feeds.v1beta1.Price.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_4.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                prices?: ReturnType<typeof dependency_5.band.feeds.v1beta1.Price.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.prices != null) {
                data.prices = this.prices.map((item: dependency_5.band.feeds.v1beta1.Price) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.prices.length)
                writer.writeRepeatedMessage(1, this.prices, (item: dependency_5.band.feeds.v1beta1.Price) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAllPricesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAllPricesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.prices, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.band.feeds.v1beta1.Price.deserialize(reader), dependency_5.band.feeds.v1beta1.Price));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_4.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAllPricesResponse {
            return QueryAllPricesResponse.deserialize(bytes);
        }
    }
    export class QueryReferenceSourceConfigRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryReferenceSourceConfigRequest {
            const message = new QueryReferenceSourceConfigRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryReferenceSourceConfigRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryReferenceSourceConfigRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryReferenceSourceConfigRequest {
            return QueryReferenceSourceConfigRequest.deserialize(bytes);
        }
    }
    export class QueryReferenceSourceConfigResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            reference_source_config?: dependency_5.band.feeds.v1beta1.ReferenceSourceConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("reference_source_config" in data && data.reference_source_config != undefined) {
                    this.reference_source_config = data.reference_source_config;
                }
            }
        }
        get reference_source_config() {
            return pb_1.Message.getWrapperField(this, dependency_5.band.feeds.v1beta1.ReferenceSourceConfig, 1) as dependency_5.band.feeds.v1beta1.ReferenceSourceConfig;
        }
        set reference_source_config(value: dependency_5.band.feeds.v1beta1.ReferenceSourceConfig) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_reference_source_config() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            reference_source_config?: ReturnType<typeof dependency_5.band.feeds.v1beta1.ReferenceSourceConfig.prototype.toObject>;
        }): QueryReferenceSourceConfigResponse {
            const message = new QueryReferenceSourceConfigResponse({});
            if (data.reference_source_config != null) {
                message.reference_source_config = dependency_5.band.feeds.v1beta1.ReferenceSourceConfig.fromObject(data.reference_source_config);
            }
            return message;
        }
        toObject() {
            const data: {
                reference_source_config?: ReturnType<typeof dependency_5.band.feeds.v1beta1.ReferenceSourceConfig.prototype.toObject>;
            } = {};
            if (this.reference_source_config != null) {
                data.reference_source_config = this.reference_source_config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_reference_source_config)
                writer.writeMessage(1, this.reference_source_config, () => this.reference_source_config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryReferenceSourceConfigResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryReferenceSourceConfigResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.reference_source_config, () => message.reference_source_config = dependency_5.band.feeds.v1beta1.ReferenceSourceConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryReferenceSourceConfigResponse {
            return QueryReferenceSourceConfigResponse.deserialize(bytes);
        }
    }
    export class QuerySignalTotalPowersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signal_ids?: string[];
            pagination?: dependency_4.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signal_ids" in data && data.signal_ids != undefined) {
                    this.signal_ids = data.signal_ids;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get signal_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set signal_ids(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.base.query.v1beta1.PageRequest, 2) as dependency_4.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_4.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            signal_ids?: string[];
            pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }): QuerySignalTotalPowersRequest {
            const message = new QuerySignalTotalPowersRequest({});
            if (data.signal_ids != null) {
                message.signal_ids = data.signal_ids;
            }
            if (data.pagination != null) {
                message.pagination = dependency_4.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                signal_ids?: string[];
                pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.signal_ids != null) {
                data.signal_ids = this.signal_ids;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signal_ids.length)
                writer.writeRepeatedString(1, this.signal_ids);
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuerySignalTotalPowersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuerySignalTotalPowersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_4.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuerySignalTotalPowersRequest {
            return QuerySignalTotalPowersRequest.deserialize(bytes);
        }
    }
    export class QuerySignalTotalPowersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signal_total_powers?: dependency_5.band.feeds.v1beta1.Signal[];
            pagination?: dependency_4.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signal_total_powers" in data && data.signal_total_powers != undefined) {
                    this.signal_total_powers = data.signal_total_powers;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get signal_total_powers() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.band.feeds.v1beta1.Signal, 1) as dependency_5.band.feeds.v1beta1.Signal[];
        }
        set signal_total_powers(value: dependency_5.band.feeds.v1beta1.Signal[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_4.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_4.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            signal_total_powers?: ReturnType<typeof dependency_5.band.feeds.v1beta1.Signal.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }): QuerySignalTotalPowersResponse {
            const message = new QuerySignalTotalPowersResponse({});
            if (data.signal_total_powers != null) {
                message.signal_total_powers = data.signal_total_powers.map(item => dependency_5.band.feeds.v1beta1.Signal.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_4.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                signal_total_powers?: ReturnType<typeof dependency_5.band.feeds.v1beta1.Signal.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.signal_total_powers != null) {
                data.signal_total_powers = this.signal_total_powers.map((item: dependency_5.band.feeds.v1beta1.Signal) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signal_total_powers.length)
                writer.writeRepeatedMessage(1, this.signal_total_powers, (item: dependency_5.band.feeds.v1beta1.Signal) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuerySignalTotalPowersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuerySignalTotalPowersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.signal_total_powers, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.band.feeds.v1beta1.Signal.deserialize(reader), dependency_5.band.feeds.v1beta1.Signal));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_4.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuerySignalTotalPowersResponse {
            return QuerySignalTotalPowersResponse.deserialize(bytes);
        }
    }
    export class QueryValidValidatorRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validator?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator" in data && data.validator != undefined) {
                    this.validator = data.validator;
                }
            }
        }
        get validator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set validator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            validator?: string;
        }): QueryValidValidatorRequest {
            const message = new QueryValidValidatorRequest({});
            if (data.validator != null) {
                message.validator = data.validator;
            }
            return message;
        }
        toObject() {
            const data: {
                validator?: string;
            } = {};
            if (this.validator != null) {
                data.validator = this.validator;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validator.length)
                writer.writeString(1, this.validator);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryValidValidatorRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryValidValidatorRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.validator = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryValidValidatorRequest {
            return QueryValidValidatorRequest.deserialize(bytes);
        }
    }
    export class QueryValidValidatorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            valid?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("valid" in data && data.valid != undefined) {
                    this.valid = data.valid;
                }
            }
        }
        get valid() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set valid(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            valid?: boolean;
        }): QueryValidValidatorResponse {
            const message = new QueryValidValidatorResponse({});
            if (data.valid != null) {
                message.valid = data.valid;
            }
            return message;
        }
        toObject() {
            const data: {
                valid?: boolean;
            } = {};
            if (this.valid != null) {
                data.valid = this.valid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.valid != false)
                writer.writeBool(1, this.valid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryValidValidatorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryValidValidatorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.valid = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryValidValidatorResponse {
            return QueryValidValidatorResponse.deserialize(bytes);
        }
    }
    export class QueryValidatorPricesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validator?: string;
            signal_ids?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator" in data && data.validator != undefined) {
                    this.validator = data.validator;
                }
                if ("signal_ids" in data && data.signal_ids != undefined) {
                    this.signal_ids = data.signal_ids;
                }
            }
        }
        get validator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set validator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get signal_ids() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set signal_ids(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            validator?: string;
            signal_ids?: string[];
        }): QueryValidatorPricesRequest {
            const message = new QueryValidatorPricesRequest({});
            if (data.validator != null) {
                message.validator = data.validator;
            }
            if (data.signal_ids != null) {
                message.signal_ids = data.signal_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                validator?: string;
                signal_ids?: string[];
            } = {};
            if (this.validator != null) {
                data.validator = this.validator;
            }
            if (this.signal_ids != null) {
                data.signal_ids = this.signal_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validator.length)
                writer.writeString(1, this.validator);
            if (this.signal_ids.length)
                writer.writeRepeatedString(2, this.signal_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryValidatorPricesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryValidatorPricesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.validator = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryValidatorPricesRequest {
            return QueryValidatorPricesRequest.deserialize(bytes);
        }
    }
    export class QueryValidatorPricesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validator_prices?: dependency_5.band.feeds.v1beta1.ValidatorPrice[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator_prices" in data && data.validator_prices != undefined) {
                    this.validator_prices = data.validator_prices;
                }
            }
        }
        get validator_prices() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.band.feeds.v1beta1.ValidatorPrice, 1) as dependency_5.band.feeds.v1beta1.ValidatorPrice[];
        }
        set validator_prices(value: dependency_5.band.feeds.v1beta1.ValidatorPrice[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            validator_prices?: ReturnType<typeof dependency_5.band.feeds.v1beta1.ValidatorPrice.prototype.toObject>[];
        }): QueryValidatorPricesResponse {
            const message = new QueryValidatorPricesResponse({});
            if (data.validator_prices != null) {
                message.validator_prices = data.validator_prices.map(item => dependency_5.band.feeds.v1beta1.ValidatorPrice.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                validator_prices?: ReturnType<typeof dependency_5.band.feeds.v1beta1.ValidatorPrice.prototype.toObject>[];
            } = {};
            if (this.validator_prices != null) {
                data.validator_prices = this.validator_prices.map((item: dependency_5.band.feeds.v1beta1.ValidatorPrice) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validator_prices.length)
                writer.writeRepeatedMessage(1, this.validator_prices, (item: dependency_5.band.feeds.v1beta1.ValidatorPrice) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryValidatorPricesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryValidatorPricesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.validator_prices, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.band.feeds.v1beta1.ValidatorPrice.deserialize(reader), dependency_5.band.feeds.v1beta1.ValidatorPrice));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryValidatorPricesResponse {
            return QueryValidatorPricesResponse.deserialize(bytes);
        }
    }
    export class QueryVoteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            voter?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("voter" in data && data.voter != undefined) {
                    this.voter = data.voter;
                }
            }
        }
        get voter() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set voter(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            voter?: string;
        }): QueryVoteRequest {
            const message = new QueryVoteRequest({});
            if (data.voter != null) {
                message.voter = data.voter;
            }
            return message;
        }
        toObject() {
            const data: {
                voter?: string;
            } = {};
            if (this.voter != null) {
                data.voter = this.voter;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.voter.length)
                writer.writeString(1, this.voter);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryVoteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryVoteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.voter = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryVoteRequest {
            return QueryVoteRequest.deserialize(bytes);
        }
    }
    export class QueryVoteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signals?: dependency_5.band.feeds.v1beta1.Signal[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signals" in data && data.signals != undefined) {
                    this.signals = data.signals;
                }
            }
        }
        get signals() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.band.feeds.v1beta1.Signal, 1) as dependency_5.band.feeds.v1beta1.Signal[];
        }
        set signals(value: dependency_5.band.feeds.v1beta1.Signal[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            signals?: ReturnType<typeof dependency_5.band.feeds.v1beta1.Signal.prototype.toObject>[];
        }): QueryVoteResponse {
            const message = new QueryVoteResponse({});
            if (data.signals != null) {
                message.signals = data.signals.map(item => dependency_5.band.feeds.v1beta1.Signal.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                signals?: ReturnType<typeof dependency_5.band.feeds.v1beta1.Signal.prototype.toObject>[];
            } = {};
            if (this.signals != null) {
                data.signals = this.signals.map((item: dependency_5.band.feeds.v1beta1.Signal) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signals.length)
                writer.writeRepeatedMessage(1, this.signals, (item: dependency_5.band.feeds.v1beta1.Signal) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryVoteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryVoteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.signals, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.band.feeds.v1beta1.Signal.deserialize(reader), dependency_5.band.feeds.v1beta1.Signal));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryVoteResponse {
            return QueryVoteResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedQueryService {
        static definition = {
            CurrentFeeds: {
                path: "/band.feeds.v1beta1.Query/CurrentFeeds",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryCurrentFeedsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryCurrentFeedsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryCurrentFeedsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryCurrentFeedsResponse.deserialize(new Uint8Array(bytes))
            },
            IsFeeder: {
                path: "/band.feeds.v1beta1.Query/IsFeeder",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryIsFeederRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryIsFeederRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryIsFeederResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryIsFeederResponse.deserialize(new Uint8Array(bytes))
            },
            Params: {
                path: "/band.feeds.v1beta1.Query/Params",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryParamsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryParamsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryParamsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryParamsResponse.deserialize(new Uint8Array(bytes))
            },
            Price: {
                path: "/band.feeds.v1beta1.Query/Price",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryPriceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryPriceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryPriceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryPriceResponse.deserialize(new Uint8Array(bytes))
            },
            Prices: {
                path: "/band.feeds.v1beta1.Query/Prices",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryPricesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryPricesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryPricesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryPricesResponse.deserialize(new Uint8Array(bytes))
            },
            AllPrices: {
                path: "/band.feeds.v1beta1.Query/AllPrices",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryAllPricesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryAllPricesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryAllPricesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryAllPricesResponse.deserialize(new Uint8Array(bytes))
            },
            ReferenceSourceConfig: {
                path: "/band.feeds.v1beta1.Query/ReferenceSourceConfig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryReferenceSourceConfigRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryReferenceSourceConfigRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryReferenceSourceConfigResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryReferenceSourceConfigResponse.deserialize(new Uint8Array(bytes))
            },
            SignalTotalPowers: {
                path: "/band.feeds.v1beta1.Query/SignalTotalPowers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuerySignalTotalPowersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuerySignalTotalPowersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QuerySignalTotalPowersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QuerySignalTotalPowersResponse.deserialize(new Uint8Array(bytes))
            },
            ValidValidator: {
                path: "/band.feeds.v1beta1.Query/ValidValidator",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryValidValidatorRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryValidValidatorRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryValidValidatorResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryValidValidatorResponse.deserialize(new Uint8Array(bytes))
            },
            ValidatorPrices: {
                path: "/band.feeds.v1beta1.Query/ValidatorPrices",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryValidatorPricesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryValidatorPricesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryValidatorPricesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryValidatorPricesResponse.deserialize(new Uint8Array(bytes))
            },
            Vote: {
                path: "/band.feeds.v1beta1.Query/Vote",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryVoteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryVoteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryVoteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryVoteResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CurrentFeeds(call: grpc_1.ServerUnaryCall<QueryCurrentFeedsRequest, QueryCurrentFeedsResponse>, callback: grpc_1.sendUnaryData<QueryCurrentFeedsResponse>): void;
        abstract IsFeeder(call: grpc_1.ServerUnaryCall<QueryIsFeederRequest, QueryIsFeederResponse>, callback: grpc_1.sendUnaryData<QueryIsFeederResponse>): void;
        abstract Params(call: grpc_1.ServerUnaryCall<QueryParamsRequest, QueryParamsResponse>, callback: grpc_1.sendUnaryData<QueryParamsResponse>): void;
        abstract Price(call: grpc_1.ServerUnaryCall<QueryPriceRequest, QueryPriceResponse>, callback: grpc_1.sendUnaryData<QueryPriceResponse>): void;
        abstract Prices(call: grpc_1.ServerUnaryCall<QueryPricesRequest, QueryPricesResponse>, callback: grpc_1.sendUnaryData<QueryPricesResponse>): void;
        abstract AllPrices(call: grpc_1.ServerUnaryCall<QueryAllPricesRequest, QueryAllPricesResponse>, callback: grpc_1.sendUnaryData<QueryAllPricesResponse>): void;
        abstract ReferenceSourceConfig(call: grpc_1.ServerUnaryCall<QueryReferenceSourceConfigRequest, QueryReferenceSourceConfigResponse>, callback: grpc_1.sendUnaryData<QueryReferenceSourceConfigResponse>): void;
        abstract SignalTotalPowers(call: grpc_1.ServerUnaryCall<QuerySignalTotalPowersRequest, QuerySignalTotalPowersResponse>, callback: grpc_1.sendUnaryData<QuerySignalTotalPowersResponse>): void;
        abstract ValidValidator(call: grpc_1.ServerUnaryCall<QueryValidValidatorRequest, QueryValidValidatorResponse>, callback: grpc_1.sendUnaryData<QueryValidValidatorResponse>): void;
        abstract ValidatorPrices(call: grpc_1.ServerUnaryCall<QueryValidatorPricesRequest, QueryValidatorPricesResponse>, callback: grpc_1.sendUnaryData<QueryValidatorPricesResponse>): void;
        abstract Vote(call: grpc_1.ServerUnaryCall<QueryVoteRequest, QueryVoteResponse>, callback: grpc_1.sendUnaryData<QueryVoteResponse>): void;
    }
    export class QueryClient extends grpc_1.makeGenericClientConstructor(UnimplementedQueryService.definition, "Query", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CurrentFeeds: GrpcUnaryServiceInterface<QueryCurrentFeedsRequest, QueryCurrentFeedsResponse> = (message: QueryCurrentFeedsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryCurrentFeedsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryCurrentFeedsResponse>, callback?: grpc_1.requestCallback<QueryCurrentFeedsResponse>): grpc_1.ClientUnaryCall => {
            return super.CurrentFeeds(message, metadata, options, callback);
        };
        IsFeeder: GrpcUnaryServiceInterface<QueryIsFeederRequest, QueryIsFeederResponse> = (message: QueryIsFeederRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryIsFeederResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryIsFeederResponse>, callback?: grpc_1.requestCallback<QueryIsFeederResponse>): grpc_1.ClientUnaryCall => {
            return super.IsFeeder(message, metadata, options, callback);
        };
        Params: GrpcUnaryServiceInterface<QueryParamsRequest, QueryParamsResponse> = (message: QueryParamsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryParamsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryParamsResponse>, callback?: grpc_1.requestCallback<QueryParamsResponse>): grpc_1.ClientUnaryCall => {
            return super.Params(message, metadata, options, callback);
        };
        Price: GrpcUnaryServiceInterface<QueryPriceRequest, QueryPriceResponse> = (message: QueryPriceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryPriceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryPriceResponse>, callback?: grpc_1.requestCallback<QueryPriceResponse>): grpc_1.ClientUnaryCall => {
            return super.Price(message, metadata, options, callback);
        };
        Prices: GrpcUnaryServiceInterface<QueryPricesRequest, QueryPricesResponse> = (message: QueryPricesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryPricesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryPricesResponse>, callback?: grpc_1.requestCallback<QueryPricesResponse>): grpc_1.ClientUnaryCall => {
            return super.Prices(message, metadata, options, callback);
        };
        AllPrices: GrpcUnaryServiceInterface<QueryAllPricesRequest, QueryAllPricesResponse> = (message: QueryAllPricesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryAllPricesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryAllPricesResponse>, callback?: grpc_1.requestCallback<QueryAllPricesResponse>): grpc_1.ClientUnaryCall => {
            return super.AllPrices(message, metadata, options, callback);
        };
        ReferenceSourceConfig: GrpcUnaryServiceInterface<QueryReferenceSourceConfigRequest, QueryReferenceSourceConfigResponse> = (message: QueryReferenceSourceConfigRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryReferenceSourceConfigResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryReferenceSourceConfigResponse>, callback?: grpc_1.requestCallback<QueryReferenceSourceConfigResponse>): grpc_1.ClientUnaryCall => {
            return super.ReferenceSourceConfig(message, metadata, options, callback);
        };
        SignalTotalPowers: GrpcUnaryServiceInterface<QuerySignalTotalPowersRequest, QuerySignalTotalPowersResponse> = (message: QuerySignalTotalPowersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QuerySignalTotalPowersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QuerySignalTotalPowersResponse>, callback?: grpc_1.requestCallback<QuerySignalTotalPowersResponse>): grpc_1.ClientUnaryCall => {
            return super.SignalTotalPowers(message, metadata, options, callback);
        };
        ValidValidator: GrpcUnaryServiceInterface<QueryValidValidatorRequest, QueryValidValidatorResponse> = (message: QueryValidValidatorRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryValidValidatorResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryValidValidatorResponse>, callback?: grpc_1.requestCallback<QueryValidValidatorResponse>): grpc_1.ClientUnaryCall => {
            return super.ValidValidator(message, metadata, options, callback);
        };
        ValidatorPrices: GrpcUnaryServiceInterface<QueryValidatorPricesRequest, QueryValidatorPricesResponse> = (message: QueryValidatorPricesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryValidatorPricesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryValidatorPricesResponse>, callback?: grpc_1.requestCallback<QueryValidatorPricesResponse>): grpc_1.ClientUnaryCall => {
            return super.ValidatorPrices(message, metadata, options, callback);
        };
        Vote: GrpcUnaryServiceInterface<QueryVoteRequest, QueryVoteResponse> = (message: QueryVoteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryVoteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryVoteResponse>, callback?: grpc_1.requestCallback<QueryVoteResponse>): grpc_1.ClientUnaryCall => {
            return super.Vote(message, metadata, options, callback);
        };
    }
}
