/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/feeds/v1beta1/params.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../../../cosmos_proto/cosmos";
import * as pb_1 from "google-protobuf";
export namespace band.feeds.v1beta1 {
    export class Params extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            admin?: string;
            allowable_block_time_discrepancy?: number;
            grace_period?: number;
            min_interval?: number;
            max_interval?: number;
            power_step_threshold?: number;
            max_current_feeds?: number;
            cooldown_time?: number;
            min_deviation_basis_point?: number;
            max_deviation_basis_point?: number;
            current_feeds_update_interval?: number;
            price_quorum?: string;
            max_signal_ids_per_signing?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("admin" in data && data.admin != undefined) {
                    this.admin = data.admin;
                }
                if ("allowable_block_time_discrepancy" in data && data.allowable_block_time_discrepancy != undefined) {
                    this.allowable_block_time_discrepancy = data.allowable_block_time_discrepancy;
                }
                if ("grace_period" in data && data.grace_period != undefined) {
                    this.grace_period = data.grace_period;
                }
                if ("min_interval" in data && data.min_interval != undefined) {
                    this.min_interval = data.min_interval;
                }
                if ("max_interval" in data && data.max_interval != undefined) {
                    this.max_interval = data.max_interval;
                }
                if ("power_step_threshold" in data && data.power_step_threshold != undefined) {
                    this.power_step_threshold = data.power_step_threshold;
                }
                if ("max_current_feeds" in data && data.max_current_feeds != undefined) {
                    this.max_current_feeds = data.max_current_feeds;
                }
                if ("cooldown_time" in data && data.cooldown_time != undefined) {
                    this.cooldown_time = data.cooldown_time;
                }
                if ("min_deviation_basis_point" in data && data.min_deviation_basis_point != undefined) {
                    this.min_deviation_basis_point = data.min_deviation_basis_point;
                }
                if ("max_deviation_basis_point" in data && data.max_deviation_basis_point != undefined) {
                    this.max_deviation_basis_point = data.max_deviation_basis_point;
                }
                if ("current_feeds_update_interval" in data && data.current_feeds_update_interval != undefined) {
                    this.current_feeds_update_interval = data.current_feeds_update_interval;
                }
                if ("price_quorum" in data && data.price_quorum != undefined) {
                    this.price_quorum = data.price_quorum;
                }
                if ("max_signal_ids_per_signing" in data && data.max_signal_ids_per_signing != undefined) {
                    this.max_signal_ids_per_signing = data.max_signal_ids_per_signing;
                }
            }
        }
        get admin() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set admin(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get allowable_block_time_discrepancy() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set allowable_block_time_discrepancy(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get grace_period() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set grace_period(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get min_interval() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set min_interval(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get max_interval() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set max_interval(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get power_step_threshold() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set power_step_threshold(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get max_current_feeds() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set max_current_feeds(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get cooldown_time() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set cooldown_time(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get min_deviation_basis_point() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set min_deviation_basis_point(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get max_deviation_basis_point() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set max_deviation_basis_point(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get current_feeds_update_interval() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set current_feeds_update_interval(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get price_quorum() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set price_quorum(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get max_signal_ids_per_signing() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set max_signal_ids_per_signing(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            admin?: string;
            allowable_block_time_discrepancy?: number;
            grace_period?: number;
            min_interval?: number;
            max_interval?: number;
            power_step_threshold?: number;
            max_current_feeds?: number;
            cooldown_time?: number;
            min_deviation_basis_point?: number;
            max_deviation_basis_point?: number;
            current_feeds_update_interval?: number;
            price_quorum?: string;
            max_signal_ids_per_signing?: number;
        }): Params {
            const message = new Params({});
            if (data.admin != null) {
                message.admin = data.admin;
            }
            if (data.allowable_block_time_discrepancy != null) {
                message.allowable_block_time_discrepancy = data.allowable_block_time_discrepancy;
            }
            if (data.grace_period != null) {
                message.grace_period = data.grace_period;
            }
            if (data.min_interval != null) {
                message.min_interval = data.min_interval;
            }
            if (data.max_interval != null) {
                message.max_interval = data.max_interval;
            }
            if (data.power_step_threshold != null) {
                message.power_step_threshold = data.power_step_threshold;
            }
            if (data.max_current_feeds != null) {
                message.max_current_feeds = data.max_current_feeds;
            }
            if (data.cooldown_time != null) {
                message.cooldown_time = data.cooldown_time;
            }
            if (data.min_deviation_basis_point != null) {
                message.min_deviation_basis_point = data.min_deviation_basis_point;
            }
            if (data.max_deviation_basis_point != null) {
                message.max_deviation_basis_point = data.max_deviation_basis_point;
            }
            if (data.current_feeds_update_interval != null) {
                message.current_feeds_update_interval = data.current_feeds_update_interval;
            }
            if (data.price_quorum != null) {
                message.price_quorum = data.price_quorum;
            }
            if (data.max_signal_ids_per_signing != null) {
                message.max_signal_ids_per_signing = data.max_signal_ids_per_signing;
            }
            return message;
        }
        toObject() {
            const data: {
                admin?: string;
                allowable_block_time_discrepancy?: number;
                grace_period?: number;
                min_interval?: number;
                max_interval?: number;
                power_step_threshold?: number;
                max_current_feeds?: number;
                cooldown_time?: number;
                min_deviation_basis_point?: number;
                max_deviation_basis_point?: number;
                current_feeds_update_interval?: number;
                price_quorum?: string;
                max_signal_ids_per_signing?: number;
            } = {};
            if (this.admin != null) {
                data.admin = this.admin;
            }
            if (this.allowable_block_time_discrepancy != null) {
                data.allowable_block_time_discrepancy = this.allowable_block_time_discrepancy;
            }
            if (this.grace_period != null) {
                data.grace_period = this.grace_period;
            }
            if (this.min_interval != null) {
                data.min_interval = this.min_interval;
            }
            if (this.max_interval != null) {
                data.max_interval = this.max_interval;
            }
            if (this.power_step_threshold != null) {
                data.power_step_threshold = this.power_step_threshold;
            }
            if (this.max_current_feeds != null) {
                data.max_current_feeds = this.max_current_feeds;
            }
            if (this.cooldown_time != null) {
                data.cooldown_time = this.cooldown_time;
            }
            if (this.min_deviation_basis_point != null) {
                data.min_deviation_basis_point = this.min_deviation_basis_point;
            }
            if (this.max_deviation_basis_point != null) {
                data.max_deviation_basis_point = this.max_deviation_basis_point;
            }
            if (this.current_feeds_update_interval != null) {
                data.current_feeds_update_interval = this.current_feeds_update_interval;
            }
            if (this.price_quorum != null) {
                data.price_quorum = this.price_quorum;
            }
            if (this.max_signal_ids_per_signing != null) {
                data.max_signal_ids_per_signing = this.max_signal_ids_per_signing;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.admin.length)
                writer.writeString(1, this.admin);
            if (this.allowable_block_time_discrepancy != 0)
                writer.writeInt64(2, this.allowable_block_time_discrepancy);
            if (this.grace_period != 0)
                writer.writeInt64(3, this.grace_period);
            if (this.min_interval != 0)
                writer.writeInt64(4, this.min_interval);
            if (this.max_interval != 0)
                writer.writeInt64(5, this.max_interval);
            if (this.power_step_threshold != 0)
                writer.writeInt64(6, this.power_step_threshold);
            if (this.max_current_feeds != 0)
                writer.writeUint64(7, this.max_current_feeds);
            if (this.cooldown_time != 0)
                writer.writeInt64(8, this.cooldown_time);
            if (this.min_deviation_basis_point != 0)
                writer.writeInt64(9, this.min_deviation_basis_point);
            if (this.max_deviation_basis_point != 0)
                writer.writeInt64(10, this.max_deviation_basis_point);
            if (this.current_feeds_update_interval != 0)
                writer.writeInt64(11, this.current_feeds_update_interval);
            if (this.price_quorum.length)
                writer.writeString(12, this.price_quorum);
            if (this.max_signal_ids_per_signing != 0)
                writer.writeUint64(13, this.max_signal_ids_per_signing);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Params {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Params();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.admin = reader.readString();
                        break;
                    case 2:
                        message.allowable_block_time_discrepancy = reader.readInt64();
                        break;
                    case 3:
                        message.grace_period = reader.readInt64();
                        break;
                    case 4:
                        message.min_interval = reader.readInt64();
                        break;
                    case 5:
                        message.max_interval = reader.readInt64();
                        break;
                    case 6:
                        message.power_step_threshold = reader.readInt64();
                        break;
                    case 7:
                        message.max_current_feeds = reader.readUint64();
                        break;
                    case 8:
                        message.cooldown_time = reader.readInt64();
                        break;
                    case 9:
                        message.min_deviation_basis_point = reader.readInt64();
                        break;
                    case 10:
                        message.max_deviation_basis_point = reader.readInt64();
                        break;
                    case 11:
                        message.current_feeds_update_interval = reader.readInt64();
                        break;
                    case 12:
                        message.price_quorum = reader.readString();
                        break;
                    case 13:
                        message.max_signal_ids_per_signing = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Params {
            return Params.deserialize(bytes);
        }
    }
}
