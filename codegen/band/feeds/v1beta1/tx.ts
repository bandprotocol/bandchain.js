/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/feeds/v1beta1/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./feeds";
import * as dependency_3 from "./params";
import * as dependency_4 from "./../../../cosmos_proto/cosmos";
import * as dependency_5 from "./../../../cosmos/msg/v1/msg";
import * as dependency_6 from "./../../../amino/amino";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace band.feeds.v1beta1 {
    export class MsgVote extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            voter?: string;
            signals?: dependency_2.band.feeds.v1beta1.Signal[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("voter" in data && data.voter != undefined) {
                    this.voter = data.voter;
                }
                if ("signals" in data && data.signals != undefined) {
                    this.signals = data.signals;
                }
            }
        }
        get voter() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set voter(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get signals() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.band.feeds.v1beta1.Signal, 2) as dependency_2.band.feeds.v1beta1.Signal[];
        }
        set signals(value: dependency_2.band.feeds.v1beta1.Signal[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            voter?: string;
            signals?: ReturnType<typeof dependency_2.band.feeds.v1beta1.Signal.prototype.toObject>[];
        }): MsgVote {
            const message = new MsgVote({});
            if (data.voter != null) {
                message.voter = data.voter;
            }
            if (data.signals != null) {
                message.signals = data.signals.map(item => dependency_2.band.feeds.v1beta1.Signal.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                voter?: string;
                signals?: ReturnType<typeof dependency_2.band.feeds.v1beta1.Signal.prototype.toObject>[];
            } = {};
            if (this.voter != null) {
                data.voter = this.voter;
            }
            if (this.signals != null) {
                data.signals = this.signals.map((item: dependency_2.band.feeds.v1beta1.Signal) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.voter.length)
                writer.writeString(1, this.voter);
            if (this.signals.length)
                writer.writeRepeatedMessage(2, this.signals, (item: dependency_2.band.feeds.v1beta1.Signal) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgVote {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgVote();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.voter = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.signals, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.band.feeds.v1beta1.Signal.deserialize(reader), dependency_2.band.feeds.v1beta1.Signal));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgVote {
            return MsgVote.deserialize(bytes);
        }
    }
    export class MsgVoteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgVoteResponse {
            const message = new MsgVoteResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgVoteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgVoteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgVoteResponse {
            return MsgVoteResponse.deserialize(bytes);
        }
    }
    export class MsgSubmitSignalPrices extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validator?: string;
            timestamp?: number;
            signal_prices?: dependency_2.band.feeds.v1beta1.SignalPrice[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator" in data && data.validator != undefined) {
                    this.validator = data.validator;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("signal_prices" in data && data.signal_prices != undefined) {
                    this.signal_prices = data.signal_prices;
                }
            }
        }
        get validator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set validator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get signal_prices() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.band.feeds.v1beta1.SignalPrice, 3) as dependency_2.band.feeds.v1beta1.SignalPrice[];
        }
        set signal_prices(value: dependency_2.band.feeds.v1beta1.SignalPrice[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            validator?: string;
            timestamp?: number;
            signal_prices?: ReturnType<typeof dependency_2.band.feeds.v1beta1.SignalPrice.prototype.toObject>[];
        }): MsgSubmitSignalPrices {
            const message = new MsgSubmitSignalPrices({});
            if (data.validator != null) {
                message.validator = data.validator;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.signal_prices != null) {
                message.signal_prices = data.signal_prices.map(item => dependency_2.band.feeds.v1beta1.SignalPrice.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                validator?: string;
                timestamp?: number;
                signal_prices?: ReturnType<typeof dependency_2.band.feeds.v1beta1.SignalPrice.prototype.toObject>[];
            } = {};
            if (this.validator != null) {
                data.validator = this.validator;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.signal_prices != null) {
                data.signal_prices = this.signal_prices.map((item: dependency_2.band.feeds.v1beta1.SignalPrice) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validator.length)
                writer.writeString(1, this.validator);
            if (this.timestamp != 0)
                writer.writeInt64(2, this.timestamp);
            if (this.signal_prices.length)
                writer.writeRepeatedMessage(3, this.signal_prices, (item: dependency_2.band.feeds.v1beta1.SignalPrice) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSubmitSignalPrices {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSubmitSignalPrices();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.validator = reader.readString();
                        break;
                    case 2:
                        message.timestamp = reader.readInt64();
                        break;
                    case 3:
                        reader.readMessage(message.signal_prices, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.band.feeds.v1beta1.SignalPrice.deserialize(reader), dependency_2.band.feeds.v1beta1.SignalPrice));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSubmitSignalPrices {
            return MsgSubmitSignalPrices.deserialize(bytes);
        }
    }
    export class MsgSubmitSignalPricesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgSubmitSignalPricesResponse {
            const message = new MsgSubmitSignalPricesResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSubmitSignalPricesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSubmitSignalPricesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSubmitSignalPricesResponse {
            return MsgSubmitSignalPricesResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateReferenceSourceConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            admin?: string;
            reference_source_config?: dependency_2.band.feeds.v1beta1.ReferenceSourceConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("admin" in data && data.admin != undefined) {
                    this.admin = data.admin;
                }
                if ("reference_source_config" in data && data.reference_source_config != undefined) {
                    this.reference_source_config = data.reference_source_config;
                }
            }
        }
        get admin() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set admin(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get reference_source_config() {
            return pb_1.Message.getWrapperField(this, dependency_2.band.feeds.v1beta1.ReferenceSourceConfig, 2) as dependency_2.band.feeds.v1beta1.ReferenceSourceConfig;
        }
        set reference_source_config(value: dependency_2.band.feeds.v1beta1.ReferenceSourceConfig) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_reference_source_config() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            admin?: string;
            reference_source_config?: ReturnType<typeof dependency_2.band.feeds.v1beta1.ReferenceSourceConfig.prototype.toObject>;
        }): MsgUpdateReferenceSourceConfig {
            const message = new MsgUpdateReferenceSourceConfig({});
            if (data.admin != null) {
                message.admin = data.admin;
            }
            if (data.reference_source_config != null) {
                message.reference_source_config = dependency_2.band.feeds.v1beta1.ReferenceSourceConfig.fromObject(data.reference_source_config);
            }
            return message;
        }
        toObject() {
            const data: {
                admin?: string;
                reference_source_config?: ReturnType<typeof dependency_2.band.feeds.v1beta1.ReferenceSourceConfig.prototype.toObject>;
            } = {};
            if (this.admin != null) {
                data.admin = this.admin;
            }
            if (this.reference_source_config != null) {
                data.reference_source_config = this.reference_source_config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.admin.length)
                writer.writeString(1, this.admin);
            if (this.has_reference_source_config)
                writer.writeMessage(2, this.reference_source_config, () => this.reference_source_config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateReferenceSourceConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateReferenceSourceConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.admin = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.reference_source_config, () => message.reference_source_config = dependency_2.band.feeds.v1beta1.ReferenceSourceConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateReferenceSourceConfig {
            return MsgUpdateReferenceSourceConfig.deserialize(bytes);
        }
    }
    export class MsgUpdateReferenceSourceConfigResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateReferenceSourceConfigResponse {
            const message = new MsgUpdateReferenceSourceConfigResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateReferenceSourceConfigResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateReferenceSourceConfigResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateReferenceSourceConfigResponse {
            return MsgUpdateReferenceSourceConfigResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateParams extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            authority?: string;
            params?: dependency_3.band.feeds.v1beta1.Params;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("authority" in data && data.authority != undefined) {
                    this.authority = data.authority;
                }
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
            }
        }
        get authority() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set authority(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get params() {
            return pb_1.Message.getWrapperField(this, dependency_3.band.feeds.v1beta1.Params, 2) as dependency_3.band.feeds.v1beta1.Params;
        }
        set params(value: dependency_3.band.feeds.v1beta1.Params) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_params() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            authority?: string;
            params?: ReturnType<typeof dependency_3.band.feeds.v1beta1.Params.prototype.toObject>;
        }): MsgUpdateParams {
            const message = new MsgUpdateParams({});
            if (data.authority != null) {
                message.authority = data.authority;
            }
            if (data.params != null) {
                message.params = dependency_3.band.feeds.v1beta1.Params.fromObject(data.params);
            }
            return message;
        }
        toObject() {
            const data: {
                authority?: string;
                params?: ReturnType<typeof dependency_3.band.feeds.v1beta1.Params.prototype.toObject>;
            } = {};
            if (this.authority != null) {
                data.authority = this.authority;
            }
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.authority.length)
                writer.writeString(1, this.authority);
            if (this.has_params)
                writer.writeMessage(2, this.params, () => this.params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateParams {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateParams();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.authority = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.params, () => message.params = dependency_3.band.feeds.v1beta1.Params.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateParams {
            return MsgUpdateParams.deserialize(bytes);
        }
    }
    export class MsgUpdateParamsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateParamsResponse {
            const message = new MsgUpdateParamsResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateParamsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateParamsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateParamsResponse {
            return MsgUpdateParamsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedMsgService {
        static definition = {
            Vote: {
                path: "/band.feeds.v1beta1.Msg/Vote",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgVote) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgVote.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgVoteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgVoteResponse.deserialize(new Uint8Array(bytes))
            },
            SubmitSignalPrices: {
                path: "/band.feeds.v1beta1.Msg/SubmitSignalPrices",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgSubmitSignalPrices) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgSubmitSignalPrices.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgSubmitSignalPricesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgSubmitSignalPricesResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateReferenceSourceConfig: {
                path: "/band.feeds.v1beta1.Msg/UpdateReferenceSourceConfig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgUpdateReferenceSourceConfig) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgUpdateReferenceSourceConfig.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgUpdateReferenceSourceConfigResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgUpdateReferenceSourceConfigResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateParams: {
                path: "/band.feeds.v1beta1.Msg/UpdateParams",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgUpdateParams) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgUpdateParams.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgUpdateParamsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgUpdateParamsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Vote(call: grpc_1.ServerUnaryCall<MsgVote, MsgVoteResponse>, callback: grpc_1.sendUnaryData<MsgVoteResponse>): void;
        abstract SubmitSignalPrices(call: grpc_1.ServerUnaryCall<MsgSubmitSignalPrices, MsgSubmitSignalPricesResponse>, callback: grpc_1.sendUnaryData<MsgSubmitSignalPricesResponse>): void;
        abstract UpdateReferenceSourceConfig(call: grpc_1.ServerUnaryCall<MsgUpdateReferenceSourceConfig, MsgUpdateReferenceSourceConfigResponse>, callback: grpc_1.sendUnaryData<MsgUpdateReferenceSourceConfigResponse>): void;
        abstract UpdateParams(call: grpc_1.ServerUnaryCall<MsgUpdateParams, MsgUpdateParamsResponse>, callback: grpc_1.sendUnaryData<MsgUpdateParamsResponse>): void;
    }
    export class MsgClient extends grpc_1.makeGenericClientConstructor(UnimplementedMsgService.definition, "Msg", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Vote: GrpcUnaryServiceInterface<MsgVote, MsgVoteResponse> = (message: MsgVote, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgVoteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgVoteResponse>, callback?: grpc_1.requestCallback<MsgVoteResponse>): grpc_1.ClientUnaryCall => {
            return super.Vote(message, metadata, options, callback);
        };
        SubmitSignalPrices: GrpcUnaryServiceInterface<MsgSubmitSignalPrices, MsgSubmitSignalPricesResponse> = (message: MsgSubmitSignalPrices, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgSubmitSignalPricesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgSubmitSignalPricesResponse>, callback?: grpc_1.requestCallback<MsgSubmitSignalPricesResponse>): grpc_1.ClientUnaryCall => {
            return super.SubmitSignalPrices(message, metadata, options, callback);
        };
        UpdateReferenceSourceConfig: GrpcUnaryServiceInterface<MsgUpdateReferenceSourceConfig, MsgUpdateReferenceSourceConfigResponse> = (message: MsgUpdateReferenceSourceConfig, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateReferenceSourceConfigResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateReferenceSourceConfigResponse>, callback?: grpc_1.requestCallback<MsgUpdateReferenceSourceConfigResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateReferenceSourceConfig(message, metadata, options, callback);
        };
        UpdateParams: GrpcUnaryServiceInterface<MsgUpdateParams, MsgUpdateParamsResponse> = (message: MsgUpdateParams, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateParamsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateParamsResponse>, callback?: grpc_1.requestCallback<MsgUpdateParamsResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateParams(message, metadata, options, callback);
        };
    }
}
