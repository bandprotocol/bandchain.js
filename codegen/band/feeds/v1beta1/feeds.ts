/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/feeds/v1beta1/feeds.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../cosmos_proto/cosmos";
import * as dependency_2 from "./../../../gogoproto/gogo";
import * as dependency_3 from "./encoder";
import * as pb_1 from "google-protobuf";
export namespace band.feeds.v1beta1 {
    export enum PriceStatus {
        PRICE_STATUS_UNSPECIFIED = 0,
        PRICE_STATUS_UNKNOWN_SIGNAL_ID = 1,
        PRICE_STATUS_NOT_READY = 2,
        PRICE_STATUS_AVAILABLE = 3,
        PRICE_STATUS_NOT_IN_CURRENT_FEEDS = 4
    }
    export enum SignalPriceStatus {
        SIGNAL_PRICE_STATUS_UNSPECIFIED = 0,
        SIGNAL_PRICE_STATUS_UNSUPPORTED = 1,
        SIGNAL_PRICE_STATUS_UNAVAILABLE = 2,
        SIGNAL_PRICE_STATUS_AVAILABLE = 3
    }
    export class Signal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            power?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("power" in data && data.power != undefined) {
                    this.power = data.power;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get power() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set power(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            power?: number;
        }): Signal {
            const message = new Signal({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.power != null) {
                message.power = data.power;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                power?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.power != null) {
                data.power = this.power;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.power != 0)
                writer.writeInt64(2, this.power);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Signal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Signal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.power = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Signal {
            return Signal.deserialize(bytes);
        }
    }
    export class Vote extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            voter?: string;
            signals?: Signal[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("voter" in data && data.voter != undefined) {
                    this.voter = data.voter;
                }
                if ("signals" in data && data.signals != undefined) {
                    this.signals = data.signals;
                }
            }
        }
        get voter() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set voter(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get signals() {
            return pb_1.Message.getRepeatedWrapperField(this, Signal, 2) as Signal[];
        }
        set signals(value: Signal[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            voter?: string;
            signals?: ReturnType<typeof Signal.prototype.toObject>[];
        }): Vote {
            const message = new Vote({});
            if (data.voter != null) {
                message.voter = data.voter;
            }
            if (data.signals != null) {
                message.signals = data.signals.map(item => Signal.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                voter?: string;
                signals?: ReturnType<typeof Signal.prototype.toObject>[];
            } = {};
            if (this.voter != null) {
                data.voter = this.voter;
            }
            if (this.signals != null) {
                data.signals = this.signals.map((item: Signal) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.voter.length)
                writer.writeString(1, this.voter);
            if (this.signals.length)
                writer.writeRepeatedMessage(2, this.signals, (item: Signal) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Vote {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vote();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.voter = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.signals, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Signal.deserialize(reader), Signal));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Vote {
            return Vote.deserialize(bytes);
        }
    }
    export class Feed extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signal_id?: string;
            power?: number;
            interval?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signal_id" in data && data.signal_id != undefined) {
                    this.signal_id = data.signal_id;
                }
                if ("power" in data && data.power != undefined) {
                    this.power = data.power;
                }
                if ("interval" in data && data.interval != undefined) {
                    this.interval = data.interval;
                }
            }
        }
        get signal_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set signal_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get power() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set power(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get interval() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set interval(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            signal_id?: string;
            power?: number;
            interval?: number;
        }): Feed {
            const message = new Feed({});
            if (data.signal_id != null) {
                message.signal_id = data.signal_id;
            }
            if (data.power != null) {
                message.power = data.power;
            }
            if (data.interval != null) {
                message.interval = data.interval;
            }
            return message;
        }
        toObject() {
            const data: {
                signal_id?: string;
                power?: number;
                interval?: number;
            } = {};
            if (this.signal_id != null) {
                data.signal_id = this.signal_id;
            }
            if (this.power != null) {
                data.power = this.power;
            }
            if (this.interval != null) {
                data.interval = this.interval;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signal_id.length)
                writer.writeString(1, this.signal_id);
            if (this.power != 0)
                writer.writeInt64(2, this.power);
            if (this.interval != 0)
                writer.writeInt64(3, this.interval);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Feed {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Feed();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signal_id = reader.readString();
                        break;
                    case 2:
                        message.power = reader.readInt64();
                        break;
                    case 3:
                        message.interval = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Feed {
            return Feed.deserialize(bytes);
        }
    }
    export class FeedWithDeviation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signal_id?: string;
            power?: number;
            interval?: number;
            deviation_basis_point?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signal_id" in data && data.signal_id != undefined) {
                    this.signal_id = data.signal_id;
                }
                if ("power" in data && data.power != undefined) {
                    this.power = data.power;
                }
                if ("interval" in data && data.interval != undefined) {
                    this.interval = data.interval;
                }
                if ("deviation_basis_point" in data && data.deviation_basis_point != undefined) {
                    this.deviation_basis_point = data.deviation_basis_point;
                }
            }
        }
        get signal_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set signal_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get power() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set power(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get interval() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set interval(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get deviation_basis_point() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set deviation_basis_point(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            signal_id?: string;
            power?: number;
            interval?: number;
            deviation_basis_point?: number;
        }): FeedWithDeviation {
            const message = new FeedWithDeviation({});
            if (data.signal_id != null) {
                message.signal_id = data.signal_id;
            }
            if (data.power != null) {
                message.power = data.power;
            }
            if (data.interval != null) {
                message.interval = data.interval;
            }
            if (data.deviation_basis_point != null) {
                message.deviation_basis_point = data.deviation_basis_point;
            }
            return message;
        }
        toObject() {
            const data: {
                signal_id?: string;
                power?: number;
                interval?: number;
                deviation_basis_point?: number;
            } = {};
            if (this.signal_id != null) {
                data.signal_id = this.signal_id;
            }
            if (this.power != null) {
                data.power = this.power;
            }
            if (this.interval != null) {
                data.interval = this.interval;
            }
            if (this.deviation_basis_point != null) {
                data.deviation_basis_point = this.deviation_basis_point;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signal_id.length)
                writer.writeString(1, this.signal_id);
            if (this.power != 0)
                writer.writeInt64(2, this.power);
            if (this.interval != 0)
                writer.writeInt64(3, this.interval);
            if (this.deviation_basis_point != 0)
                writer.writeInt64(4, this.deviation_basis_point);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FeedWithDeviation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FeedWithDeviation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signal_id = reader.readString();
                        break;
                    case 2:
                        message.power = reader.readInt64();
                        break;
                    case 3:
                        message.interval = reader.readInt64();
                        break;
                    case 4:
                        message.deviation_basis_point = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FeedWithDeviation {
            return FeedWithDeviation.deserialize(bytes);
        }
    }
    export class CurrentFeeds extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            feeds?: Feed[];
            last_update_timestamp?: number;
            last_update_block?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("feeds" in data && data.feeds != undefined) {
                    this.feeds = data.feeds;
                }
                if ("last_update_timestamp" in data && data.last_update_timestamp != undefined) {
                    this.last_update_timestamp = data.last_update_timestamp;
                }
                if ("last_update_block" in data && data.last_update_block != undefined) {
                    this.last_update_block = data.last_update_block;
                }
            }
        }
        get feeds() {
            return pb_1.Message.getRepeatedWrapperField(this, Feed, 1) as Feed[];
        }
        set feeds(value: Feed[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get last_update_timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set last_update_timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get last_update_block() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set last_update_block(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            feeds?: ReturnType<typeof Feed.prototype.toObject>[];
            last_update_timestamp?: number;
            last_update_block?: number;
        }): CurrentFeeds {
            const message = new CurrentFeeds({});
            if (data.feeds != null) {
                message.feeds = data.feeds.map(item => Feed.fromObject(item));
            }
            if (data.last_update_timestamp != null) {
                message.last_update_timestamp = data.last_update_timestamp;
            }
            if (data.last_update_block != null) {
                message.last_update_block = data.last_update_block;
            }
            return message;
        }
        toObject() {
            const data: {
                feeds?: ReturnType<typeof Feed.prototype.toObject>[];
                last_update_timestamp?: number;
                last_update_block?: number;
            } = {};
            if (this.feeds != null) {
                data.feeds = this.feeds.map((item: Feed) => item.toObject());
            }
            if (this.last_update_timestamp != null) {
                data.last_update_timestamp = this.last_update_timestamp;
            }
            if (this.last_update_block != null) {
                data.last_update_block = this.last_update_block;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.feeds.length)
                writer.writeRepeatedMessage(1, this.feeds, (item: Feed) => item.serialize(writer));
            if (this.last_update_timestamp != 0)
                writer.writeInt64(2, this.last_update_timestamp);
            if (this.last_update_block != 0)
                writer.writeInt64(3, this.last_update_block);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CurrentFeeds {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CurrentFeeds();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.feeds, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Feed.deserialize(reader), Feed));
                        break;
                    case 2:
                        message.last_update_timestamp = reader.readInt64();
                        break;
                    case 3:
                        message.last_update_block = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CurrentFeeds {
            return CurrentFeeds.deserialize(bytes);
        }
    }
    export class CurrentFeedWithDeviations extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            feeds?: FeedWithDeviation[];
            last_update_timestamp?: number;
            last_update_block?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("feeds" in data && data.feeds != undefined) {
                    this.feeds = data.feeds;
                }
                if ("last_update_timestamp" in data && data.last_update_timestamp != undefined) {
                    this.last_update_timestamp = data.last_update_timestamp;
                }
                if ("last_update_block" in data && data.last_update_block != undefined) {
                    this.last_update_block = data.last_update_block;
                }
            }
        }
        get feeds() {
            return pb_1.Message.getRepeatedWrapperField(this, FeedWithDeviation, 1) as FeedWithDeviation[];
        }
        set feeds(value: FeedWithDeviation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get last_update_timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set last_update_timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get last_update_block() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set last_update_block(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            feeds?: ReturnType<typeof FeedWithDeviation.prototype.toObject>[];
            last_update_timestamp?: number;
            last_update_block?: number;
        }): CurrentFeedWithDeviations {
            const message = new CurrentFeedWithDeviations({});
            if (data.feeds != null) {
                message.feeds = data.feeds.map(item => FeedWithDeviation.fromObject(item));
            }
            if (data.last_update_timestamp != null) {
                message.last_update_timestamp = data.last_update_timestamp;
            }
            if (data.last_update_block != null) {
                message.last_update_block = data.last_update_block;
            }
            return message;
        }
        toObject() {
            const data: {
                feeds?: ReturnType<typeof FeedWithDeviation.prototype.toObject>[];
                last_update_timestamp?: number;
                last_update_block?: number;
            } = {};
            if (this.feeds != null) {
                data.feeds = this.feeds.map((item: FeedWithDeviation) => item.toObject());
            }
            if (this.last_update_timestamp != null) {
                data.last_update_timestamp = this.last_update_timestamp;
            }
            if (this.last_update_block != null) {
                data.last_update_block = this.last_update_block;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.feeds.length)
                writer.writeRepeatedMessage(1, this.feeds, (item: FeedWithDeviation) => item.serialize(writer));
            if (this.last_update_timestamp != 0)
                writer.writeInt64(2, this.last_update_timestamp);
            if (this.last_update_block != 0)
                writer.writeInt64(3, this.last_update_block);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CurrentFeedWithDeviations {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CurrentFeedWithDeviations();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.feeds, () => pb_1.Message.addToRepeatedWrapperField(message, 1, FeedWithDeviation.deserialize(reader), FeedWithDeviation));
                        break;
                    case 2:
                        message.last_update_timestamp = reader.readInt64();
                        break;
                    case 3:
                        message.last_update_block = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CurrentFeedWithDeviations {
            return CurrentFeedWithDeviations.deserialize(bytes);
        }
    }
    export class Price extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: PriceStatus;
            signal_id?: string;
            price?: number;
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("signal_id" in data && data.signal_id != undefined) {
                    this.signal_id = data.signal_id;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, PriceStatus.PRICE_STATUS_UNSPECIFIED) as PriceStatus;
        }
        set status(value: PriceStatus) {
            pb_1.Message.setField(this, 1, value);
        }
        get signal_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set signal_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            status?: PriceStatus;
            signal_id?: string;
            price?: number;
            timestamp?: number;
        }): Price {
            const message = new Price({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.signal_id != null) {
                message.signal_id = data.signal_id;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: PriceStatus;
                signal_id?: string;
                price?: number;
                timestamp?: number;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.signal_id != null) {
                data.signal_id = this.signal_id;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != PriceStatus.PRICE_STATUS_UNSPECIFIED)
                writer.writeEnum(1, this.status);
            if (this.signal_id.length)
                writer.writeString(2, this.signal_id);
            if (this.price != 0)
                writer.writeUint64(3, this.price);
            if (this.timestamp != 0)
                writer.writeInt64(4, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Price {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Price();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        message.signal_id = reader.readString();
                        break;
                    case 3:
                        message.price = reader.readUint64();
                        break;
                    case 4:
                        message.timestamp = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Price {
            return Price.deserialize(bytes);
        }
    }
    export class SignalPrice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: SignalPriceStatus;
            signal_id?: string;
            price?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("signal_id" in data && data.signal_id != undefined) {
                    this.signal_id = data.signal_id;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, SignalPriceStatus.SIGNAL_PRICE_STATUS_UNSPECIFIED) as SignalPriceStatus;
        }
        set status(value: SignalPriceStatus) {
            pb_1.Message.setField(this, 1, value);
        }
        get signal_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set signal_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            status?: SignalPriceStatus;
            signal_id?: string;
            price?: number;
        }): SignalPrice {
            const message = new SignalPrice({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.signal_id != null) {
                message.signal_id = data.signal_id;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: SignalPriceStatus;
                signal_id?: string;
                price?: number;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.signal_id != null) {
                data.signal_id = this.signal_id;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != SignalPriceStatus.SIGNAL_PRICE_STATUS_UNSPECIFIED)
                writer.writeEnum(1, this.status);
            if (this.signal_id.length)
                writer.writeString(2, this.signal_id);
            if (this.price != 0)
                writer.writeUint64(3, this.price);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignalPrice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignalPrice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        message.signal_id = reader.readString();
                        break;
                    case 3:
                        message.price = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignalPrice {
            return SignalPrice.deserialize(bytes);
        }
    }
    export class ValidatorPrice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signal_price_status?: SignalPriceStatus;
            signal_id?: string;
            price?: number;
            timestamp?: number;
            block_height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signal_price_status" in data && data.signal_price_status != undefined) {
                    this.signal_price_status = data.signal_price_status;
                }
                if ("signal_id" in data && data.signal_id != undefined) {
                    this.signal_id = data.signal_id;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("block_height" in data && data.block_height != undefined) {
                    this.block_height = data.block_height;
                }
            }
        }
        get signal_price_status() {
            return pb_1.Message.getFieldWithDefault(this, 1, SignalPriceStatus.SIGNAL_PRICE_STATUS_UNSPECIFIED) as SignalPriceStatus;
        }
        set signal_price_status(value: SignalPriceStatus) {
            pb_1.Message.setField(this, 1, value);
        }
        get signal_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set signal_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get block_height() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set block_height(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            signal_price_status?: SignalPriceStatus;
            signal_id?: string;
            price?: number;
            timestamp?: number;
            block_height?: number;
        }): ValidatorPrice {
            const message = new ValidatorPrice({});
            if (data.signal_price_status != null) {
                message.signal_price_status = data.signal_price_status;
            }
            if (data.signal_id != null) {
                message.signal_id = data.signal_id;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.block_height != null) {
                message.block_height = data.block_height;
            }
            return message;
        }
        toObject() {
            const data: {
                signal_price_status?: SignalPriceStatus;
                signal_id?: string;
                price?: number;
                timestamp?: number;
                block_height?: number;
            } = {};
            if (this.signal_price_status != null) {
                data.signal_price_status = this.signal_price_status;
            }
            if (this.signal_id != null) {
                data.signal_id = this.signal_id;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.block_height != null) {
                data.block_height = this.block_height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signal_price_status != SignalPriceStatus.SIGNAL_PRICE_STATUS_UNSPECIFIED)
                writer.writeEnum(1, this.signal_price_status);
            if (this.signal_id.length)
                writer.writeString(2, this.signal_id);
            if (this.price != 0)
                writer.writeUint64(3, this.price);
            if (this.timestamp != 0)
                writer.writeInt64(4, this.timestamp);
            if (this.block_height != 0)
                writer.writeInt64(5, this.block_height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidatorPrice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidatorPrice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signal_price_status = reader.readEnum();
                        break;
                    case 2:
                        message.signal_id = reader.readString();
                        break;
                    case 3:
                        message.price = reader.readUint64();
                        break;
                    case 4:
                        message.timestamp = reader.readInt64();
                        break;
                    case 5:
                        message.block_height = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidatorPrice {
            return ValidatorPrice.deserialize(bytes);
        }
    }
    export class ValidatorPriceList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validator?: string;
            validator_prices?: ValidatorPrice[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator" in data && data.validator != undefined) {
                    this.validator = data.validator;
                }
                if ("validator_prices" in data && data.validator_prices != undefined) {
                    this.validator_prices = data.validator_prices;
                }
            }
        }
        get validator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set validator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get validator_prices() {
            return pb_1.Message.getRepeatedWrapperField(this, ValidatorPrice, 2) as ValidatorPrice[];
        }
        set validator_prices(value: ValidatorPrice[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            validator?: string;
            validator_prices?: ReturnType<typeof ValidatorPrice.prototype.toObject>[];
        }): ValidatorPriceList {
            const message = new ValidatorPriceList({});
            if (data.validator != null) {
                message.validator = data.validator;
            }
            if (data.validator_prices != null) {
                message.validator_prices = data.validator_prices.map(item => ValidatorPrice.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                validator?: string;
                validator_prices?: ReturnType<typeof ValidatorPrice.prototype.toObject>[];
            } = {};
            if (this.validator != null) {
                data.validator = this.validator;
            }
            if (this.validator_prices != null) {
                data.validator_prices = this.validator_prices.map((item: ValidatorPrice) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validator.length)
                writer.writeString(1, this.validator);
            if (this.validator_prices.length)
                writer.writeRepeatedMessage(2, this.validator_prices, (item: ValidatorPrice) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidatorPriceList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidatorPriceList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.validator = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.validator_prices, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ValidatorPrice.deserialize(reader), ValidatorPrice));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidatorPriceList {
            return ValidatorPriceList.deserialize(bytes);
        }
    }
    export class ReferenceSourceConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            registry_ipfs_hash?: string;
            registry_version?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("registry_ipfs_hash" in data && data.registry_ipfs_hash != undefined) {
                    this.registry_ipfs_hash = data.registry_ipfs_hash;
                }
                if ("registry_version" in data && data.registry_version != undefined) {
                    this.registry_version = data.registry_version;
                }
            }
        }
        get registry_ipfs_hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set registry_ipfs_hash(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get registry_version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set registry_version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            registry_ipfs_hash?: string;
            registry_version?: string;
        }): ReferenceSourceConfig {
            const message = new ReferenceSourceConfig({});
            if (data.registry_ipfs_hash != null) {
                message.registry_ipfs_hash = data.registry_ipfs_hash;
            }
            if (data.registry_version != null) {
                message.registry_version = data.registry_version;
            }
            return message;
        }
        toObject() {
            const data: {
                registry_ipfs_hash?: string;
                registry_version?: string;
            } = {};
            if (this.registry_ipfs_hash != null) {
                data.registry_ipfs_hash = this.registry_ipfs_hash;
            }
            if (this.registry_version != null) {
                data.registry_version = this.registry_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.registry_ipfs_hash.length)
                writer.writeString(1, this.registry_ipfs_hash);
            if (this.registry_version.length)
                writer.writeString(2, this.registry_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReferenceSourceConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReferenceSourceConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.registry_ipfs_hash = reader.readString();
                        break;
                    case 2:
                        message.registry_version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReferenceSourceConfig {
            return ReferenceSourceConfig.deserialize(bytes);
        }
    }
    export class FeedsSignatureOrder extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signal_ids?: string[];
            encoder?: dependency_3.band.feeds.v1beta1.Encoder;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signal_ids" in data && data.signal_ids != undefined) {
                    this.signal_ids = data.signal_ids;
                }
                if ("encoder" in data && data.encoder != undefined) {
                    this.encoder = data.encoder;
                }
            }
        }
        get signal_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set signal_ids(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get encoder() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_3.band.feeds.v1beta1.Encoder.ENCODER_UNSPECIFIED) as dependency_3.band.feeds.v1beta1.Encoder;
        }
        set encoder(value: dependency_3.band.feeds.v1beta1.Encoder) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            signal_ids?: string[];
            encoder?: dependency_3.band.feeds.v1beta1.Encoder;
        }): FeedsSignatureOrder {
            const message = new FeedsSignatureOrder({});
            if (data.signal_ids != null) {
                message.signal_ids = data.signal_ids;
            }
            if (data.encoder != null) {
                message.encoder = data.encoder;
            }
            return message;
        }
        toObject() {
            const data: {
                signal_ids?: string[];
                encoder?: dependency_3.band.feeds.v1beta1.Encoder;
            } = {};
            if (this.signal_ids != null) {
                data.signal_ids = this.signal_ids;
            }
            if (this.encoder != null) {
                data.encoder = this.encoder;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signal_ids.length)
                writer.writeRepeatedString(1, this.signal_ids);
            if (this.encoder != dependency_3.band.feeds.v1beta1.Encoder.ENCODER_UNSPECIFIED)
                writer.writeEnum(2, this.encoder);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FeedsSignatureOrder {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FeedsSignatureOrder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        message.encoder = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FeedsSignatureOrder {
            return FeedsSignatureOrder.deserialize(bytes);
        }
    }
}
