/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: band/bandtss/v1beta1/bandtss.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../../../google/protobuf/timestamp";
import * as dependency_3 from "./../../../cosmos/base/v1beta1/coin";
import * as dependency_4 from "./../../../cosmos_proto/cosmos";
import * as pb_1 from "google-protobuf";
export namespace band.bandtss.v1beta1 {
    export enum TransitionStatus {
        TRANSITION_STATUS_UNSPECIFIED = 0,
        TRANSITION_STATUS_CREATING_GROUP = 1,
        TRANSITION_STATUS_WAITING_SIGN = 2,
        TRANSITION_STATUS_WAITING_EXECUTION = 3
    }
    export class Member extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            group_id?: number;
            is_active?: boolean;
            since?: dependency_2.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("is_active" in data && data.is_active != undefined) {
                    this.is_active = data.is_active;
                }
                if ("since" in data && data.since != undefined) {
                    this.since = data.since;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_active() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_active(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get since() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 4) as dependency_2.google.protobuf.Timestamp;
        }
        set since(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_since() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            address?: string;
            group_id?: number;
            is_active?: boolean;
            since?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        }): Member {
            const message = new Member({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.is_active != null) {
                message.is_active = data.is_active;
            }
            if (data.since != null) {
                message.since = dependency_2.google.protobuf.Timestamp.fromObject(data.since);
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                group_id?: number;
                is_active?: boolean;
                since?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.is_active != null) {
                data.is_active = this.is_active;
            }
            if (this.since != null) {
                data.since = this.since.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.group_id != 0)
                writer.writeUint64(2, this.group_id);
            if (this.is_active != false)
                writer.writeBool(3, this.is_active);
            if (this.has_since)
                writer.writeMessage(4, this.since, () => this.since.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Member {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Member();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.group_id = reader.readUint64();
                        break;
                    case 3:
                        message.is_active = reader.readBool();
                        break;
                    case 4:
                        reader.readMessage(message.since, () => message.since = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Member {
            return Member.deserialize(bytes);
        }
    }
    export class CurrentGroup extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            active_time?: dependency_2.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("active_time" in data && data.active_time != undefined) {
                    this.active_time = data.active_time;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get active_time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 2) as dependency_2.google.protobuf.Timestamp;
        }
        set active_time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_active_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            group_id?: number;
            active_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        }): CurrentGroup {
            const message = new CurrentGroup({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.active_time != null) {
                message.active_time = dependency_2.google.protobuf.Timestamp.fromObject(data.active_time);
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                active_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.active_time != null) {
                data.active_time = this.active_time.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeUint64(1, this.group_id);
            if (this.has_active_time)
                writer.writeMessage(2, this.active_time, () => this.active_time.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CurrentGroup {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CurrentGroup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.active_time, () => message.active_time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CurrentGroup {
            return CurrentGroup.deserialize(bytes);
        }
    }
    export class Signing extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            fee_per_signer?: dependency_3.cosmos.base.v1beta1.Coin[];
            requester?: string;
            current_group_signing_id?: number;
            incoming_group_signing_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("fee_per_signer" in data && data.fee_per_signer != undefined) {
                    this.fee_per_signer = data.fee_per_signer;
                }
                if ("requester" in data && data.requester != undefined) {
                    this.requester = data.requester;
                }
                if ("current_group_signing_id" in data && data.current_group_signing_id != undefined) {
                    this.current_group_signing_id = data.current_group_signing_id;
                }
                if ("incoming_group_signing_id" in data && data.incoming_group_signing_id != undefined) {
                    this.incoming_group_signing_id = data.incoming_group_signing_id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get fee_per_signer() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.cosmos.base.v1beta1.Coin, 2) as dependency_3.cosmos.base.v1beta1.Coin[];
        }
        set fee_per_signer(value: dependency_3.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get requester() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set requester(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get current_group_signing_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set current_group_signing_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get incoming_group_signing_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set incoming_group_signing_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: number;
            fee_per_signer?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            requester?: string;
            current_group_signing_id?: number;
            incoming_group_signing_id?: number;
        }): Signing {
            const message = new Signing({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.fee_per_signer != null) {
                message.fee_per_signer = data.fee_per_signer.map(item => dependency_3.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            if (data.requester != null) {
                message.requester = data.requester;
            }
            if (data.current_group_signing_id != null) {
                message.current_group_signing_id = data.current_group_signing_id;
            }
            if (data.incoming_group_signing_id != null) {
                message.incoming_group_signing_id = data.incoming_group_signing_id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                fee_per_signer?: ReturnType<typeof dependency_3.cosmos.base.v1beta1.Coin.prototype.toObject>[];
                requester?: string;
                current_group_signing_id?: number;
                incoming_group_signing_id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.fee_per_signer != null) {
                data.fee_per_signer = this.fee_per_signer.map((item: dependency_3.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            if (this.requester != null) {
                data.requester = this.requester;
            }
            if (this.current_group_signing_id != null) {
                data.current_group_signing_id = this.current_group_signing_id;
            }
            if (this.incoming_group_signing_id != null) {
                data.incoming_group_signing_id = this.incoming_group_signing_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint64(1, this.id);
            if (this.fee_per_signer.length)
                writer.writeRepeatedMessage(2, this.fee_per_signer, (item: dependency_3.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (this.requester.length)
                writer.writeString(3, this.requester);
            if (this.current_group_signing_id != 0)
                writer.writeUint64(4, this.current_group_signing_id);
            if (this.incoming_group_signing_id != 0)
                writer.writeUint64(5, this.incoming_group_signing_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Signing {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Signing();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.fee_per_signer, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_3.cosmos.base.v1beta1.Coin));
                        break;
                    case 3:
                        message.requester = reader.readString();
                        break;
                    case 4:
                        message.current_group_signing_id = reader.readUint64();
                        break;
                    case 5:
                        message.incoming_group_signing_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Signing {
            return Signing.deserialize(bytes);
        }
    }
    export class GroupTransition extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signing_id?: number;
            current_group_id?: number;
            current_group_pub_key?: Uint8Array;
            incoming_group_id?: number;
            incoming_group_pub_key?: Uint8Array;
            status?: TransitionStatus;
            exec_time?: dependency_2.google.protobuf.Timestamp;
            is_force_transition?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signing_id" in data && data.signing_id != undefined) {
                    this.signing_id = data.signing_id;
                }
                if ("current_group_id" in data && data.current_group_id != undefined) {
                    this.current_group_id = data.current_group_id;
                }
                if ("current_group_pub_key" in data && data.current_group_pub_key != undefined) {
                    this.current_group_pub_key = data.current_group_pub_key;
                }
                if ("incoming_group_id" in data && data.incoming_group_id != undefined) {
                    this.incoming_group_id = data.incoming_group_id;
                }
                if ("incoming_group_pub_key" in data && data.incoming_group_pub_key != undefined) {
                    this.incoming_group_pub_key = data.incoming_group_pub_key;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("exec_time" in data && data.exec_time != undefined) {
                    this.exec_time = data.exec_time;
                }
                if ("is_force_transition" in data && data.is_force_transition != undefined) {
                    this.is_force_transition = data.is_force_transition;
                }
            }
        }
        get signing_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set signing_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get current_group_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set current_group_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get current_group_pub_key() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set current_group_pub_key(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get incoming_group_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set incoming_group_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get incoming_group_pub_key() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set incoming_group_pub_key(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 6, TransitionStatus.TRANSITION_STATUS_UNSPECIFIED) as TransitionStatus;
        }
        set status(value: TransitionStatus) {
            pb_1.Message.setField(this, 6, value);
        }
        get exec_time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 7) as dependency_2.google.protobuf.Timestamp;
        }
        set exec_time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_exec_time() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get is_force_transition() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set is_force_transition(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            signing_id?: number;
            current_group_id?: number;
            current_group_pub_key?: Uint8Array;
            incoming_group_id?: number;
            incoming_group_pub_key?: Uint8Array;
            status?: TransitionStatus;
            exec_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            is_force_transition?: boolean;
        }): GroupTransition {
            const message = new GroupTransition({});
            if (data.signing_id != null) {
                message.signing_id = data.signing_id;
            }
            if (data.current_group_id != null) {
                message.current_group_id = data.current_group_id;
            }
            if (data.current_group_pub_key != null) {
                message.current_group_pub_key = data.current_group_pub_key;
            }
            if (data.incoming_group_id != null) {
                message.incoming_group_id = data.incoming_group_id;
            }
            if (data.incoming_group_pub_key != null) {
                message.incoming_group_pub_key = data.incoming_group_pub_key;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.exec_time != null) {
                message.exec_time = dependency_2.google.protobuf.Timestamp.fromObject(data.exec_time);
            }
            if (data.is_force_transition != null) {
                message.is_force_transition = data.is_force_transition;
            }
            return message;
        }
        toObject() {
            const data: {
                signing_id?: number;
                current_group_id?: number;
                current_group_pub_key?: Uint8Array;
                incoming_group_id?: number;
                incoming_group_pub_key?: Uint8Array;
                status?: TransitionStatus;
                exec_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                is_force_transition?: boolean;
            } = {};
            if (this.signing_id != null) {
                data.signing_id = this.signing_id;
            }
            if (this.current_group_id != null) {
                data.current_group_id = this.current_group_id;
            }
            if (this.current_group_pub_key != null) {
                data.current_group_pub_key = this.current_group_pub_key;
            }
            if (this.incoming_group_id != null) {
                data.incoming_group_id = this.incoming_group_id;
            }
            if (this.incoming_group_pub_key != null) {
                data.incoming_group_pub_key = this.incoming_group_pub_key;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.exec_time != null) {
                data.exec_time = this.exec_time.toObject();
            }
            if (this.is_force_transition != null) {
                data.is_force_transition = this.is_force_transition;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signing_id != 0)
                writer.writeUint64(1, this.signing_id);
            if (this.current_group_id != 0)
                writer.writeUint64(2, this.current_group_id);
            if (this.current_group_pub_key.length)
                writer.writeBytes(3, this.current_group_pub_key);
            if (this.incoming_group_id != 0)
                writer.writeUint64(4, this.incoming_group_id);
            if (this.incoming_group_pub_key.length)
                writer.writeBytes(5, this.incoming_group_pub_key);
            if (this.status != TransitionStatus.TRANSITION_STATUS_UNSPECIFIED)
                writer.writeEnum(6, this.status);
            if (this.has_exec_time)
                writer.writeMessage(7, this.exec_time, () => this.exec_time.serialize(writer));
            if (this.is_force_transition != false)
                writer.writeBool(8, this.is_force_transition);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupTransition {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupTransition();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signing_id = reader.readUint64();
                        break;
                    case 2:
                        message.current_group_id = reader.readUint64();
                        break;
                    case 3:
                        message.current_group_pub_key = reader.readBytes();
                        break;
                    case 4:
                        message.incoming_group_id = reader.readUint64();
                        break;
                    case 5:
                        message.incoming_group_pub_key = reader.readBytes();
                        break;
                    case 6:
                        message.status = reader.readEnum();
                        break;
                    case 7:
                        reader.readMessage(message.exec_time, () => message.exec_time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 8:
                        message.is_force_transition = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupTransition {
            return GroupTransition.deserialize(bytes);
        }
    }
    export class GroupTransitionSignatureOrder extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pub_key?: Uint8Array;
            transition_time?: dependency_2.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pub_key" in data && data.pub_key != undefined) {
                    this.pub_key = data.pub_key;
                }
                if ("transition_time" in data && data.transition_time != undefined) {
                    this.transition_time = data.transition_time;
                }
            }
        }
        get pub_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set pub_key(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get transition_time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 2) as dependency_2.google.protobuf.Timestamp;
        }
        set transition_time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_transition_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            pub_key?: Uint8Array;
            transition_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        }): GroupTransitionSignatureOrder {
            const message = new GroupTransitionSignatureOrder({});
            if (data.pub_key != null) {
                message.pub_key = data.pub_key;
            }
            if (data.transition_time != null) {
                message.transition_time = dependency_2.google.protobuf.Timestamp.fromObject(data.transition_time);
            }
            return message;
        }
        toObject() {
            const data: {
                pub_key?: Uint8Array;
                transition_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.pub_key != null) {
                data.pub_key = this.pub_key;
            }
            if (this.transition_time != null) {
                data.transition_time = this.transition_time.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pub_key.length)
                writer.writeBytes(1, this.pub_key);
            if (this.has_transition_time)
                writer.writeMessage(2, this.transition_time, () => this.transition_time.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupTransitionSignatureOrder {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupTransitionSignatureOrder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.pub_key = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.transition_time, () => message.transition_time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupTransitionSignatureOrder {
            return GroupTransitionSignatureOrder.deserialize(bytes);
        }
    }
}
