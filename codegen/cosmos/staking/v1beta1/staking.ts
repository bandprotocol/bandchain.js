/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cosmos/staking/v1beta1/staking.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as dependency_2 from "./../../../google/protobuf/any";
import * as dependency_3 from "./../../../google/protobuf/duration";
import * as dependency_4 from "./../../../google/protobuf/timestamp";
import * as dependency_5 from "./../../../cosmos_proto/cosmos";
import * as dependency_6 from "./../../base/v1beta1/coin";
import * as dependency_7 from "./../../../amino/amino";
import * as dependency_8 from "./../../../tendermint/types/types";
import * as dependency_9 from "./../../../tendermint/abci/types";
import * as pb_1 from "google-protobuf";
export namespace cosmos.staking.v1beta1 {
    export enum BondStatus {
        BOND_STATUS_UNSPECIFIED = 0,
        BOND_STATUS_UNBONDED = 1,
        BOND_STATUS_UNBONDING = 2,
        BOND_STATUS_BONDED = 3
    }
    export enum Infraction {
        INFRACTION_UNSPECIFIED = 0,
        INFRACTION_DOUBLE_SIGN = 1,
        INFRACTION_DOWNTIME = 2
    }
    export class HistoricalInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            header?: dependency_8.tendermint.types.Header;
            valset?: Validator[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("valset" in data && data.valset != undefined) {
                    this.valset = data.valset;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, dependency_8.tendermint.types.Header, 1) as dependency_8.tendermint.types.Header;
        }
        set header(value: dependency_8.tendermint.types.Header) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get valset() {
            return pb_1.Message.getRepeatedWrapperField(this, Validator, 2) as Validator[];
        }
        set valset(value: Validator[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            header?: ReturnType<typeof dependency_8.tendermint.types.Header.prototype.toObject>;
            valset?: ReturnType<typeof Validator.prototype.toObject>[];
        }): HistoricalInfo {
            const message = new HistoricalInfo({});
            if (data.header != null) {
                message.header = dependency_8.tendermint.types.Header.fromObject(data.header);
            }
            if (data.valset != null) {
                message.valset = data.valset.map(item => Validator.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof dependency_8.tendermint.types.Header.prototype.toObject>;
                valset?: ReturnType<typeof Validator.prototype.toObject>[];
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.valset != null) {
                data.valset = this.valset.map((item: Validator) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.valset.length)
                writer.writeRepeatedMessage(2, this.valset, (item: Validator) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HistoricalInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HistoricalInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.header, () => message.header = dependency_8.tendermint.types.Header.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.valset, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Validator.deserialize(reader), Validator));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HistoricalInfo {
            return HistoricalInfo.deserialize(bytes);
        }
    }
    export class CommissionRates extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rate?: string;
            max_rate?: string;
            max_change_rate?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rate" in data && data.rate != undefined) {
                    this.rate = data.rate;
                }
                if ("max_rate" in data && data.max_rate != undefined) {
                    this.max_rate = data.max_rate;
                }
                if ("max_change_rate" in data && data.max_change_rate != undefined) {
                    this.max_change_rate = data.max_change_rate;
                }
            }
        }
        get rate() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set rate(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get max_rate() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set max_rate(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get max_change_rate() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set max_change_rate(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            rate?: string;
            max_rate?: string;
            max_change_rate?: string;
        }): CommissionRates {
            const message = new CommissionRates({});
            if (data.rate != null) {
                message.rate = data.rate;
            }
            if (data.max_rate != null) {
                message.max_rate = data.max_rate;
            }
            if (data.max_change_rate != null) {
                message.max_change_rate = data.max_change_rate;
            }
            return message;
        }
        toObject() {
            const data: {
                rate?: string;
                max_rate?: string;
                max_change_rate?: string;
            } = {};
            if (this.rate != null) {
                data.rate = this.rate;
            }
            if (this.max_rate != null) {
                data.max_rate = this.max_rate;
            }
            if (this.max_change_rate != null) {
                data.max_change_rate = this.max_change_rate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rate.length)
                writer.writeString(1, this.rate);
            if (this.max_rate.length)
                writer.writeString(2, this.max_rate);
            if (this.max_change_rate.length)
                writer.writeString(3, this.max_change_rate);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommissionRates {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommissionRates();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rate = reader.readString();
                        break;
                    case 2:
                        message.max_rate = reader.readString();
                        break;
                    case 3:
                        message.max_change_rate = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommissionRates {
            return CommissionRates.deserialize(bytes);
        }
    }
    export class Commission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            commission_rates?: CommissionRates;
            update_time?: dependency_4.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("commission_rates" in data && data.commission_rates != undefined) {
                    this.commission_rates = data.commission_rates;
                }
                if ("update_time" in data && data.update_time != undefined) {
                    this.update_time = data.update_time;
                }
            }
        }
        get commission_rates() {
            return pb_1.Message.getWrapperField(this, CommissionRates, 1) as CommissionRates;
        }
        set commission_rates(value: CommissionRates) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_commission_rates() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get update_time() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 2) as dependency_4.google.protobuf.Timestamp;
        }
        set update_time(value: dependency_4.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_update_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            commission_rates?: ReturnType<typeof CommissionRates.prototype.toObject>;
            update_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
        }): Commission {
            const message = new Commission({});
            if (data.commission_rates != null) {
                message.commission_rates = CommissionRates.fromObject(data.commission_rates);
            }
            if (data.update_time != null) {
                message.update_time = dependency_4.google.protobuf.Timestamp.fromObject(data.update_time);
            }
            return message;
        }
        toObject() {
            const data: {
                commission_rates?: ReturnType<typeof CommissionRates.prototype.toObject>;
                update_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.commission_rates != null) {
                data.commission_rates = this.commission_rates.toObject();
            }
            if (this.update_time != null) {
                data.update_time = this.update_time.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_commission_rates)
                writer.writeMessage(1, this.commission_rates, () => this.commission_rates.serialize(writer));
            if (this.has_update_time)
                writer.writeMessage(2, this.update_time, () => this.update_time.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Commission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Commission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.commission_rates, () => message.commission_rates = CommissionRates.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.update_time, () => message.update_time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Commission {
            return Commission.deserialize(bytes);
        }
    }
    export class Description extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            moniker?: string;
            identity?: string;
            website?: string;
            security_contact?: string;
            details?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("moniker" in data && data.moniker != undefined) {
                    this.moniker = data.moniker;
                }
                if ("identity" in data && data.identity != undefined) {
                    this.identity = data.identity;
                }
                if ("website" in data && data.website != undefined) {
                    this.website = data.website;
                }
                if ("security_contact" in data && data.security_contact != undefined) {
                    this.security_contact = data.security_contact;
                }
                if ("details" in data && data.details != undefined) {
                    this.details = data.details;
                }
            }
        }
        get moniker() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set moniker(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get identity() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set identity(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get website() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set website(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get security_contact() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set security_contact(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get details() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set details(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            moniker?: string;
            identity?: string;
            website?: string;
            security_contact?: string;
            details?: string;
        }): Description {
            const message = new Description({});
            if (data.moniker != null) {
                message.moniker = data.moniker;
            }
            if (data.identity != null) {
                message.identity = data.identity;
            }
            if (data.website != null) {
                message.website = data.website;
            }
            if (data.security_contact != null) {
                message.security_contact = data.security_contact;
            }
            if (data.details != null) {
                message.details = data.details;
            }
            return message;
        }
        toObject() {
            const data: {
                moniker?: string;
                identity?: string;
                website?: string;
                security_contact?: string;
                details?: string;
            } = {};
            if (this.moniker != null) {
                data.moniker = this.moniker;
            }
            if (this.identity != null) {
                data.identity = this.identity;
            }
            if (this.website != null) {
                data.website = this.website;
            }
            if (this.security_contact != null) {
                data.security_contact = this.security_contact;
            }
            if (this.details != null) {
                data.details = this.details;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.moniker.length)
                writer.writeString(1, this.moniker);
            if (this.identity.length)
                writer.writeString(2, this.identity);
            if (this.website.length)
                writer.writeString(3, this.website);
            if (this.security_contact.length)
                writer.writeString(4, this.security_contact);
            if (this.details.length)
                writer.writeString(5, this.details);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Description {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Description();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.moniker = reader.readString();
                        break;
                    case 2:
                        message.identity = reader.readString();
                        break;
                    case 3:
                        message.website = reader.readString();
                        break;
                    case 4:
                        message.security_contact = reader.readString();
                        break;
                    case 5:
                        message.details = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Description {
            return Description.deserialize(bytes);
        }
    }
    export class Validator extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operator_address?: string;
            consensus_pubkey?: dependency_2.google.protobuf.Any;
            jailed?: boolean;
            status?: BondStatus;
            tokens?: string;
            delegator_shares?: string;
            description?: Description;
            unbonding_height?: number;
            unbonding_time?: dependency_4.google.protobuf.Timestamp;
            commission?: Commission;
            min_self_delegation?: string;
            unbonding_on_hold_ref_count?: number;
            unbonding_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operator_address" in data && data.operator_address != undefined) {
                    this.operator_address = data.operator_address;
                }
                if ("consensus_pubkey" in data && data.consensus_pubkey != undefined) {
                    this.consensus_pubkey = data.consensus_pubkey;
                }
                if ("jailed" in data && data.jailed != undefined) {
                    this.jailed = data.jailed;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("tokens" in data && data.tokens != undefined) {
                    this.tokens = data.tokens;
                }
                if ("delegator_shares" in data && data.delegator_shares != undefined) {
                    this.delegator_shares = data.delegator_shares;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("unbonding_height" in data && data.unbonding_height != undefined) {
                    this.unbonding_height = data.unbonding_height;
                }
                if ("unbonding_time" in data && data.unbonding_time != undefined) {
                    this.unbonding_time = data.unbonding_time;
                }
                if ("commission" in data && data.commission != undefined) {
                    this.commission = data.commission;
                }
                if ("min_self_delegation" in data && data.min_self_delegation != undefined) {
                    this.min_self_delegation = data.min_self_delegation;
                }
                if ("unbonding_on_hold_ref_count" in data && data.unbonding_on_hold_ref_count != undefined) {
                    this.unbonding_on_hold_ref_count = data.unbonding_on_hold_ref_count;
                }
                if ("unbonding_ids" in data && data.unbonding_ids != undefined) {
                    this.unbonding_ids = data.unbonding_ids;
                }
            }
        }
        get operator_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set operator_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get consensus_pubkey() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Any, 2) as dependency_2.google.protobuf.Any;
        }
        set consensus_pubkey(value: dependency_2.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_consensus_pubkey() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get jailed() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set jailed(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 4, BondStatus.BOND_STATUS_UNSPECIFIED) as BondStatus;
        }
        set status(value: BondStatus) {
            pb_1.Message.setField(this, 4, value);
        }
        get tokens() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set tokens(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get delegator_shares() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set delegator_shares(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get description() {
            return pb_1.Message.getWrapperField(this, Description, 7) as Description;
        }
        set description(value: Description) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_description() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get unbonding_height() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set unbonding_height(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get unbonding_time() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 9) as dependency_4.google.protobuf.Timestamp;
        }
        set unbonding_time(value: dependency_4.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_unbonding_time() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get commission() {
            return pb_1.Message.getWrapperField(this, Commission, 10) as Commission;
        }
        set commission(value: Commission) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_commission() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get min_self_delegation() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set min_self_delegation(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get unbonding_on_hold_ref_count() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set unbonding_on_hold_ref_count(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get unbonding_ids() {
            return pb_1.Message.getFieldWithDefault(this, 13, []) as number[];
        }
        set unbonding_ids(value: number[]) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            operator_address?: string;
            consensus_pubkey?: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>;
            jailed?: boolean;
            status?: BondStatus;
            tokens?: string;
            delegator_shares?: string;
            description?: ReturnType<typeof Description.prototype.toObject>;
            unbonding_height?: number;
            unbonding_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
            commission?: ReturnType<typeof Commission.prototype.toObject>;
            min_self_delegation?: string;
            unbonding_on_hold_ref_count?: number;
            unbonding_ids?: number[];
        }): Validator {
            const message = new Validator({});
            if (data.operator_address != null) {
                message.operator_address = data.operator_address;
            }
            if (data.consensus_pubkey != null) {
                message.consensus_pubkey = dependency_2.google.protobuf.Any.fromObject(data.consensus_pubkey);
            }
            if (data.jailed != null) {
                message.jailed = data.jailed;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.tokens != null) {
                message.tokens = data.tokens;
            }
            if (data.delegator_shares != null) {
                message.delegator_shares = data.delegator_shares;
            }
            if (data.description != null) {
                message.description = Description.fromObject(data.description);
            }
            if (data.unbonding_height != null) {
                message.unbonding_height = data.unbonding_height;
            }
            if (data.unbonding_time != null) {
                message.unbonding_time = dependency_4.google.protobuf.Timestamp.fromObject(data.unbonding_time);
            }
            if (data.commission != null) {
                message.commission = Commission.fromObject(data.commission);
            }
            if (data.min_self_delegation != null) {
                message.min_self_delegation = data.min_self_delegation;
            }
            if (data.unbonding_on_hold_ref_count != null) {
                message.unbonding_on_hold_ref_count = data.unbonding_on_hold_ref_count;
            }
            if (data.unbonding_ids != null) {
                message.unbonding_ids = data.unbonding_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                operator_address?: string;
                consensus_pubkey?: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>;
                jailed?: boolean;
                status?: BondStatus;
                tokens?: string;
                delegator_shares?: string;
                description?: ReturnType<typeof Description.prototype.toObject>;
                unbonding_height?: number;
                unbonding_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
                commission?: ReturnType<typeof Commission.prototype.toObject>;
                min_self_delegation?: string;
                unbonding_on_hold_ref_count?: number;
                unbonding_ids?: number[];
            } = {};
            if (this.operator_address != null) {
                data.operator_address = this.operator_address;
            }
            if (this.consensus_pubkey != null) {
                data.consensus_pubkey = this.consensus_pubkey.toObject();
            }
            if (this.jailed != null) {
                data.jailed = this.jailed;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.tokens != null) {
                data.tokens = this.tokens;
            }
            if (this.delegator_shares != null) {
                data.delegator_shares = this.delegator_shares;
            }
            if (this.description != null) {
                data.description = this.description.toObject();
            }
            if (this.unbonding_height != null) {
                data.unbonding_height = this.unbonding_height;
            }
            if (this.unbonding_time != null) {
                data.unbonding_time = this.unbonding_time.toObject();
            }
            if (this.commission != null) {
                data.commission = this.commission.toObject();
            }
            if (this.min_self_delegation != null) {
                data.min_self_delegation = this.min_self_delegation;
            }
            if (this.unbonding_on_hold_ref_count != null) {
                data.unbonding_on_hold_ref_count = this.unbonding_on_hold_ref_count;
            }
            if (this.unbonding_ids != null) {
                data.unbonding_ids = this.unbonding_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.operator_address.length)
                writer.writeString(1, this.operator_address);
            if (this.has_consensus_pubkey)
                writer.writeMessage(2, this.consensus_pubkey, () => this.consensus_pubkey.serialize(writer));
            if (this.jailed != false)
                writer.writeBool(3, this.jailed);
            if (this.status != BondStatus.BOND_STATUS_UNSPECIFIED)
                writer.writeEnum(4, this.status);
            if (this.tokens.length)
                writer.writeString(5, this.tokens);
            if (this.delegator_shares.length)
                writer.writeString(6, this.delegator_shares);
            if (this.has_description)
                writer.writeMessage(7, this.description, () => this.description.serialize(writer));
            if (this.unbonding_height != 0)
                writer.writeInt64(8, this.unbonding_height);
            if (this.has_unbonding_time)
                writer.writeMessage(9, this.unbonding_time, () => this.unbonding_time.serialize(writer));
            if (this.has_commission)
                writer.writeMessage(10, this.commission, () => this.commission.serialize(writer));
            if (this.min_self_delegation.length)
                writer.writeString(11, this.min_self_delegation);
            if (this.unbonding_on_hold_ref_count != 0)
                writer.writeInt64(12, this.unbonding_on_hold_ref_count);
            if (this.unbonding_ids.length)
                writer.writePackedUint64(13, this.unbonding_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Validator {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Validator();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.operator_address = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.consensus_pubkey, () => message.consensus_pubkey = dependency_2.google.protobuf.Any.deserialize(reader));
                        break;
                    case 3:
                        message.jailed = reader.readBool();
                        break;
                    case 4:
                        message.status = reader.readEnum();
                        break;
                    case 5:
                        message.tokens = reader.readString();
                        break;
                    case 6:
                        message.delegator_shares = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.description, () => message.description = Description.deserialize(reader));
                        break;
                    case 8:
                        message.unbonding_height = reader.readInt64();
                        break;
                    case 9:
                        reader.readMessage(message.unbonding_time, () => message.unbonding_time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.commission, () => message.commission = Commission.deserialize(reader));
                        break;
                    case 11:
                        message.min_self_delegation = reader.readString();
                        break;
                    case 12:
                        message.unbonding_on_hold_ref_count = reader.readInt64();
                        break;
                    case 13:
                        message.unbonding_ids = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Validator {
            return Validator.deserialize(bytes);
        }
    }
    export class ValAddresses extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            addresses?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("addresses" in data && data.addresses != undefined) {
                    this.addresses = data.addresses;
                }
            }
        }
        get addresses() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set addresses(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            addresses?: string[];
        }): ValAddresses {
            const message = new ValAddresses({});
            if (data.addresses != null) {
                message.addresses = data.addresses;
            }
            return message;
        }
        toObject() {
            const data: {
                addresses?: string[];
            } = {};
            if (this.addresses != null) {
                data.addresses = this.addresses;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.addresses.length)
                writer.writeRepeatedString(1, this.addresses);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValAddresses {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValAddresses();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValAddresses {
            return ValAddresses.deserialize(bytes);
        }
    }
    export class DVPair extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            delegator_address?: string;
            validator_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("delegator_address" in data && data.delegator_address != undefined) {
                    this.delegator_address = data.delegator_address;
                }
                if ("validator_address" in data && data.validator_address != undefined) {
                    this.validator_address = data.validator_address;
                }
            }
        }
        get delegator_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set delegator_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get validator_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set validator_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            delegator_address?: string;
            validator_address?: string;
        }): DVPair {
            const message = new DVPair({});
            if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
            }
            if (data.validator_address != null) {
                message.validator_address = data.validator_address;
            }
            return message;
        }
        toObject() {
            const data: {
                delegator_address?: string;
                validator_address?: string;
            } = {};
            if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
            }
            if (this.validator_address != null) {
                data.validator_address = this.validator_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.delegator_address.length)
                writer.writeString(1, this.delegator_address);
            if (this.validator_address.length)
                writer.writeString(2, this.validator_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DVPair {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DVPair();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.delegator_address = reader.readString();
                        break;
                    case 2:
                        message.validator_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DVPair {
            return DVPair.deserialize(bytes);
        }
    }
    export class DVPairs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pairs?: DVPair[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pairs" in data && data.pairs != undefined) {
                    this.pairs = data.pairs;
                }
            }
        }
        get pairs() {
            return pb_1.Message.getRepeatedWrapperField(this, DVPair, 1) as DVPair[];
        }
        set pairs(value: DVPair[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            pairs?: ReturnType<typeof DVPair.prototype.toObject>[];
        }): DVPairs {
            const message = new DVPairs({});
            if (data.pairs != null) {
                message.pairs = data.pairs.map(item => DVPair.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                pairs?: ReturnType<typeof DVPair.prototype.toObject>[];
            } = {};
            if (this.pairs != null) {
                data.pairs = this.pairs.map((item: DVPair) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pairs.length)
                writer.writeRepeatedMessage(1, this.pairs, (item: DVPair) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DVPairs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DVPairs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pairs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DVPair.deserialize(reader), DVPair));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DVPairs {
            return DVPairs.deserialize(bytes);
        }
    }
    export class DVVTriplet extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            delegator_address?: string;
            validator_src_address?: string;
            validator_dst_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("delegator_address" in data && data.delegator_address != undefined) {
                    this.delegator_address = data.delegator_address;
                }
                if ("validator_src_address" in data && data.validator_src_address != undefined) {
                    this.validator_src_address = data.validator_src_address;
                }
                if ("validator_dst_address" in data && data.validator_dst_address != undefined) {
                    this.validator_dst_address = data.validator_dst_address;
                }
            }
        }
        get delegator_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set delegator_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get validator_src_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set validator_src_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get validator_dst_address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set validator_dst_address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            delegator_address?: string;
            validator_src_address?: string;
            validator_dst_address?: string;
        }): DVVTriplet {
            const message = new DVVTriplet({});
            if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
            }
            if (data.validator_src_address != null) {
                message.validator_src_address = data.validator_src_address;
            }
            if (data.validator_dst_address != null) {
                message.validator_dst_address = data.validator_dst_address;
            }
            return message;
        }
        toObject() {
            const data: {
                delegator_address?: string;
                validator_src_address?: string;
                validator_dst_address?: string;
            } = {};
            if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
            }
            if (this.validator_src_address != null) {
                data.validator_src_address = this.validator_src_address;
            }
            if (this.validator_dst_address != null) {
                data.validator_dst_address = this.validator_dst_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.delegator_address.length)
                writer.writeString(1, this.delegator_address);
            if (this.validator_src_address.length)
                writer.writeString(2, this.validator_src_address);
            if (this.validator_dst_address.length)
                writer.writeString(3, this.validator_dst_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DVVTriplet {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DVVTriplet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.delegator_address = reader.readString();
                        break;
                    case 2:
                        message.validator_src_address = reader.readString();
                        break;
                    case 3:
                        message.validator_dst_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DVVTriplet {
            return DVVTriplet.deserialize(bytes);
        }
    }
    export class DVVTriplets extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            triplets?: DVVTriplet[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("triplets" in data && data.triplets != undefined) {
                    this.triplets = data.triplets;
                }
            }
        }
        get triplets() {
            return pb_1.Message.getRepeatedWrapperField(this, DVVTriplet, 1) as DVVTriplet[];
        }
        set triplets(value: DVVTriplet[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            triplets?: ReturnType<typeof DVVTriplet.prototype.toObject>[];
        }): DVVTriplets {
            const message = new DVVTriplets({});
            if (data.triplets != null) {
                message.triplets = data.triplets.map(item => DVVTriplet.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                triplets?: ReturnType<typeof DVVTriplet.prototype.toObject>[];
            } = {};
            if (this.triplets != null) {
                data.triplets = this.triplets.map((item: DVVTriplet) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.triplets.length)
                writer.writeRepeatedMessage(1, this.triplets, (item: DVVTriplet) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DVVTriplets {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DVVTriplets();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.triplets, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DVVTriplet.deserialize(reader), DVVTriplet));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DVVTriplets {
            return DVVTriplets.deserialize(bytes);
        }
    }
    export class Delegation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            delegator_address?: string;
            validator_address?: string;
            shares?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("delegator_address" in data && data.delegator_address != undefined) {
                    this.delegator_address = data.delegator_address;
                }
                if ("validator_address" in data && data.validator_address != undefined) {
                    this.validator_address = data.validator_address;
                }
                if ("shares" in data && data.shares != undefined) {
                    this.shares = data.shares;
                }
            }
        }
        get delegator_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set delegator_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get validator_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set validator_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get shares() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set shares(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            delegator_address?: string;
            validator_address?: string;
            shares?: string;
        }): Delegation {
            const message = new Delegation({});
            if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
            }
            if (data.validator_address != null) {
                message.validator_address = data.validator_address;
            }
            if (data.shares != null) {
                message.shares = data.shares;
            }
            return message;
        }
        toObject() {
            const data: {
                delegator_address?: string;
                validator_address?: string;
                shares?: string;
            } = {};
            if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
            }
            if (this.validator_address != null) {
                data.validator_address = this.validator_address;
            }
            if (this.shares != null) {
                data.shares = this.shares;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.delegator_address.length)
                writer.writeString(1, this.delegator_address);
            if (this.validator_address.length)
                writer.writeString(2, this.validator_address);
            if (this.shares.length)
                writer.writeString(3, this.shares);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Delegation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Delegation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.delegator_address = reader.readString();
                        break;
                    case 2:
                        message.validator_address = reader.readString();
                        break;
                    case 3:
                        message.shares = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Delegation {
            return Delegation.deserialize(bytes);
        }
    }
    export class UnbondingDelegation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            delegator_address?: string;
            validator_address?: string;
            entries?: UnbondingDelegationEntry[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("delegator_address" in data && data.delegator_address != undefined) {
                    this.delegator_address = data.delegator_address;
                }
                if ("validator_address" in data && data.validator_address != undefined) {
                    this.validator_address = data.validator_address;
                }
                if ("entries" in data && data.entries != undefined) {
                    this.entries = data.entries;
                }
            }
        }
        get delegator_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set delegator_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get validator_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set validator_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get entries() {
            return pb_1.Message.getRepeatedWrapperField(this, UnbondingDelegationEntry, 3) as UnbondingDelegationEntry[];
        }
        set entries(value: UnbondingDelegationEntry[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            delegator_address?: string;
            validator_address?: string;
            entries?: ReturnType<typeof UnbondingDelegationEntry.prototype.toObject>[];
        }): UnbondingDelegation {
            const message = new UnbondingDelegation({});
            if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
            }
            if (data.validator_address != null) {
                message.validator_address = data.validator_address;
            }
            if (data.entries != null) {
                message.entries = data.entries.map(item => UnbondingDelegationEntry.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                delegator_address?: string;
                validator_address?: string;
                entries?: ReturnType<typeof UnbondingDelegationEntry.prototype.toObject>[];
            } = {};
            if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
            }
            if (this.validator_address != null) {
                data.validator_address = this.validator_address;
            }
            if (this.entries != null) {
                data.entries = this.entries.map((item: UnbondingDelegationEntry) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.delegator_address.length)
                writer.writeString(1, this.delegator_address);
            if (this.validator_address.length)
                writer.writeString(2, this.validator_address);
            if (this.entries.length)
                writer.writeRepeatedMessage(3, this.entries, (item: UnbondingDelegationEntry) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnbondingDelegation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnbondingDelegation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.delegator_address = reader.readString();
                        break;
                    case 2:
                        message.validator_address = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.entries, () => pb_1.Message.addToRepeatedWrapperField(message, 3, UnbondingDelegationEntry.deserialize(reader), UnbondingDelegationEntry));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnbondingDelegation {
            return UnbondingDelegation.deserialize(bytes);
        }
    }
    export class UnbondingDelegationEntry extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creation_height?: number;
            completion_time?: dependency_4.google.protobuf.Timestamp;
            initial_balance?: string;
            balance?: string;
            unbonding_id?: number;
            unbonding_on_hold_ref_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creation_height" in data && data.creation_height != undefined) {
                    this.creation_height = data.creation_height;
                }
                if ("completion_time" in data && data.completion_time != undefined) {
                    this.completion_time = data.completion_time;
                }
                if ("initial_balance" in data && data.initial_balance != undefined) {
                    this.initial_balance = data.initial_balance;
                }
                if ("balance" in data && data.balance != undefined) {
                    this.balance = data.balance;
                }
                if ("unbonding_id" in data && data.unbonding_id != undefined) {
                    this.unbonding_id = data.unbonding_id;
                }
                if ("unbonding_on_hold_ref_count" in data && data.unbonding_on_hold_ref_count != undefined) {
                    this.unbonding_on_hold_ref_count = data.unbonding_on_hold_ref_count;
                }
            }
        }
        get creation_height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set creation_height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get completion_time() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 2) as dependency_4.google.protobuf.Timestamp;
        }
        set completion_time(value: dependency_4.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_completion_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get initial_balance() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set initial_balance(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get balance() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set balance(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get unbonding_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set unbonding_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get unbonding_on_hold_ref_count() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set unbonding_on_hold_ref_count(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            creation_height?: number;
            completion_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
            initial_balance?: string;
            balance?: string;
            unbonding_id?: number;
            unbonding_on_hold_ref_count?: number;
        }): UnbondingDelegationEntry {
            const message = new UnbondingDelegationEntry({});
            if (data.creation_height != null) {
                message.creation_height = data.creation_height;
            }
            if (data.completion_time != null) {
                message.completion_time = dependency_4.google.protobuf.Timestamp.fromObject(data.completion_time);
            }
            if (data.initial_balance != null) {
                message.initial_balance = data.initial_balance;
            }
            if (data.balance != null) {
                message.balance = data.balance;
            }
            if (data.unbonding_id != null) {
                message.unbonding_id = data.unbonding_id;
            }
            if (data.unbonding_on_hold_ref_count != null) {
                message.unbonding_on_hold_ref_count = data.unbonding_on_hold_ref_count;
            }
            return message;
        }
        toObject() {
            const data: {
                creation_height?: number;
                completion_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
                initial_balance?: string;
                balance?: string;
                unbonding_id?: number;
                unbonding_on_hold_ref_count?: number;
            } = {};
            if (this.creation_height != null) {
                data.creation_height = this.creation_height;
            }
            if (this.completion_time != null) {
                data.completion_time = this.completion_time.toObject();
            }
            if (this.initial_balance != null) {
                data.initial_balance = this.initial_balance;
            }
            if (this.balance != null) {
                data.balance = this.balance;
            }
            if (this.unbonding_id != null) {
                data.unbonding_id = this.unbonding_id;
            }
            if (this.unbonding_on_hold_ref_count != null) {
                data.unbonding_on_hold_ref_count = this.unbonding_on_hold_ref_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creation_height != 0)
                writer.writeInt64(1, this.creation_height);
            if (this.has_completion_time)
                writer.writeMessage(2, this.completion_time, () => this.completion_time.serialize(writer));
            if (this.initial_balance.length)
                writer.writeString(3, this.initial_balance);
            if (this.balance.length)
                writer.writeString(4, this.balance);
            if (this.unbonding_id != 0)
                writer.writeUint64(5, this.unbonding_id);
            if (this.unbonding_on_hold_ref_count != 0)
                writer.writeInt64(6, this.unbonding_on_hold_ref_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnbondingDelegationEntry {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnbondingDelegationEntry();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creation_height = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.completion_time, () => message.completion_time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        message.initial_balance = reader.readString();
                        break;
                    case 4:
                        message.balance = reader.readString();
                        break;
                    case 5:
                        message.unbonding_id = reader.readUint64();
                        break;
                    case 6:
                        message.unbonding_on_hold_ref_count = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnbondingDelegationEntry {
            return UnbondingDelegationEntry.deserialize(bytes);
        }
    }
    export class RedelegationEntry extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creation_height?: number;
            completion_time?: dependency_4.google.protobuf.Timestamp;
            initial_balance?: string;
            shares_dst?: string;
            unbonding_id?: number;
            unbonding_on_hold_ref_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creation_height" in data && data.creation_height != undefined) {
                    this.creation_height = data.creation_height;
                }
                if ("completion_time" in data && data.completion_time != undefined) {
                    this.completion_time = data.completion_time;
                }
                if ("initial_balance" in data && data.initial_balance != undefined) {
                    this.initial_balance = data.initial_balance;
                }
                if ("shares_dst" in data && data.shares_dst != undefined) {
                    this.shares_dst = data.shares_dst;
                }
                if ("unbonding_id" in data && data.unbonding_id != undefined) {
                    this.unbonding_id = data.unbonding_id;
                }
                if ("unbonding_on_hold_ref_count" in data && data.unbonding_on_hold_ref_count != undefined) {
                    this.unbonding_on_hold_ref_count = data.unbonding_on_hold_ref_count;
                }
            }
        }
        get creation_height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set creation_height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get completion_time() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 2) as dependency_4.google.protobuf.Timestamp;
        }
        set completion_time(value: dependency_4.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_completion_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get initial_balance() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set initial_balance(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get shares_dst() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set shares_dst(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get unbonding_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set unbonding_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get unbonding_on_hold_ref_count() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set unbonding_on_hold_ref_count(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            creation_height?: number;
            completion_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
            initial_balance?: string;
            shares_dst?: string;
            unbonding_id?: number;
            unbonding_on_hold_ref_count?: number;
        }): RedelegationEntry {
            const message = new RedelegationEntry({});
            if (data.creation_height != null) {
                message.creation_height = data.creation_height;
            }
            if (data.completion_time != null) {
                message.completion_time = dependency_4.google.protobuf.Timestamp.fromObject(data.completion_time);
            }
            if (data.initial_balance != null) {
                message.initial_balance = data.initial_balance;
            }
            if (data.shares_dst != null) {
                message.shares_dst = data.shares_dst;
            }
            if (data.unbonding_id != null) {
                message.unbonding_id = data.unbonding_id;
            }
            if (data.unbonding_on_hold_ref_count != null) {
                message.unbonding_on_hold_ref_count = data.unbonding_on_hold_ref_count;
            }
            return message;
        }
        toObject() {
            const data: {
                creation_height?: number;
                completion_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
                initial_balance?: string;
                shares_dst?: string;
                unbonding_id?: number;
                unbonding_on_hold_ref_count?: number;
            } = {};
            if (this.creation_height != null) {
                data.creation_height = this.creation_height;
            }
            if (this.completion_time != null) {
                data.completion_time = this.completion_time.toObject();
            }
            if (this.initial_balance != null) {
                data.initial_balance = this.initial_balance;
            }
            if (this.shares_dst != null) {
                data.shares_dst = this.shares_dst;
            }
            if (this.unbonding_id != null) {
                data.unbonding_id = this.unbonding_id;
            }
            if (this.unbonding_on_hold_ref_count != null) {
                data.unbonding_on_hold_ref_count = this.unbonding_on_hold_ref_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creation_height != 0)
                writer.writeInt64(1, this.creation_height);
            if (this.has_completion_time)
                writer.writeMessage(2, this.completion_time, () => this.completion_time.serialize(writer));
            if (this.initial_balance.length)
                writer.writeString(3, this.initial_balance);
            if (this.shares_dst.length)
                writer.writeString(4, this.shares_dst);
            if (this.unbonding_id != 0)
                writer.writeUint64(5, this.unbonding_id);
            if (this.unbonding_on_hold_ref_count != 0)
                writer.writeInt64(6, this.unbonding_on_hold_ref_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RedelegationEntry {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RedelegationEntry();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creation_height = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.completion_time, () => message.completion_time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        message.initial_balance = reader.readString();
                        break;
                    case 4:
                        message.shares_dst = reader.readString();
                        break;
                    case 5:
                        message.unbonding_id = reader.readUint64();
                        break;
                    case 6:
                        message.unbonding_on_hold_ref_count = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RedelegationEntry {
            return RedelegationEntry.deserialize(bytes);
        }
    }
    export class Redelegation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            delegator_address?: string;
            validator_src_address?: string;
            validator_dst_address?: string;
            entries?: RedelegationEntry[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("delegator_address" in data && data.delegator_address != undefined) {
                    this.delegator_address = data.delegator_address;
                }
                if ("validator_src_address" in data && data.validator_src_address != undefined) {
                    this.validator_src_address = data.validator_src_address;
                }
                if ("validator_dst_address" in data && data.validator_dst_address != undefined) {
                    this.validator_dst_address = data.validator_dst_address;
                }
                if ("entries" in data && data.entries != undefined) {
                    this.entries = data.entries;
                }
            }
        }
        get delegator_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set delegator_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get validator_src_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set validator_src_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get validator_dst_address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set validator_dst_address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get entries() {
            return pb_1.Message.getRepeatedWrapperField(this, RedelegationEntry, 4) as RedelegationEntry[];
        }
        set entries(value: RedelegationEntry[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            delegator_address?: string;
            validator_src_address?: string;
            validator_dst_address?: string;
            entries?: ReturnType<typeof RedelegationEntry.prototype.toObject>[];
        }): Redelegation {
            const message = new Redelegation({});
            if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
            }
            if (data.validator_src_address != null) {
                message.validator_src_address = data.validator_src_address;
            }
            if (data.validator_dst_address != null) {
                message.validator_dst_address = data.validator_dst_address;
            }
            if (data.entries != null) {
                message.entries = data.entries.map(item => RedelegationEntry.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                delegator_address?: string;
                validator_src_address?: string;
                validator_dst_address?: string;
                entries?: ReturnType<typeof RedelegationEntry.prototype.toObject>[];
            } = {};
            if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
            }
            if (this.validator_src_address != null) {
                data.validator_src_address = this.validator_src_address;
            }
            if (this.validator_dst_address != null) {
                data.validator_dst_address = this.validator_dst_address;
            }
            if (this.entries != null) {
                data.entries = this.entries.map((item: RedelegationEntry) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.delegator_address.length)
                writer.writeString(1, this.delegator_address);
            if (this.validator_src_address.length)
                writer.writeString(2, this.validator_src_address);
            if (this.validator_dst_address.length)
                writer.writeString(3, this.validator_dst_address);
            if (this.entries.length)
                writer.writeRepeatedMessage(4, this.entries, (item: RedelegationEntry) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Redelegation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Redelegation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.delegator_address = reader.readString();
                        break;
                    case 2:
                        message.validator_src_address = reader.readString();
                        break;
                    case 3:
                        message.validator_dst_address = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.entries, () => pb_1.Message.addToRepeatedWrapperField(message, 4, RedelegationEntry.deserialize(reader), RedelegationEntry));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Redelegation {
            return Redelegation.deserialize(bytes);
        }
    }
    export class Params extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            unbonding_time?: dependency_3.google.protobuf.Duration;
            max_validators?: number;
            max_entries?: number;
            historical_entries?: number;
            bond_denom?: string;
            min_commission_rate?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("unbonding_time" in data && data.unbonding_time != undefined) {
                    this.unbonding_time = data.unbonding_time;
                }
                if ("max_validators" in data && data.max_validators != undefined) {
                    this.max_validators = data.max_validators;
                }
                if ("max_entries" in data && data.max_entries != undefined) {
                    this.max_entries = data.max_entries;
                }
                if ("historical_entries" in data && data.historical_entries != undefined) {
                    this.historical_entries = data.historical_entries;
                }
                if ("bond_denom" in data && data.bond_denom != undefined) {
                    this.bond_denom = data.bond_denom;
                }
                if ("min_commission_rate" in data && data.min_commission_rate != undefined) {
                    this.min_commission_rate = data.min_commission_rate;
                }
            }
        }
        get unbonding_time() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Duration, 1) as dependency_3.google.protobuf.Duration;
        }
        set unbonding_time(value: dependency_3.google.protobuf.Duration) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_unbonding_time() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get max_validators() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set max_validators(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get max_entries() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set max_entries(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get historical_entries() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set historical_entries(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get bond_denom() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set bond_denom(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get min_commission_rate() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set min_commission_rate(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            unbonding_time?: ReturnType<typeof dependency_3.google.protobuf.Duration.prototype.toObject>;
            max_validators?: number;
            max_entries?: number;
            historical_entries?: number;
            bond_denom?: string;
            min_commission_rate?: string;
        }): Params {
            const message = new Params({});
            if (data.unbonding_time != null) {
                message.unbonding_time = dependency_3.google.protobuf.Duration.fromObject(data.unbonding_time);
            }
            if (data.max_validators != null) {
                message.max_validators = data.max_validators;
            }
            if (data.max_entries != null) {
                message.max_entries = data.max_entries;
            }
            if (data.historical_entries != null) {
                message.historical_entries = data.historical_entries;
            }
            if (data.bond_denom != null) {
                message.bond_denom = data.bond_denom;
            }
            if (data.min_commission_rate != null) {
                message.min_commission_rate = data.min_commission_rate;
            }
            return message;
        }
        toObject() {
            const data: {
                unbonding_time?: ReturnType<typeof dependency_3.google.protobuf.Duration.prototype.toObject>;
                max_validators?: number;
                max_entries?: number;
                historical_entries?: number;
                bond_denom?: string;
                min_commission_rate?: string;
            } = {};
            if (this.unbonding_time != null) {
                data.unbonding_time = this.unbonding_time.toObject();
            }
            if (this.max_validators != null) {
                data.max_validators = this.max_validators;
            }
            if (this.max_entries != null) {
                data.max_entries = this.max_entries;
            }
            if (this.historical_entries != null) {
                data.historical_entries = this.historical_entries;
            }
            if (this.bond_denom != null) {
                data.bond_denom = this.bond_denom;
            }
            if (this.min_commission_rate != null) {
                data.min_commission_rate = this.min_commission_rate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_unbonding_time)
                writer.writeMessage(1, this.unbonding_time, () => this.unbonding_time.serialize(writer));
            if (this.max_validators != 0)
                writer.writeUint32(2, this.max_validators);
            if (this.max_entries != 0)
                writer.writeUint32(3, this.max_entries);
            if (this.historical_entries != 0)
                writer.writeUint32(4, this.historical_entries);
            if (this.bond_denom.length)
                writer.writeString(5, this.bond_denom);
            if (this.min_commission_rate.length)
                writer.writeString(6, this.min_commission_rate);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Params {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Params();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.unbonding_time, () => message.unbonding_time = dependency_3.google.protobuf.Duration.deserialize(reader));
                        break;
                    case 2:
                        message.max_validators = reader.readUint32();
                        break;
                    case 3:
                        message.max_entries = reader.readUint32();
                        break;
                    case 4:
                        message.historical_entries = reader.readUint32();
                        break;
                    case 5:
                        message.bond_denom = reader.readString();
                        break;
                    case 6:
                        message.min_commission_rate = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Params {
            return Params.deserialize(bytes);
        }
    }
    export class DelegationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            delegation?: Delegation;
            balance?: dependency_6.cosmos.base.v1beta1.Coin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("delegation" in data && data.delegation != undefined) {
                    this.delegation = data.delegation;
                }
                if ("balance" in data && data.balance != undefined) {
                    this.balance = data.balance;
                }
            }
        }
        get delegation() {
            return pb_1.Message.getWrapperField(this, Delegation, 1) as Delegation;
        }
        set delegation(value: Delegation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_delegation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get balance() {
            return pb_1.Message.getWrapperField(this, dependency_6.cosmos.base.v1beta1.Coin, 2) as dependency_6.cosmos.base.v1beta1.Coin;
        }
        set balance(value: dependency_6.cosmos.base.v1beta1.Coin) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_balance() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            delegation?: ReturnType<typeof Delegation.prototype.toObject>;
            balance?: ReturnType<typeof dependency_6.cosmos.base.v1beta1.Coin.prototype.toObject>;
        }): DelegationResponse {
            const message = new DelegationResponse({});
            if (data.delegation != null) {
                message.delegation = Delegation.fromObject(data.delegation);
            }
            if (data.balance != null) {
                message.balance = dependency_6.cosmos.base.v1beta1.Coin.fromObject(data.balance);
            }
            return message;
        }
        toObject() {
            const data: {
                delegation?: ReturnType<typeof Delegation.prototype.toObject>;
                balance?: ReturnType<typeof dependency_6.cosmos.base.v1beta1.Coin.prototype.toObject>;
            } = {};
            if (this.delegation != null) {
                data.delegation = this.delegation.toObject();
            }
            if (this.balance != null) {
                data.balance = this.balance.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_delegation)
                writer.writeMessage(1, this.delegation, () => this.delegation.serialize(writer));
            if (this.has_balance)
                writer.writeMessage(2, this.balance, () => this.balance.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DelegationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DelegationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.delegation, () => message.delegation = Delegation.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.balance, () => message.balance = dependency_6.cosmos.base.v1beta1.Coin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DelegationResponse {
            return DelegationResponse.deserialize(bytes);
        }
    }
    export class RedelegationEntryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            redelegation_entry?: RedelegationEntry;
            balance?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("redelegation_entry" in data && data.redelegation_entry != undefined) {
                    this.redelegation_entry = data.redelegation_entry;
                }
                if ("balance" in data && data.balance != undefined) {
                    this.balance = data.balance;
                }
            }
        }
        get redelegation_entry() {
            return pb_1.Message.getWrapperField(this, RedelegationEntry, 1) as RedelegationEntry;
        }
        set redelegation_entry(value: RedelegationEntry) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_redelegation_entry() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get balance() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set balance(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            redelegation_entry?: ReturnType<typeof RedelegationEntry.prototype.toObject>;
            balance?: string;
        }): RedelegationEntryResponse {
            const message = new RedelegationEntryResponse({});
            if (data.redelegation_entry != null) {
                message.redelegation_entry = RedelegationEntry.fromObject(data.redelegation_entry);
            }
            if (data.balance != null) {
                message.balance = data.balance;
            }
            return message;
        }
        toObject() {
            const data: {
                redelegation_entry?: ReturnType<typeof RedelegationEntry.prototype.toObject>;
                balance?: string;
            } = {};
            if (this.redelegation_entry != null) {
                data.redelegation_entry = this.redelegation_entry.toObject();
            }
            if (this.balance != null) {
                data.balance = this.balance;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_redelegation_entry)
                writer.writeMessage(1, this.redelegation_entry, () => this.redelegation_entry.serialize(writer));
            if (this.balance.length)
                writer.writeString(4, this.balance);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RedelegationEntryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RedelegationEntryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.redelegation_entry, () => message.redelegation_entry = RedelegationEntry.deserialize(reader));
                        break;
                    case 4:
                        message.balance = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RedelegationEntryResponse {
            return RedelegationEntryResponse.deserialize(bytes);
        }
    }
    export class RedelegationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            redelegation?: Redelegation;
            entries?: RedelegationEntryResponse[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("redelegation" in data && data.redelegation != undefined) {
                    this.redelegation = data.redelegation;
                }
                if ("entries" in data && data.entries != undefined) {
                    this.entries = data.entries;
                }
            }
        }
        get redelegation() {
            return pb_1.Message.getWrapperField(this, Redelegation, 1) as Redelegation;
        }
        set redelegation(value: Redelegation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_redelegation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get entries() {
            return pb_1.Message.getRepeatedWrapperField(this, RedelegationEntryResponse, 2) as RedelegationEntryResponse[];
        }
        set entries(value: RedelegationEntryResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            redelegation?: ReturnType<typeof Redelegation.prototype.toObject>;
            entries?: ReturnType<typeof RedelegationEntryResponse.prototype.toObject>[];
        }): RedelegationResponse {
            const message = new RedelegationResponse({});
            if (data.redelegation != null) {
                message.redelegation = Redelegation.fromObject(data.redelegation);
            }
            if (data.entries != null) {
                message.entries = data.entries.map(item => RedelegationEntryResponse.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                redelegation?: ReturnType<typeof Redelegation.prototype.toObject>;
                entries?: ReturnType<typeof RedelegationEntryResponse.prototype.toObject>[];
            } = {};
            if (this.redelegation != null) {
                data.redelegation = this.redelegation.toObject();
            }
            if (this.entries != null) {
                data.entries = this.entries.map((item: RedelegationEntryResponse) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_redelegation)
                writer.writeMessage(1, this.redelegation, () => this.redelegation.serialize(writer));
            if (this.entries.length)
                writer.writeRepeatedMessage(2, this.entries, (item: RedelegationEntryResponse) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RedelegationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RedelegationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.redelegation, () => message.redelegation = Redelegation.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.entries, () => pb_1.Message.addToRepeatedWrapperField(message, 2, RedelegationEntryResponse.deserialize(reader), RedelegationEntryResponse));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RedelegationResponse {
            return RedelegationResponse.deserialize(bytes);
        }
    }
    export class Pool extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            not_bonded_tokens?: string;
            bonded_tokens?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("not_bonded_tokens" in data && data.not_bonded_tokens != undefined) {
                    this.not_bonded_tokens = data.not_bonded_tokens;
                }
                if ("bonded_tokens" in data && data.bonded_tokens != undefined) {
                    this.bonded_tokens = data.bonded_tokens;
                }
            }
        }
        get not_bonded_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set not_bonded_tokens(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get bonded_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set bonded_tokens(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            not_bonded_tokens?: string;
            bonded_tokens?: string;
        }): Pool {
            const message = new Pool({});
            if (data.not_bonded_tokens != null) {
                message.not_bonded_tokens = data.not_bonded_tokens;
            }
            if (data.bonded_tokens != null) {
                message.bonded_tokens = data.bonded_tokens;
            }
            return message;
        }
        toObject() {
            const data: {
                not_bonded_tokens?: string;
                bonded_tokens?: string;
            } = {};
            if (this.not_bonded_tokens != null) {
                data.not_bonded_tokens = this.not_bonded_tokens;
            }
            if (this.bonded_tokens != null) {
                data.bonded_tokens = this.bonded_tokens;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.not_bonded_tokens.length)
                writer.writeString(1, this.not_bonded_tokens);
            if (this.bonded_tokens.length)
                writer.writeString(2, this.bonded_tokens);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Pool {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Pool();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.not_bonded_tokens = reader.readString();
                        break;
                    case 2:
                        message.bonded_tokens = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Pool {
            return Pool.deserialize(bytes);
        }
    }
    export class ValidatorUpdates extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            updates?: dependency_9.tendermint.abci.ValidatorUpdate[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("updates" in data && data.updates != undefined) {
                    this.updates = data.updates;
                }
            }
        }
        get updates() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_9.tendermint.abci.ValidatorUpdate, 1) as dependency_9.tendermint.abci.ValidatorUpdate[];
        }
        set updates(value: dependency_9.tendermint.abci.ValidatorUpdate[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            updates?: ReturnType<typeof dependency_9.tendermint.abci.ValidatorUpdate.prototype.toObject>[];
        }): ValidatorUpdates {
            const message = new ValidatorUpdates({});
            if (data.updates != null) {
                message.updates = data.updates.map(item => dependency_9.tendermint.abci.ValidatorUpdate.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                updates?: ReturnType<typeof dependency_9.tendermint.abci.ValidatorUpdate.prototype.toObject>[];
            } = {};
            if (this.updates != null) {
                data.updates = this.updates.map((item: dependency_9.tendermint.abci.ValidatorUpdate) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.updates.length)
                writer.writeRepeatedMessage(1, this.updates, (item: dependency_9.tendermint.abci.ValidatorUpdate) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidatorUpdates {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidatorUpdates();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.updates, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_9.tendermint.abci.ValidatorUpdate.deserialize(reader), dependency_9.tendermint.abci.ValidatorUpdate));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidatorUpdates {
            return ValidatorUpdates.deserialize(bytes);
        }
    }
}
