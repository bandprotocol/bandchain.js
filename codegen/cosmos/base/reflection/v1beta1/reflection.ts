/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cosmos/base/reflection/v1beta1/reflection.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../google/api/annotations";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace cosmos.base.reflection.v1beta1 {
    export class ListAllInterfacesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ListAllInterfacesRequest {
            const message = new ListAllInterfacesRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListAllInterfacesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListAllInterfacesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListAllInterfacesRequest {
            return ListAllInterfacesRequest.deserialize(bytes);
        }
    }
    export class ListAllInterfacesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            interface_names?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("interface_names" in data && data.interface_names != undefined) {
                    this.interface_names = data.interface_names;
                }
            }
        }
        get interface_names() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set interface_names(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            interface_names?: string[];
        }): ListAllInterfacesResponse {
            const message = new ListAllInterfacesResponse({});
            if (data.interface_names != null) {
                message.interface_names = data.interface_names;
            }
            return message;
        }
        toObject() {
            const data: {
                interface_names?: string[];
            } = {};
            if (this.interface_names != null) {
                data.interface_names = this.interface_names;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.interface_names.length)
                writer.writeRepeatedString(1, this.interface_names);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListAllInterfacesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListAllInterfacesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListAllInterfacesResponse {
            return ListAllInterfacesResponse.deserialize(bytes);
        }
    }
    export class ListImplementationsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            interface_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("interface_name" in data && data.interface_name != undefined) {
                    this.interface_name = data.interface_name;
                }
            }
        }
        get interface_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set interface_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            interface_name?: string;
        }): ListImplementationsRequest {
            const message = new ListImplementationsRequest({});
            if (data.interface_name != null) {
                message.interface_name = data.interface_name;
            }
            return message;
        }
        toObject() {
            const data: {
                interface_name?: string;
            } = {};
            if (this.interface_name != null) {
                data.interface_name = this.interface_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.interface_name.length)
                writer.writeString(1, this.interface_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListImplementationsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListImplementationsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.interface_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListImplementationsRequest {
            return ListImplementationsRequest.deserialize(bytes);
        }
    }
    export class ListImplementationsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            implementation_message_names?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("implementation_message_names" in data && data.implementation_message_names != undefined) {
                    this.implementation_message_names = data.implementation_message_names;
                }
            }
        }
        get implementation_message_names() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set implementation_message_names(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            implementation_message_names?: string[];
        }): ListImplementationsResponse {
            const message = new ListImplementationsResponse({});
            if (data.implementation_message_names != null) {
                message.implementation_message_names = data.implementation_message_names;
            }
            return message;
        }
        toObject() {
            const data: {
                implementation_message_names?: string[];
            } = {};
            if (this.implementation_message_names != null) {
                data.implementation_message_names = this.implementation_message_names;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.implementation_message_names.length)
                writer.writeRepeatedString(1, this.implementation_message_names);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListImplementationsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListImplementationsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListImplementationsResponse {
            return ListImplementationsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedReflectionServiceService {
        static definition = {
            ListAllInterfaces: {
                path: "/cosmos.base.reflection.v1beta1.ReflectionService/ListAllInterfaces",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListAllInterfacesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListAllInterfacesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListAllInterfacesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListAllInterfacesResponse.deserialize(new Uint8Array(bytes))
            },
            ListImplementations: {
                path: "/cosmos.base.reflection.v1beta1.ReflectionService/ListImplementations",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListImplementationsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListImplementationsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListImplementationsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListImplementationsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract ListAllInterfaces(call: grpc_1.ServerUnaryCall<ListAllInterfacesRequest, ListAllInterfacesResponse>, callback: grpc_1.sendUnaryData<ListAllInterfacesResponse>): void;
        abstract ListImplementations(call: grpc_1.ServerUnaryCall<ListImplementationsRequest, ListImplementationsResponse>, callback: grpc_1.sendUnaryData<ListImplementationsResponse>): void;
    }
    export class ReflectionServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedReflectionServiceService.definition, "ReflectionService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        ListAllInterfaces: GrpcUnaryServiceInterface<ListAllInterfacesRequest, ListAllInterfacesResponse> = (message: ListAllInterfacesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListAllInterfacesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListAllInterfacesResponse>, callback?: grpc_1.requestCallback<ListAllInterfacesResponse>): grpc_1.ClientUnaryCall => {
            return super.ListAllInterfaces(message, metadata, options, callback);
        };
        ListImplementations: GrpcUnaryServiceInterface<ListImplementationsRequest, ListImplementationsResponse> = (message: ListImplementationsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListImplementationsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListImplementationsResponse>, callback?: grpc_1.requestCallback<ListImplementationsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListImplementations(message, metadata, options, callback);
        };
    }
}
