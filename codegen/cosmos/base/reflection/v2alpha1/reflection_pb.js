// source: cosmos/base/reflection/v2alpha1/reflection.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_api_annotations_pb = require('../../../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.AppDescriptor', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.ChainDescriptor', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.CodecDescriptor', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.MsgDescriptor', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor', null, global);
goog.exportSymbol('proto.cosmos.base.reflection.v2alpha1.TxDescriptor', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.AppDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.AppDescriptor.displayName = 'proto.cosmos.base.reflection.v2alpha1.AppDescriptor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.TxDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cosmos.base.reflection.v2alpha1.TxDescriptor.repeatedFields_, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.TxDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.TxDescriptor.displayName = 'proto.cosmos.base.reflection.v2alpha1.TxDescriptor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.repeatedFields_, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.displayName = 'proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor.displayName = 'proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.ChainDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.ChainDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.ChainDescriptor.displayName = 'proto.cosmos.base.reflection.v2alpha1.ChainDescriptor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.CodecDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.repeatedFields_, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.CodecDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.displayName = 'proto.cosmos.base.reflection.v2alpha1.CodecDescriptor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.repeatedFields_, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.displayName = 'proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.displayName = 'proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.repeatedFields_, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.displayName = 'proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.displayName = 'proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.MsgDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.MsgDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.MsgDescriptor.displayName = 'proto.cosmos.base.reflection.v2alpha1.MsgDescriptor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest.displayName = 'proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.displayName = 'proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest.displayName = 'proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.displayName = 'proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest.displayName = 'proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.displayName = 'proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest.displayName = 'proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.displayName = 'proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest.displayName = 'proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.displayName = 'proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest.displayName = 'proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.displayName = 'proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.repeatedFields_, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.displayName = 'proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.repeatedFields_, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.displayName = 'proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.displayName = 'proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.AppDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.AppDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    authn: (f = msg.getAuthn()) && proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.toObject(includeInstance, f),
    chain: (f = msg.getChain()) && proto.cosmos.base.reflection.v2alpha1.ChainDescriptor.toObject(includeInstance, f),
    codec: (f = msg.getCodec()) && proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.toObject(includeInstance, f),
    configuration: (f = msg.getConfiguration()) && proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.toObject(includeInstance, f),
    queryServices: (f = msg.getQueryServices()) && proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.toObject(includeInstance, f),
    tx: (f = msg.getTx()) && proto.cosmos.base.reflection.v2alpha1.TxDescriptor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.AppDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.AppDescriptor;
  return proto.cosmos.base.reflection.v2alpha1.AppDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.AppDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.AppDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor;
      reader.readMessage(value,proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.deserializeBinaryFromReader);
      msg.setAuthn(value);
      break;
    case 2:
      var value = new proto.cosmos.base.reflection.v2alpha1.ChainDescriptor;
      reader.readMessage(value,proto.cosmos.base.reflection.v2alpha1.ChainDescriptor.deserializeBinaryFromReader);
      msg.setChain(value);
      break;
    case 3:
      var value = new proto.cosmos.base.reflection.v2alpha1.CodecDescriptor;
      reader.readMessage(value,proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.deserializeBinaryFromReader);
      msg.setCodec(value);
      break;
    case 4:
      var value = new proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor;
      reader.readMessage(value,proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.deserializeBinaryFromReader);
      msg.setConfiguration(value);
      break;
    case 5:
      var value = new proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor;
      reader.readMessage(value,proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.deserializeBinaryFromReader);
      msg.setQueryServices(value);
      break;
    case 6:
      var value = new proto.cosmos.base.reflection.v2alpha1.TxDescriptor;
      reader.readMessage(value,proto.cosmos.base.reflection.v2alpha1.TxDescriptor.deserializeBinaryFromReader);
      msg.setTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.AppDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.AppDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getChain();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cosmos.base.reflection.v2alpha1.ChainDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getCodec();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getConfiguration();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getQueryServices();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getTx();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.cosmos.base.reflection.v2alpha1.TxDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional AuthnDescriptor authn = 1;
 * @return {?proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.getAuthn = function() {
  return /** @type{?proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor, 1));
};


/**
 * @param {?proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor|undefined} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.AppDescriptor} returns this
*/
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.setAuthn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmos.base.reflection.v2alpha1.AppDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.clearAuthn = function() {
  return this.setAuthn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.hasAuthn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChainDescriptor chain = 2;
 * @return {?proto.cosmos.base.reflection.v2alpha1.ChainDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.getChain = function() {
  return /** @type{?proto.cosmos.base.reflection.v2alpha1.ChainDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.cosmos.base.reflection.v2alpha1.ChainDescriptor, 2));
};


/**
 * @param {?proto.cosmos.base.reflection.v2alpha1.ChainDescriptor|undefined} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.AppDescriptor} returns this
*/
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.setChain = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmos.base.reflection.v2alpha1.AppDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.clearChain = function() {
  return this.setChain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.hasChain = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CodecDescriptor codec = 3;
 * @return {?proto.cosmos.base.reflection.v2alpha1.CodecDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.getCodec = function() {
  return /** @type{?proto.cosmos.base.reflection.v2alpha1.CodecDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.cosmos.base.reflection.v2alpha1.CodecDescriptor, 3));
};


/**
 * @param {?proto.cosmos.base.reflection.v2alpha1.CodecDescriptor|undefined} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.AppDescriptor} returns this
*/
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.setCodec = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmos.base.reflection.v2alpha1.AppDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.clearCodec = function() {
  return this.setCodec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.hasCodec = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ConfigurationDescriptor configuration = 4;
 * @return {?proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.getConfiguration = function() {
  return /** @type{?proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor, 4));
};


/**
 * @param {?proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor|undefined} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.AppDescriptor} returns this
*/
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.setConfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmos.base.reflection.v2alpha1.AppDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.clearConfiguration = function() {
  return this.setConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.hasConfiguration = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional QueryServicesDescriptor query_services = 5;
 * @return {?proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.getQueryServices = function() {
  return /** @type{?proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor, 5));
};


/**
 * @param {?proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor|undefined} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.AppDescriptor} returns this
*/
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.setQueryServices = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmos.base.reflection.v2alpha1.AppDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.clearQueryServices = function() {
  return this.setQueryServices(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.hasQueryServices = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TxDescriptor tx = 6;
 * @return {?proto.cosmos.base.reflection.v2alpha1.TxDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.getTx = function() {
  return /** @type{?proto.cosmos.base.reflection.v2alpha1.TxDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.cosmos.base.reflection.v2alpha1.TxDescriptor, 6));
};


/**
 * @param {?proto.cosmos.base.reflection.v2alpha1.TxDescriptor|undefined} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.AppDescriptor} returns this
*/
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.setTx = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmos.base.reflection.v2alpha1.AppDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.clearTx = function() {
  return this.setTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.base.reflection.v2alpha1.AppDescriptor.prototype.hasTx = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cosmos.base.reflection.v2alpha1.TxDescriptor.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.TxDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.TxDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.TxDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.TxDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    fullname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    msgsList: jspb.Message.toObjectList(msg.getMsgsList(),
    proto.cosmos.base.reflection.v2alpha1.MsgDescriptor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.TxDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.TxDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.TxDescriptor;
  return proto.cosmos.base.reflection.v2alpha1.TxDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.TxDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.TxDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.TxDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullname(value);
      break;
    case 2:
      var value = new proto.cosmos.base.reflection.v2alpha1.MsgDescriptor;
      reader.readMessage(value,proto.cosmos.base.reflection.v2alpha1.MsgDescriptor.deserializeBinaryFromReader);
      msg.addMsgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.TxDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.TxDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.TxDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.TxDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFullname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMsgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.cosmos.base.reflection.v2alpha1.MsgDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional string fullname = 1;
 * @return {string}
 */
proto.cosmos.base.reflection.v2alpha1.TxDescriptor.prototype.getFullname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.TxDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.TxDescriptor.prototype.setFullname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated MsgDescriptor msgs = 2;
 * @return {!Array<!proto.cosmos.base.reflection.v2alpha1.MsgDescriptor>}
 */
proto.cosmos.base.reflection.v2alpha1.TxDescriptor.prototype.getMsgsList = function() {
  return /** @type{!Array<!proto.cosmos.base.reflection.v2alpha1.MsgDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cosmos.base.reflection.v2alpha1.MsgDescriptor, 2));
};


/**
 * @param {!Array<!proto.cosmos.base.reflection.v2alpha1.MsgDescriptor>} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.TxDescriptor} returns this
*/
proto.cosmos.base.reflection.v2alpha1.TxDescriptor.prototype.setMsgsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.cosmos.base.reflection.v2alpha1.MsgDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.reflection.v2alpha1.MsgDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.TxDescriptor.prototype.addMsgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cosmos.base.reflection.v2alpha1.MsgDescriptor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.base.reflection.v2alpha1.TxDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.TxDescriptor.prototype.clearMsgsList = function() {
  return this.setMsgsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    signModesList: jspb.Message.toObjectList(msg.getSignModesList(),
    proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor;
  return proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor;
      reader.readMessage(value,proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor.deserializeBinaryFromReader);
      msg.addSignModes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignModesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SigningModeDescriptor sign_modes = 1;
 * @return {!Array<!proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor>}
 */
proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.prototype.getSignModesList = function() {
  return /** @type{!Array<!proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor, 1));
};


/**
 * @param {!Array<!proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor>} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor} returns this
*/
proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.prototype.setSignModesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.prototype.addSignModes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.prototype.clearSignModesList = function() {
  return this.setSignModesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    number: jspb.Message.getFieldWithDefault(msg, 2, 0),
    authnInfoProviderMethodFullname: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor;
  return proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthnInfoProviderMethodFullname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAuthnInfoProviderMethodFullname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 number = 2;
 * @return {number}
 */
proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string authn_info_provider_method_fullname = 3;
 * @return {string}
 */
proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor.prototype.getAuthnInfoProviderMethodFullname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.SigningModeDescriptor.prototype.setAuthnInfoProviderMethodFullname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.ChainDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.ChainDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.ChainDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.ChainDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.ChainDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.ChainDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.ChainDescriptor;
  return proto.cosmos.base.reflection.v2alpha1.ChainDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.ChainDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.ChainDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.ChainDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.ChainDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.ChainDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.ChainDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.ChainDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.cosmos.base.reflection.v2alpha1.ChainDescriptor.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.ChainDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.ChainDescriptor.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.CodecDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    interfacesList: jspb.Message.toObjectList(msg.getInterfacesList(),
    proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.CodecDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.CodecDescriptor;
  return proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.CodecDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.CodecDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor;
      reader.readMessage(value,proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.deserializeBinaryFromReader);
      msg.addInterfaces(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.CodecDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInterfacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InterfaceDescriptor interfaces = 1;
 * @return {!Array<!proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor>}
 */
proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.prototype.getInterfacesList = function() {
  return /** @type{!Array<!proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor, 1));
};


/**
 * @param {!Array<!proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor>} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.CodecDescriptor} returns this
*/
proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.prototype.setInterfacesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.prototype.addInterfaces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.base.reflection.v2alpha1.CodecDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.prototype.clearInterfacesList = function() {
  return this.setInterfacesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    fullname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    interfaceAcceptingMessagesList: jspb.Message.toObjectList(msg.getInterfaceAcceptingMessagesList(),
    proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.toObject, includeInstance),
    interfaceImplementersList: jspb.Message.toObjectList(msg.getInterfaceImplementersList(),
    proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor;
  return proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullname(value);
      break;
    case 2:
      var value = new proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor;
      reader.readMessage(value,proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.deserializeBinaryFromReader);
      msg.addInterfaceAcceptingMessages(value);
      break;
    case 3:
      var value = new proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor;
      reader.readMessage(value,proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.deserializeBinaryFromReader);
      msg.addInterfaceImplementers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFullname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInterfaceAcceptingMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getInterfaceImplementersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional string fullname = 1;
 * @return {string}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.prototype.getFullname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.prototype.setFullname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated InterfaceAcceptingMessageDescriptor interface_accepting_messages = 2;
 * @return {!Array<!proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor>}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.prototype.getInterfaceAcceptingMessagesList = function() {
  return /** @type{!Array<!proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor, 2));
};


/**
 * @param {!Array<!proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor>} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor} returns this
*/
proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.prototype.setInterfaceAcceptingMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.prototype.addInterfaceAcceptingMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.prototype.clearInterfaceAcceptingMessagesList = function() {
  return this.setInterfaceAcceptingMessagesList([]);
};


/**
 * repeated InterfaceImplementerDescriptor interface_implementers = 3;
 * @return {!Array<!proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor>}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.prototype.getInterfaceImplementersList = function() {
  return /** @type{!Array<!proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor, 3));
};


/**
 * @param {!Array<!proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor>} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor} returns this
*/
proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.prototype.setInterfaceImplementersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.prototype.addInterfaceImplementers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceDescriptor.prototype.clearInterfaceImplementersList = function() {
  return this.setInterfaceImplementersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    fullname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    typeUrl: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor;
  return proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFullname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTypeUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string fullname = 1;
 * @return {string}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.prototype.getFullname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.prototype.setFullname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type_url = 2;
 * @return {string}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.prototype.getTypeUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.prototype.setTypeUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    fullname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fieldDescriptorNamesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor;
  return proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldDescriptorNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFullname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFieldDescriptorNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string fullname = 1;
 * @return {string}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.prototype.getFullname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.prototype.setFullname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string field_descriptor_names = 2;
 * @return {!Array<string>}
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.prototype.getFieldDescriptorNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.prototype.setFieldDescriptorNamesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.prototype.addFieldDescriptorNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.prototype.clearFieldDescriptorNamesList = function() {
  return this.setFieldDescriptorNamesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    bech32AccountAddressPrefix: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor;
  return proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBech32AccountAddressPrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBech32AccountAddressPrefix();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string bech32_account_address_prefix = 1;
 * @return {string}
 */
proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.prototype.getBech32AccountAddressPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.prototype.setBech32AccountAddressPrefix = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.MsgDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.MsgDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.MsgDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.MsgDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgTypeUrl: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.MsgDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.MsgDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.MsgDescriptor;
  return proto.cosmos.base.reflection.v2alpha1.MsgDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.MsgDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.MsgDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.MsgDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgTypeUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.MsgDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.MsgDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.MsgDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.MsgDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgTypeUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string msg_type_url = 1;
 * @return {string}
 */
proto.cosmos.base.reflection.v2alpha1.MsgDescriptor.prototype.getMsgTypeUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.MsgDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.MsgDescriptor.prototype.setMsgTypeUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest}
 */
proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest;
  return proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest}
 */
proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    authn: (f = msg.getAuthn()) && proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse}
 */
proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse;
  return proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse}
 */
proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor;
      reader.readMessage(value,proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.deserializeBinaryFromReader);
      msg.setAuthn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional AuthnDescriptor authn = 1;
 * @return {?proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.prototype.getAuthn = function() {
  return /** @type{?proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor, 1));
};


/**
 * @param {?proto.cosmos.base.reflection.v2alpha1.AuthnDescriptor|undefined} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse} returns this
*/
proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.prototype.setAuthn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse} returns this
 */
proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.prototype.clearAuthn = function() {
  return this.setAuthn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.prototype.hasAuthn = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest}
 */
proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest;
  return proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest}
 */
proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    chain: (f = msg.getChain()) && proto.cosmos.base.reflection.v2alpha1.ChainDescriptor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse}
 */
proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse;
  return proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse}
 */
proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cosmos.base.reflection.v2alpha1.ChainDescriptor;
      reader.readMessage(value,proto.cosmos.base.reflection.v2alpha1.ChainDescriptor.deserializeBinaryFromReader);
      msg.setChain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChain();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cosmos.base.reflection.v2alpha1.ChainDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChainDescriptor chain = 1;
 * @return {?proto.cosmos.base.reflection.v2alpha1.ChainDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.prototype.getChain = function() {
  return /** @type{?proto.cosmos.base.reflection.v2alpha1.ChainDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.cosmos.base.reflection.v2alpha1.ChainDescriptor, 1));
};


/**
 * @param {?proto.cosmos.base.reflection.v2alpha1.ChainDescriptor|undefined} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse} returns this
*/
proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.prototype.setChain = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse} returns this
 */
proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.prototype.clearChain = function() {
  return this.setChain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.prototype.hasChain = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest}
 */
proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest;
  return proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest}
 */
proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    codec: (f = msg.getCodec()) && proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse}
 */
proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse;
  return proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse}
 */
proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cosmos.base.reflection.v2alpha1.CodecDescriptor;
      reader.readMessage(value,proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.deserializeBinaryFromReader);
      msg.setCodec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cosmos.base.reflection.v2alpha1.CodecDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional CodecDescriptor codec = 1;
 * @return {?proto.cosmos.base.reflection.v2alpha1.CodecDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.prototype.getCodec = function() {
  return /** @type{?proto.cosmos.base.reflection.v2alpha1.CodecDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.cosmos.base.reflection.v2alpha1.CodecDescriptor, 1));
};


/**
 * @param {?proto.cosmos.base.reflection.v2alpha1.CodecDescriptor|undefined} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse} returns this
*/
proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.prototype.setCodec = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse} returns this
 */
proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.prototype.clearCodec = function() {
  return this.setCodec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.prototype.hasCodec = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest}
 */
proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest;
  return proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest}
 */
proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse}
 */
proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse;
  return proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse}
 */
proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor;
      reader.readMessage(value,proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConfigurationDescriptor config = 1;
 * @return {?proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.prototype.getConfig = function() {
  return /** @type{?proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor, 1));
};


/**
 * @param {?proto.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor|undefined} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse} returns this
*/
proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse} returns this
 */
proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest}
 */
proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest;
  return proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest}
 */
proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    queries: (f = msg.getQueries()) && proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse}
 */
proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse;
  return proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse}
 */
proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor;
      reader.readMessage(value,proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.deserializeBinaryFromReader);
      msg.setQueries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueries();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional QueryServicesDescriptor queries = 1;
 * @return {?proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.prototype.getQueries = function() {
  return /** @type{?proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor, 1));
};


/**
 * @param {?proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor|undefined} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse} returns this
*/
proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.prototype.setQueries = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse} returns this
 */
proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.prototype.clearQueries = function() {
  return this.setQueries(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.prototype.hasQueries = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest}
 */
proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest;
  return proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest}
 */
proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tx: (f = msg.getTx()) && proto.cosmos.base.reflection.v2alpha1.TxDescriptor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse}
 */
proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse;
  return proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse}
 */
proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cosmos.base.reflection.v2alpha1.TxDescriptor;
      reader.readMessage(value,proto.cosmos.base.reflection.v2alpha1.TxDescriptor.deserializeBinaryFromReader);
      msg.setTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cosmos.base.reflection.v2alpha1.TxDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional TxDescriptor tx = 1;
 * @return {?proto.cosmos.base.reflection.v2alpha1.TxDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.prototype.getTx = function() {
  return /** @type{?proto.cosmos.base.reflection.v2alpha1.TxDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.cosmos.base.reflection.v2alpha1.TxDescriptor, 1));
};


/**
 * @param {?proto.cosmos.base.reflection.v2alpha1.TxDescriptor|undefined} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse} returns this
*/
proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.prototype.setTx = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse} returns this
 */
proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.prototype.clearTx = function() {
  return this.setTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.prototype.hasTx = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    queryServicesList: jspb.Message.toObjectList(msg.getQueryServicesList(),
    proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor;
  return proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor;
      reader.readMessage(value,proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.deserializeBinaryFromReader);
      msg.addQueryServices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueryServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * repeated QueryServiceDescriptor query_services = 1;
 * @return {!Array<!proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor>}
 */
proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.prototype.getQueryServicesList = function() {
  return /** @type{!Array<!proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor, 1));
};


/**
 * @param {!Array<!proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor>} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor} returns this
*/
proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.prototype.setQueryServicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.prototype.addQueryServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.prototype.clearQueryServicesList = function() {
  return this.setQueryServicesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    fullname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isModule: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    methodsList: jspb.Message.toObjectList(msg.getMethodsList(),
    proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor;
  return proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullname(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsModule(value);
      break;
    case 3:
      var value = new proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor;
      reader.readMessage(value,proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.deserializeBinaryFromReader);
      msg.addMethods(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFullname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsModule();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMethodsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional string fullname = 1;
 * @return {string}
 */
proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.prototype.getFullname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.prototype.setFullname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_module = 2;
 * @return {boolean}
 */
proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.prototype.getIsModule = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.prototype.setIsModule = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated QueryMethodDescriptor methods = 3;
 * @return {!Array<!proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor>}
 */
proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.prototype.getMethodsList = function() {
  return /** @type{!Array<!proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor, 3));
};


/**
 * @param {!Array<!proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor>} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor} returns this
*/
proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.prototype.setMethodsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.prototype.addMethods = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.prototype.clearMethodsList = function() {
  return this.setMethodsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fullQueryPath: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor;
  return proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor}
 */
proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullQueryPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFullQueryPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string full_query_path = 2;
 * @return {string}
 */
proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.prototype.getFullQueryPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor} returns this
 */
proto.cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.prototype.setFullQueryPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.cosmos.base.reflection.v2alpha1);
