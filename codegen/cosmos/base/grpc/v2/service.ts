/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cosmos/base/grpc/v2/service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../google/protobuf/any";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace cosmos.base.grpc.v2 {
    export class QueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request?: dependency_1.google.protobuf.Any;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request" in data && data.request != undefined) {
                    this.request = data.request;
                }
            }
        }
        get request() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 1) as dependency_1.google.protobuf.Any;
        }
        set request(value: dependency_1.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            request?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
        }): QueryRequest {
            const message = new QueryRequest({});
            if (data.request != null) {
                message.request = dependency_1.google.protobuf.Any.fromObject(data.request);
            }
            return message;
        }
        toObject() {
            const data: {
                request?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            } = {};
            if (this.request != null) {
                data.request = this.request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_request)
                writer.writeMessage(1, this.request, () => this.request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.request, () => message.request = dependency_1.google.protobuf.Any.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryRequest {
            return QueryRequest.deserialize(bytes);
        }
    }
    export class QueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            response?: dependency_1.google.protobuf.Any;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
            }
        }
        get response() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 1) as dependency_1.google.protobuf.Any;
        }
        set response(value: dependency_1.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_response() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            response?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
        }): QueryResponse {
            const message = new QueryResponse({});
            if (data.response != null) {
                message.response = dependency_1.google.protobuf.Any.fromObject(data.response);
            }
            return message;
        }
        toObject() {
            const data: {
                response?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            } = {};
            if (this.response != null) {
                data.response = this.response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_response)
                writer.writeMessage(1, this.response, () => this.response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.response, () => message.response = dependency_1.google.protobuf.Any.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryResponse {
            return QueryResponse.deserialize(bytes);
        }
    }
    export class ListQueryHandlersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ListQueryHandlersRequest {
            const message = new ListQueryHandlersRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListQueryHandlersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListQueryHandlersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListQueryHandlersRequest {
            return ListQueryHandlersRequest.deserialize(bytes);
        }
    }
    export class ListQueryHandlersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            handlers?: Handler[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("handlers" in data && data.handlers != undefined) {
                    this.handlers = data.handlers;
                }
            }
        }
        get handlers() {
            return pb_1.Message.getRepeatedWrapperField(this, Handler, 1) as Handler[];
        }
        set handlers(value: Handler[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            handlers?: ReturnType<typeof Handler.prototype.toObject>[];
        }): ListQueryHandlersResponse {
            const message = new ListQueryHandlersResponse({});
            if (data.handlers != null) {
                message.handlers = data.handlers.map(item => Handler.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                handlers?: ReturnType<typeof Handler.prototype.toObject>[];
            } = {};
            if (this.handlers != null) {
                data.handlers = this.handlers.map((item: Handler) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.handlers.length)
                writer.writeRepeatedMessage(1, this.handlers, (item: Handler) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListQueryHandlersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListQueryHandlersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.handlers, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Handler.deserialize(reader), Handler));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListQueryHandlersResponse {
            return ListQueryHandlersResponse.deserialize(bytes);
        }
    }
    export class Handler extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_name?: string;
            response_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_name" in data && data.request_name != undefined) {
                    this.request_name = data.request_name;
                }
                if ("response_name" in data && data.response_name != undefined) {
                    this.response_name = data.response_name;
                }
            }
        }
        get request_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set request_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get response_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set response_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            request_name?: string;
            response_name?: string;
        }): Handler {
            const message = new Handler({});
            if (data.request_name != null) {
                message.request_name = data.request_name;
            }
            if (data.response_name != null) {
                message.response_name = data.response_name;
            }
            return message;
        }
        toObject() {
            const data: {
                request_name?: string;
                response_name?: string;
            } = {};
            if (this.request_name != null) {
                data.request_name = this.request_name;
            }
            if (this.response_name != null) {
                data.response_name = this.response_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_name.length)
                writer.writeString(1, this.request_name);
            if (this.response_name.length)
                writer.writeString(2, this.response_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Handler {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Handler();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_name = reader.readString();
                        break;
                    case 2:
                        message.response_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Handler {
            return Handler.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedServiceService {
        static definition = {
            Query: {
                path: "/cosmos.base.grpc.v2.Service/Query",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryResponse.deserialize(new Uint8Array(bytes))
            },
            ListQueryHandlers: {
                path: "/cosmos.base.grpc.v2.Service/ListQueryHandlers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListQueryHandlersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListQueryHandlersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListQueryHandlersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListQueryHandlersResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Query(call: grpc_1.ServerUnaryCall<QueryRequest, QueryResponse>, callback: grpc_1.sendUnaryData<QueryResponse>): void;
        abstract ListQueryHandlers(call: grpc_1.ServerUnaryCall<ListQueryHandlersRequest, ListQueryHandlersResponse>, callback: grpc_1.sendUnaryData<ListQueryHandlersResponse>): void;
    }
    export class ServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedServiceService.definition, "Service", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Query: GrpcUnaryServiceInterface<QueryRequest, QueryResponse> = (message: QueryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryResponse>, callback?: grpc_1.requestCallback<QueryResponse>): grpc_1.ClientUnaryCall => {
            return super.Query(message, metadata, options, callback);
        };
        ListQueryHandlers: GrpcUnaryServiceInterface<ListQueryHandlersRequest, ListQueryHandlersResponse> = (message: ListQueryHandlersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListQueryHandlersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListQueryHandlersResponse>, callback?: grpc_1.requestCallback<ListQueryHandlersResponse>): grpc_1.ClientUnaryCall => {
            return super.ListQueryHandlers(message, metadata, options, callback);
        };
    }
}
