/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cosmos/base/node/v1beta1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../google/api/annotations";
import * as dependency_2 from "./../../../../google/protobuf/timestamp";
import * as dependency_3 from "./../../../../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace cosmos.base.node.v1beta1 {
    export class ConfigRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ConfigRequest {
            const message = new ConfigRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigRequest {
            return ConfigRequest.deserialize(bytes);
        }
    }
    export class ConfigResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            minimum_gas_price?: string;
            pruning_keep_recent?: string;
            pruning_interval?: string;
            halt_height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("minimum_gas_price" in data && data.minimum_gas_price != undefined) {
                    this.minimum_gas_price = data.minimum_gas_price;
                }
                if ("pruning_keep_recent" in data && data.pruning_keep_recent != undefined) {
                    this.pruning_keep_recent = data.pruning_keep_recent;
                }
                if ("pruning_interval" in data && data.pruning_interval != undefined) {
                    this.pruning_interval = data.pruning_interval;
                }
                if ("halt_height" in data && data.halt_height != undefined) {
                    this.halt_height = data.halt_height;
                }
            }
        }
        get minimum_gas_price() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set minimum_gas_price(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get pruning_keep_recent() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set pruning_keep_recent(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get pruning_interval() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set pruning_interval(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get halt_height() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set halt_height(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            minimum_gas_price?: string;
            pruning_keep_recent?: string;
            pruning_interval?: string;
            halt_height?: number;
        }): ConfigResponse {
            const message = new ConfigResponse({});
            if (data.minimum_gas_price != null) {
                message.minimum_gas_price = data.minimum_gas_price;
            }
            if (data.pruning_keep_recent != null) {
                message.pruning_keep_recent = data.pruning_keep_recent;
            }
            if (data.pruning_interval != null) {
                message.pruning_interval = data.pruning_interval;
            }
            if (data.halt_height != null) {
                message.halt_height = data.halt_height;
            }
            return message;
        }
        toObject() {
            const data: {
                minimum_gas_price?: string;
                pruning_keep_recent?: string;
                pruning_interval?: string;
                halt_height?: number;
            } = {};
            if (this.minimum_gas_price != null) {
                data.minimum_gas_price = this.minimum_gas_price;
            }
            if (this.pruning_keep_recent != null) {
                data.pruning_keep_recent = this.pruning_keep_recent;
            }
            if (this.pruning_interval != null) {
                data.pruning_interval = this.pruning_interval;
            }
            if (this.halt_height != null) {
                data.halt_height = this.halt_height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.minimum_gas_price.length)
                writer.writeString(1, this.minimum_gas_price);
            if (this.pruning_keep_recent.length)
                writer.writeString(2, this.pruning_keep_recent);
            if (this.pruning_interval.length)
                writer.writeString(3, this.pruning_interval);
            if (this.halt_height != 0)
                writer.writeUint64(4, this.halt_height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.minimum_gas_price = reader.readString();
                        break;
                    case 2:
                        message.pruning_keep_recent = reader.readString();
                        break;
                    case 3:
                        message.pruning_interval = reader.readString();
                        break;
                    case 4:
                        message.halt_height = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigResponse {
            return ConfigResponse.deserialize(bytes);
        }
    }
    export class StatusRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): StatusRequest {
            const message = new StatusRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StatusRequest {
            return StatusRequest.deserialize(bytes);
        }
    }
    export class StatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            earliest_store_height?: number;
            height?: number;
            timestamp?: dependency_2.google.protobuf.Timestamp;
            app_hash?: Uint8Array;
            validator_hash?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("earliest_store_height" in data && data.earliest_store_height != undefined) {
                    this.earliest_store_height = data.earliest_store_height;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("app_hash" in data && data.app_hash != undefined) {
                    this.app_hash = data.app_hash;
                }
                if ("validator_hash" in data && data.validator_hash != undefined) {
                    this.validator_hash = data.validator_hash;
                }
            }
        }
        get earliest_store_height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set earliest_store_height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 3) as dependency_2.google.protobuf.Timestamp;
        }
        set timestamp(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get app_hash() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set app_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get validator_hash() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set validator_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            earliest_store_height?: number;
            height?: number;
            timestamp?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            app_hash?: Uint8Array;
            validator_hash?: Uint8Array;
        }): StatusResponse {
            const message = new StatusResponse({});
            if (data.earliest_store_height != null) {
                message.earliest_store_height = data.earliest_store_height;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.timestamp != null) {
                message.timestamp = dependency_2.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            if (data.app_hash != null) {
                message.app_hash = data.app_hash;
            }
            if (data.validator_hash != null) {
                message.validator_hash = data.validator_hash;
            }
            return message;
        }
        toObject() {
            const data: {
                earliest_store_height?: number;
                height?: number;
                timestamp?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                app_hash?: Uint8Array;
                validator_hash?: Uint8Array;
            } = {};
            if (this.earliest_store_height != null) {
                data.earliest_store_height = this.earliest_store_height;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            if (this.app_hash != null) {
                data.app_hash = this.app_hash;
            }
            if (this.validator_hash != null) {
                data.validator_hash = this.validator_hash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.earliest_store_height != 0)
                writer.writeUint64(1, this.earliest_store_height);
            if (this.height != 0)
                writer.writeUint64(2, this.height);
            if (this.has_timestamp)
                writer.writeMessage(3, this.timestamp, () => this.timestamp.serialize(writer));
            if (this.app_hash.length)
                writer.writeBytes(4, this.app_hash);
            if (this.validator_hash.length)
                writer.writeBytes(5, this.validator_hash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.earliest_store_height = reader.readUint64();
                        break;
                    case 2:
                        message.height = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        message.app_hash = reader.readBytes();
                        break;
                    case 5:
                        message.validator_hash = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StatusResponse {
            return StatusResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedServiceService {
        static definition = {
            Config: {
                path: "/cosmos.base.node.v1beta1.Service/Config",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ConfigRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ConfigRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ConfigResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ConfigResponse.deserialize(new Uint8Array(bytes))
            },
            Status: {
                path: "/cosmos.base.node.v1beta1.Service/Status",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: StatusRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => StatusRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Config(call: grpc_1.ServerUnaryCall<ConfigRequest, ConfigResponse>, callback: grpc_1.sendUnaryData<ConfigResponse>): void;
        abstract Status(call: grpc_1.ServerUnaryCall<StatusRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
    }
    export class ServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedServiceService.definition, "Service", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Config: GrpcUnaryServiceInterface<ConfigRequest, ConfigResponse> = (message: ConfigRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ConfigResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ConfigResponse>, callback?: grpc_1.requestCallback<ConfigResponse>): grpc_1.ClientUnaryCall => {
            return super.Config(message, metadata, options, callback);
        };
        Status: GrpcUnaryServiceInterface<StatusRequest, StatusResponse> = (message: StatusRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
            return super.Status(message, metadata, options, callback);
        };
    }
}
