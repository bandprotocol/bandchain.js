/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cosmos/base/tendermint/v1beta1/types.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../gogoproto/gogo";
import * as dependency_2 from "./../../../../cometbft/types/v1/types";
import * as dependency_3 from "./../../../../cometbft/types/v1/evidence";
import * as dependency_4 from "./../../../../cometbft/version/v1/types";
import * as dependency_5 from "./../../../../google/protobuf/timestamp";
import * as dependency_6 from "./../../../../amino/amino";
import * as pb_1 from "google-protobuf";
export namespace cosmos.base.tendermint.v1beta1 {
    export class Block extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            header?: Header;
            data?: dependency_2.cometbft.types.v1.Data;
            evidence?: dependency_3.cometbft.types.v1.EvidenceList;
            last_commit?: dependency_2.cometbft.types.v1.Commit;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("evidence" in data && data.evidence != undefined) {
                    this.evidence = data.evidence;
                }
                if ("last_commit" in data && data.last_commit != undefined) {
                    this.last_commit = data.last_commit;
                }
            }
        }
        get header() {
            return pb_1.Message.getWrapperField(this, Header, 1) as Header;
        }
        set header(value: Header) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.types.v1.Data, 2) as dependency_2.cometbft.types.v1.Data;
        }
        set data(value: dependency_2.cometbft.types.v1.Data) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get evidence() {
            return pb_1.Message.getWrapperField(this, dependency_3.cometbft.types.v1.EvidenceList, 3) as dependency_3.cometbft.types.v1.EvidenceList;
        }
        set evidence(value: dependency_3.cometbft.types.v1.EvidenceList) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_evidence() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get last_commit() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.types.v1.Commit, 4) as dependency_2.cometbft.types.v1.Commit;
        }
        set last_commit(value: dependency_2.cometbft.types.v1.Commit) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_last_commit() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            header?: ReturnType<typeof Header.prototype.toObject>;
            data?: ReturnType<typeof dependency_2.cometbft.types.v1.Data.prototype.toObject>;
            evidence?: ReturnType<typeof dependency_3.cometbft.types.v1.EvidenceList.prototype.toObject>;
            last_commit?: ReturnType<typeof dependency_2.cometbft.types.v1.Commit.prototype.toObject>;
        }): Block {
            const message = new Block({});
            if (data.header != null) {
                message.header = Header.fromObject(data.header);
            }
            if (data.data != null) {
                message.data = dependency_2.cometbft.types.v1.Data.fromObject(data.data);
            }
            if (data.evidence != null) {
                message.evidence = dependency_3.cometbft.types.v1.EvidenceList.fromObject(data.evidence);
            }
            if (data.last_commit != null) {
                message.last_commit = dependency_2.cometbft.types.v1.Commit.fromObject(data.last_commit);
            }
            return message;
        }
        toObject() {
            const data: {
                header?: ReturnType<typeof Header.prototype.toObject>;
                data?: ReturnType<typeof dependency_2.cometbft.types.v1.Data.prototype.toObject>;
                evidence?: ReturnType<typeof dependency_3.cometbft.types.v1.EvidenceList.prototype.toObject>;
                last_commit?: ReturnType<typeof dependency_2.cometbft.types.v1.Commit.prototype.toObject>;
            } = {};
            if (this.header != null) {
                data.header = this.header.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.evidence != null) {
                data.evidence = this.evidence.toObject();
            }
            if (this.last_commit != null) {
                data.last_commit = this.last_commit.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_header)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.has_data)
                writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (this.has_evidence)
                writer.writeMessage(3, this.evidence, () => this.evidence.serialize(writer));
            if (this.has_last_commit)
                writer.writeMessage(4, this.last_commit, () => this.last_commit.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Block {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Block();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.header, () => message.header = Header.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.data, () => message.data = dependency_2.cometbft.types.v1.Data.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.evidence, () => message.evidence = dependency_3.cometbft.types.v1.EvidenceList.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.last_commit, () => message.last_commit = dependency_2.cometbft.types.v1.Commit.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Block {
            return Block.deserialize(bytes);
        }
    }
    export class Header extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version?: dependency_4.cometbft.version.v1.Consensus;
            chain_id?: string;
            height?: number;
            time?: dependency_5.google.protobuf.Timestamp;
            last_block_id?: dependency_2.cometbft.types.v1.BlockID;
            last_commit_hash?: Uint8Array;
            data_hash?: Uint8Array;
            validators_hash?: Uint8Array;
            next_validators_hash?: Uint8Array;
            consensus_hash?: Uint8Array;
            app_hash?: Uint8Array;
            last_results_hash?: Uint8Array;
            evidence_hash?: Uint8Array;
            proposer_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("chain_id" in data && data.chain_id != undefined) {
                    this.chain_id = data.chain_id;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("time" in data && data.time != undefined) {
                    this.time = data.time;
                }
                if ("last_block_id" in data && data.last_block_id != undefined) {
                    this.last_block_id = data.last_block_id;
                }
                if ("last_commit_hash" in data && data.last_commit_hash != undefined) {
                    this.last_commit_hash = data.last_commit_hash;
                }
                if ("data_hash" in data && data.data_hash != undefined) {
                    this.data_hash = data.data_hash;
                }
                if ("validators_hash" in data && data.validators_hash != undefined) {
                    this.validators_hash = data.validators_hash;
                }
                if ("next_validators_hash" in data && data.next_validators_hash != undefined) {
                    this.next_validators_hash = data.next_validators_hash;
                }
                if ("consensus_hash" in data && data.consensus_hash != undefined) {
                    this.consensus_hash = data.consensus_hash;
                }
                if ("app_hash" in data && data.app_hash != undefined) {
                    this.app_hash = data.app_hash;
                }
                if ("last_results_hash" in data && data.last_results_hash != undefined) {
                    this.last_results_hash = data.last_results_hash;
                }
                if ("evidence_hash" in data && data.evidence_hash != undefined) {
                    this.evidence_hash = data.evidence_hash;
                }
                if ("proposer_address" in data && data.proposer_address != undefined) {
                    this.proposer_address = data.proposer_address;
                }
            }
        }
        get version() {
            return pb_1.Message.getWrapperField(this, dependency_4.cometbft.version.v1.Consensus, 1) as dependency_4.cometbft.version.v1.Consensus;
        }
        set version(value: dependency_4.cometbft.version.v1.Consensus) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_version() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get chain_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set chain_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get time() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 4) as dependency_5.google.protobuf.Timestamp;
        }
        set time(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_time() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get last_block_id() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.types.v1.BlockID, 5) as dependency_2.cometbft.types.v1.BlockID;
        }
        set last_block_id(value: dependency_2.cometbft.types.v1.BlockID) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_last_block_id() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get last_commit_hash() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
        }
        set last_commit_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get data_hash() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set data_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        get validators_hash() {
            return pb_1.Message.getFieldWithDefault(this, 8, new Uint8Array(0)) as Uint8Array;
        }
        set validators_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 8, value);
        }
        get next_validators_hash() {
            return pb_1.Message.getFieldWithDefault(this, 9, new Uint8Array(0)) as Uint8Array;
        }
        set next_validators_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 9, value);
        }
        get consensus_hash() {
            return pb_1.Message.getFieldWithDefault(this, 10, new Uint8Array(0)) as Uint8Array;
        }
        set consensus_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 10, value);
        }
        get app_hash() {
            return pb_1.Message.getFieldWithDefault(this, 11, new Uint8Array(0)) as Uint8Array;
        }
        set app_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 11, value);
        }
        get last_results_hash() {
            return pb_1.Message.getFieldWithDefault(this, 12, new Uint8Array(0)) as Uint8Array;
        }
        set last_results_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 12, value);
        }
        get evidence_hash() {
            return pb_1.Message.getFieldWithDefault(this, 13, new Uint8Array(0)) as Uint8Array;
        }
        set evidence_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 13, value);
        }
        get proposer_address() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set proposer_address(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        static fromObject(data: {
            version?: ReturnType<typeof dependency_4.cometbft.version.v1.Consensus.prototype.toObject>;
            chain_id?: string;
            height?: number;
            time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            last_block_id?: ReturnType<typeof dependency_2.cometbft.types.v1.BlockID.prototype.toObject>;
            last_commit_hash?: Uint8Array;
            data_hash?: Uint8Array;
            validators_hash?: Uint8Array;
            next_validators_hash?: Uint8Array;
            consensus_hash?: Uint8Array;
            app_hash?: Uint8Array;
            last_results_hash?: Uint8Array;
            evidence_hash?: Uint8Array;
            proposer_address?: string;
        }): Header {
            const message = new Header({});
            if (data.version != null) {
                message.version = dependency_4.cometbft.version.v1.Consensus.fromObject(data.version);
            }
            if (data.chain_id != null) {
                message.chain_id = data.chain_id;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.time != null) {
                message.time = dependency_5.google.protobuf.Timestamp.fromObject(data.time);
            }
            if (data.last_block_id != null) {
                message.last_block_id = dependency_2.cometbft.types.v1.BlockID.fromObject(data.last_block_id);
            }
            if (data.last_commit_hash != null) {
                message.last_commit_hash = data.last_commit_hash;
            }
            if (data.data_hash != null) {
                message.data_hash = data.data_hash;
            }
            if (data.validators_hash != null) {
                message.validators_hash = data.validators_hash;
            }
            if (data.next_validators_hash != null) {
                message.next_validators_hash = data.next_validators_hash;
            }
            if (data.consensus_hash != null) {
                message.consensus_hash = data.consensus_hash;
            }
            if (data.app_hash != null) {
                message.app_hash = data.app_hash;
            }
            if (data.last_results_hash != null) {
                message.last_results_hash = data.last_results_hash;
            }
            if (data.evidence_hash != null) {
                message.evidence_hash = data.evidence_hash;
            }
            if (data.proposer_address != null) {
                message.proposer_address = data.proposer_address;
            }
            return message;
        }
        toObject() {
            const data: {
                version?: ReturnType<typeof dependency_4.cometbft.version.v1.Consensus.prototype.toObject>;
                chain_id?: string;
                height?: number;
                time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
                last_block_id?: ReturnType<typeof dependency_2.cometbft.types.v1.BlockID.prototype.toObject>;
                last_commit_hash?: Uint8Array;
                data_hash?: Uint8Array;
                validators_hash?: Uint8Array;
                next_validators_hash?: Uint8Array;
                consensus_hash?: Uint8Array;
                app_hash?: Uint8Array;
                last_results_hash?: Uint8Array;
                evidence_hash?: Uint8Array;
                proposer_address?: string;
            } = {};
            if (this.version != null) {
                data.version = this.version.toObject();
            }
            if (this.chain_id != null) {
                data.chain_id = this.chain_id;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.time != null) {
                data.time = this.time.toObject();
            }
            if (this.last_block_id != null) {
                data.last_block_id = this.last_block_id.toObject();
            }
            if (this.last_commit_hash != null) {
                data.last_commit_hash = this.last_commit_hash;
            }
            if (this.data_hash != null) {
                data.data_hash = this.data_hash;
            }
            if (this.validators_hash != null) {
                data.validators_hash = this.validators_hash;
            }
            if (this.next_validators_hash != null) {
                data.next_validators_hash = this.next_validators_hash;
            }
            if (this.consensus_hash != null) {
                data.consensus_hash = this.consensus_hash;
            }
            if (this.app_hash != null) {
                data.app_hash = this.app_hash;
            }
            if (this.last_results_hash != null) {
                data.last_results_hash = this.last_results_hash;
            }
            if (this.evidence_hash != null) {
                data.evidence_hash = this.evidence_hash;
            }
            if (this.proposer_address != null) {
                data.proposer_address = this.proposer_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_version)
                writer.writeMessage(1, this.version, () => this.version.serialize(writer));
            if (this.chain_id.length)
                writer.writeString(2, this.chain_id);
            if (this.height != 0)
                writer.writeInt64(3, this.height);
            if (this.has_time)
                writer.writeMessage(4, this.time, () => this.time.serialize(writer));
            if (this.has_last_block_id)
                writer.writeMessage(5, this.last_block_id, () => this.last_block_id.serialize(writer));
            if (this.last_commit_hash.length)
                writer.writeBytes(6, this.last_commit_hash);
            if (this.data_hash.length)
                writer.writeBytes(7, this.data_hash);
            if (this.validators_hash.length)
                writer.writeBytes(8, this.validators_hash);
            if (this.next_validators_hash.length)
                writer.writeBytes(9, this.next_validators_hash);
            if (this.consensus_hash.length)
                writer.writeBytes(10, this.consensus_hash);
            if (this.app_hash.length)
                writer.writeBytes(11, this.app_hash);
            if (this.last_results_hash.length)
                writer.writeBytes(12, this.last_results_hash);
            if (this.evidence_hash.length)
                writer.writeBytes(13, this.evidence_hash);
            if (this.proposer_address.length)
                writer.writeString(14, this.proposer_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Header {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Header();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.version, () => message.version = dependency_4.cometbft.version.v1.Consensus.deserialize(reader));
                        break;
                    case 2:
                        message.chain_id = reader.readString();
                        break;
                    case 3:
                        message.height = reader.readInt64();
                        break;
                    case 4:
                        reader.readMessage(message.time, () => message.time = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.last_block_id, () => message.last_block_id = dependency_2.cometbft.types.v1.BlockID.deserialize(reader));
                        break;
                    case 6:
                        message.last_commit_hash = reader.readBytes();
                        break;
                    case 7:
                        message.data_hash = reader.readBytes();
                        break;
                    case 8:
                        message.validators_hash = reader.readBytes();
                        break;
                    case 9:
                        message.next_validators_hash = reader.readBytes();
                        break;
                    case 10:
                        message.consensus_hash = reader.readBytes();
                        break;
                    case 11:
                        message.app_hash = reader.readBytes();
                        break;
                    case 12:
                        message.last_results_hash = reader.readBytes();
                        break;
                    case 13:
                        message.evidence_hash = reader.readBytes();
                        break;
                    case 14:
                        message.proposer_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Header {
            return Header.deserialize(bytes);
        }
    }
}
