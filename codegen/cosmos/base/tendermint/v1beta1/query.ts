/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cosmos/base/tendermint/v1beta1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../amino/amino";
import * as dependency_2 from "./../../../../cometbft/crypto/v1/proof";
import * as dependency_3 from "./../../../../cometbft/p2p/v1/types";
import * as dependency_4 from "./../../../../cometbft/types/v1/block";
import * as dependency_5 from "./../../../../cometbft/types/v1/types";
import * as dependency_6 from "./../../query/v1beta1/pagination";
import * as dependency_7 from "./types";
import * as dependency_8 from "./../../../../cosmos_proto/cosmos";
import * as dependency_9 from "./../../../../gogoproto/gogo";
import * as dependency_10 from "./../../../../google/api/annotations";
import * as dependency_11 from "./../../../../google/protobuf/any";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace cosmos.base.tendermint.v1beta1 {
    export class GetValidatorSetByHeightRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
            pagination?: dependency_6.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_6.cosmos.base.query.v1beta1.PageRequest, 2) as dependency_6.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_6.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            height?: number;
            pagination?: ReturnType<typeof dependency_6.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }): GetValidatorSetByHeightRequest {
            const message = new GetValidatorSetByHeightRequest({});
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.pagination != null) {
                message.pagination = dependency_6.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
                pagination?: ReturnType<typeof dependency_6.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetValidatorSetByHeightRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetValidatorSetByHeightRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_6.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetValidatorSetByHeightRequest {
            return GetValidatorSetByHeightRequest.deserialize(bytes);
        }
    }
    export class GetValidatorSetByHeightResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block_height?: number;
            validators?: Validator[];
            pagination?: dependency_6.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_height" in data && data.block_height != undefined) {
                    this.block_height = data.block_height;
                }
                if ("validators" in data && data.validators != undefined) {
                    this.validators = data.validators;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get block_height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set block_height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get validators() {
            return pb_1.Message.getRepeatedWrapperField(this, Validator, 2) as Validator[];
        }
        set validators(value: Validator[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_6.cosmos.base.query.v1beta1.PageResponse, 3) as dependency_6.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_6.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            block_height?: number;
            validators?: ReturnType<typeof Validator.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_6.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }): GetValidatorSetByHeightResponse {
            const message = new GetValidatorSetByHeightResponse({});
            if (data.block_height != null) {
                message.block_height = data.block_height;
            }
            if (data.validators != null) {
                message.validators = data.validators.map(item => Validator.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_6.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                block_height?: number;
                validators?: ReturnType<typeof Validator.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_6.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.block_height != null) {
                data.block_height = this.block_height;
            }
            if (this.validators != null) {
                data.validators = this.validators.map((item: Validator) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_height != 0)
                writer.writeInt64(1, this.block_height);
            if (this.validators.length)
                writer.writeRepeatedMessage(2, this.validators, (item: Validator) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(3, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetValidatorSetByHeightResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetValidatorSetByHeightResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_height = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.validators, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Validator.deserialize(reader), Validator));
                        break;
                    case 3:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_6.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetValidatorSetByHeightResponse {
            return GetValidatorSetByHeightResponse.deserialize(bytes);
        }
    }
    export class GetLatestValidatorSetRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pagination?: dependency_6.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_6.cosmos.base.query.v1beta1.PageRequest, 1) as dependency_6.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_6.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            pagination?: ReturnType<typeof dependency_6.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }): GetLatestValidatorSetRequest {
            const message = new GetLatestValidatorSetRequest({});
            if (data.pagination != null) {
                message.pagination = dependency_6.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                pagination?: ReturnType<typeof dependency_6.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_pagination)
                writer.writeMessage(1, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLatestValidatorSetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLatestValidatorSetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_6.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLatestValidatorSetRequest {
            return GetLatestValidatorSetRequest.deserialize(bytes);
        }
    }
    export class GetLatestValidatorSetResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block_height?: number;
            validators?: Validator[];
            pagination?: dependency_6.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_height" in data && data.block_height != undefined) {
                    this.block_height = data.block_height;
                }
                if ("validators" in data && data.validators != undefined) {
                    this.validators = data.validators;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get block_height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set block_height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get validators() {
            return pb_1.Message.getRepeatedWrapperField(this, Validator, 2) as Validator[];
        }
        set validators(value: Validator[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_6.cosmos.base.query.v1beta1.PageResponse, 3) as dependency_6.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_6.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            block_height?: number;
            validators?: ReturnType<typeof Validator.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_6.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }): GetLatestValidatorSetResponse {
            const message = new GetLatestValidatorSetResponse({});
            if (data.block_height != null) {
                message.block_height = data.block_height;
            }
            if (data.validators != null) {
                message.validators = data.validators.map(item => Validator.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_6.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                block_height?: number;
                validators?: ReturnType<typeof Validator.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_6.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.block_height != null) {
                data.block_height = this.block_height;
            }
            if (this.validators != null) {
                data.validators = this.validators.map((item: Validator) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_height != 0)
                writer.writeInt64(1, this.block_height);
            if (this.validators.length)
                writer.writeRepeatedMessage(2, this.validators, (item: Validator) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(3, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLatestValidatorSetResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLatestValidatorSetResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_height = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.validators, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Validator.deserialize(reader), Validator));
                        break;
                    case 3:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_6.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLatestValidatorSetResponse {
            return GetLatestValidatorSetResponse.deserialize(bytes);
        }
    }
    export class Validator extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            pub_key?: dependency_11.google.protobuf.Any;
            voting_power?: number;
            proposer_priority?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("pub_key" in data && data.pub_key != undefined) {
                    this.pub_key = data.pub_key;
                }
                if ("voting_power" in data && data.voting_power != undefined) {
                    this.voting_power = data.voting_power;
                }
                if ("proposer_priority" in data && data.proposer_priority != undefined) {
                    this.proposer_priority = data.proposer_priority;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get pub_key() {
            return pb_1.Message.getWrapperField(this, dependency_11.google.protobuf.Any, 2) as dependency_11.google.protobuf.Any;
        }
        set pub_key(value: dependency_11.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pub_key() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get voting_power() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set voting_power(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get proposer_priority() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set proposer_priority(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            address?: string;
            pub_key?: ReturnType<typeof dependency_11.google.protobuf.Any.prototype.toObject>;
            voting_power?: number;
            proposer_priority?: number;
        }): Validator {
            const message = new Validator({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.pub_key != null) {
                message.pub_key = dependency_11.google.protobuf.Any.fromObject(data.pub_key);
            }
            if (data.voting_power != null) {
                message.voting_power = data.voting_power;
            }
            if (data.proposer_priority != null) {
                message.proposer_priority = data.proposer_priority;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                pub_key?: ReturnType<typeof dependency_11.google.protobuf.Any.prototype.toObject>;
                voting_power?: number;
                proposer_priority?: number;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.pub_key != null) {
                data.pub_key = this.pub_key.toObject();
            }
            if (this.voting_power != null) {
                data.voting_power = this.voting_power;
            }
            if (this.proposer_priority != null) {
                data.proposer_priority = this.proposer_priority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.has_pub_key)
                writer.writeMessage(2, this.pub_key, () => this.pub_key.serialize(writer));
            if (this.voting_power != 0)
                writer.writeInt64(3, this.voting_power);
            if (this.proposer_priority != 0)
                writer.writeInt64(4, this.proposer_priority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Validator {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Validator();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.pub_key, () => message.pub_key = dependency_11.google.protobuf.Any.deserialize(reader));
                        break;
                    case 3:
                        message.voting_power = reader.readInt64();
                        break;
                    case 4:
                        message.proposer_priority = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Validator {
            return Validator.deserialize(bytes);
        }
    }
    export class GetBlockByHeightRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            height?: number;
        }): GetBlockByHeightRequest {
            const message = new GetBlockByHeightRequest({});
            if (data.height != null) {
                message.height = data.height;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBlockByHeightRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBlockByHeightRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBlockByHeightRequest {
            return GetBlockByHeightRequest.deserialize(bytes);
        }
    }
    export class GetBlockByHeightResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block_id?: dependency_5.cometbft.types.v1.BlockID;
            block?: dependency_4.cometbft.types.v1.Block;
            sdk_block?: dependency_7.cosmos.base.tendermint.v1beta1.Block;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
                if ("sdk_block" in data && data.sdk_block != undefined) {
                    this.sdk_block = data.sdk_block;
                }
            }
        }
        get block_id() {
            return pb_1.Message.getWrapperField(this, dependency_5.cometbft.types.v1.BlockID, 1) as dependency_5.cometbft.types.v1.BlockID;
        }
        set block_id(value: dependency_5.cometbft.types.v1.BlockID) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_block_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_4.cometbft.types.v1.Block, 2) as dependency_4.cometbft.types.v1.Block;
        }
        set block(value: dependency_4.cometbft.types.v1.Block) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_block() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get sdk_block() {
            return pb_1.Message.getWrapperField(this, dependency_7.cosmos.base.tendermint.v1beta1.Block, 3) as dependency_7.cosmos.base.tendermint.v1beta1.Block;
        }
        set sdk_block(value: dependency_7.cosmos.base.tendermint.v1beta1.Block) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_sdk_block() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            block_id?: ReturnType<typeof dependency_5.cometbft.types.v1.BlockID.prototype.toObject>;
            block?: ReturnType<typeof dependency_4.cometbft.types.v1.Block.prototype.toObject>;
            sdk_block?: ReturnType<typeof dependency_7.cosmos.base.tendermint.v1beta1.Block.prototype.toObject>;
        }): GetBlockByHeightResponse {
            const message = new GetBlockByHeightResponse({});
            if (data.block_id != null) {
                message.block_id = dependency_5.cometbft.types.v1.BlockID.fromObject(data.block_id);
            }
            if (data.block != null) {
                message.block = dependency_4.cometbft.types.v1.Block.fromObject(data.block);
            }
            if (data.sdk_block != null) {
                message.sdk_block = dependency_7.cosmos.base.tendermint.v1beta1.Block.fromObject(data.sdk_block);
            }
            return message;
        }
        toObject() {
            const data: {
                block_id?: ReturnType<typeof dependency_5.cometbft.types.v1.BlockID.prototype.toObject>;
                block?: ReturnType<typeof dependency_4.cometbft.types.v1.Block.prototype.toObject>;
                sdk_block?: ReturnType<typeof dependency_7.cosmos.base.tendermint.v1beta1.Block.prototype.toObject>;
            } = {};
            if (this.block_id != null) {
                data.block_id = this.block_id.toObject();
            }
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            if (this.sdk_block != null) {
                data.sdk_block = this.sdk_block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_block_id)
                writer.writeMessage(1, this.block_id, () => this.block_id.serialize(writer));
            if (this.has_block)
                writer.writeMessage(2, this.block, () => this.block.serialize(writer));
            if (this.has_sdk_block)
                writer.writeMessage(3, this.sdk_block, () => this.sdk_block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBlockByHeightResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBlockByHeightResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block_id, () => message.block_id = dependency_5.cometbft.types.v1.BlockID.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.block, () => message.block = dependency_4.cometbft.types.v1.Block.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.sdk_block, () => message.sdk_block = dependency_7.cosmos.base.tendermint.v1beta1.Block.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBlockByHeightResponse {
            return GetBlockByHeightResponse.deserialize(bytes);
        }
    }
    export class GetLatestBlockRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetLatestBlockRequest {
            const message = new GetLatestBlockRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLatestBlockRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLatestBlockRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLatestBlockRequest {
            return GetLatestBlockRequest.deserialize(bytes);
        }
    }
    export class GetLatestBlockResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block_id?: dependency_5.cometbft.types.v1.BlockID;
            block?: dependency_4.cometbft.types.v1.Block;
            sdk_block?: dependency_7.cosmos.base.tendermint.v1beta1.Block;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
                if ("sdk_block" in data && data.sdk_block != undefined) {
                    this.sdk_block = data.sdk_block;
                }
            }
        }
        get block_id() {
            return pb_1.Message.getWrapperField(this, dependency_5.cometbft.types.v1.BlockID, 1) as dependency_5.cometbft.types.v1.BlockID;
        }
        set block_id(value: dependency_5.cometbft.types.v1.BlockID) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_block_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_4.cometbft.types.v1.Block, 2) as dependency_4.cometbft.types.v1.Block;
        }
        set block(value: dependency_4.cometbft.types.v1.Block) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_block() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get sdk_block() {
            return pb_1.Message.getWrapperField(this, dependency_7.cosmos.base.tendermint.v1beta1.Block, 3) as dependency_7.cosmos.base.tendermint.v1beta1.Block;
        }
        set sdk_block(value: dependency_7.cosmos.base.tendermint.v1beta1.Block) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_sdk_block() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            block_id?: ReturnType<typeof dependency_5.cometbft.types.v1.BlockID.prototype.toObject>;
            block?: ReturnType<typeof dependency_4.cometbft.types.v1.Block.prototype.toObject>;
            sdk_block?: ReturnType<typeof dependency_7.cosmos.base.tendermint.v1beta1.Block.prototype.toObject>;
        }): GetLatestBlockResponse {
            const message = new GetLatestBlockResponse({});
            if (data.block_id != null) {
                message.block_id = dependency_5.cometbft.types.v1.BlockID.fromObject(data.block_id);
            }
            if (data.block != null) {
                message.block = dependency_4.cometbft.types.v1.Block.fromObject(data.block);
            }
            if (data.sdk_block != null) {
                message.sdk_block = dependency_7.cosmos.base.tendermint.v1beta1.Block.fromObject(data.sdk_block);
            }
            return message;
        }
        toObject() {
            const data: {
                block_id?: ReturnType<typeof dependency_5.cometbft.types.v1.BlockID.prototype.toObject>;
                block?: ReturnType<typeof dependency_4.cometbft.types.v1.Block.prototype.toObject>;
                sdk_block?: ReturnType<typeof dependency_7.cosmos.base.tendermint.v1beta1.Block.prototype.toObject>;
            } = {};
            if (this.block_id != null) {
                data.block_id = this.block_id.toObject();
            }
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            if (this.sdk_block != null) {
                data.sdk_block = this.sdk_block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_block_id)
                writer.writeMessage(1, this.block_id, () => this.block_id.serialize(writer));
            if (this.has_block)
                writer.writeMessage(2, this.block, () => this.block.serialize(writer));
            if (this.has_sdk_block)
                writer.writeMessage(3, this.sdk_block, () => this.sdk_block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLatestBlockResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLatestBlockResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block_id, () => message.block_id = dependency_5.cometbft.types.v1.BlockID.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.block, () => message.block = dependency_4.cometbft.types.v1.Block.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.sdk_block, () => message.sdk_block = dependency_7.cosmos.base.tendermint.v1beta1.Block.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLatestBlockResponse {
            return GetLatestBlockResponse.deserialize(bytes);
        }
    }
    export class GetSyncingRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetSyncingRequest {
            const message = new GetSyncingRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSyncingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSyncingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetSyncingRequest {
            return GetSyncingRequest.deserialize(bytes);
        }
    }
    export class GetSyncingResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            syncing?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("syncing" in data && data.syncing != undefined) {
                    this.syncing = data.syncing;
                }
            }
        }
        get syncing() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set syncing(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            syncing?: boolean;
        }): GetSyncingResponse {
            const message = new GetSyncingResponse({});
            if (data.syncing != null) {
                message.syncing = data.syncing;
            }
            return message;
        }
        toObject() {
            const data: {
                syncing?: boolean;
            } = {};
            if (this.syncing != null) {
                data.syncing = this.syncing;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.syncing != false)
                writer.writeBool(1, this.syncing);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSyncingResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSyncingResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.syncing = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetSyncingResponse {
            return GetSyncingResponse.deserialize(bytes);
        }
    }
    export class GetNodeInfoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetNodeInfoRequest {
            const message = new GetNodeInfoRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetNodeInfoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetNodeInfoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetNodeInfoRequest {
            return GetNodeInfoRequest.deserialize(bytes);
        }
    }
    export class GetNodeInfoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            default_node_info?: dependency_3.cometbft.p2p.v1.DefaultNodeInfo;
            application_version?: VersionInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("default_node_info" in data && data.default_node_info != undefined) {
                    this.default_node_info = data.default_node_info;
                }
                if ("application_version" in data && data.application_version != undefined) {
                    this.application_version = data.application_version;
                }
            }
        }
        get default_node_info() {
            return pb_1.Message.getWrapperField(this, dependency_3.cometbft.p2p.v1.DefaultNodeInfo, 1) as dependency_3.cometbft.p2p.v1.DefaultNodeInfo;
        }
        set default_node_info(value: dependency_3.cometbft.p2p.v1.DefaultNodeInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_default_node_info() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get application_version() {
            return pb_1.Message.getWrapperField(this, VersionInfo, 2) as VersionInfo;
        }
        set application_version(value: VersionInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_application_version() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            default_node_info?: ReturnType<typeof dependency_3.cometbft.p2p.v1.DefaultNodeInfo.prototype.toObject>;
            application_version?: ReturnType<typeof VersionInfo.prototype.toObject>;
        }): GetNodeInfoResponse {
            const message = new GetNodeInfoResponse({});
            if (data.default_node_info != null) {
                message.default_node_info = dependency_3.cometbft.p2p.v1.DefaultNodeInfo.fromObject(data.default_node_info);
            }
            if (data.application_version != null) {
                message.application_version = VersionInfo.fromObject(data.application_version);
            }
            return message;
        }
        toObject() {
            const data: {
                default_node_info?: ReturnType<typeof dependency_3.cometbft.p2p.v1.DefaultNodeInfo.prototype.toObject>;
                application_version?: ReturnType<typeof VersionInfo.prototype.toObject>;
            } = {};
            if (this.default_node_info != null) {
                data.default_node_info = this.default_node_info.toObject();
            }
            if (this.application_version != null) {
                data.application_version = this.application_version.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_default_node_info)
                writer.writeMessage(1, this.default_node_info, () => this.default_node_info.serialize(writer));
            if (this.has_application_version)
                writer.writeMessage(2, this.application_version, () => this.application_version.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetNodeInfoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetNodeInfoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.default_node_info, () => message.default_node_info = dependency_3.cometbft.p2p.v1.DefaultNodeInfo.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.application_version, () => message.application_version = VersionInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetNodeInfoResponse {
            return GetNodeInfoResponse.deserialize(bytes);
        }
    }
    export class VersionInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            app_name?: string;
            version?: string;
            git_commit?: string;
            build_tags?: string;
            go_version?: string;
            build_deps?: Module[];
            cosmos_sdk_version?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("app_name" in data && data.app_name != undefined) {
                    this.app_name = data.app_name;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("git_commit" in data && data.git_commit != undefined) {
                    this.git_commit = data.git_commit;
                }
                if ("build_tags" in data && data.build_tags != undefined) {
                    this.build_tags = data.build_tags;
                }
                if ("go_version" in data && data.go_version != undefined) {
                    this.go_version = data.go_version;
                }
                if ("build_deps" in data && data.build_deps != undefined) {
                    this.build_deps = data.build_deps;
                }
                if ("cosmos_sdk_version" in data && data.cosmos_sdk_version != undefined) {
                    this.cosmos_sdk_version = data.cosmos_sdk_version;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get app_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set app_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get git_commit() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set git_commit(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get build_tags() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set build_tags(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get go_version() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set go_version(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get build_deps() {
            return pb_1.Message.getRepeatedWrapperField(this, Module, 7) as Module[];
        }
        set build_deps(value: Module[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get cosmos_sdk_version() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set cosmos_sdk_version(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            name?: string;
            app_name?: string;
            version?: string;
            git_commit?: string;
            build_tags?: string;
            go_version?: string;
            build_deps?: ReturnType<typeof Module.prototype.toObject>[];
            cosmos_sdk_version?: string;
        }): VersionInfo {
            const message = new VersionInfo({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.app_name != null) {
                message.app_name = data.app_name;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.git_commit != null) {
                message.git_commit = data.git_commit;
            }
            if (data.build_tags != null) {
                message.build_tags = data.build_tags;
            }
            if (data.go_version != null) {
                message.go_version = data.go_version;
            }
            if (data.build_deps != null) {
                message.build_deps = data.build_deps.map(item => Module.fromObject(item));
            }
            if (data.cosmos_sdk_version != null) {
                message.cosmos_sdk_version = data.cosmos_sdk_version;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                app_name?: string;
                version?: string;
                git_commit?: string;
                build_tags?: string;
                go_version?: string;
                build_deps?: ReturnType<typeof Module.prototype.toObject>[];
                cosmos_sdk_version?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.app_name != null) {
                data.app_name = this.app_name;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.git_commit != null) {
                data.git_commit = this.git_commit;
            }
            if (this.build_tags != null) {
                data.build_tags = this.build_tags;
            }
            if (this.go_version != null) {
                data.go_version = this.go_version;
            }
            if (this.build_deps != null) {
                data.build_deps = this.build_deps.map((item: Module) => item.toObject());
            }
            if (this.cosmos_sdk_version != null) {
                data.cosmos_sdk_version = this.cosmos_sdk_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.app_name.length)
                writer.writeString(2, this.app_name);
            if (this.version.length)
                writer.writeString(3, this.version);
            if (this.git_commit.length)
                writer.writeString(4, this.git_commit);
            if (this.build_tags.length)
                writer.writeString(5, this.build_tags);
            if (this.go_version.length)
                writer.writeString(6, this.go_version);
            if (this.build_deps.length)
                writer.writeRepeatedMessage(7, this.build_deps, (item: Module) => item.serialize(writer));
            if (this.cosmos_sdk_version.length)
                writer.writeString(8, this.cosmos_sdk_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VersionInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VersionInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.app_name = reader.readString();
                        break;
                    case 3:
                        message.version = reader.readString();
                        break;
                    case 4:
                        message.git_commit = reader.readString();
                        break;
                    case 5:
                        message.build_tags = reader.readString();
                        break;
                    case 6:
                        message.go_version = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.build_deps, () => pb_1.Message.addToRepeatedWrapperField(message, 7, Module.deserialize(reader), Module));
                        break;
                    case 8:
                        message.cosmos_sdk_version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VersionInfo {
            return VersionInfo.deserialize(bytes);
        }
    }
    export class Module extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            path?: string;
            version?: string;
            sum?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("sum" in data && data.sum != undefined) {
                    this.sum = data.sum;
                }
            }
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get sum() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sum(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            path?: string;
            version?: string;
            sum?: string;
        }): Module {
            const message = new Module({});
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.sum != null) {
                message.sum = data.sum;
            }
            return message;
        }
        toObject() {
            const data: {
                path?: string;
                version?: string;
                sum?: string;
            } = {};
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.sum != null) {
                data.sum = this.sum;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.path.length)
                writer.writeString(1, this.path);
            if (this.version.length)
                writer.writeString(2, this.version);
            if (this.sum.length)
                writer.writeString(3, this.sum);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Module {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Module();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.path = reader.readString();
                        break;
                    case 2:
                        message.version = reader.readString();
                        break;
                    case 3:
                        message.sum = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Module {
            return Module.deserialize(bytes);
        }
    }
    export class ABCIQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array;
            path?: string;
            height?: number;
            prove?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("prove" in data && data.prove != undefined) {
                    this.prove = data.prove;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get prove() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set prove(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            data?: Uint8Array;
            path?: string;
            height?: number;
            prove?: boolean;
        }): ABCIQueryRequest {
            const message = new ABCIQueryRequest({});
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.prove != null) {
                message.prove = data.prove;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array;
                path?: string;
                height?: number;
                prove?: boolean;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.prove != null) {
                data.prove = this.prove;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeBytes(1, this.data);
            if (this.path.length)
                writer.writeString(2, this.path);
            if (this.height != 0)
                writer.writeInt64(3, this.height);
            if (this.prove != false)
                writer.writeBool(4, this.prove);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ABCIQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ABCIQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readBytes();
                        break;
                    case 2:
                        message.path = reader.readString();
                        break;
                    case 3:
                        message.height = reader.readInt64();
                        break;
                    case 4:
                        message.prove = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ABCIQueryRequest {
            return ABCIQueryRequest.deserialize(bytes);
        }
    }
    export class ABCIQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            log?: string;
            info?: string;
            index?: number;
            key?: Uint8Array;
            value?: Uint8Array;
            height?: number;
            codespace?: string;
            proof_ops?: dependency_2.cometbft.crypto.v1.ProofOps;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("log" in data && data.log != undefined) {
                    this.log = data.log;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("codespace" in data && data.codespace != undefined) {
                    this.codespace = data.codespace;
                }
                if ("proof_ops" in data && data.proof_ops != undefined) {
                    this.proof_ops = data.proof_ops;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get log() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set log(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get info() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set info(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
        }
        set key(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get codespace() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set codespace(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get proof_ops() {
            return pb_1.Message.getWrapperField(this, dependency_2.cometbft.crypto.v1.ProofOps, 11) as dependency_2.cometbft.crypto.v1.ProofOps;
        }
        set proof_ops(value: dependency_2.cometbft.crypto.v1.ProofOps) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_proof_ops() {
            return pb_1.Message.getField(this, 11) != null;
        }
        static fromObject(data: {
            code?: number;
            log?: string;
            info?: string;
            index?: number;
            key?: Uint8Array;
            value?: Uint8Array;
            height?: number;
            codespace?: string;
            proof_ops?: ReturnType<typeof dependency_2.cometbft.crypto.v1.ProofOps.prototype.toObject>;
        }): ABCIQueryResponse {
            const message = new ABCIQueryResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.log != null) {
                message.log = data.log;
            }
            if (data.info != null) {
                message.info = data.info;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.codespace != null) {
                message.codespace = data.codespace;
            }
            if (data.proof_ops != null) {
                message.proof_ops = dependency_2.cometbft.crypto.v1.ProofOps.fromObject(data.proof_ops);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                log?: string;
                info?: string;
                index?: number;
                key?: Uint8Array;
                value?: Uint8Array;
                height?: number;
                codespace?: string;
                proof_ops?: ReturnType<typeof dependency_2.cometbft.crypto.v1.ProofOps.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.log != null) {
                data.log = this.log;
            }
            if (this.info != null) {
                data.info = this.info;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.codespace != null) {
                data.codespace = this.codespace;
            }
            if (this.proof_ops != null) {
                data.proof_ops = this.proof_ops.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeUint32(1, this.code);
            if (this.log.length)
                writer.writeString(3, this.log);
            if (this.info.length)
                writer.writeString(4, this.info);
            if (this.index != 0)
                writer.writeInt64(5, this.index);
            if (this.key.length)
                writer.writeBytes(6, this.key);
            if (this.value.length)
                writer.writeBytes(7, this.value);
            if (this.height != 0)
                writer.writeInt64(9, this.height);
            if (this.codespace.length)
                writer.writeString(10, this.codespace);
            if (this.has_proof_ops)
                writer.writeMessage(11, this.proof_ops, () => this.proof_ops.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ABCIQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ABCIQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readUint32();
                        break;
                    case 3:
                        message.log = reader.readString();
                        break;
                    case 4:
                        message.info = reader.readString();
                        break;
                    case 5:
                        message.index = reader.readInt64();
                        break;
                    case 6:
                        message.key = reader.readBytes();
                        break;
                    case 7:
                        message.value = reader.readBytes();
                        break;
                    case 9:
                        message.height = reader.readInt64();
                        break;
                    case 10:
                        message.codespace = reader.readString();
                        break;
                    case 11:
                        reader.readMessage(message.proof_ops, () => message.proof_ops = dependency_2.cometbft.crypto.v1.ProofOps.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ABCIQueryResponse {
            return ABCIQueryResponse.deserialize(bytes);
        }
    }
    /** @deprecated*/
    export class ProofOp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            key?: Uint8Array;
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set key(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            type?: string;
            key?: Uint8Array;
            data?: Uint8Array;
        }): ProofOp {
            const message = new ProofOp({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                key?: Uint8Array;
                data?: Uint8Array;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.key.length)
                writer.writeBytes(2, this.key);
            if (this.data.length)
                writer.writeBytes(3, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProofOp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofOp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.key = reader.readBytes();
                        break;
                    case 3:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProofOp {
            return ProofOp.deserialize(bytes);
        }
    }
    /** @deprecated*/
    export class ProofOps extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ops?: ProofOp[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ops" in data && data.ops != undefined) {
                    this.ops = data.ops;
                }
            }
        }
        get ops() {
            return pb_1.Message.getRepeatedWrapperField(this, ProofOp, 1) as ProofOp[];
        }
        set ops(value: ProofOp[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            ops?: ReturnType<typeof ProofOp.prototype.toObject>[];
        }): ProofOps {
            const message = new ProofOps({});
            if (data.ops != null) {
                message.ops = data.ops.map(item => ProofOp.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                ops?: ReturnType<typeof ProofOp.prototype.toObject>[];
            } = {};
            if (this.ops != null) {
                data.ops = this.ops.map((item: ProofOp) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ops.length)
                writer.writeRepeatedMessage(1, this.ops, (item: ProofOp) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProofOps {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofOps();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ops, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ProofOp.deserialize(reader), ProofOp));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProofOps {
            return ProofOps.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedServiceService {
        static definition = {
            GetNodeInfo: {
                path: "/cosmos.base.tendermint.v1beta1.Service/GetNodeInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetNodeInfoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetNodeInfoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetNodeInfoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetNodeInfoResponse.deserialize(new Uint8Array(bytes))
            },
            GetSyncing: {
                path: "/cosmos.base.tendermint.v1beta1.Service/GetSyncing",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetSyncingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetSyncingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetSyncingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetSyncingResponse.deserialize(new Uint8Array(bytes))
            },
            GetLatestBlock: {
                path: "/cosmos.base.tendermint.v1beta1.Service/GetLatestBlock",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetLatestBlockRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetLatestBlockRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetLatestBlockResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetLatestBlockResponse.deserialize(new Uint8Array(bytes))
            },
            GetBlockByHeight: {
                path: "/cosmos.base.tendermint.v1beta1.Service/GetBlockByHeight",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetBlockByHeightRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetBlockByHeightRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetBlockByHeightResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetBlockByHeightResponse.deserialize(new Uint8Array(bytes))
            },
            GetLatestValidatorSet: {
                path: "/cosmos.base.tendermint.v1beta1.Service/GetLatestValidatorSet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetLatestValidatorSetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetLatestValidatorSetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetLatestValidatorSetResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetLatestValidatorSetResponse.deserialize(new Uint8Array(bytes))
            },
            GetValidatorSetByHeight: {
                path: "/cosmos.base.tendermint.v1beta1.Service/GetValidatorSetByHeight",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetValidatorSetByHeightRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetValidatorSetByHeightRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetValidatorSetByHeightResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetValidatorSetByHeightResponse.deserialize(new Uint8Array(bytes))
            },
            ABCIQuery: {
                path: "/cosmos.base.tendermint.v1beta1.Service/ABCIQuery",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ABCIQueryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ABCIQueryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ABCIQueryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ABCIQueryResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetNodeInfo(call: grpc_1.ServerUnaryCall<GetNodeInfoRequest, GetNodeInfoResponse>, callback: grpc_1.sendUnaryData<GetNodeInfoResponse>): void;
        abstract GetSyncing(call: grpc_1.ServerUnaryCall<GetSyncingRequest, GetSyncingResponse>, callback: grpc_1.sendUnaryData<GetSyncingResponse>): void;
        abstract GetLatestBlock(call: grpc_1.ServerUnaryCall<GetLatestBlockRequest, GetLatestBlockResponse>, callback: grpc_1.sendUnaryData<GetLatestBlockResponse>): void;
        abstract GetBlockByHeight(call: grpc_1.ServerUnaryCall<GetBlockByHeightRequest, GetBlockByHeightResponse>, callback: grpc_1.sendUnaryData<GetBlockByHeightResponse>): void;
        abstract GetLatestValidatorSet(call: grpc_1.ServerUnaryCall<GetLatestValidatorSetRequest, GetLatestValidatorSetResponse>, callback: grpc_1.sendUnaryData<GetLatestValidatorSetResponse>): void;
        abstract GetValidatorSetByHeight(call: grpc_1.ServerUnaryCall<GetValidatorSetByHeightRequest, GetValidatorSetByHeightResponse>, callback: grpc_1.sendUnaryData<GetValidatorSetByHeightResponse>): void;
        abstract ABCIQuery(call: grpc_1.ServerUnaryCall<ABCIQueryRequest, ABCIQueryResponse>, callback: grpc_1.sendUnaryData<ABCIQueryResponse>): void;
    }
    export class ServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedServiceService.definition, "Service", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetNodeInfo: GrpcUnaryServiceInterface<GetNodeInfoRequest, GetNodeInfoResponse> = (message: GetNodeInfoRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetNodeInfoResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetNodeInfoResponse>, callback?: grpc_1.requestCallback<GetNodeInfoResponse>): grpc_1.ClientUnaryCall => {
            return super.GetNodeInfo(message, metadata, options, callback);
        };
        GetSyncing: GrpcUnaryServiceInterface<GetSyncingRequest, GetSyncingResponse> = (message: GetSyncingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetSyncingResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetSyncingResponse>, callback?: grpc_1.requestCallback<GetSyncingResponse>): grpc_1.ClientUnaryCall => {
            return super.GetSyncing(message, metadata, options, callback);
        };
        GetLatestBlock: GrpcUnaryServiceInterface<GetLatestBlockRequest, GetLatestBlockResponse> = (message: GetLatestBlockRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetLatestBlockResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetLatestBlockResponse>, callback?: grpc_1.requestCallback<GetLatestBlockResponse>): grpc_1.ClientUnaryCall => {
            return super.GetLatestBlock(message, metadata, options, callback);
        };
        GetBlockByHeight: GrpcUnaryServiceInterface<GetBlockByHeightRequest, GetBlockByHeightResponse> = (message: GetBlockByHeightRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetBlockByHeightResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetBlockByHeightResponse>, callback?: grpc_1.requestCallback<GetBlockByHeightResponse>): grpc_1.ClientUnaryCall => {
            return super.GetBlockByHeight(message, metadata, options, callback);
        };
        GetLatestValidatorSet: GrpcUnaryServiceInterface<GetLatestValidatorSetRequest, GetLatestValidatorSetResponse> = (message: GetLatestValidatorSetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetLatestValidatorSetResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetLatestValidatorSetResponse>, callback?: grpc_1.requestCallback<GetLatestValidatorSetResponse>): grpc_1.ClientUnaryCall => {
            return super.GetLatestValidatorSet(message, metadata, options, callback);
        };
        GetValidatorSetByHeight: GrpcUnaryServiceInterface<GetValidatorSetByHeightRequest, GetValidatorSetByHeightResponse> = (message: GetValidatorSetByHeightRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetValidatorSetByHeightResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetValidatorSetByHeightResponse>, callback?: grpc_1.requestCallback<GetValidatorSetByHeightResponse>): grpc_1.ClientUnaryCall => {
            return super.GetValidatorSetByHeight(message, metadata, options, callback);
        };
        ABCIQuery: GrpcUnaryServiceInterface<ABCIQueryRequest, ABCIQueryResponse> = (message: ABCIQueryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ABCIQueryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ABCIQueryResponse>, callback?: grpc_1.requestCallback<ABCIQueryResponse>): grpc_1.ClientUnaryCall => {
            return super.ABCIQuery(message, metadata, options, callback);
        };
    }
}
