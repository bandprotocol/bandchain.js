/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cosmos/crypto/keyring/v1/record.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../gogoproto/gogo";
import * as dependency_2 from "./../../../../google/protobuf/any";
import * as dependency_3 from "./../../hd/v1/hd";
import * as pb_1 from "google-protobuf";
export namespace cosmos.crypto.keyring.v1 {
    export class Record extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4, 5, 6]];
        constructor(data?: any[] | ({
            name?: string;
            pub_key?: dependency_2.google.protobuf.Any;
        } & (({
            local?: Record.Local;
            ledger?: never;
            multi?: never;
            offline?: never;
        } | {
            local?: never;
            ledger?: Record.Ledger;
            multi?: never;
            offline?: never;
        } | {
            local?: never;
            ledger?: never;
            multi?: Record.Multi;
            offline?: never;
        } | {
            local?: never;
            ledger?: never;
            multi?: never;
            offline?: Record.Offline;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("pub_key" in data && data.pub_key != undefined) {
                    this.pub_key = data.pub_key;
                }
                if ("local" in data && data.local != undefined) {
                    this.local = data.local;
                }
                if ("ledger" in data && data.ledger != undefined) {
                    this.ledger = data.ledger;
                }
                if ("multi" in data && data.multi != undefined) {
                    this.multi = data.multi;
                }
                if ("offline" in data && data.offline != undefined) {
                    this.offline = data.offline;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get pub_key() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Any, 2) as dependency_2.google.protobuf.Any;
        }
        set pub_key(value: dependency_2.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pub_key() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get local() {
            return pb_1.Message.getWrapperField(this, Record.Local, 3) as Record.Local;
        }
        set local(value: Record.Local) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_local() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get ledger() {
            return pb_1.Message.getWrapperField(this, Record.Ledger, 4) as Record.Ledger;
        }
        set ledger(value: Record.Ledger) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_ledger() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get multi() {
            return pb_1.Message.getWrapperField(this, Record.Multi, 5) as Record.Multi;
        }
        set multi(value: Record.Multi) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_multi() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get offline() {
            return pb_1.Message.getWrapperField(this, Record.Offline, 6) as Record.Offline;
        }
        set offline(value: Record.Offline) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_offline() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get item() {
            const cases: {
                [index: number]: "none" | "local" | "ledger" | "multi" | "offline";
            } = {
                0: "none",
                3: "local",
                4: "ledger",
                5: "multi",
                6: "offline"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5, 6])];
        }
        static fromObject(data: {
            name?: string;
            pub_key?: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>;
            local?: ReturnType<typeof Record.Local.prototype.toObject>;
            ledger?: ReturnType<typeof Record.Ledger.prototype.toObject>;
            multi?: ReturnType<typeof Record.Multi.prototype.toObject>;
            offline?: ReturnType<typeof Record.Offline.prototype.toObject>;
        }): Record {
            const message = new Record({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.pub_key != null) {
                message.pub_key = dependency_2.google.protobuf.Any.fromObject(data.pub_key);
            }
            if (data.local != null) {
                message.local = Record.Local.fromObject(data.local);
            }
            if (data.ledger != null) {
                message.ledger = Record.Ledger.fromObject(data.ledger);
            }
            if (data.multi != null) {
                message.multi = Record.Multi.fromObject(data.multi);
            }
            if (data.offline != null) {
                message.offline = Record.Offline.fromObject(data.offline);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                pub_key?: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>;
                local?: ReturnType<typeof Record.Local.prototype.toObject>;
                ledger?: ReturnType<typeof Record.Ledger.prototype.toObject>;
                multi?: ReturnType<typeof Record.Multi.prototype.toObject>;
                offline?: ReturnType<typeof Record.Offline.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.pub_key != null) {
                data.pub_key = this.pub_key.toObject();
            }
            if (this.local != null) {
                data.local = this.local.toObject();
            }
            if (this.ledger != null) {
                data.ledger = this.ledger.toObject();
            }
            if (this.multi != null) {
                data.multi = this.multi.toObject();
            }
            if (this.offline != null) {
                data.offline = this.offline.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_pub_key)
                writer.writeMessage(2, this.pub_key, () => this.pub_key.serialize(writer));
            if (this.has_local)
                writer.writeMessage(3, this.local, () => this.local.serialize(writer));
            if (this.has_ledger)
                writer.writeMessage(4, this.ledger, () => this.ledger.serialize(writer));
            if (this.has_multi)
                writer.writeMessage(5, this.multi, () => this.multi.serialize(writer));
            if (this.has_offline)
                writer.writeMessage(6, this.offline, () => this.offline.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Record {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Record();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.pub_key, () => message.pub_key = dependency_2.google.protobuf.Any.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.local, () => message.local = Record.Local.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.ledger, () => message.ledger = Record.Ledger.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.multi, () => message.multi = Record.Multi.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.offline, () => message.offline = Record.Offline.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Record {
            return Record.deserialize(bytes);
        }
    }
    export namespace Record {
        export class Local extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                priv_key?: dependency_2.google.protobuf.Any;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("priv_key" in data && data.priv_key != undefined) {
                        this.priv_key = data.priv_key;
                    }
                }
            }
            get priv_key() {
                return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Any, 1) as dependency_2.google.protobuf.Any;
            }
            set priv_key(value: dependency_2.google.protobuf.Any) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_priv_key() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                priv_key?: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>;
            }): Local {
                const message = new Local({});
                if (data.priv_key != null) {
                    message.priv_key = dependency_2.google.protobuf.Any.fromObject(data.priv_key);
                }
                return message;
            }
            toObject() {
                const data: {
                    priv_key?: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>;
                } = {};
                if (this.priv_key != null) {
                    data.priv_key = this.priv_key.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_priv_key)
                    writer.writeMessage(1, this.priv_key, () => this.priv_key.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Local {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Local();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.priv_key, () => message.priv_key = dependency_2.google.protobuf.Any.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Local {
                return Local.deserialize(bytes);
            }
        }
        export class Ledger extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                path?: dependency_3.cosmos.crypto.hd.v1.BIP44Params;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("path" in data && data.path != undefined) {
                        this.path = data.path;
                    }
                }
            }
            get path() {
                return pb_1.Message.getWrapperField(this, dependency_3.cosmos.crypto.hd.v1.BIP44Params, 1) as dependency_3.cosmos.crypto.hd.v1.BIP44Params;
            }
            set path(value: dependency_3.cosmos.crypto.hd.v1.BIP44Params) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_path() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                path?: ReturnType<typeof dependency_3.cosmos.crypto.hd.v1.BIP44Params.prototype.toObject>;
            }): Ledger {
                const message = new Ledger({});
                if (data.path != null) {
                    message.path = dependency_3.cosmos.crypto.hd.v1.BIP44Params.fromObject(data.path);
                }
                return message;
            }
            toObject() {
                const data: {
                    path?: ReturnType<typeof dependency_3.cosmos.crypto.hd.v1.BIP44Params.prototype.toObject>;
                } = {};
                if (this.path != null) {
                    data.path = this.path.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_path)
                    writer.writeMessage(1, this.path, () => this.path.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ledger {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Ledger();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.path, () => message.path = dependency_3.cosmos.crypto.hd.v1.BIP44Params.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Ledger {
                return Ledger.deserialize(bytes);
            }
        }
        export class Multi extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): Multi {
                const message = new Multi({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Multi {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Multi();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Multi {
                return Multi.deserialize(bytes);
            }
        }
        export class Offline extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): Offline {
                const message = new Offline({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Offline {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Offline();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Offline {
                return Offline.deserialize(bytes);
            }
        }
    }
}
