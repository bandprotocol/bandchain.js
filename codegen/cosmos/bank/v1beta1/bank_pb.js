// source: cosmos/bank/v1beta1/bank.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js')
goog.object.extend(proto, gogoproto_gogo_pb)
var cosmos_proto_cosmos_pb = require('../../../cosmos_proto/cosmos_pb.js')
goog.object.extend(proto, cosmos_proto_cosmos_pb)
var cosmos_base_v1beta1_coin_pb = require('../../../cosmos/base/v1beta1/coin_pb.js')
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb)
var cosmos_msg_v1_msg_pb = require('../../../cosmos/msg/v1/msg_pb.js')
goog.object.extend(proto, cosmos_msg_v1_msg_pb)
var amino_amino_pb = require('../../../amino/amino_pb.js')
goog.object.extend(proto, amino_amino_pb)
goog.exportSymbol('proto.cosmos.bank.v1beta1.DenomUnit', null, global)
goog.exportSymbol('proto.cosmos.bank.v1beta1.Input', null, global)
goog.exportSymbol('proto.cosmos.bank.v1beta1.Metadata', null, global)
goog.exportSymbol('proto.cosmos.bank.v1beta1.Output', null, global)
goog.exportSymbol('proto.cosmos.bank.v1beta1.Params', null, global)
goog.exportSymbol('proto.cosmos.bank.v1beta1.SendEnabled', null, global)
goog.exportSymbol('proto.cosmos.bank.v1beta1.Supply', null, global)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.bank.v1beta1.Params = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.cosmos.bank.v1beta1.Params.repeatedFields_,
    null,
  )
}
goog.inherits(proto.cosmos.bank.v1beta1.Params, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.bank.v1beta1.Params.displayName =
    'proto.cosmos.bank.v1beta1.Params'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.bank.v1beta1.SendEnabled = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.cosmos.bank.v1beta1.SendEnabled, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.bank.v1beta1.SendEnabled.displayName =
    'proto.cosmos.bank.v1beta1.SendEnabled'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.bank.v1beta1.Input = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.cosmos.bank.v1beta1.Input.repeatedFields_,
    null,
  )
}
goog.inherits(proto.cosmos.bank.v1beta1.Input, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.bank.v1beta1.Input.displayName =
    'proto.cosmos.bank.v1beta1.Input'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.bank.v1beta1.Output = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.cosmos.bank.v1beta1.Output.repeatedFields_,
    null,
  )
}
goog.inherits(proto.cosmos.bank.v1beta1.Output, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.bank.v1beta1.Output.displayName =
    'proto.cosmos.bank.v1beta1.Output'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.bank.v1beta1.Supply = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.cosmos.bank.v1beta1.Supply.repeatedFields_,
    null,
  )
}
goog.inherits(proto.cosmos.bank.v1beta1.Supply, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.bank.v1beta1.Supply.displayName =
    'proto.cosmos.bank.v1beta1.Supply'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.bank.v1beta1.DenomUnit = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.cosmos.bank.v1beta1.DenomUnit.repeatedFields_,
    null,
  )
}
goog.inherits(proto.cosmos.bank.v1beta1.DenomUnit, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.bank.v1beta1.DenomUnit.displayName =
    'proto.cosmos.bank.v1beta1.DenomUnit'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.bank.v1beta1.Metadata = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.cosmos.bank.v1beta1.Metadata.repeatedFields_,
    null,
  )
}
goog.inherits(proto.cosmos.bank.v1beta1.Metadata, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.bank.v1beta1.Metadata.displayName =
    'proto.cosmos.bank.v1beta1.Metadata'
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cosmos.bank.v1beta1.Params.repeatedFields_ = [1]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cosmos.bank.v1beta1.Params.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.cosmos.bank.v1beta1.Params.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cosmos.bank.v1beta1.Params} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cosmos.bank.v1beta1.Params.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        sendEnabledList: jspb.Message.toObjectList(
          msg.getSendEnabledList(),
          proto.cosmos.bank.v1beta1.SendEnabled.toObject,
          includeInstance,
        ),
        defaultSendEnabled: jspb.Message.getBooleanFieldWithDefault(
          msg,
          2,
          false,
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.bank.v1beta1.Params}
 */
proto.cosmos.bank.v1beta1.Params.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.cosmos.bank.v1beta1.Params()
  return proto.cosmos.bank.v1beta1.Params.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.bank.v1beta1.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.bank.v1beta1.Params}
 */
proto.cosmos.bank.v1beta1.Params.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.cosmos.bank.v1beta1.SendEnabled()
        reader.readMessage(
          value,
          proto.cosmos.bank.v1beta1.SendEnabled.deserializeBinaryFromReader,
        )
        msg.addSendEnabled(value)
        break
      case 2:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setDefaultSendEnabled(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.bank.v1beta1.Params.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.cosmos.bank.v1beta1.Params.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.bank.v1beta1.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.bank.v1beta1.Params.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getSendEnabledList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cosmos.bank.v1beta1.SendEnabled.serializeBinaryToWriter,
    )
  }
  f = message.getDefaultSendEnabled()
  if (f) {
    writer.writeBool(2, f)
  }
}

/**
 * repeated SendEnabled send_enabled = 1;
 * @return {!Array<!proto.cosmos.bank.v1beta1.SendEnabled>}
 */
proto.cosmos.bank.v1beta1.Params.prototype.getSendEnabledList = function () {
  return /** @type{!Array<!proto.cosmos.bank.v1beta1.SendEnabled>} */ (
    jspb.Message.getRepeatedWrapperField(
      this,
      proto.cosmos.bank.v1beta1.SendEnabled,
      1,
    )
  )
}

/**
 * @param {!Array<!proto.cosmos.bank.v1beta1.SendEnabled>} value
 * @return {!proto.cosmos.bank.v1beta1.Params} returns this
 */
proto.cosmos.bank.v1beta1.Params.prototype.setSendEnabledList = function (
  value,
) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value)
}

/**
 * @param {!proto.cosmos.bank.v1beta1.SendEnabled=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.bank.v1beta1.SendEnabled}
 */
proto.cosmos.bank.v1beta1.Params.prototype.addSendEnabled = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.cosmos.bank.v1beta1.SendEnabled,
    opt_index,
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.bank.v1beta1.Params} returns this
 */
proto.cosmos.bank.v1beta1.Params.prototype.clearSendEnabledList = function () {
  return this.setSendEnabledList([])
}

/**
 * optional bool default_send_enabled = 2;
 * @return {boolean}
 */
proto.cosmos.bank.v1beta1.Params.prototype.getDefaultSendEnabled = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 2, false)
  )
}

/**
 * @param {boolean} value
 * @return {!proto.cosmos.bank.v1beta1.Params} returns this
 */
proto.cosmos.bank.v1beta1.Params.prototype.setDefaultSendEnabled = function (
  value,
) {
  return jspb.Message.setProto3BooleanField(this, 2, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cosmos.bank.v1beta1.SendEnabled.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.cosmos.bank.v1beta1.SendEnabled.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cosmos.bank.v1beta1.SendEnabled} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cosmos.bank.v1beta1.SendEnabled.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        denom: jspb.Message.getFieldWithDefault(msg, 1, ''),
        enabled: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.bank.v1beta1.SendEnabled}
 */
proto.cosmos.bank.v1beta1.SendEnabled.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.cosmos.bank.v1beta1.SendEnabled()
  return proto.cosmos.bank.v1beta1.SendEnabled.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.bank.v1beta1.SendEnabled} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.bank.v1beta1.SendEnabled}
 */
proto.cosmos.bank.v1beta1.SendEnabled.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setDenom(value)
        break
      case 2:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setEnabled(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.bank.v1beta1.SendEnabled.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.cosmos.bank.v1beta1.SendEnabled.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.bank.v1beta1.SendEnabled} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.bank.v1beta1.SendEnabled.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getDenom()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getEnabled()
  if (f) {
    writer.writeBool(2, f)
  }
}

/**
 * optional string denom = 1;
 * @return {string}
 */
proto.cosmos.bank.v1beta1.SendEnabled.prototype.getDenom = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.bank.v1beta1.SendEnabled} returns this
 */
proto.cosmos.bank.v1beta1.SendEnabled.prototype.setDenom = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional bool enabled = 2;
 * @return {boolean}
 */
proto.cosmos.bank.v1beta1.SendEnabled.prototype.getEnabled = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 2, false)
  )
}

/**
 * @param {boolean} value
 * @return {!proto.cosmos.bank.v1beta1.SendEnabled} returns this
 */
proto.cosmos.bank.v1beta1.SendEnabled.prototype.setEnabled = function (value) {
  return jspb.Message.setProto3BooleanField(this, 2, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cosmos.bank.v1beta1.Input.repeatedFields_ = [2]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cosmos.bank.v1beta1.Input.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.cosmos.bank.v1beta1.Input.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cosmos.bank.v1beta1.Input} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cosmos.bank.v1beta1.Input.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ''),
        coinsList: jspb.Message.toObjectList(
          msg.getCoinsList(),
          cosmos_base_v1beta1_coin_pb.Coin.toObject,
          includeInstance,
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.bank.v1beta1.Input}
 */
proto.cosmos.bank.v1beta1.Input.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.cosmos.bank.v1beta1.Input()
  return proto.cosmos.bank.v1beta1.Input.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.bank.v1beta1.Input} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.bank.v1beta1.Input}
 */
proto.cosmos.bank.v1beta1.Input.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setAddress(value)
        break
      case 2:
        var value = new cosmos_base_v1beta1_coin_pb.Coin()
        reader.readMessage(
          value,
          cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader,
        )
        msg.addCoins(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.bank.v1beta1.Input.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.cosmos.bank.v1beta1.Input.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.bank.v1beta1.Input} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.bank.v1beta1.Input.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getAddress()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getCoinsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter,
    )
  }
}

/**
 * optional string address = 1;
 * @return {string}
 */
proto.cosmos.bank.v1beta1.Input.prototype.getAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.bank.v1beta1.Input} returns this
 */
proto.cosmos.bank.v1beta1.Input.prototype.setAddress = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * repeated cosmos.base.v1beta1.Coin coins = 2;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.cosmos.bank.v1beta1.Input.prototype.getCoinsList = function () {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(
      this,
      cosmos_base_v1beta1_coin_pb.Coin,
      2,
    )
  )
}

/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.cosmos.bank.v1beta1.Input} returns this
 */
proto.cosmos.bank.v1beta1.Input.prototype.setCoinsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value)
}

/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.cosmos.bank.v1beta1.Input.prototype.addCoins = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.cosmos.base.v1beta1.Coin,
    opt_index,
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.bank.v1beta1.Input} returns this
 */
proto.cosmos.bank.v1beta1.Input.prototype.clearCoinsList = function () {
  return this.setCoinsList([])
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cosmos.bank.v1beta1.Output.repeatedFields_ = [2]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cosmos.bank.v1beta1.Output.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.cosmos.bank.v1beta1.Output.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cosmos.bank.v1beta1.Output} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cosmos.bank.v1beta1.Output.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ''),
        coinsList: jspb.Message.toObjectList(
          msg.getCoinsList(),
          cosmos_base_v1beta1_coin_pb.Coin.toObject,
          includeInstance,
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.bank.v1beta1.Output}
 */
proto.cosmos.bank.v1beta1.Output.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.cosmos.bank.v1beta1.Output()
  return proto.cosmos.bank.v1beta1.Output.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.bank.v1beta1.Output} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.bank.v1beta1.Output}
 */
proto.cosmos.bank.v1beta1.Output.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setAddress(value)
        break
      case 2:
        var value = new cosmos_base_v1beta1_coin_pb.Coin()
        reader.readMessage(
          value,
          cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader,
        )
        msg.addCoins(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.bank.v1beta1.Output.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.cosmos.bank.v1beta1.Output.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.bank.v1beta1.Output} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.bank.v1beta1.Output.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getAddress()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getCoinsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter,
    )
  }
}

/**
 * optional string address = 1;
 * @return {string}
 */
proto.cosmos.bank.v1beta1.Output.prototype.getAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.bank.v1beta1.Output} returns this
 */
proto.cosmos.bank.v1beta1.Output.prototype.setAddress = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * repeated cosmos.base.v1beta1.Coin coins = 2;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.cosmos.bank.v1beta1.Output.prototype.getCoinsList = function () {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(
      this,
      cosmos_base_v1beta1_coin_pb.Coin,
      2,
    )
  )
}

/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.cosmos.bank.v1beta1.Output} returns this
 */
proto.cosmos.bank.v1beta1.Output.prototype.setCoinsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value)
}

/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.cosmos.bank.v1beta1.Output.prototype.addCoins = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.cosmos.base.v1beta1.Coin,
    opt_index,
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.bank.v1beta1.Output} returns this
 */
proto.cosmos.bank.v1beta1.Output.prototype.clearCoinsList = function () {
  return this.setCoinsList([])
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cosmos.bank.v1beta1.Supply.repeatedFields_ = [1]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cosmos.bank.v1beta1.Supply.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.cosmos.bank.v1beta1.Supply.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cosmos.bank.v1beta1.Supply} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cosmos.bank.v1beta1.Supply.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        totalList: jspb.Message.toObjectList(
          msg.getTotalList(),
          cosmos_base_v1beta1_coin_pb.Coin.toObject,
          includeInstance,
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.bank.v1beta1.Supply}
 */
proto.cosmos.bank.v1beta1.Supply.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.cosmos.bank.v1beta1.Supply()
  return proto.cosmos.bank.v1beta1.Supply.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.bank.v1beta1.Supply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.bank.v1beta1.Supply}
 */
proto.cosmos.bank.v1beta1.Supply.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new cosmos_base_v1beta1_coin_pb.Coin()
        reader.readMessage(
          value,
          cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader,
        )
        msg.addTotal(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.bank.v1beta1.Supply.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.cosmos.bank.v1beta1.Supply.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.bank.v1beta1.Supply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.bank.v1beta1.Supply.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getTotalList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter,
    )
  }
}

/**
 * repeated cosmos.base.v1beta1.Coin total = 1;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.cosmos.bank.v1beta1.Supply.prototype.getTotalList = function () {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(
      this,
      cosmos_base_v1beta1_coin_pb.Coin,
      1,
    )
  )
}

/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.cosmos.bank.v1beta1.Supply} returns this
 */
proto.cosmos.bank.v1beta1.Supply.prototype.setTotalList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value)
}

/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.cosmos.bank.v1beta1.Supply.prototype.addTotal = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.cosmos.base.v1beta1.Coin,
    opt_index,
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.bank.v1beta1.Supply} returns this
 */
proto.cosmos.bank.v1beta1.Supply.prototype.clearTotalList = function () {
  return this.setTotalList([])
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cosmos.bank.v1beta1.DenomUnit.repeatedFields_ = [3]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cosmos.bank.v1beta1.DenomUnit.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.cosmos.bank.v1beta1.DenomUnit.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cosmos.bank.v1beta1.DenomUnit} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cosmos.bank.v1beta1.DenomUnit.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        denom: jspb.Message.getFieldWithDefault(msg, 1, ''),
        exponent: jspb.Message.getFieldWithDefault(msg, 2, 0),
        aliasesList:
          (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.bank.v1beta1.DenomUnit}
 */
proto.cosmos.bank.v1beta1.DenomUnit.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.cosmos.bank.v1beta1.DenomUnit()
  return proto.cosmos.bank.v1beta1.DenomUnit.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.bank.v1beta1.DenomUnit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.bank.v1beta1.DenomUnit}
 */
proto.cosmos.bank.v1beta1.DenomUnit.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setDenom(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setExponent(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.addAliases(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.bank.v1beta1.DenomUnit.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.cosmos.bank.v1beta1.DenomUnit.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.bank.v1beta1.DenomUnit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.bank.v1beta1.DenomUnit.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getDenom()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getExponent()
  if (f !== 0) {
    writer.writeUint32(2, f)
  }
  f = message.getAliasesList()
  if (f.length > 0) {
    writer.writeRepeatedString(3, f)
  }
}

/**
 * optional string denom = 1;
 * @return {string}
 */
proto.cosmos.bank.v1beta1.DenomUnit.prototype.getDenom = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.bank.v1beta1.DenomUnit} returns this
 */
proto.cosmos.bank.v1beta1.DenomUnit.prototype.setDenom = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional uint32 exponent = 2;
 * @return {number}
 */
proto.cosmos.bank.v1beta1.DenomUnit.prototype.getExponent = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.cosmos.bank.v1beta1.DenomUnit} returns this
 */
proto.cosmos.bank.v1beta1.DenomUnit.prototype.setExponent = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * repeated string aliases = 3;
 * @return {!Array<string>}
 */
proto.cosmos.bank.v1beta1.DenomUnit.prototype.getAliasesList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.cosmos.bank.v1beta1.DenomUnit} returns this
 */
proto.cosmos.bank.v1beta1.DenomUnit.prototype.setAliasesList = function (
  value,
) {
  return jspb.Message.setField(this, 3, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cosmos.bank.v1beta1.DenomUnit} returns this
 */
proto.cosmos.bank.v1beta1.DenomUnit.prototype.addAliases = function (
  value,
  opt_index,
) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.bank.v1beta1.DenomUnit} returns this
 */
proto.cosmos.bank.v1beta1.DenomUnit.prototype.clearAliasesList = function () {
  return this.setAliasesList([])
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cosmos.bank.v1beta1.Metadata.repeatedFields_ = [2]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cosmos.bank.v1beta1.Metadata.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.cosmos.bank.v1beta1.Metadata.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cosmos.bank.v1beta1.Metadata} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cosmos.bank.v1beta1.Metadata.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        description: jspb.Message.getFieldWithDefault(msg, 1, ''),
        denomUnitsList: jspb.Message.toObjectList(
          msg.getDenomUnitsList(),
          proto.cosmos.bank.v1beta1.DenomUnit.toObject,
          includeInstance,
        ),
        base: jspb.Message.getFieldWithDefault(msg, 3, ''),
        display: jspb.Message.getFieldWithDefault(msg, 4, ''),
        name: jspb.Message.getFieldWithDefault(msg, 5, ''),
        symbol: jspb.Message.getFieldWithDefault(msg, 6, ''),
        uri: jspb.Message.getFieldWithDefault(msg, 7, ''),
        uriHash: jspb.Message.getFieldWithDefault(msg, 8, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.bank.v1beta1.Metadata}
 */
proto.cosmos.bank.v1beta1.Metadata.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.cosmos.bank.v1beta1.Metadata()
  return proto.cosmos.bank.v1beta1.Metadata.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.bank.v1beta1.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.bank.v1beta1.Metadata}
 */
proto.cosmos.bank.v1beta1.Metadata.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setDescription(value)
        break
      case 2:
        var value = new proto.cosmos.bank.v1beta1.DenomUnit()
        reader.readMessage(
          value,
          proto.cosmos.bank.v1beta1.DenomUnit.deserializeBinaryFromReader,
        )
        msg.addDenomUnits(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setBase(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setDisplay(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setName(value)
        break
      case 6:
        var value = /** @type {string} */ (reader.readString())
        msg.setSymbol(value)
        break
      case 7:
        var value = /** @type {string} */ (reader.readString())
        msg.setUri(value)
        break
      case 8:
        var value = /** @type {string} */ (reader.readString())
        msg.setUriHash(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.bank.v1beta1.Metadata.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.cosmos.bank.v1beta1.Metadata.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.bank.v1beta1.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.bank.v1beta1.Metadata.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getDescription()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getDenomUnitsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.cosmos.bank.v1beta1.DenomUnit.serializeBinaryToWriter,
    )
  }
  f = message.getBase()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getDisplay()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
  f = message.getName()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
  f = message.getSymbol()
  if (f.length > 0) {
    writer.writeString(6, f)
  }
  f = message.getUri()
  if (f.length > 0) {
    writer.writeString(7, f)
  }
  f = message.getUriHash()
  if (f.length > 0) {
    writer.writeString(8, f)
  }
}

/**
 * optional string description = 1;
 * @return {string}
 */
proto.cosmos.bank.v1beta1.Metadata.prototype.getDescription = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.bank.v1beta1.Metadata} returns this
 */
proto.cosmos.bank.v1beta1.Metadata.prototype.setDescription = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * repeated DenomUnit denom_units = 2;
 * @return {!Array<!proto.cosmos.bank.v1beta1.DenomUnit>}
 */
proto.cosmos.bank.v1beta1.Metadata.prototype.getDenomUnitsList = function () {
  return /** @type{!Array<!proto.cosmos.bank.v1beta1.DenomUnit>} */ (
    jspb.Message.getRepeatedWrapperField(
      this,
      proto.cosmos.bank.v1beta1.DenomUnit,
      2,
    )
  )
}

/**
 * @param {!Array<!proto.cosmos.bank.v1beta1.DenomUnit>} value
 * @return {!proto.cosmos.bank.v1beta1.Metadata} returns this
 */
proto.cosmos.bank.v1beta1.Metadata.prototype.setDenomUnitsList = function (
  value,
) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value)
}

/**
 * @param {!proto.cosmos.bank.v1beta1.DenomUnit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.bank.v1beta1.DenomUnit}
 */
proto.cosmos.bank.v1beta1.Metadata.prototype.addDenomUnits = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.cosmos.bank.v1beta1.DenomUnit,
    opt_index,
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.bank.v1beta1.Metadata} returns this
 */
proto.cosmos.bank.v1beta1.Metadata.prototype.clearDenomUnitsList = function () {
  return this.setDenomUnitsList([])
}

/**
 * optional string base = 3;
 * @return {string}
 */
proto.cosmos.bank.v1beta1.Metadata.prototype.getBase = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.bank.v1beta1.Metadata} returns this
 */
proto.cosmos.bank.v1beta1.Metadata.prototype.setBase = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string display = 4;
 * @return {string}
 */
proto.cosmos.bank.v1beta1.Metadata.prototype.getDisplay = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.bank.v1beta1.Metadata} returns this
 */
proto.cosmos.bank.v1beta1.Metadata.prototype.setDisplay = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional string name = 5;
 * @return {string}
 */
proto.cosmos.bank.v1beta1.Metadata.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.bank.v1beta1.Metadata} returns this
 */
proto.cosmos.bank.v1beta1.Metadata.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * optional string symbol = 6;
 * @return {string}
 */
proto.cosmos.bank.v1beta1.Metadata.prototype.getSymbol = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.bank.v1beta1.Metadata} returns this
 */
proto.cosmos.bank.v1beta1.Metadata.prototype.setSymbol = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value)
}

/**
 * optional string uri = 7;
 * @return {string}
 */
proto.cosmos.bank.v1beta1.Metadata.prototype.getUri = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.bank.v1beta1.Metadata} returns this
 */
proto.cosmos.bank.v1beta1.Metadata.prototype.setUri = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value)
}

/**
 * optional string uri_hash = 8;
 * @return {string}
 */
proto.cosmos.bank.v1beta1.Metadata.prototype.getUriHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.bank.v1beta1.Metadata} returns this
 */
proto.cosmos.bank.v1beta1.Metadata.prototype.setUriHash = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value)
}

goog.object.extend(exports, proto.cosmos.bank.v1beta1)
