/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cosmos/nft/v1beta1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../base/query/v1beta1/pagination";
import * as dependency_2 from "./../../../google/api/annotations";
import * as dependency_3 from "./nft";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace cosmos.nft.v1beta1 {
    export class QueryBalanceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            class_id?: string;
            owner?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("class_id" in data && data.class_id != undefined) {
                    this.class_id = data.class_id;
                }
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
            }
        }
        get class_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set class_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            class_id?: string;
            owner?: string;
        }): QueryBalanceRequest {
            const message = new QueryBalanceRequest({});
            if (data.class_id != null) {
                message.class_id = data.class_id;
            }
            if (data.owner != null) {
                message.owner = data.owner;
            }
            return message;
        }
        toObject() {
            const data: {
                class_id?: string;
                owner?: string;
            } = {};
            if (this.class_id != null) {
                data.class_id = this.class_id;
            }
            if (this.owner != null) {
                data.owner = this.owner;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.class_id.length)
                writer.writeString(1, this.class_id);
            if (this.owner.length)
                writer.writeString(2, this.owner);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryBalanceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryBalanceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.class_id = reader.readString();
                        break;
                    case 2:
                        message.owner = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryBalanceRequest {
            return QueryBalanceRequest.deserialize(bytes);
        }
    }
    export class QueryBalanceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            amount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            amount?: number;
        }): QueryBalanceResponse {
            const message = new QueryBalanceResponse({});
            if (data.amount != null) {
                message.amount = data.amount;
            }
            return message;
        }
        toObject() {
            const data: {
                amount?: number;
            } = {};
            if (this.amount != null) {
                data.amount = this.amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.amount != 0)
                writer.writeUint64(1, this.amount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryBalanceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryBalanceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.amount = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryBalanceResponse {
            return QueryBalanceResponse.deserialize(bytes);
        }
    }
    export class QueryOwnerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            class_id?: string;
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("class_id" in data && data.class_id != undefined) {
                    this.class_id = data.class_id;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get class_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set class_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            class_id?: string;
            id?: string;
        }): QueryOwnerRequest {
            const message = new QueryOwnerRequest({});
            if (data.class_id != null) {
                message.class_id = data.class_id;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                class_id?: string;
                id?: string;
            } = {};
            if (this.class_id != null) {
                data.class_id = this.class_id;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.class_id.length)
                writer.writeString(1, this.class_id);
            if (this.id.length)
                writer.writeString(2, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryOwnerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryOwnerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.class_id = reader.readString();
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryOwnerRequest {
            return QueryOwnerRequest.deserialize(bytes);
        }
    }
    export class QueryOwnerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            owner?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
            }
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            owner?: string;
        }): QueryOwnerResponse {
            const message = new QueryOwnerResponse({});
            if (data.owner != null) {
                message.owner = data.owner;
            }
            return message;
        }
        toObject() {
            const data: {
                owner?: string;
            } = {};
            if (this.owner != null) {
                data.owner = this.owner;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner.length)
                writer.writeString(1, this.owner);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryOwnerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryOwnerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.owner = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryOwnerResponse {
            return QueryOwnerResponse.deserialize(bytes);
        }
    }
    export class QuerySupplyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            class_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("class_id" in data && data.class_id != undefined) {
                    this.class_id = data.class_id;
                }
            }
        }
        get class_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set class_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            class_id?: string;
        }): QuerySupplyRequest {
            const message = new QuerySupplyRequest({});
            if (data.class_id != null) {
                message.class_id = data.class_id;
            }
            return message;
        }
        toObject() {
            const data: {
                class_id?: string;
            } = {};
            if (this.class_id != null) {
                data.class_id = this.class_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.class_id.length)
                writer.writeString(1, this.class_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuerySupplyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuerySupplyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.class_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuerySupplyRequest {
            return QuerySupplyRequest.deserialize(bytes);
        }
    }
    export class QuerySupplyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            amount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            amount?: number;
        }): QuerySupplyResponse {
            const message = new QuerySupplyResponse({});
            if (data.amount != null) {
                message.amount = data.amount;
            }
            return message;
        }
        toObject() {
            const data: {
                amount?: number;
            } = {};
            if (this.amount != null) {
                data.amount = this.amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.amount != 0)
                writer.writeUint64(1, this.amount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuerySupplyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuerySupplyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.amount = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuerySupplyResponse {
            return QuerySupplyResponse.deserialize(bytes);
        }
    }
    export class QueryNFTsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            class_id?: string;
            owner?: string;
            pagination?: dependency_1.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("class_id" in data && data.class_id != undefined) {
                    this.class_id = data.class_id;
                }
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get class_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set class_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.query.v1beta1.PageRequest, 3) as dependency_1.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_1.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            class_id?: string;
            owner?: string;
            pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }): QueryNFTsRequest {
            const message = new QueryNFTsRequest({});
            if (data.class_id != null) {
                message.class_id = data.class_id;
            }
            if (data.owner != null) {
                message.owner = data.owner;
            }
            if (data.pagination != null) {
                message.pagination = dependency_1.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                class_id?: string;
                owner?: string;
                pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.class_id != null) {
                data.class_id = this.class_id;
            }
            if (this.owner != null) {
                data.owner = this.owner;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.class_id.length)
                writer.writeString(1, this.class_id);
            if (this.owner.length)
                writer.writeString(2, this.owner);
            if (this.has_pagination)
                writer.writeMessage(3, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryNFTsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryNFTsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.class_id = reader.readString();
                        break;
                    case 2:
                        message.owner = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_1.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryNFTsRequest {
            return QueryNFTsRequest.deserialize(bytes);
        }
    }
    export class QueryNFTsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nfts?: dependency_3.cosmos.nft.v1beta1.NFT[];
            pagination?: dependency_1.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nfts" in data && data.nfts != undefined) {
                    this.nfts = data.nfts;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get nfts() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.cosmos.nft.v1beta1.NFT, 1) as dependency_3.cosmos.nft.v1beta1.NFT[];
        }
        set nfts(value: dependency_3.cosmos.nft.v1beta1.NFT[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_1.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_1.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            nfts?: ReturnType<typeof dependency_3.cosmos.nft.v1beta1.NFT.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }): QueryNFTsResponse {
            const message = new QueryNFTsResponse({});
            if (data.nfts != null) {
                message.nfts = data.nfts.map(item => dependency_3.cosmos.nft.v1beta1.NFT.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_1.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                nfts?: ReturnType<typeof dependency_3.cosmos.nft.v1beta1.NFT.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.nfts != null) {
                data.nfts = this.nfts.map((item: dependency_3.cosmos.nft.v1beta1.NFT) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nfts.length)
                writer.writeRepeatedMessage(1, this.nfts, (item: dependency_3.cosmos.nft.v1beta1.NFT) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryNFTsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryNFTsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.nfts, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.cosmos.nft.v1beta1.NFT.deserialize(reader), dependency_3.cosmos.nft.v1beta1.NFT));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_1.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryNFTsResponse {
            return QueryNFTsResponse.deserialize(bytes);
        }
    }
    export class QueryNFTRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            class_id?: string;
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("class_id" in data && data.class_id != undefined) {
                    this.class_id = data.class_id;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get class_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set class_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            class_id?: string;
            id?: string;
        }): QueryNFTRequest {
            const message = new QueryNFTRequest({});
            if (data.class_id != null) {
                message.class_id = data.class_id;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                class_id?: string;
                id?: string;
            } = {};
            if (this.class_id != null) {
                data.class_id = this.class_id;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.class_id.length)
                writer.writeString(1, this.class_id);
            if (this.id.length)
                writer.writeString(2, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryNFTRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryNFTRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.class_id = reader.readString();
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryNFTRequest {
            return QueryNFTRequest.deserialize(bytes);
        }
    }
    export class QueryNFTResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nft?: dependency_3.cosmos.nft.v1beta1.NFT;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nft" in data && data.nft != undefined) {
                    this.nft = data.nft;
                }
            }
        }
        get nft() {
            return pb_1.Message.getWrapperField(this, dependency_3.cosmos.nft.v1beta1.NFT, 1) as dependency_3.cosmos.nft.v1beta1.NFT;
        }
        set nft(value: dependency_3.cosmos.nft.v1beta1.NFT) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_nft() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            nft?: ReturnType<typeof dependency_3.cosmos.nft.v1beta1.NFT.prototype.toObject>;
        }): QueryNFTResponse {
            const message = new QueryNFTResponse({});
            if (data.nft != null) {
                message.nft = dependency_3.cosmos.nft.v1beta1.NFT.fromObject(data.nft);
            }
            return message;
        }
        toObject() {
            const data: {
                nft?: ReturnType<typeof dependency_3.cosmos.nft.v1beta1.NFT.prototype.toObject>;
            } = {};
            if (this.nft != null) {
                data.nft = this.nft.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_nft)
                writer.writeMessage(1, this.nft, () => this.nft.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryNFTResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryNFTResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.nft, () => message.nft = dependency_3.cosmos.nft.v1beta1.NFT.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryNFTResponse {
            return QueryNFTResponse.deserialize(bytes);
        }
    }
    export class QueryClassRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            class_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("class_id" in data && data.class_id != undefined) {
                    this.class_id = data.class_id;
                }
            }
        }
        get class_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set class_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            class_id?: string;
        }): QueryClassRequest {
            const message = new QueryClassRequest({});
            if (data.class_id != null) {
                message.class_id = data.class_id;
            }
            return message;
        }
        toObject() {
            const data: {
                class_id?: string;
            } = {};
            if (this.class_id != null) {
                data.class_id = this.class_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.class_id.length)
                writer.writeString(1, this.class_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryClassRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryClassRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.class_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryClassRequest {
            return QueryClassRequest.deserialize(bytes);
        }
    }
    export class QueryClassResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            class?: dependency_3.cosmos.nft.v1beta1.Class;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("class" in data && data.class != undefined) {
                    this.class = data.class;
                }
            }
        }
        get class() {
            return pb_1.Message.getWrapperField(this, dependency_3.cosmos.nft.v1beta1.Class, 1) as dependency_3.cosmos.nft.v1beta1.Class;
        }
        set class(value: dependency_3.cosmos.nft.v1beta1.Class) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_class() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            class?: ReturnType<typeof dependency_3.cosmos.nft.v1beta1.Class.prototype.toObject>;
        }): QueryClassResponse {
            const message = new QueryClassResponse({});
            if (data.class != null) {
                message.class = dependency_3.cosmos.nft.v1beta1.Class.fromObject(data.class);
            }
            return message;
        }
        toObject() {
            const data: {
                class?: ReturnType<typeof dependency_3.cosmos.nft.v1beta1.Class.prototype.toObject>;
            } = {};
            if (this.class != null) {
                data.class = this.class.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_class)
                writer.writeMessage(1, this.class, () => this.class.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryClassResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryClassResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.class, () => message.class = dependency_3.cosmos.nft.v1beta1.Class.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryClassResponse {
            return QueryClassResponse.deserialize(bytes);
        }
    }
    export class QueryClassesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pagination?: dependency_1.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.query.v1beta1.PageRequest, 1) as dependency_1.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_1.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }): QueryClassesRequest {
            const message = new QueryClassesRequest({});
            if (data.pagination != null) {
                message.pagination = dependency_1.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_pagination)
                writer.writeMessage(1, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryClassesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryClassesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_1.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryClassesRequest {
            return QueryClassesRequest.deserialize(bytes);
        }
    }
    export class QueryClassesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            classes?: dependency_3.cosmos.nft.v1beta1.Class[];
            pagination?: dependency_1.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("classes" in data && data.classes != undefined) {
                    this.classes = data.classes;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get classes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.cosmos.nft.v1beta1.Class, 1) as dependency_3.cosmos.nft.v1beta1.Class[];
        }
        set classes(value: dependency_3.cosmos.nft.v1beta1.Class[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_1.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_1.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            classes?: ReturnType<typeof dependency_3.cosmos.nft.v1beta1.Class.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }): QueryClassesResponse {
            const message = new QueryClassesResponse({});
            if (data.classes != null) {
                message.classes = data.classes.map(item => dependency_3.cosmos.nft.v1beta1.Class.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_1.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                classes?: ReturnType<typeof dependency_3.cosmos.nft.v1beta1.Class.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.classes != null) {
                data.classes = this.classes.map((item: dependency_3.cosmos.nft.v1beta1.Class) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.classes.length)
                writer.writeRepeatedMessage(1, this.classes, (item: dependency_3.cosmos.nft.v1beta1.Class) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryClassesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryClassesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.classes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.cosmos.nft.v1beta1.Class.deserialize(reader), dependency_3.cosmos.nft.v1beta1.Class));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_1.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryClassesResponse {
            return QueryClassesResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedQueryService {
        static definition = {
            Balance: {
                path: "/cosmos.nft.v1beta1.Query/Balance",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryBalanceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryBalanceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryBalanceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryBalanceResponse.deserialize(new Uint8Array(bytes))
            },
            Owner: {
                path: "/cosmos.nft.v1beta1.Query/Owner",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryOwnerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryOwnerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryOwnerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryOwnerResponse.deserialize(new Uint8Array(bytes))
            },
            Supply: {
                path: "/cosmos.nft.v1beta1.Query/Supply",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuerySupplyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuerySupplyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QuerySupplyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QuerySupplyResponse.deserialize(new Uint8Array(bytes))
            },
            NFTs: {
                path: "/cosmos.nft.v1beta1.Query/NFTs",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryNFTsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryNFTsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryNFTsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryNFTsResponse.deserialize(new Uint8Array(bytes))
            },
            NFT: {
                path: "/cosmos.nft.v1beta1.Query/NFT",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryNFTRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryNFTRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryNFTResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryNFTResponse.deserialize(new Uint8Array(bytes))
            },
            Class: {
                path: "/cosmos.nft.v1beta1.Query/Class",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryClassRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryClassRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryClassResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryClassResponse.deserialize(new Uint8Array(bytes))
            },
            Classes: {
                path: "/cosmos.nft.v1beta1.Query/Classes",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryClassesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryClassesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryClassesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryClassesResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Balance(call: grpc_1.ServerUnaryCall<QueryBalanceRequest, QueryBalanceResponse>, callback: grpc_1.sendUnaryData<QueryBalanceResponse>): void;
        abstract Owner(call: grpc_1.ServerUnaryCall<QueryOwnerRequest, QueryOwnerResponse>, callback: grpc_1.sendUnaryData<QueryOwnerResponse>): void;
        abstract Supply(call: grpc_1.ServerUnaryCall<QuerySupplyRequest, QuerySupplyResponse>, callback: grpc_1.sendUnaryData<QuerySupplyResponse>): void;
        abstract NFTs(call: grpc_1.ServerUnaryCall<QueryNFTsRequest, QueryNFTsResponse>, callback: grpc_1.sendUnaryData<QueryNFTsResponse>): void;
        abstract NFT(call: grpc_1.ServerUnaryCall<QueryNFTRequest, QueryNFTResponse>, callback: grpc_1.sendUnaryData<QueryNFTResponse>): void;
        abstract Class(call: grpc_1.ServerUnaryCall<QueryClassRequest, QueryClassResponse>, callback: grpc_1.sendUnaryData<QueryClassResponse>): void;
        abstract Classes(call: grpc_1.ServerUnaryCall<QueryClassesRequest, QueryClassesResponse>, callback: grpc_1.sendUnaryData<QueryClassesResponse>): void;
    }
    export class QueryClient extends grpc_1.makeGenericClientConstructor(UnimplementedQueryService.definition, "Query", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Balance: GrpcUnaryServiceInterface<QueryBalanceRequest, QueryBalanceResponse> = (message: QueryBalanceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryBalanceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryBalanceResponse>, callback?: grpc_1.requestCallback<QueryBalanceResponse>): grpc_1.ClientUnaryCall => {
            return super.Balance(message, metadata, options, callback);
        };
        Owner: GrpcUnaryServiceInterface<QueryOwnerRequest, QueryOwnerResponse> = (message: QueryOwnerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryOwnerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryOwnerResponse>, callback?: grpc_1.requestCallback<QueryOwnerResponse>): grpc_1.ClientUnaryCall => {
            return super.Owner(message, metadata, options, callback);
        };
        Supply: GrpcUnaryServiceInterface<QuerySupplyRequest, QuerySupplyResponse> = (message: QuerySupplyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QuerySupplyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QuerySupplyResponse>, callback?: grpc_1.requestCallback<QuerySupplyResponse>): grpc_1.ClientUnaryCall => {
            return super.Supply(message, metadata, options, callback);
        };
        NFTs: GrpcUnaryServiceInterface<QueryNFTsRequest, QueryNFTsResponse> = (message: QueryNFTsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryNFTsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryNFTsResponse>, callback?: grpc_1.requestCallback<QueryNFTsResponse>): grpc_1.ClientUnaryCall => {
            return super.NFTs(message, metadata, options, callback);
        };
        NFT: GrpcUnaryServiceInterface<QueryNFTRequest, QueryNFTResponse> = (message: QueryNFTRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryNFTResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryNFTResponse>, callback?: grpc_1.requestCallback<QueryNFTResponse>): grpc_1.ClientUnaryCall => {
            return super.NFT(message, metadata, options, callback);
        };
        Class: GrpcUnaryServiceInterface<QueryClassRequest, QueryClassResponse> = (message: QueryClassRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryClassResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryClassResponse>, callback?: grpc_1.requestCallback<QueryClassResponse>): grpc_1.ClientUnaryCall => {
            return super.Class(message, metadata, options, callback);
        };
        Classes: GrpcUnaryServiceInterface<QueryClassesRequest, QueryClassesResponse> = (message: QueryClassesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryClassesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryClassesResponse>, callback?: grpc_1.requestCallback<QueryClassesResponse>): grpc_1.ClientUnaryCall => {
            return super.Classes(message, metadata, options, callback);
        };
    }
}
