/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cosmos/store/v1beta1/listening.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../tendermint/abci/types";
import * as pb_1 from "google-protobuf";
export namespace cosmos.store.v1beta1 {
    export class StoreKVPair extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            store_key?: string;
            delete?: boolean;
            key?: Uint8Array;
            value?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("store_key" in data && data.store_key != undefined) {
                    this.store_key = data.store_key;
                }
                if ("delete" in data && data.delete != undefined) {
                    this.delete = data.delete;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get store_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set store_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get delete() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set delete(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set key(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            store_key?: string;
            delete?: boolean;
            key?: Uint8Array;
            value?: Uint8Array;
        }): StoreKVPair {
            const message = new StoreKVPair({});
            if (data.store_key != null) {
                message.store_key = data.store_key;
            }
            if (data.delete != null) {
                message.delete = data.delete;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                store_key?: string;
                delete?: boolean;
                key?: Uint8Array;
                value?: Uint8Array;
            } = {};
            if (this.store_key != null) {
                data.store_key = this.store_key;
            }
            if (this.delete != null) {
                data.delete = this.delete;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.store_key.length)
                writer.writeString(1, this.store_key);
            if (this.delete != false)
                writer.writeBool(2, this.delete);
            if (this.key.length)
                writer.writeBytes(3, this.key);
            if (this.value.length)
                writer.writeBytes(4, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StoreKVPair {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StoreKVPair();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.store_key = reader.readString();
                        break;
                    case 2:
                        message.delete = reader.readBool();
                        break;
                    case 3:
                        message.key = reader.readBytes();
                        break;
                    case 4:
                        message.value = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StoreKVPair {
            return StoreKVPair.deserialize(bytes);
        }
    }
    export class BlockMetadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            response_commit?: dependency_1.tendermint.abci.ResponseCommit;
            request_finalize_block?: dependency_1.tendermint.abci.RequestFinalizeBlock;
            response_finalize_block?: dependency_1.tendermint.abci.ResponseFinalizeBlock;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("response_commit" in data && data.response_commit != undefined) {
                    this.response_commit = data.response_commit;
                }
                if ("request_finalize_block" in data && data.request_finalize_block != undefined) {
                    this.request_finalize_block = data.request_finalize_block;
                }
                if ("response_finalize_block" in data && data.response_finalize_block != undefined) {
                    this.response_finalize_block = data.response_finalize_block;
                }
            }
        }
        get response_commit() {
            return pb_1.Message.getWrapperField(this, dependency_1.tendermint.abci.ResponseCommit, 6) as dependency_1.tendermint.abci.ResponseCommit;
        }
        set response_commit(value: dependency_1.tendermint.abci.ResponseCommit) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_response_commit() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get request_finalize_block() {
            return pb_1.Message.getWrapperField(this, dependency_1.tendermint.abci.RequestFinalizeBlock, 7) as dependency_1.tendermint.abci.RequestFinalizeBlock;
        }
        set request_finalize_block(value: dependency_1.tendermint.abci.RequestFinalizeBlock) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_request_finalize_block() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get response_finalize_block() {
            return pb_1.Message.getWrapperField(this, dependency_1.tendermint.abci.ResponseFinalizeBlock, 8) as dependency_1.tendermint.abci.ResponseFinalizeBlock;
        }
        set response_finalize_block(value: dependency_1.tendermint.abci.ResponseFinalizeBlock) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_response_finalize_block() {
            return pb_1.Message.getField(this, 8) != null;
        }
        static fromObject(data: {
            response_commit?: ReturnType<typeof dependency_1.tendermint.abci.ResponseCommit.prototype.toObject>;
            request_finalize_block?: ReturnType<typeof dependency_1.tendermint.abci.RequestFinalizeBlock.prototype.toObject>;
            response_finalize_block?: ReturnType<typeof dependency_1.tendermint.abci.ResponseFinalizeBlock.prototype.toObject>;
        }): BlockMetadata {
            const message = new BlockMetadata({});
            if (data.response_commit != null) {
                message.response_commit = dependency_1.tendermint.abci.ResponseCommit.fromObject(data.response_commit);
            }
            if (data.request_finalize_block != null) {
                message.request_finalize_block = dependency_1.tendermint.abci.RequestFinalizeBlock.fromObject(data.request_finalize_block);
            }
            if (data.response_finalize_block != null) {
                message.response_finalize_block = dependency_1.tendermint.abci.ResponseFinalizeBlock.fromObject(data.response_finalize_block);
            }
            return message;
        }
        toObject() {
            const data: {
                response_commit?: ReturnType<typeof dependency_1.tendermint.abci.ResponseCommit.prototype.toObject>;
                request_finalize_block?: ReturnType<typeof dependency_1.tendermint.abci.RequestFinalizeBlock.prototype.toObject>;
                response_finalize_block?: ReturnType<typeof dependency_1.tendermint.abci.ResponseFinalizeBlock.prototype.toObject>;
            } = {};
            if (this.response_commit != null) {
                data.response_commit = this.response_commit.toObject();
            }
            if (this.request_finalize_block != null) {
                data.request_finalize_block = this.request_finalize_block.toObject();
            }
            if (this.response_finalize_block != null) {
                data.response_finalize_block = this.response_finalize_block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_response_commit)
                writer.writeMessage(6, this.response_commit, () => this.response_commit.serialize(writer));
            if (this.has_request_finalize_block)
                writer.writeMessage(7, this.request_finalize_block, () => this.request_finalize_block.serialize(writer));
            if (this.has_response_finalize_block)
                writer.writeMessage(8, this.response_finalize_block, () => this.response_finalize_block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockMetadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockMetadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 6:
                        reader.readMessage(message.response_commit, () => message.response_commit = dependency_1.tendermint.abci.ResponseCommit.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.request_finalize_block, () => message.request_finalize_block = dependency_1.tendermint.abci.RequestFinalizeBlock.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.response_finalize_block, () => message.response_finalize_block = dependency_1.tendermint.abci.ResponseFinalizeBlock.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockMetadata {
            return BlockMetadata.deserialize(bytes);
        }
    }
}
