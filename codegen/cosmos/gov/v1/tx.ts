/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cosmos/gov/v1/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../base/v1beta1/coin";
import * as dependency_2 from "./gov";
import * as dependency_3 from "./../../../gogoproto/gogo";
import * as dependency_4 from "./../../../cosmos_proto/cosmos";
import * as dependency_5 from "./../../../google/protobuf/any";
import * as dependency_6 from "./../../msg/v1/msg";
import * as dependency_7 from "./../../../amino/amino";
import * as dependency_8 from "./../../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace cosmos.gov.v1 {
    export class MsgSubmitProposal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            messages?: dependency_5.google.protobuf.Any[];
            initial_deposit?: dependency_1.cosmos.base.v1beta1.Coin[];
            proposer?: string;
            metadata?: string;
            title?: string;
            summary?: string;
            expedited?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("messages" in data && data.messages != undefined) {
                    this.messages = data.messages;
                }
                if ("initial_deposit" in data && data.initial_deposit != undefined) {
                    this.initial_deposit = data.initial_deposit;
                }
                if ("proposer" in data && data.proposer != undefined) {
                    this.proposer = data.proposer;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("summary" in data && data.summary != undefined) {
                    this.summary = data.summary;
                }
                if ("expedited" in data && data.expedited != undefined) {
                    this.expedited = data.expedited;
                }
            }
        }
        get messages() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.google.protobuf.Any, 1) as dependency_5.google.protobuf.Any[];
        }
        set messages(value: dependency_5.google.protobuf.Any[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get initial_deposit() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 2) as dependency_1.cosmos.base.v1beta1.Coin[];
        }
        set initial_deposit(value: dependency_1.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get proposer() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set proposer(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set metadata(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get summary() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set summary(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get expedited() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set expedited(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            messages?: ReturnType<typeof dependency_5.google.protobuf.Any.prototype.toObject>[];
            initial_deposit?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            proposer?: string;
            metadata?: string;
            title?: string;
            summary?: string;
            expedited?: boolean;
        }): MsgSubmitProposal {
            const message = new MsgSubmitProposal({});
            if (data.messages != null) {
                message.messages = data.messages.map(item => dependency_5.google.protobuf.Any.fromObject(item));
            }
            if (data.initial_deposit != null) {
                message.initial_deposit = data.initial_deposit.map(item => dependency_1.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            if (data.proposer != null) {
                message.proposer = data.proposer;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.summary != null) {
                message.summary = data.summary;
            }
            if (data.expedited != null) {
                message.expedited = data.expedited;
            }
            return message;
        }
        toObject() {
            const data: {
                messages?: ReturnType<typeof dependency_5.google.protobuf.Any.prototype.toObject>[];
                initial_deposit?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>[];
                proposer?: string;
                metadata?: string;
                title?: string;
                summary?: string;
                expedited?: boolean;
            } = {};
            if (this.messages != null) {
                data.messages = this.messages.map((item: dependency_5.google.protobuf.Any) => item.toObject());
            }
            if (this.initial_deposit != null) {
                data.initial_deposit = this.initial_deposit.map((item: dependency_1.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            if (this.proposer != null) {
                data.proposer = this.proposer;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.summary != null) {
                data.summary = this.summary;
            }
            if (this.expedited != null) {
                data.expedited = this.expedited;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.messages.length)
                writer.writeRepeatedMessage(1, this.messages, (item: dependency_5.google.protobuf.Any) => item.serialize(writer));
            if (this.initial_deposit.length)
                writer.writeRepeatedMessage(2, this.initial_deposit, (item: dependency_1.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (this.proposer.length)
                writer.writeString(3, this.proposer);
            if (this.metadata.length)
                writer.writeString(4, this.metadata);
            if (this.title.length)
                writer.writeString(5, this.title);
            if (this.summary.length)
                writer.writeString(6, this.summary);
            if (this.expedited != false)
                writer.writeBool(7, this.expedited);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSubmitProposal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSubmitProposal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.messages, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.google.protobuf.Any.deserialize(reader), dependency_5.google.protobuf.Any));
                        break;
                    case 2:
                        reader.readMessage(message.initial_deposit, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_1.cosmos.base.v1beta1.Coin));
                        break;
                    case 3:
                        message.proposer = reader.readString();
                        break;
                    case 4:
                        message.metadata = reader.readString();
                        break;
                    case 5:
                        message.title = reader.readString();
                        break;
                    case 6:
                        message.summary = reader.readString();
                        break;
                    case 7:
                        message.expedited = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSubmitProposal {
            return MsgSubmitProposal.deserialize(bytes);
        }
    }
    export class MsgSubmitProposalResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proposal_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != undefined) {
                    this.proposal_id = data.proposal_id;
                }
            }
        }
        get proposal_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set proposal_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            proposal_id?: number;
        }): MsgSubmitProposalResponse {
            const message = new MsgSubmitProposalResponse({});
            if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
            }
            return message;
        }
        toObject() {
            const data: {
                proposal_id?: number;
            } = {};
            if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposal_id != 0)
                writer.writeUint64(1, this.proposal_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSubmitProposalResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSubmitProposalResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proposal_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSubmitProposalResponse {
            return MsgSubmitProposalResponse.deserialize(bytes);
        }
    }
    export class MsgExecLegacyContent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            content?: dependency_5.google.protobuf.Any;
            authority?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("authority" in data && data.authority != undefined) {
                    this.authority = data.authority;
                }
            }
        }
        get content() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Any, 1) as dependency_5.google.protobuf.Any;
        }
        set content(value: dependency_5.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_content() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get authority() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set authority(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            content?: ReturnType<typeof dependency_5.google.protobuf.Any.prototype.toObject>;
            authority?: string;
        }): MsgExecLegacyContent {
            const message = new MsgExecLegacyContent({});
            if (data.content != null) {
                message.content = dependency_5.google.protobuf.Any.fromObject(data.content);
            }
            if (data.authority != null) {
                message.authority = data.authority;
            }
            return message;
        }
        toObject() {
            const data: {
                content?: ReturnType<typeof dependency_5.google.protobuf.Any.prototype.toObject>;
                authority?: string;
            } = {};
            if (this.content != null) {
                data.content = this.content.toObject();
            }
            if (this.authority != null) {
                data.authority = this.authority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_content)
                writer.writeMessage(1, this.content, () => this.content.serialize(writer));
            if (this.authority.length)
                writer.writeString(2, this.authority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgExecLegacyContent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgExecLegacyContent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.content, () => message.content = dependency_5.google.protobuf.Any.deserialize(reader));
                        break;
                    case 2:
                        message.authority = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgExecLegacyContent {
            return MsgExecLegacyContent.deserialize(bytes);
        }
    }
    export class MsgExecLegacyContentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgExecLegacyContentResponse {
            const message = new MsgExecLegacyContentResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgExecLegacyContentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgExecLegacyContentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgExecLegacyContentResponse {
            return MsgExecLegacyContentResponse.deserialize(bytes);
        }
    }
    export class MsgVote extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proposal_id?: number;
            voter?: string;
            option?: dependency_2.cosmos.gov.v1.VoteOption;
            metadata?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != undefined) {
                    this.proposal_id = data.proposal_id;
                }
                if ("voter" in data && data.voter != undefined) {
                    this.voter = data.voter;
                }
                if ("option" in data && data.option != undefined) {
                    this.option = data.option;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get proposal_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set proposal_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get voter() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set voter(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get option() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_2.cosmos.gov.v1.VoteOption.VOTE_OPTION_UNSPECIFIED) as dependency_2.cosmos.gov.v1.VoteOption;
        }
        set option(value: dependency_2.cosmos.gov.v1.VoteOption) {
            pb_1.Message.setField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set metadata(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            proposal_id?: number;
            voter?: string;
            option?: dependency_2.cosmos.gov.v1.VoteOption;
            metadata?: string;
        }): MsgVote {
            const message = new MsgVote({});
            if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
            }
            if (data.voter != null) {
                message.voter = data.voter;
            }
            if (data.option != null) {
                message.option = data.option;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            return message;
        }
        toObject() {
            const data: {
                proposal_id?: number;
                voter?: string;
                option?: dependency_2.cosmos.gov.v1.VoteOption;
                metadata?: string;
            } = {};
            if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
            }
            if (this.voter != null) {
                data.voter = this.voter;
            }
            if (this.option != null) {
                data.option = this.option;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposal_id != 0)
                writer.writeUint64(1, this.proposal_id);
            if (this.voter.length)
                writer.writeString(2, this.voter);
            if (this.option != dependency_2.cosmos.gov.v1.VoteOption.VOTE_OPTION_UNSPECIFIED)
                writer.writeEnum(3, this.option);
            if (this.metadata.length)
                writer.writeString(4, this.metadata);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgVote {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgVote();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proposal_id = reader.readUint64();
                        break;
                    case 2:
                        message.voter = reader.readString();
                        break;
                    case 3:
                        message.option = reader.readEnum();
                        break;
                    case 4:
                        message.metadata = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgVote {
            return MsgVote.deserialize(bytes);
        }
    }
    export class MsgVoteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgVoteResponse {
            const message = new MsgVoteResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgVoteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgVoteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgVoteResponse {
            return MsgVoteResponse.deserialize(bytes);
        }
    }
    export class MsgVoteWeighted extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proposal_id?: number;
            voter?: string;
            options?: dependency_2.cosmos.gov.v1.WeightedVoteOption[];
            metadata?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != undefined) {
                    this.proposal_id = data.proposal_id;
                }
                if ("voter" in data && data.voter != undefined) {
                    this.voter = data.voter;
                }
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get proposal_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set proposal_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get voter() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set voter(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get options() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cosmos.gov.v1.WeightedVoteOption, 3) as dependency_2.cosmos.gov.v1.WeightedVoteOption[];
        }
        set options(value: dependency_2.cosmos.gov.v1.WeightedVoteOption[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set metadata(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            proposal_id?: number;
            voter?: string;
            options?: ReturnType<typeof dependency_2.cosmos.gov.v1.WeightedVoteOption.prototype.toObject>[];
            metadata?: string;
        }): MsgVoteWeighted {
            const message = new MsgVoteWeighted({});
            if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
            }
            if (data.voter != null) {
                message.voter = data.voter;
            }
            if (data.options != null) {
                message.options = data.options.map(item => dependency_2.cosmos.gov.v1.WeightedVoteOption.fromObject(item));
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            return message;
        }
        toObject() {
            const data: {
                proposal_id?: number;
                voter?: string;
                options?: ReturnType<typeof dependency_2.cosmos.gov.v1.WeightedVoteOption.prototype.toObject>[];
                metadata?: string;
            } = {};
            if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
            }
            if (this.voter != null) {
                data.voter = this.voter;
            }
            if (this.options != null) {
                data.options = this.options.map((item: dependency_2.cosmos.gov.v1.WeightedVoteOption) => item.toObject());
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposal_id != 0)
                writer.writeUint64(1, this.proposal_id);
            if (this.voter.length)
                writer.writeString(2, this.voter);
            if (this.options.length)
                writer.writeRepeatedMessage(3, this.options, (item: dependency_2.cosmos.gov.v1.WeightedVoteOption) => item.serialize(writer));
            if (this.metadata.length)
                writer.writeString(4, this.metadata);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgVoteWeighted {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgVoteWeighted();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proposal_id = reader.readUint64();
                        break;
                    case 2:
                        message.voter = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.options, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.cosmos.gov.v1.WeightedVoteOption.deserialize(reader), dependency_2.cosmos.gov.v1.WeightedVoteOption));
                        break;
                    case 4:
                        message.metadata = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgVoteWeighted {
            return MsgVoteWeighted.deserialize(bytes);
        }
    }
    export class MsgVoteWeightedResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgVoteWeightedResponse {
            const message = new MsgVoteWeightedResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgVoteWeightedResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgVoteWeightedResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgVoteWeightedResponse {
            return MsgVoteWeightedResponse.deserialize(bytes);
        }
    }
    export class MsgDeposit extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proposal_id?: number;
            depositor?: string;
            amount?: dependency_1.cosmos.base.v1beta1.Coin[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != undefined) {
                    this.proposal_id = data.proposal_id;
                }
                if ("depositor" in data && data.depositor != undefined) {
                    this.depositor = data.depositor;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get proposal_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set proposal_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get depositor() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set depositor(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get amount() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 3) as dependency_1.cosmos.base.v1beta1.Coin[];
        }
        set amount(value: dependency_1.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            proposal_id?: number;
            depositor?: string;
            amount?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>[];
        }): MsgDeposit {
            const message = new MsgDeposit({});
            if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
            }
            if (data.depositor != null) {
                message.depositor = data.depositor;
            }
            if (data.amount != null) {
                message.amount = data.amount.map(item => dependency_1.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                proposal_id?: number;
                depositor?: string;
                amount?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            } = {};
            if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
            }
            if (this.depositor != null) {
                data.depositor = this.depositor;
            }
            if (this.amount != null) {
                data.amount = this.amount.map((item: dependency_1.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposal_id != 0)
                writer.writeUint64(1, this.proposal_id);
            if (this.depositor.length)
                writer.writeString(2, this.depositor);
            if (this.amount.length)
                writer.writeRepeatedMessage(3, this.amount, (item: dependency_1.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgDeposit {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgDeposit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proposal_id = reader.readUint64();
                        break;
                    case 2:
                        message.depositor = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.amount, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_1.cosmos.base.v1beta1.Coin));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgDeposit {
            return MsgDeposit.deserialize(bytes);
        }
    }
    export class MsgDepositResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgDepositResponse {
            const message = new MsgDepositResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgDepositResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgDepositResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgDepositResponse {
            return MsgDepositResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateParams extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            authority?: string;
            params?: dependency_2.cosmos.gov.v1.Params;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("authority" in data && data.authority != undefined) {
                    this.authority = data.authority;
                }
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
            }
        }
        get authority() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set authority(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get params() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.gov.v1.Params, 2) as dependency_2.cosmos.gov.v1.Params;
        }
        set params(value: dependency_2.cosmos.gov.v1.Params) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_params() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            authority?: string;
            params?: ReturnType<typeof dependency_2.cosmos.gov.v1.Params.prototype.toObject>;
        }): MsgUpdateParams {
            const message = new MsgUpdateParams({});
            if (data.authority != null) {
                message.authority = data.authority;
            }
            if (data.params != null) {
                message.params = dependency_2.cosmos.gov.v1.Params.fromObject(data.params);
            }
            return message;
        }
        toObject() {
            const data: {
                authority?: string;
                params?: ReturnType<typeof dependency_2.cosmos.gov.v1.Params.prototype.toObject>;
            } = {};
            if (this.authority != null) {
                data.authority = this.authority;
            }
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.authority.length)
                writer.writeString(1, this.authority);
            if (this.has_params)
                writer.writeMessage(2, this.params, () => this.params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateParams {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateParams();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.authority = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.params, () => message.params = dependency_2.cosmos.gov.v1.Params.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateParams {
            return MsgUpdateParams.deserialize(bytes);
        }
    }
    export class MsgUpdateParamsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateParamsResponse {
            const message = new MsgUpdateParamsResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateParamsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateParamsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateParamsResponse {
            return MsgUpdateParamsResponse.deserialize(bytes);
        }
    }
    export class MsgCancelProposal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proposal_id?: number;
            proposer?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != undefined) {
                    this.proposal_id = data.proposal_id;
                }
                if ("proposer" in data && data.proposer != undefined) {
                    this.proposer = data.proposer;
                }
            }
        }
        get proposal_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set proposal_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get proposer() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set proposer(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            proposal_id?: number;
            proposer?: string;
        }): MsgCancelProposal {
            const message = new MsgCancelProposal({});
            if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
            }
            if (data.proposer != null) {
                message.proposer = data.proposer;
            }
            return message;
        }
        toObject() {
            const data: {
                proposal_id?: number;
                proposer?: string;
            } = {};
            if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
            }
            if (this.proposer != null) {
                data.proposer = this.proposer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposal_id != 0)
                writer.writeUint64(1, this.proposal_id);
            if (this.proposer.length)
                writer.writeString(2, this.proposer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCancelProposal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCancelProposal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proposal_id = reader.readUint64();
                        break;
                    case 2:
                        message.proposer = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCancelProposal {
            return MsgCancelProposal.deserialize(bytes);
        }
    }
    export class MsgCancelProposalResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proposal_id?: number;
            canceled_time?: dependency_8.google.protobuf.Timestamp;
            canceled_height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != undefined) {
                    this.proposal_id = data.proposal_id;
                }
                if ("canceled_time" in data && data.canceled_time != undefined) {
                    this.canceled_time = data.canceled_time;
                }
                if ("canceled_height" in data && data.canceled_height != undefined) {
                    this.canceled_height = data.canceled_height;
                }
            }
        }
        get proposal_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set proposal_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get canceled_time() {
            return pb_1.Message.getWrapperField(this, dependency_8.google.protobuf.Timestamp, 2) as dependency_8.google.protobuf.Timestamp;
        }
        set canceled_time(value: dependency_8.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_canceled_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get canceled_height() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set canceled_height(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            proposal_id?: number;
            canceled_time?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
            canceled_height?: number;
        }): MsgCancelProposalResponse {
            const message = new MsgCancelProposalResponse({});
            if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
            }
            if (data.canceled_time != null) {
                message.canceled_time = dependency_8.google.protobuf.Timestamp.fromObject(data.canceled_time);
            }
            if (data.canceled_height != null) {
                message.canceled_height = data.canceled_height;
            }
            return message;
        }
        toObject() {
            const data: {
                proposal_id?: number;
                canceled_time?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                canceled_height?: number;
            } = {};
            if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
            }
            if (this.canceled_time != null) {
                data.canceled_time = this.canceled_time.toObject();
            }
            if (this.canceled_height != null) {
                data.canceled_height = this.canceled_height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proposal_id != 0)
                writer.writeUint64(1, this.proposal_id);
            if (this.has_canceled_time)
                writer.writeMessage(2, this.canceled_time, () => this.canceled_time.serialize(writer));
            if (this.canceled_height != 0)
                writer.writeUint64(3, this.canceled_height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCancelProposalResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCancelProposalResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proposal_id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.canceled_time, () => message.canceled_time = dependency_8.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        message.canceled_height = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCancelProposalResponse {
            return MsgCancelProposalResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedMsgService {
        static definition = {
            SubmitProposal: {
                path: "/cosmos.gov.v1.Msg/SubmitProposal",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgSubmitProposal) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgSubmitProposal.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgSubmitProposalResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgSubmitProposalResponse.deserialize(new Uint8Array(bytes))
            },
            ExecLegacyContent: {
                path: "/cosmos.gov.v1.Msg/ExecLegacyContent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgExecLegacyContent) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgExecLegacyContent.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgExecLegacyContentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgExecLegacyContentResponse.deserialize(new Uint8Array(bytes))
            },
            Vote: {
                path: "/cosmos.gov.v1.Msg/Vote",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgVote) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgVote.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgVoteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgVoteResponse.deserialize(new Uint8Array(bytes))
            },
            VoteWeighted: {
                path: "/cosmos.gov.v1.Msg/VoteWeighted",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgVoteWeighted) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgVoteWeighted.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgVoteWeightedResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgVoteWeightedResponse.deserialize(new Uint8Array(bytes))
            },
            Deposit: {
                path: "/cosmos.gov.v1.Msg/Deposit",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgDeposit) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgDeposit.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgDepositResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgDepositResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateParams: {
                path: "/cosmos.gov.v1.Msg/UpdateParams",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgUpdateParams) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgUpdateParams.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgUpdateParamsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgUpdateParamsResponse.deserialize(new Uint8Array(bytes))
            },
            CancelProposal: {
                path: "/cosmos.gov.v1.Msg/CancelProposal",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgCancelProposal) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgCancelProposal.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgCancelProposalResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgCancelProposalResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract SubmitProposal(call: grpc_1.ServerUnaryCall<MsgSubmitProposal, MsgSubmitProposalResponse>, callback: grpc_1.sendUnaryData<MsgSubmitProposalResponse>): void;
        abstract ExecLegacyContent(call: grpc_1.ServerUnaryCall<MsgExecLegacyContent, MsgExecLegacyContentResponse>, callback: grpc_1.sendUnaryData<MsgExecLegacyContentResponse>): void;
        abstract Vote(call: grpc_1.ServerUnaryCall<MsgVote, MsgVoteResponse>, callback: grpc_1.sendUnaryData<MsgVoteResponse>): void;
        abstract VoteWeighted(call: grpc_1.ServerUnaryCall<MsgVoteWeighted, MsgVoteWeightedResponse>, callback: grpc_1.sendUnaryData<MsgVoteWeightedResponse>): void;
        abstract Deposit(call: grpc_1.ServerUnaryCall<MsgDeposit, MsgDepositResponse>, callback: grpc_1.sendUnaryData<MsgDepositResponse>): void;
        abstract UpdateParams(call: grpc_1.ServerUnaryCall<MsgUpdateParams, MsgUpdateParamsResponse>, callback: grpc_1.sendUnaryData<MsgUpdateParamsResponse>): void;
        abstract CancelProposal(call: grpc_1.ServerUnaryCall<MsgCancelProposal, MsgCancelProposalResponse>, callback: grpc_1.sendUnaryData<MsgCancelProposalResponse>): void;
    }
    export class MsgClient extends grpc_1.makeGenericClientConstructor(UnimplementedMsgService.definition, "Msg", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        SubmitProposal: GrpcUnaryServiceInterface<MsgSubmitProposal, MsgSubmitProposalResponse> = (message: MsgSubmitProposal, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgSubmitProposalResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgSubmitProposalResponse>, callback?: grpc_1.requestCallback<MsgSubmitProposalResponse>): grpc_1.ClientUnaryCall => {
            return super.SubmitProposal(message, metadata, options, callback);
        };
        ExecLegacyContent: GrpcUnaryServiceInterface<MsgExecLegacyContent, MsgExecLegacyContentResponse> = (message: MsgExecLegacyContent, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgExecLegacyContentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgExecLegacyContentResponse>, callback?: grpc_1.requestCallback<MsgExecLegacyContentResponse>): grpc_1.ClientUnaryCall => {
            return super.ExecLegacyContent(message, metadata, options, callback);
        };
        Vote: GrpcUnaryServiceInterface<MsgVote, MsgVoteResponse> = (message: MsgVote, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgVoteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgVoteResponse>, callback?: grpc_1.requestCallback<MsgVoteResponse>): grpc_1.ClientUnaryCall => {
            return super.Vote(message, metadata, options, callback);
        };
        VoteWeighted: GrpcUnaryServiceInterface<MsgVoteWeighted, MsgVoteWeightedResponse> = (message: MsgVoteWeighted, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgVoteWeightedResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgVoteWeightedResponse>, callback?: grpc_1.requestCallback<MsgVoteWeightedResponse>): grpc_1.ClientUnaryCall => {
            return super.VoteWeighted(message, metadata, options, callback);
        };
        Deposit: GrpcUnaryServiceInterface<MsgDeposit, MsgDepositResponse> = (message: MsgDeposit, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgDepositResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgDepositResponse>, callback?: grpc_1.requestCallback<MsgDepositResponse>): grpc_1.ClientUnaryCall => {
            return super.Deposit(message, metadata, options, callback);
        };
        UpdateParams: GrpcUnaryServiceInterface<MsgUpdateParams, MsgUpdateParamsResponse> = (message: MsgUpdateParams, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateParamsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateParamsResponse>, callback?: grpc_1.requestCallback<MsgUpdateParamsResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateParams(message, metadata, options, callback);
        };
        CancelProposal: GrpcUnaryServiceInterface<MsgCancelProposal, MsgCancelProposalResponse> = (message: MsgCancelProposal, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgCancelProposalResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgCancelProposalResponse>, callback?: grpc_1.requestCallback<MsgCancelProposalResponse>): grpc_1.ClientUnaryCall => {
            return super.CancelProposal(message, metadata, options, callback);
        };
    }
}
