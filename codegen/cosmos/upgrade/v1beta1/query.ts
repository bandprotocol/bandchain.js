/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cosmos/upgrade/v1beta1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../google/api/annotations";
import * as dependency_2 from "./upgrade";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace cosmos.upgrade.v1beta1 {
    export class QueryCurrentPlanRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryCurrentPlanRequest {
            const message = new QueryCurrentPlanRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCurrentPlanRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCurrentPlanRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCurrentPlanRequest {
            return QueryCurrentPlanRequest.deserialize(bytes);
        }
    }
    export class QueryCurrentPlanResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            plan?: dependency_2.cosmos.upgrade.v1beta1.Plan;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("plan" in data && data.plan != undefined) {
                    this.plan = data.plan;
                }
            }
        }
        get plan() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.upgrade.v1beta1.Plan, 1) as dependency_2.cosmos.upgrade.v1beta1.Plan;
        }
        set plan(value: dependency_2.cosmos.upgrade.v1beta1.Plan) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_plan() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            plan?: ReturnType<typeof dependency_2.cosmos.upgrade.v1beta1.Plan.prototype.toObject>;
        }): QueryCurrentPlanResponse {
            const message = new QueryCurrentPlanResponse({});
            if (data.plan != null) {
                message.plan = dependency_2.cosmos.upgrade.v1beta1.Plan.fromObject(data.plan);
            }
            return message;
        }
        toObject() {
            const data: {
                plan?: ReturnType<typeof dependency_2.cosmos.upgrade.v1beta1.Plan.prototype.toObject>;
            } = {};
            if (this.plan != null) {
                data.plan = this.plan.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_plan)
                writer.writeMessage(1, this.plan, () => this.plan.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCurrentPlanResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCurrentPlanResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.plan, () => message.plan = dependency_2.cosmos.upgrade.v1beta1.Plan.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCurrentPlanResponse {
            return QueryCurrentPlanResponse.deserialize(bytes);
        }
    }
    export class QueryAppliedPlanRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): QueryAppliedPlanRequest {
            const message = new QueryAppliedPlanRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAppliedPlanRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAppliedPlanRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAppliedPlanRequest {
            return QueryAppliedPlanRequest.deserialize(bytes);
        }
    }
    export class QueryAppliedPlanResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            height?: number;
        }): QueryAppliedPlanResponse {
            const message = new QueryAppliedPlanResponse({});
            if (data.height != null) {
                message.height = data.height;
            }
            return message;
        }
        toObject() {
            const data: {
                height?: number;
            } = {};
            if (this.height != null) {
                data.height = this.height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height != 0)
                writer.writeInt64(1, this.height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAppliedPlanResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAppliedPlanResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.height = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAppliedPlanResponse {
            return QueryAppliedPlanResponse.deserialize(bytes);
        }
    }
    /** @deprecated*/
    export class QueryUpgradedConsensusStateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            last_height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("last_height" in data && data.last_height != undefined) {
                    this.last_height = data.last_height;
                }
            }
        }
        get last_height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set last_height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            last_height?: number;
        }): QueryUpgradedConsensusStateRequest {
            const message = new QueryUpgradedConsensusStateRequest({});
            if (data.last_height != null) {
                message.last_height = data.last_height;
            }
            return message;
        }
        toObject() {
            const data: {
                last_height?: number;
            } = {};
            if (this.last_height != null) {
                data.last_height = this.last_height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.last_height != 0)
                writer.writeInt64(1, this.last_height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryUpgradedConsensusStateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryUpgradedConsensusStateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.last_height = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryUpgradedConsensusStateRequest {
            return QueryUpgradedConsensusStateRequest.deserialize(bytes);
        }
    }
    /** @deprecated*/
    export class QueryUpgradedConsensusStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            upgraded_consensus_state?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("upgraded_consensus_state" in data && data.upgraded_consensus_state != undefined) {
                    this.upgraded_consensus_state = data.upgraded_consensus_state;
                }
            }
        }
        get upgraded_consensus_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set upgraded_consensus_state(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            upgraded_consensus_state?: Uint8Array;
        }): QueryUpgradedConsensusStateResponse {
            const message = new QueryUpgradedConsensusStateResponse({});
            if (data.upgraded_consensus_state != null) {
                message.upgraded_consensus_state = data.upgraded_consensus_state;
            }
            return message;
        }
        toObject() {
            const data: {
                upgraded_consensus_state?: Uint8Array;
            } = {};
            if (this.upgraded_consensus_state != null) {
                data.upgraded_consensus_state = this.upgraded_consensus_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.upgraded_consensus_state.length)
                writer.writeBytes(2, this.upgraded_consensus_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryUpgradedConsensusStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryUpgradedConsensusStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.upgraded_consensus_state = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryUpgradedConsensusStateResponse {
            return QueryUpgradedConsensusStateResponse.deserialize(bytes);
        }
    }
    export class QueryModuleVersionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            module_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module_name" in data && data.module_name != undefined) {
                    this.module_name = data.module_name;
                }
            }
        }
        get module_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set module_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            module_name?: string;
        }): QueryModuleVersionsRequest {
            const message = new QueryModuleVersionsRequest({});
            if (data.module_name != null) {
                message.module_name = data.module_name;
            }
            return message;
        }
        toObject() {
            const data: {
                module_name?: string;
            } = {};
            if (this.module_name != null) {
                data.module_name = this.module_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.module_name.length)
                writer.writeString(1, this.module_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryModuleVersionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryModuleVersionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.module_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryModuleVersionsRequest {
            return QueryModuleVersionsRequest.deserialize(bytes);
        }
    }
    export class QueryModuleVersionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            module_versions?: dependency_2.cosmos.upgrade.v1beta1.ModuleVersion[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module_versions" in data && data.module_versions != undefined) {
                    this.module_versions = data.module_versions;
                }
            }
        }
        get module_versions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cosmos.upgrade.v1beta1.ModuleVersion, 1) as dependency_2.cosmos.upgrade.v1beta1.ModuleVersion[];
        }
        set module_versions(value: dependency_2.cosmos.upgrade.v1beta1.ModuleVersion[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            module_versions?: ReturnType<typeof dependency_2.cosmos.upgrade.v1beta1.ModuleVersion.prototype.toObject>[];
        }): QueryModuleVersionsResponse {
            const message = new QueryModuleVersionsResponse({});
            if (data.module_versions != null) {
                message.module_versions = data.module_versions.map(item => dependency_2.cosmos.upgrade.v1beta1.ModuleVersion.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                module_versions?: ReturnType<typeof dependency_2.cosmos.upgrade.v1beta1.ModuleVersion.prototype.toObject>[];
            } = {};
            if (this.module_versions != null) {
                data.module_versions = this.module_versions.map((item: dependency_2.cosmos.upgrade.v1beta1.ModuleVersion) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.module_versions.length)
                writer.writeRepeatedMessage(1, this.module_versions, (item: dependency_2.cosmos.upgrade.v1beta1.ModuleVersion) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryModuleVersionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryModuleVersionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.module_versions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.cosmos.upgrade.v1beta1.ModuleVersion.deserialize(reader), dependency_2.cosmos.upgrade.v1beta1.ModuleVersion));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryModuleVersionsResponse {
            return QueryModuleVersionsResponse.deserialize(bytes);
        }
    }
    export class QueryAuthorityRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryAuthorityRequest {
            const message = new QueryAuthorityRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAuthorityRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAuthorityRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAuthorityRequest {
            return QueryAuthorityRequest.deserialize(bytes);
        }
    }
    export class QueryAuthorityResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            address?: string;
        }): QueryAuthorityResponse {
            const message = new QueryAuthorityResponse({});
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAuthorityResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAuthorityResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAuthorityResponse {
            return QueryAuthorityResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedQueryService {
        static definition = {
            CurrentPlan: {
                path: "/cosmos.upgrade.v1beta1.Query/CurrentPlan",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryCurrentPlanRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryCurrentPlanRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryCurrentPlanResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryCurrentPlanResponse.deserialize(new Uint8Array(bytes))
            },
            AppliedPlan: {
                path: "/cosmos.upgrade.v1beta1.Query/AppliedPlan",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryAppliedPlanRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryAppliedPlanRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryAppliedPlanResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryAppliedPlanResponse.deserialize(new Uint8Array(bytes))
            },
            UpgradedConsensusState: {
                path: "/cosmos.upgrade.v1beta1.Query/UpgradedConsensusState",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryUpgradedConsensusStateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryUpgradedConsensusStateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryUpgradedConsensusStateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryUpgradedConsensusStateResponse.deserialize(new Uint8Array(bytes))
            },
            ModuleVersions: {
                path: "/cosmos.upgrade.v1beta1.Query/ModuleVersions",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryModuleVersionsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryModuleVersionsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryModuleVersionsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryModuleVersionsResponse.deserialize(new Uint8Array(bytes))
            },
            Authority: {
                path: "/cosmos.upgrade.v1beta1.Query/Authority",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryAuthorityRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryAuthorityRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryAuthorityResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryAuthorityResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CurrentPlan(call: grpc_1.ServerUnaryCall<QueryCurrentPlanRequest, QueryCurrentPlanResponse>, callback: grpc_1.sendUnaryData<QueryCurrentPlanResponse>): void;
        abstract AppliedPlan(call: grpc_1.ServerUnaryCall<QueryAppliedPlanRequest, QueryAppliedPlanResponse>, callback: grpc_1.sendUnaryData<QueryAppliedPlanResponse>): void;
        abstract UpgradedConsensusState(call: grpc_1.ServerUnaryCall<QueryUpgradedConsensusStateRequest, QueryUpgradedConsensusStateResponse>, callback: grpc_1.sendUnaryData<QueryUpgradedConsensusStateResponse>): void;
        abstract ModuleVersions(call: grpc_1.ServerUnaryCall<QueryModuleVersionsRequest, QueryModuleVersionsResponse>, callback: grpc_1.sendUnaryData<QueryModuleVersionsResponse>): void;
        abstract Authority(call: grpc_1.ServerUnaryCall<QueryAuthorityRequest, QueryAuthorityResponse>, callback: grpc_1.sendUnaryData<QueryAuthorityResponse>): void;
    }
    export class QueryClient extends grpc_1.makeGenericClientConstructor(UnimplementedQueryService.definition, "Query", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CurrentPlan: GrpcUnaryServiceInterface<QueryCurrentPlanRequest, QueryCurrentPlanResponse> = (message: QueryCurrentPlanRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryCurrentPlanResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryCurrentPlanResponse>, callback?: grpc_1.requestCallback<QueryCurrentPlanResponse>): grpc_1.ClientUnaryCall => {
            return super.CurrentPlan(message, metadata, options, callback);
        };
        AppliedPlan: GrpcUnaryServiceInterface<QueryAppliedPlanRequest, QueryAppliedPlanResponse> = (message: QueryAppliedPlanRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryAppliedPlanResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryAppliedPlanResponse>, callback?: grpc_1.requestCallback<QueryAppliedPlanResponse>): grpc_1.ClientUnaryCall => {
            return super.AppliedPlan(message, metadata, options, callback);
        };
        /** @deprecated*/
        UpgradedConsensusState: GrpcUnaryServiceInterface<QueryUpgradedConsensusStateRequest, QueryUpgradedConsensusStateResponse> = (message: QueryUpgradedConsensusStateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryUpgradedConsensusStateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryUpgradedConsensusStateResponse>, callback?: grpc_1.requestCallback<QueryUpgradedConsensusStateResponse>): grpc_1.ClientUnaryCall => {
            return super.UpgradedConsensusState(message, metadata, options, callback);
        };
        ModuleVersions: GrpcUnaryServiceInterface<QueryModuleVersionsRequest, QueryModuleVersionsResponse> = (message: QueryModuleVersionsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryModuleVersionsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryModuleVersionsResponse>, callback?: grpc_1.requestCallback<QueryModuleVersionsResponse>): grpc_1.ClientUnaryCall => {
            return super.ModuleVersions(message, metadata, options, callback);
        };
        Authority: GrpcUnaryServiceInterface<QueryAuthorityRequest, QueryAuthorityResponse> = (message: QueryAuthorityRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryAuthorityResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryAuthorityResponse>, callback?: grpc_1.requestCallback<QueryAuthorityResponse>): grpc_1.ClientUnaryCall => {
            return super.Authority(message, metadata, options, callback);
        };
    }
}
