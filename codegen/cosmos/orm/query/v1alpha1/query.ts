/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cosmos/orm/query/v1alpha1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../google/protobuf/timestamp";
import * as dependency_2 from "./../../../../google/protobuf/duration";
import * as dependency_3 from "./../../../../google/protobuf/any";
import * as dependency_4 from "./../../../base/query/v1beta1/pagination";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace cosmos.orm.query.v1alpha1 {
    export class GetRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message_name?: string;
            index?: string;
            values?: IndexValue[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message_name" in data && data.message_name != undefined) {
                    this.message_name = data.message_name;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
            }
        }
        get message_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set index(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get values() {
            return pb_1.Message.getRepeatedWrapperField(this, IndexValue, 3) as IndexValue[];
        }
        set values(value: IndexValue[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            message_name?: string;
            index?: string;
            values?: ReturnType<typeof IndexValue.prototype.toObject>[];
        }): GetRequest {
            const message = new GetRequest({});
            if (data.message_name != null) {
                message.message_name = data.message_name;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.values != null) {
                message.values = data.values.map(item => IndexValue.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                message_name?: string;
                index?: string;
                values?: ReturnType<typeof IndexValue.prototype.toObject>[];
            } = {};
            if (this.message_name != null) {
                data.message_name = this.message_name;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.values != null) {
                data.values = this.values.map((item: IndexValue) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message_name.length)
                writer.writeString(1, this.message_name);
            if (this.index.length)
                writer.writeString(2, this.index);
            if (this.values.length)
                writer.writeRepeatedMessage(3, this.values, (item: IndexValue) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message_name = reader.readString();
                        break;
                    case 2:
                        message.index = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.values, () => pb_1.Message.addToRepeatedWrapperField(message, 3, IndexValue.deserialize(reader), IndexValue));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRequest {
            return GetRequest.deserialize(bytes);
        }
    }
    export class GetResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: dependency_3.google.protobuf.Any;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get result() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Any, 1) as dependency_3.google.protobuf.Any;
        }
        set result(value: dependency_3.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_result() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            result?: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
        }): GetResponse {
            const message = new GetResponse({});
            if (data.result != null) {
                message.result = dependency_3.google.protobuf.Any.fromObject(data.result);
            }
            return message;
        }
        toObject() {
            const data: {
                result?: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
            } = {};
            if (this.result != null) {
                data.result = this.result.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_result)
                writer.writeMessage(1, this.result, () => this.result.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.result, () => message.result = dependency_3.google.protobuf.Any.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetResponse {
            return GetResponse.deserialize(bytes);
        }
    }
    export class ListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4]];
        constructor(data?: any[] | ({
            message_name?: string;
            index?: string;
            pagination?: dependency_4.cosmos.base.query.v1beta1.PageRequest;
        } & (({
            prefix?: ListRequest.Prefix;
            range?: never;
        } | {
            prefix?: never;
            range?: ListRequest.Range;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message_name" in data && data.message_name != undefined) {
                    this.message_name = data.message_name;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("prefix" in data && data.prefix != undefined) {
                    this.prefix = data.prefix;
                }
                if ("range" in data && data.range != undefined) {
                    this.range = data.range;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get message_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set index(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get prefix() {
            return pb_1.Message.getWrapperField(this, ListRequest.Prefix, 3) as ListRequest.Prefix;
        }
        set prefix(value: ListRequest.Prefix) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_prefix() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get range() {
            return pb_1.Message.getWrapperField(this, ListRequest.Range, 4) as ListRequest.Range;
        }
        set range(value: ListRequest.Range) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_range() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.base.query.v1beta1.PageRequest, 5) as dependency_4.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_4.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get query() {
            const cases: {
                [index: number]: "none" | "prefix" | "range";
            } = {
                0: "none",
                3: "prefix",
                4: "range"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4])];
        }
        static fromObject(data: {
            message_name?: string;
            index?: string;
            prefix?: ReturnType<typeof ListRequest.Prefix.prototype.toObject>;
            range?: ReturnType<typeof ListRequest.Range.prototype.toObject>;
            pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }): ListRequest {
            const message = new ListRequest({});
            if (data.message_name != null) {
                message.message_name = data.message_name;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.prefix != null) {
                message.prefix = ListRequest.Prefix.fromObject(data.prefix);
            }
            if (data.range != null) {
                message.range = ListRequest.Range.fromObject(data.range);
            }
            if (data.pagination != null) {
                message.pagination = dependency_4.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                message_name?: string;
                index?: string;
                prefix?: ReturnType<typeof ListRequest.Prefix.prototype.toObject>;
                range?: ReturnType<typeof ListRequest.Range.prototype.toObject>;
                pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.message_name != null) {
                data.message_name = this.message_name;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.prefix != null) {
                data.prefix = this.prefix.toObject();
            }
            if (this.range != null) {
                data.range = this.range.toObject();
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message_name.length)
                writer.writeString(1, this.message_name);
            if (this.index.length)
                writer.writeString(2, this.index);
            if (this.has_prefix)
                writer.writeMessage(3, this.prefix, () => this.prefix.serialize(writer));
            if (this.has_range)
                writer.writeMessage(4, this.range, () => this.range.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(5, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message_name = reader.readString();
                        break;
                    case 2:
                        message.index = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.prefix, () => message.prefix = ListRequest.Prefix.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.range, () => message.range = ListRequest.Range.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_4.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListRequest {
            return ListRequest.deserialize(bytes);
        }
    }
    export namespace ListRequest {
        export class Prefix extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                values?: IndexValue[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("values" in data && data.values != undefined) {
                        this.values = data.values;
                    }
                }
            }
            get values() {
                return pb_1.Message.getRepeatedWrapperField(this, IndexValue, 1) as IndexValue[];
            }
            set values(value: IndexValue[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            static fromObject(data: {
                values?: ReturnType<typeof IndexValue.prototype.toObject>[];
            }): Prefix {
                const message = new Prefix({});
                if (data.values != null) {
                    message.values = data.values.map(item => IndexValue.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    values?: ReturnType<typeof IndexValue.prototype.toObject>[];
                } = {};
                if (this.values != null) {
                    data.values = this.values.map((item: IndexValue) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.values.length)
                    writer.writeRepeatedMessage(1, this.values, (item: IndexValue) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Prefix {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Prefix();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.values, () => pb_1.Message.addToRepeatedWrapperField(message, 1, IndexValue.deserialize(reader), IndexValue));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Prefix {
                return Prefix.deserialize(bytes);
            }
        }
        export class Range extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                start?: IndexValue[];
                end?: IndexValue[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("start" in data && data.start != undefined) {
                        this.start = data.start;
                    }
                    if ("end" in data && data.end != undefined) {
                        this.end = data.end;
                    }
                }
            }
            get start() {
                return pb_1.Message.getRepeatedWrapperField(this, IndexValue, 1) as IndexValue[];
            }
            set start(value: IndexValue[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get end() {
                return pb_1.Message.getRepeatedWrapperField(this, IndexValue, 2) as IndexValue[];
            }
            set end(value: IndexValue[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                start?: ReturnType<typeof IndexValue.prototype.toObject>[];
                end?: ReturnType<typeof IndexValue.prototype.toObject>[];
            }): Range {
                const message = new Range({});
                if (data.start != null) {
                    message.start = data.start.map(item => IndexValue.fromObject(item));
                }
                if (data.end != null) {
                    message.end = data.end.map(item => IndexValue.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    start?: ReturnType<typeof IndexValue.prototype.toObject>[];
                    end?: ReturnType<typeof IndexValue.prototype.toObject>[];
                } = {};
                if (this.start != null) {
                    data.start = this.start.map((item: IndexValue) => item.toObject());
                }
                if (this.end != null) {
                    data.end = this.end.map((item: IndexValue) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.start.length)
                    writer.writeRepeatedMessage(1, this.start, (item: IndexValue) => item.serialize(writer));
                if (this.end.length)
                    writer.writeRepeatedMessage(2, this.end, (item: IndexValue) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Range {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Range();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.start, () => pb_1.Message.addToRepeatedWrapperField(message, 1, IndexValue.deserialize(reader), IndexValue));
                            break;
                        case 2:
                            reader.readMessage(message.end, () => pb_1.Message.addToRepeatedWrapperField(message, 2, IndexValue.deserialize(reader), IndexValue));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Range {
                return Range.deserialize(bytes);
            }
        }
    }
    export class ListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            results?: dependency_3.google.protobuf.Any[];
            pagination?: dependency_4.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("results" in data && data.results != undefined) {
                    this.results = data.results;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get results() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.google.protobuf.Any, 1) as dependency_3.google.protobuf.Any[];
        }
        set results(value: dependency_3.google.protobuf.Any[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.base.query.v1beta1.PageResponse, 5) as dependency_4.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_4.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            results?: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }): ListResponse {
            const message = new ListResponse({});
            if (data.results != null) {
                message.results = data.results.map(item => dependency_3.google.protobuf.Any.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_4.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                results?: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.results != null) {
                data.results = this.results.map((item: dependency_3.google.protobuf.Any) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.results.length)
                writer.writeRepeatedMessage(1, this.results, (item: dependency_3.google.protobuf.Any) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(5, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.results, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.google.protobuf.Any.deserialize(reader), dependency_3.google.protobuf.Any));
                        break;
                    case 5:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_4.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListResponse {
            return ListResponse.deserialize(bytes);
        }
    }
    export class IndexValue extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8]];
        constructor(data?: any[] | ({} & (({
            uint?: number;
            int?: never;
            str?: never;
            bytes?: never;
            enum?: never;
            bool?: never;
            timestamp?: never;
            duration?: never;
        } | {
            uint?: never;
            int?: number;
            str?: never;
            bytes?: never;
            enum?: never;
            bool?: never;
            timestamp?: never;
            duration?: never;
        } | {
            uint?: never;
            int?: never;
            str?: string;
            bytes?: never;
            enum?: never;
            bool?: never;
            timestamp?: never;
            duration?: never;
        } | {
            uint?: never;
            int?: never;
            str?: never;
            bytes?: Uint8Array;
            enum?: never;
            bool?: never;
            timestamp?: never;
            duration?: never;
        } | {
            uint?: never;
            int?: never;
            str?: never;
            bytes?: never;
            enum?: string;
            bool?: never;
            timestamp?: never;
            duration?: never;
        } | {
            uint?: never;
            int?: never;
            str?: never;
            bytes?: never;
            enum?: never;
            bool?: boolean;
            timestamp?: never;
            duration?: never;
        } | {
            uint?: never;
            int?: never;
            str?: never;
            bytes?: never;
            enum?: never;
            bool?: never;
            timestamp?: dependency_1.google.protobuf.Timestamp;
            duration?: never;
        } | {
            uint?: never;
            int?: never;
            str?: never;
            bytes?: never;
            enum?: never;
            bool?: never;
            timestamp?: never;
            duration?: dependency_2.google.protobuf.Duration;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uint" in data && data.uint != undefined) {
                    this.uint = data.uint;
                }
                if ("int" in data && data.int != undefined) {
                    this.int = data.int;
                }
                if ("str" in data && data.str != undefined) {
                    this.str = data.str;
                }
                if ("bytes" in data && data.bytes != undefined) {
                    this.bytes = data.bytes;
                }
                if ("enum" in data && data.enum != undefined) {
                    this.enum = data.enum;
                }
                if ("bool" in data && data.bool != undefined) {
                    this.bool = data.bool;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
            }
        }
        get uint() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set uint(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_uint() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get int() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set int(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_int() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get str() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set str(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_str() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get bytes() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set bytes(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_bytes() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get enum() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set enum(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_enum() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get bool() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set bool(value: boolean) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[0], value);
        }
        get has_bool() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 7) as dependency_1.google.protobuf.Timestamp;
        }
        set timestamp(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get duration() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Duration, 8) as dependency_2.google.protobuf.Duration;
        }
        set duration(value: dependency_2.google.protobuf.Duration) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_duration() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get value() {
            const cases: {
                [index: number]: "none" | "uint" | "int" | "str" | "bytes" | "enum" | "bool" | "timestamp" | "duration";
            } = {
                0: "none",
                1: "uint",
                2: "int",
                3: "str",
                4: "bytes",
                5: "enum",
                6: "bool",
                7: "timestamp",
                8: "duration"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8])];
        }
        static fromObject(data: {
            uint?: number;
            int?: number;
            str?: string;
            bytes?: Uint8Array;
            enum?: string;
            bool?: boolean;
            timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            duration?: ReturnType<typeof dependency_2.google.protobuf.Duration.prototype.toObject>;
        }): IndexValue {
            const message = new IndexValue({});
            if (data.uint != null) {
                message.uint = data.uint;
            }
            if (data.int != null) {
                message.int = data.int;
            }
            if (data.str != null) {
                message.str = data.str;
            }
            if (data.bytes != null) {
                message.bytes = data.bytes;
            }
            if (data.enum != null) {
                message.enum = data.enum;
            }
            if (data.bool != null) {
                message.bool = data.bool;
            }
            if (data.timestamp != null) {
                message.timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            if (data.duration != null) {
                message.duration = dependency_2.google.protobuf.Duration.fromObject(data.duration);
            }
            return message;
        }
        toObject() {
            const data: {
                uint?: number;
                int?: number;
                str?: string;
                bytes?: Uint8Array;
                enum?: string;
                bool?: boolean;
                timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                duration?: ReturnType<typeof dependency_2.google.protobuf.Duration.prototype.toObject>;
            } = {};
            if (this.uint != null) {
                data.uint = this.uint;
            }
            if (this.int != null) {
                data.int = this.int;
            }
            if (this.str != null) {
                data.str = this.str;
            }
            if (this.bytes != null) {
                data.bytes = this.bytes;
            }
            if (this.enum != null) {
                data.enum = this.enum;
            }
            if (this.bool != null) {
                data.bool = this.bool;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            if (this.duration != null) {
                data.duration = this.duration.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_uint)
                writer.writeUint64(1, this.uint);
            if (this.has_int)
                writer.writeInt64(2, this.int);
            if (this.has_str)
                writer.writeString(3, this.str);
            if (this.has_bytes)
                writer.writeBytes(4, this.bytes);
            if (this.has_enum)
                writer.writeString(5, this.enum);
            if (this.has_bool)
                writer.writeBool(6, this.bool);
            if (this.has_timestamp)
                writer.writeMessage(7, this.timestamp, () => this.timestamp.serialize(writer));
            if (this.has_duration)
                writer.writeMessage(8, this.duration, () => this.duration.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uint = reader.readUint64();
                        break;
                    case 2:
                        message.int = reader.readInt64();
                        break;
                    case 3:
                        message.str = reader.readString();
                        break;
                    case 4:
                        message.bytes = reader.readBytes();
                        break;
                    case 5:
                        message.enum = reader.readString();
                        break;
                    case 6:
                        message.bool = reader.readBool();
                        break;
                    case 7:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.duration, () => message.duration = dependency_2.google.protobuf.Duration.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IndexValue {
            return IndexValue.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedQueryService {
        static definition = {
            Get: {
                path: "/cosmos.orm.query.v1alpha1.Query/Get",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetResponse.deserialize(new Uint8Array(bytes))
            },
            List: {
                path: "/cosmos.orm.query.v1alpha1.Query/List",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Get(call: grpc_1.ServerUnaryCall<GetRequest, GetResponse>, callback: grpc_1.sendUnaryData<GetResponse>): void;
        abstract List(call: grpc_1.ServerUnaryCall<ListRequest, ListResponse>, callback: grpc_1.sendUnaryData<ListResponse>): void;
    }
    export class QueryClient extends grpc_1.makeGenericClientConstructor(UnimplementedQueryService.definition, "Query", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Get: GrpcUnaryServiceInterface<GetRequest, GetResponse> = (message: GetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetResponse>, callback?: grpc_1.requestCallback<GetResponse>): grpc_1.ClientUnaryCall => {
            return super.Get(message, metadata, options, callback);
        };
        List: GrpcUnaryServiceInterface<ListRequest, ListResponse> = (message: ListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListResponse>, callback?: grpc_1.requestCallback<ListResponse>): grpc_1.ClientUnaryCall => {
            return super.List(message, metadata, options, callback);
        };
    }
}
