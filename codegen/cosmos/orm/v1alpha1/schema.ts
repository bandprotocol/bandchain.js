/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cosmos/orm/v1alpha1/schema.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../google/protobuf/descriptor";
import * as pb_1 from "google-protobuf";
export namespace cosmos.orm.v1alpha1 {
    export enum StorageType {
        STORAGE_TYPE_DEFAULT_UNSPECIFIED = 0,
        STORAGE_TYPE_MEMORY = 1,
        STORAGE_TYPE_TRANSIENT = 2
    }
    export class ModuleSchemaDescriptor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            schema_file?: ModuleSchemaDescriptor.FileEntry[];
            prefix?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("schema_file" in data && data.schema_file != undefined) {
                    this.schema_file = data.schema_file;
                }
                if ("prefix" in data && data.prefix != undefined) {
                    this.prefix = data.prefix;
                }
            }
        }
        get schema_file() {
            return pb_1.Message.getRepeatedWrapperField(this, ModuleSchemaDescriptor.FileEntry, 1) as ModuleSchemaDescriptor.FileEntry[];
        }
        set schema_file(value: ModuleSchemaDescriptor.FileEntry[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get prefix() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set prefix(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            schema_file?: ReturnType<typeof ModuleSchemaDescriptor.FileEntry.prototype.toObject>[];
            prefix?: Uint8Array;
        }): ModuleSchemaDescriptor {
            const message = new ModuleSchemaDescriptor({});
            if (data.schema_file != null) {
                message.schema_file = data.schema_file.map(item => ModuleSchemaDescriptor.FileEntry.fromObject(item));
            }
            if (data.prefix != null) {
                message.prefix = data.prefix;
            }
            return message;
        }
        toObject() {
            const data: {
                schema_file?: ReturnType<typeof ModuleSchemaDescriptor.FileEntry.prototype.toObject>[];
                prefix?: Uint8Array;
            } = {};
            if (this.schema_file != null) {
                data.schema_file = this.schema_file.map((item: ModuleSchemaDescriptor.FileEntry) => item.toObject());
            }
            if (this.prefix != null) {
                data.prefix = this.prefix;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.schema_file.length)
                writer.writeRepeatedMessage(1, this.schema_file, (item: ModuleSchemaDescriptor.FileEntry) => item.serialize(writer));
            if (this.prefix.length)
                writer.writeBytes(2, this.prefix);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModuleSchemaDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModuleSchemaDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.schema_file, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ModuleSchemaDescriptor.FileEntry.deserialize(reader), ModuleSchemaDescriptor.FileEntry));
                        break;
                    case 2:
                        message.prefix = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ModuleSchemaDescriptor {
            return ModuleSchemaDescriptor.deserialize(bytes);
        }
    }
    export namespace ModuleSchemaDescriptor {
        export class FileEntry extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: number;
                proto_file_name?: string;
                storage_type?: StorageType;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("proto_file_name" in data && data.proto_file_name != undefined) {
                        this.proto_file_name = data.proto_file_name;
                    }
                    if ("storage_type" in data && data.storage_type != undefined) {
                        this.storage_type = data.storage_type;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get proto_file_name() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set proto_file_name(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get storage_type() {
                return pb_1.Message.getFieldWithDefault(this, 3, StorageType.STORAGE_TYPE_DEFAULT_UNSPECIFIED) as StorageType;
            }
            set storage_type(value: StorageType) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                id?: number;
                proto_file_name?: string;
                storage_type?: StorageType;
            }): FileEntry {
                const message = new FileEntry({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.proto_file_name != null) {
                    message.proto_file_name = data.proto_file_name;
                }
                if (data.storage_type != null) {
                    message.storage_type = data.storage_type;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: number;
                    proto_file_name?: string;
                    storage_type?: StorageType;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.proto_file_name != null) {
                    data.proto_file_name = this.proto_file_name;
                }
                if (this.storage_type != null) {
                    data.storage_type = this.storage_type;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id != 0)
                    writer.writeUint32(1, this.id);
                if (this.proto_file_name.length)
                    writer.writeString(2, this.proto_file_name);
                if (this.storage_type != StorageType.STORAGE_TYPE_DEFAULT_UNSPECIFIED)
                    writer.writeEnum(3, this.storage_type);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileEntry {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileEntry();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readUint32();
                            break;
                        case 2:
                            message.proto_file_name = reader.readString();
                            break;
                        case 3:
                            message.storage_type = reader.readEnum();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): FileEntry {
                return FileEntry.deserialize(bytes);
            }
        }
    }
}
