/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cosmos/circuit/v1/types.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace cosmos.circuit.v1 {
    export class Permissions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            level?: Permissions.Level;
            limit_type_urls?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
                if ("limit_type_urls" in data && data.limit_type_urls != undefined) {
                    this.limit_type_urls = data.limit_type_urls;
                }
            }
        }
        get level() {
            return pb_1.Message.getFieldWithDefault(this, 1, Permissions.Level.LEVEL_NONE_UNSPECIFIED) as Permissions.Level;
        }
        set level(value: Permissions.Level) {
            pb_1.Message.setField(this, 1, value);
        }
        get limit_type_urls() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set limit_type_urls(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            level?: Permissions.Level;
            limit_type_urls?: string[];
        }): Permissions {
            const message = new Permissions({});
            if (data.level != null) {
                message.level = data.level;
            }
            if (data.limit_type_urls != null) {
                message.limit_type_urls = data.limit_type_urls;
            }
            return message;
        }
        toObject() {
            const data: {
                level?: Permissions.Level;
                limit_type_urls?: string[];
            } = {};
            if (this.level != null) {
                data.level = this.level;
            }
            if (this.limit_type_urls != null) {
                data.limit_type_urls = this.limit_type_urls;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.level != Permissions.Level.LEVEL_NONE_UNSPECIFIED)
                writer.writeEnum(1, this.level);
            if (this.limit_type_urls.length)
                writer.writeRepeatedString(2, this.limit_type_urls);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Permissions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Permissions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.level = reader.readEnum();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Permissions {
            return Permissions.deserialize(bytes);
        }
    }
    export namespace Permissions {
        export enum Level {
            LEVEL_NONE_UNSPECIFIED = 0,
            LEVEL_SOME_MSGS = 1,
            LEVEL_ALL_MSGS = 2,
            LEVEL_SUPER_ADMIN = 3
        }
    }
    export class GenesisAccountPermissions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            permissions?: Permissions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("permissions" in data && data.permissions != undefined) {
                    this.permissions = data.permissions;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get permissions() {
            return pb_1.Message.getWrapperField(this, Permissions, 2) as Permissions;
        }
        set permissions(value: Permissions) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_permissions() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            address?: string;
            permissions?: ReturnType<typeof Permissions.prototype.toObject>;
        }): GenesisAccountPermissions {
            const message = new GenesisAccountPermissions({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.permissions != null) {
                message.permissions = Permissions.fromObject(data.permissions);
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                permissions?: ReturnType<typeof Permissions.prototype.toObject>;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.permissions != null) {
                data.permissions = this.permissions.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.has_permissions)
                writer.writeMessage(2, this.permissions, () => this.permissions.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenesisAccountPermissions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenesisAccountPermissions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.permissions, () => message.permissions = Permissions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenesisAccountPermissions {
            return GenesisAccountPermissions.deserialize(bytes);
        }
    }
    export class GenesisState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_permissions?: GenesisAccountPermissions[];
            disabled_type_urls?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_permissions" in data && data.account_permissions != undefined) {
                    this.account_permissions = data.account_permissions;
                }
                if ("disabled_type_urls" in data && data.disabled_type_urls != undefined) {
                    this.disabled_type_urls = data.disabled_type_urls;
                }
            }
        }
        get account_permissions() {
            return pb_1.Message.getRepeatedWrapperField(this, GenesisAccountPermissions, 1) as GenesisAccountPermissions[];
        }
        set account_permissions(value: GenesisAccountPermissions[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get disabled_type_urls() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set disabled_type_urls(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            account_permissions?: ReturnType<typeof GenesisAccountPermissions.prototype.toObject>[];
            disabled_type_urls?: string[];
        }): GenesisState {
            const message = new GenesisState({});
            if (data.account_permissions != null) {
                message.account_permissions = data.account_permissions.map(item => GenesisAccountPermissions.fromObject(item));
            }
            if (data.disabled_type_urls != null) {
                message.disabled_type_urls = data.disabled_type_urls;
            }
            return message;
        }
        toObject() {
            const data: {
                account_permissions?: ReturnType<typeof GenesisAccountPermissions.prototype.toObject>[];
                disabled_type_urls?: string[];
            } = {};
            if (this.account_permissions != null) {
                data.account_permissions = this.account_permissions.map((item: GenesisAccountPermissions) => item.toObject());
            }
            if (this.disabled_type_urls != null) {
                data.disabled_type_urls = this.disabled_type_urls;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_permissions.length)
                writer.writeRepeatedMessage(1, this.account_permissions, (item: GenesisAccountPermissions) => item.serialize(writer));
            if (this.disabled_type_urls.length)
                writer.writeRepeatedString(2, this.disabled_type_urls);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenesisState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenesisState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.account_permissions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GenesisAccountPermissions.deserialize(reader), GenesisAccountPermissions));
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenesisState {
            return GenesisState.deserialize(bytes);
        }
    }
}
