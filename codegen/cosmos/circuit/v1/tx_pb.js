// source: cosmos/circuit/v1/tx.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var cosmos_msg_v1_msg_pb = require('../../../cosmos/msg/v1/msg_pb.js');
goog.object.extend(proto, cosmos_msg_v1_msg_pb);
var cosmos_circuit_v1_types_pb = require('../../../cosmos/circuit/v1/types_pb.js');
goog.object.extend(proto, cosmos_circuit_v1_types_pb);
goog.exportSymbol('proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker', null, global);
goog.exportSymbol('proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse', null, global);
goog.exportSymbol('proto.cosmos.circuit.v1.MsgResetCircuitBreaker', null, global);
goog.exportSymbol('proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse', null, global);
goog.exportSymbol('proto.cosmos.circuit.v1.MsgTripCircuitBreaker', null, global);
goog.exportSymbol('proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker.displayName = 'proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse.displayName = 'proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreaker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cosmos.circuit.v1.MsgTripCircuitBreaker.repeatedFields_, null);
};
goog.inherits(proto.cosmos.circuit.v1.MsgTripCircuitBreaker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.circuit.v1.MsgTripCircuitBreaker.displayName = 'proto.cosmos.circuit.v1.MsgTripCircuitBreaker';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse.displayName = 'proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreaker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cosmos.circuit.v1.MsgResetCircuitBreaker.repeatedFields_, null);
};
goog.inherits(proto.cosmos.circuit.v1.MsgResetCircuitBreaker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.circuit.v1.MsgResetCircuitBreaker.displayName = 'proto.cosmos.circuit.v1.MsgResetCircuitBreaker';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse.displayName = 'proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker.toObject = function(includeInstance, msg) {
  var f, obj = {
    granter: jspb.Message.getFieldWithDefault(msg, 1, ""),
    grantee: jspb.Message.getFieldWithDefault(msg, 2, ""),
    permissions: (f = msg.getPermissions()) && cosmos_circuit_v1_types_pb.Permissions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker}
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker;
  return proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker}
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGranter(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrantee(value);
      break;
    case 3:
      var value = new cosmos_circuit_v1_types_pb.Permissions;
      reader.readMessage(value,cosmos_circuit_v1_types_pb.Permissions.deserializeBinaryFromReader);
      msg.setPermissions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGranter();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGrantee();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPermissions();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cosmos_circuit_v1_types_pb.Permissions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string granter = 1;
 * @return {string}
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker.prototype.getGranter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker} returns this
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker.prototype.setGranter = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string grantee = 2;
 * @return {string}
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker.prototype.getGrantee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker} returns this
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker.prototype.setGrantee = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Permissions permissions = 3;
 * @return {?proto.cosmos.circuit.v1.Permissions}
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker.prototype.getPermissions = function() {
  return /** @type{?proto.cosmos.circuit.v1.Permissions} */ (
    jspb.Message.getWrapperField(this, cosmos_circuit_v1_types_pb.Permissions, 3));
};


/**
 * @param {?proto.cosmos.circuit.v1.Permissions|undefined} value
 * @return {!proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker} returns this
*/
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker.prototype.setPermissions = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker} returns this
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker.prototype.clearPermissions = function() {
  return this.setPermissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreaker.prototype.hasPermissions = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse}
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse;
  return proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse}
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse} returns this
 */
proto.cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreaker.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreaker.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.circuit.v1.MsgTripCircuitBreaker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.circuit.v1.MsgTripCircuitBreaker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreaker.toObject = function(includeInstance, msg) {
  var f, obj = {
    authority: jspb.Message.getFieldWithDefault(msg, 1, ""),
    msgTypeUrlsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.circuit.v1.MsgTripCircuitBreaker}
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreaker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.circuit.v1.MsgTripCircuitBreaker;
  return proto.cosmos.circuit.v1.MsgTripCircuitBreaker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.circuit.v1.MsgTripCircuitBreaker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.circuit.v1.MsgTripCircuitBreaker}
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreaker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthority(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addMsgTypeUrls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreaker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.circuit.v1.MsgTripCircuitBreaker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.circuit.v1.MsgTripCircuitBreaker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreaker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthority();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMsgTypeUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string authority = 1;
 * @return {string}
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreaker.prototype.getAuthority = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmos.circuit.v1.MsgTripCircuitBreaker} returns this
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreaker.prototype.setAuthority = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string msg_type_urls = 2;
 * @return {!Array<string>}
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreaker.prototype.getMsgTypeUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cosmos.circuit.v1.MsgTripCircuitBreaker} returns this
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreaker.prototype.setMsgTypeUrlsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cosmos.circuit.v1.MsgTripCircuitBreaker} returns this
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreaker.prototype.addMsgTypeUrls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.circuit.v1.MsgTripCircuitBreaker} returns this
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreaker.prototype.clearMsgTypeUrlsList = function() {
  return this.setMsgTypeUrlsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse}
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse;
  return proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse}
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse} returns this
 */
proto.cosmos.circuit.v1.MsgTripCircuitBreakerResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreaker.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreaker.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.circuit.v1.MsgResetCircuitBreaker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.circuit.v1.MsgResetCircuitBreaker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreaker.toObject = function(includeInstance, msg) {
  var f, obj = {
    authority: jspb.Message.getFieldWithDefault(msg, 1, ""),
    msgTypeUrlsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.circuit.v1.MsgResetCircuitBreaker}
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreaker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.circuit.v1.MsgResetCircuitBreaker;
  return proto.cosmos.circuit.v1.MsgResetCircuitBreaker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.circuit.v1.MsgResetCircuitBreaker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.circuit.v1.MsgResetCircuitBreaker}
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreaker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthority(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addMsgTypeUrls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreaker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.circuit.v1.MsgResetCircuitBreaker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.circuit.v1.MsgResetCircuitBreaker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreaker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthority();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMsgTypeUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string authority = 1;
 * @return {string}
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreaker.prototype.getAuthority = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cosmos.circuit.v1.MsgResetCircuitBreaker} returns this
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreaker.prototype.setAuthority = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string msg_type_urls = 3;
 * @return {!Array<string>}
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreaker.prototype.getMsgTypeUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cosmos.circuit.v1.MsgResetCircuitBreaker} returns this
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreaker.prototype.setMsgTypeUrlsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cosmos.circuit.v1.MsgResetCircuitBreaker} returns this
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreaker.prototype.addMsgTypeUrls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.circuit.v1.MsgResetCircuitBreaker} returns this
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreaker.prototype.clearMsgTypeUrlsList = function() {
  return this.setMsgTypeUrlsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse}
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse;
  return proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse}
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse} returns this
 */
proto.cosmos.circuit.v1.MsgResetCircuitBreakerResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


goog.object.extend(exports, proto.cosmos.circuit.v1);
