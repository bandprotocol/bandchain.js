/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cosmos/circuit/v1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../base/query/v1beta1/pagination";
import * as dependency_2 from "./types";
import * as dependency_3 from "./../../../google/api/annotations";
import * as dependency_4 from "./../../query/v1/query";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace cosmos.circuit.v1 {
    export class QueryAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            address?: string;
        }): QueryAccountRequest {
            const message = new QueryAccountRequest({});
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAccountRequest {
            return QueryAccountRequest.deserialize(bytes);
        }
    }
    export class AccountResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            permission?: dependency_2.cosmos.circuit.v1.Permissions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("permission" in data && data.permission != undefined) {
                    this.permission = data.permission;
                }
            }
        }
        get permission() {
            return pb_1.Message.getWrapperField(this, dependency_2.cosmos.circuit.v1.Permissions, 1) as dependency_2.cosmos.circuit.v1.Permissions;
        }
        set permission(value: dependency_2.cosmos.circuit.v1.Permissions) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_permission() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            permission?: ReturnType<typeof dependency_2.cosmos.circuit.v1.Permissions.prototype.toObject>;
        }): AccountResponse {
            const message = new AccountResponse({});
            if (data.permission != null) {
                message.permission = dependency_2.cosmos.circuit.v1.Permissions.fromObject(data.permission);
            }
            return message;
        }
        toObject() {
            const data: {
                permission?: ReturnType<typeof dependency_2.cosmos.circuit.v1.Permissions.prototype.toObject>;
            } = {};
            if (this.permission != null) {
                data.permission = this.permission.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_permission)
                writer.writeMessage(1, this.permission, () => this.permission.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.permission, () => message.permission = dependency_2.cosmos.circuit.v1.Permissions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountResponse {
            return AccountResponse.deserialize(bytes);
        }
    }
    export class QueryAccountsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pagination?: dependency_1.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.query.v1beta1.PageRequest, 1) as dependency_1.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_1.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }): QueryAccountsRequest {
            const message = new QueryAccountsRequest({});
            if (data.pagination != null) {
                message.pagination = dependency_1.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_pagination)
                writer.writeMessage(1, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAccountsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAccountsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_1.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAccountsRequest {
            return QueryAccountsRequest.deserialize(bytes);
        }
    }
    export class AccountsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            accounts?: dependency_2.cosmos.circuit.v1.GenesisAccountPermissions[];
            pagination?: dependency_1.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("accounts" in data && data.accounts != undefined) {
                    this.accounts = data.accounts;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get accounts() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cosmos.circuit.v1.GenesisAccountPermissions, 1) as dependency_2.cosmos.circuit.v1.GenesisAccountPermissions[];
        }
        set accounts(value: dependency_2.cosmos.circuit.v1.GenesisAccountPermissions[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_1.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_1.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_1.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            accounts?: ReturnType<typeof dependency_2.cosmos.circuit.v1.GenesisAccountPermissions.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }): AccountsResponse {
            const message = new AccountsResponse({});
            if (data.accounts != null) {
                message.accounts = data.accounts.map(item => dependency_2.cosmos.circuit.v1.GenesisAccountPermissions.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_1.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                accounts?: ReturnType<typeof dependency_2.cosmos.circuit.v1.GenesisAccountPermissions.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_1.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.accounts != null) {
                data.accounts = this.accounts.map((item: dependency_2.cosmos.circuit.v1.GenesisAccountPermissions) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.accounts.length)
                writer.writeRepeatedMessage(1, this.accounts, (item: dependency_2.cosmos.circuit.v1.GenesisAccountPermissions) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.accounts, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.cosmos.circuit.v1.GenesisAccountPermissions.deserialize(reader), dependency_2.cosmos.circuit.v1.GenesisAccountPermissions));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_1.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountsResponse {
            return AccountsResponse.deserialize(bytes);
        }
    }
    export class QueryDisabledListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryDisabledListRequest {
            const message = new QueryDisabledListRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDisabledListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDisabledListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDisabledListRequest {
            return QueryDisabledListRequest.deserialize(bytes);
        }
    }
    export class DisabledListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            disabled_list?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("disabled_list" in data && data.disabled_list != undefined) {
                    this.disabled_list = data.disabled_list;
                }
            }
        }
        get disabled_list() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set disabled_list(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            disabled_list?: string[];
        }): DisabledListResponse {
            const message = new DisabledListResponse({});
            if (data.disabled_list != null) {
                message.disabled_list = data.disabled_list;
            }
            return message;
        }
        toObject() {
            const data: {
                disabled_list?: string[];
            } = {};
            if (this.disabled_list != null) {
                data.disabled_list = this.disabled_list;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.disabled_list.length)
                writer.writeRepeatedString(1, this.disabled_list);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisabledListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisabledListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisabledListResponse {
            return DisabledListResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedQueryService {
        static definition = {
            Account: {
                path: "/cosmos.circuit.v1.Query/Account",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryAccountRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryAccountRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AccountResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AccountResponse.deserialize(new Uint8Array(bytes))
            },
            Accounts: {
                path: "/cosmos.circuit.v1.Query/Accounts",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryAccountsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryAccountsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AccountsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AccountsResponse.deserialize(new Uint8Array(bytes))
            },
            DisabledList: {
                path: "/cosmos.circuit.v1.Query/DisabledList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryDisabledListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryDisabledListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DisabledListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DisabledListResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Account(call: grpc_1.ServerUnaryCall<QueryAccountRequest, AccountResponse>, callback: grpc_1.sendUnaryData<AccountResponse>): void;
        abstract Accounts(call: grpc_1.ServerUnaryCall<QueryAccountsRequest, AccountsResponse>, callback: grpc_1.sendUnaryData<AccountsResponse>): void;
        abstract DisabledList(call: grpc_1.ServerUnaryCall<QueryDisabledListRequest, DisabledListResponse>, callback: grpc_1.sendUnaryData<DisabledListResponse>): void;
    }
    export class QueryClient extends grpc_1.makeGenericClientConstructor(UnimplementedQueryService.definition, "Query", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Account: GrpcUnaryServiceInterface<QueryAccountRequest, AccountResponse> = (message: QueryAccountRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AccountResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AccountResponse>, callback?: grpc_1.requestCallback<AccountResponse>): grpc_1.ClientUnaryCall => {
            return super.Account(message, metadata, options, callback);
        };
        Accounts: GrpcUnaryServiceInterface<QueryAccountsRequest, AccountsResponse> = (message: QueryAccountsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AccountsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AccountsResponse>, callback?: grpc_1.requestCallback<AccountsResponse>): grpc_1.ClientUnaryCall => {
            return super.Accounts(message, metadata, options, callback);
        };
        DisabledList: GrpcUnaryServiceInterface<QueryDisabledListRequest, DisabledListResponse> = (message: QueryDisabledListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DisabledListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DisabledListResponse>, callback?: grpc_1.requestCallback<DisabledListResponse>): grpc_1.ClientUnaryCall => {
            return super.DisabledList(message, metadata, options, callback);
        };
    }
}
