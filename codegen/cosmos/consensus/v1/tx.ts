/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cosmos/consensus/v1/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../amino/amino";
import * as dependency_2 from "./../../../cosmos_proto/cosmos";
import * as dependency_3 from "./../../msg/v1/msg";
import * as dependency_4 from "./../../../tendermint/types/params";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace cosmos.consensus.v1 {
    export class MsgUpdateParams extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            authority?: string;
            block?: dependency_4.tendermint.types.BlockParams;
            evidence?: dependency_4.tendermint.types.EvidenceParams;
            validator?: dependency_4.tendermint.types.ValidatorParams;
            abci?: dependency_4.tendermint.types.ABCIParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("authority" in data && data.authority != undefined) {
                    this.authority = data.authority;
                }
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
                if ("evidence" in data && data.evidence != undefined) {
                    this.evidence = data.evidence;
                }
                if ("validator" in data && data.validator != undefined) {
                    this.validator = data.validator;
                }
                if ("abci" in data && data.abci != undefined) {
                    this.abci = data.abci;
                }
            }
        }
        get authority() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set authority(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_4.tendermint.types.BlockParams, 2) as dependency_4.tendermint.types.BlockParams;
        }
        set block(value: dependency_4.tendermint.types.BlockParams) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_block() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get evidence() {
            return pb_1.Message.getWrapperField(this, dependency_4.tendermint.types.EvidenceParams, 3) as dependency_4.tendermint.types.EvidenceParams;
        }
        set evidence(value: dependency_4.tendermint.types.EvidenceParams) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_evidence() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get validator() {
            return pb_1.Message.getWrapperField(this, dependency_4.tendermint.types.ValidatorParams, 4) as dependency_4.tendermint.types.ValidatorParams;
        }
        set validator(value: dependency_4.tendermint.types.ValidatorParams) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_validator() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get abci() {
            return pb_1.Message.getWrapperField(this, dependency_4.tendermint.types.ABCIParams, 5) as dependency_4.tendermint.types.ABCIParams;
        }
        set abci(value: dependency_4.tendermint.types.ABCIParams) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_abci() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            authority?: string;
            block?: ReturnType<typeof dependency_4.tendermint.types.BlockParams.prototype.toObject>;
            evidence?: ReturnType<typeof dependency_4.tendermint.types.EvidenceParams.prototype.toObject>;
            validator?: ReturnType<typeof dependency_4.tendermint.types.ValidatorParams.prototype.toObject>;
            abci?: ReturnType<typeof dependency_4.tendermint.types.ABCIParams.prototype.toObject>;
        }): MsgUpdateParams {
            const message = new MsgUpdateParams({});
            if (data.authority != null) {
                message.authority = data.authority;
            }
            if (data.block != null) {
                message.block = dependency_4.tendermint.types.BlockParams.fromObject(data.block);
            }
            if (data.evidence != null) {
                message.evidence = dependency_4.tendermint.types.EvidenceParams.fromObject(data.evidence);
            }
            if (data.validator != null) {
                message.validator = dependency_4.tendermint.types.ValidatorParams.fromObject(data.validator);
            }
            if (data.abci != null) {
                message.abci = dependency_4.tendermint.types.ABCIParams.fromObject(data.abci);
            }
            return message;
        }
        toObject() {
            const data: {
                authority?: string;
                block?: ReturnType<typeof dependency_4.tendermint.types.BlockParams.prototype.toObject>;
                evidence?: ReturnType<typeof dependency_4.tendermint.types.EvidenceParams.prototype.toObject>;
                validator?: ReturnType<typeof dependency_4.tendermint.types.ValidatorParams.prototype.toObject>;
                abci?: ReturnType<typeof dependency_4.tendermint.types.ABCIParams.prototype.toObject>;
            } = {};
            if (this.authority != null) {
                data.authority = this.authority;
            }
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            if (this.evidence != null) {
                data.evidence = this.evidence.toObject();
            }
            if (this.validator != null) {
                data.validator = this.validator.toObject();
            }
            if (this.abci != null) {
                data.abci = this.abci.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.authority.length)
                writer.writeString(1, this.authority);
            if (this.has_block)
                writer.writeMessage(2, this.block, () => this.block.serialize(writer));
            if (this.has_evidence)
                writer.writeMessage(3, this.evidence, () => this.evidence.serialize(writer));
            if (this.has_validator)
                writer.writeMessage(4, this.validator, () => this.validator.serialize(writer));
            if (this.has_abci)
                writer.writeMessage(5, this.abci, () => this.abci.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateParams {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateParams();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.authority = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.block, () => message.block = dependency_4.tendermint.types.BlockParams.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.evidence, () => message.evidence = dependency_4.tendermint.types.EvidenceParams.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.validator, () => message.validator = dependency_4.tendermint.types.ValidatorParams.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.abci, () => message.abci = dependency_4.tendermint.types.ABCIParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateParams {
            return MsgUpdateParams.deserialize(bytes);
        }
    }
    export class MsgUpdateParamsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateParamsResponse {
            const message = new MsgUpdateParamsResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateParamsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateParamsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateParamsResponse {
            return MsgUpdateParamsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedMsgService {
        static definition = {
            UpdateParams: {
                path: "/cosmos.consensus.v1.Msg/UpdateParams",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgUpdateParams) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgUpdateParams.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgUpdateParamsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgUpdateParamsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract UpdateParams(call: grpc_1.ServerUnaryCall<MsgUpdateParams, MsgUpdateParamsResponse>, callback: grpc_1.sendUnaryData<MsgUpdateParamsResponse>): void;
    }
    export class MsgClient extends grpc_1.makeGenericClientConstructor(UnimplementedMsgService.definition, "Msg", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        UpdateParams: GrpcUnaryServiceInterface<MsgUpdateParams, MsgUpdateParamsResponse> = (message: MsgUpdateParams, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateParamsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateParamsResponse>, callback?: grpc_1.requestCallback<MsgUpdateParamsResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateParams(message, metadata, options, callback);
        };
    }
}
