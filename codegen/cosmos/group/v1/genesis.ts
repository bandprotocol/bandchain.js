/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cosmos/group/v1/genesis.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./types";
import * as pb_1 from "google-protobuf";
export namespace cosmos.group.v1 {
    export class GenesisState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_seq?: number;
            groups?: dependency_1.cosmos.group.v1.GroupInfo[];
            group_members?: dependency_1.cosmos.group.v1.GroupMember[];
            group_policy_seq?: number;
            group_policies?: dependency_1.cosmos.group.v1.GroupPolicyInfo[];
            proposal_seq?: number;
            proposals?: dependency_1.cosmos.group.v1.Proposal[];
            votes?: dependency_1.cosmos.group.v1.Vote[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 5, 7, 8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_seq" in data && data.group_seq != undefined) {
                    this.group_seq = data.group_seq;
                }
                if ("groups" in data && data.groups != undefined) {
                    this.groups = data.groups;
                }
                if ("group_members" in data && data.group_members != undefined) {
                    this.group_members = data.group_members;
                }
                if ("group_policy_seq" in data && data.group_policy_seq != undefined) {
                    this.group_policy_seq = data.group_policy_seq;
                }
                if ("group_policies" in data && data.group_policies != undefined) {
                    this.group_policies = data.group_policies;
                }
                if ("proposal_seq" in data && data.proposal_seq != undefined) {
                    this.proposal_seq = data.proposal_seq;
                }
                if ("proposals" in data && data.proposals != undefined) {
                    this.proposals = data.proposals;
                }
                if ("votes" in data && data.votes != undefined) {
                    this.votes = data.votes;
                }
            }
        }
        get group_seq() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_seq(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get groups() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.cosmos.group.v1.GroupInfo, 2) as dependency_1.cosmos.group.v1.GroupInfo[];
        }
        set groups(value: dependency_1.cosmos.group.v1.GroupInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get group_members() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.cosmos.group.v1.GroupMember, 3) as dependency_1.cosmos.group.v1.GroupMember[];
        }
        set group_members(value: dependency_1.cosmos.group.v1.GroupMember[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get group_policy_seq() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set group_policy_seq(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get group_policies() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.cosmos.group.v1.GroupPolicyInfo, 5) as dependency_1.cosmos.group.v1.GroupPolicyInfo[];
        }
        set group_policies(value: dependency_1.cosmos.group.v1.GroupPolicyInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get proposal_seq() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set proposal_seq(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get proposals() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.cosmos.group.v1.Proposal, 7) as dependency_1.cosmos.group.v1.Proposal[];
        }
        set proposals(value: dependency_1.cosmos.group.v1.Proposal[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get votes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.cosmos.group.v1.Vote, 8) as dependency_1.cosmos.group.v1.Vote[];
        }
        set votes(value: dependency_1.cosmos.group.v1.Vote[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        static fromObject(data: {
            group_seq?: number;
            groups?: ReturnType<typeof dependency_1.cosmos.group.v1.GroupInfo.prototype.toObject>[];
            group_members?: ReturnType<typeof dependency_1.cosmos.group.v1.GroupMember.prototype.toObject>[];
            group_policy_seq?: number;
            group_policies?: ReturnType<typeof dependency_1.cosmos.group.v1.GroupPolicyInfo.prototype.toObject>[];
            proposal_seq?: number;
            proposals?: ReturnType<typeof dependency_1.cosmos.group.v1.Proposal.prototype.toObject>[];
            votes?: ReturnType<typeof dependency_1.cosmos.group.v1.Vote.prototype.toObject>[];
        }): GenesisState {
            const message = new GenesisState({});
            if (data.group_seq != null) {
                message.group_seq = data.group_seq;
            }
            if (data.groups != null) {
                message.groups = data.groups.map(item => dependency_1.cosmos.group.v1.GroupInfo.fromObject(item));
            }
            if (data.group_members != null) {
                message.group_members = data.group_members.map(item => dependency_1.cosmos.group.v1.GroupMember.fromObject(item));
            }
            if (data.group_policy_seq != null) {
                message.group_policy_seq = data.group_policy_seq;
            }
            if (data.group_policies != null) {
                message.group_policies = data.group_policies.map(item => dependency_1.cosmos.group.v1.GroupPolicyInfo.fromObject(item));
            }
            if (data.proposal_seq != null) {
                message.proposal_seq = data.proposal_seq;
            }
            if (data.proposals != null) {
                message.proposals = data.proposals.map(item => dependency_1.cosmos.group.v1.Proposal.fromObject(item));
            }
            if (data.votes != null) {
                message.votes = data.votes.map(item => dependency_1.cosmos.group.v1.Vote.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                group_seq?: number;
                groups?: ReturnType<typeof dependency_1.cosmos.group.v1.GroupInfo.prototype.toObject>[];
                group_members?: ReturnType<typeof dependency_1.cosmos.group.v1.GroupMember.prototype.toObject>[];
                group_policy_seq?: number;
                group_policies?: ReturnType<typeof dependency_1.cosmos.group.v1.GroupPolicyInfo.prototype.toObject>[];
                proposal_seq?: number;
                proposals?: ReturnType<typeof dependency_1.cosmos.group.v1.Proposal.prototype.toObject>[];
                votes?: ReturnType<typeof dependency_1.cosmos.group.v1.Vote.prototype.toObject>[];
            } = {};
            if (this.group_seq != null) {
                data.group_seq = this.group_seq;
            }
            if (this.groups != null) {
                data.groups = this.groups.map((item: dependency_1.cosmos.group.v1.GroupInfo) => item.toObject());
            }
            if (this.group_members != null) {
                data.group_members = this.group_members.map((item: dependency_1.cosmos.group.v1.GroupMember) => item.toObject());
            }
            if (this.group_policy_seq != null) {
                data.group_policy_seq = this.group_policy_seq;
            }
            if (this.group_policies != null) {
                data.group_policies = this.group_policies.map((item: dependency_1.cosmos.group.v1.GroupPolicyInfo) => item.toObject());
            }
            if (this.proposal_seq != null) {
                data.proposal_seq = this.proposal_seq;
            }
            if (this.proposals != null) {
                data.proposals = this.proposals.map((item: dependency_1.cosmos.group.v1.Proposal) => item.toObject());
            }
            if (this.votes != null) {
                data.votes = this.votes.map((item: dependency_1.cosmos.group.v1.Vote) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_seq != 0)
                writer.writeUint64(1, this.group_seq);
            if (this.groups.length)
                writer.writeRepeatedMessage(2, this.groups, (item: dependency_1.cosmos.group.v1.GroupInfo) => item.serialize(writer));
            if (this.group_members.length)
                writer.writeRepeatedMessage(3, this.group_members, (item: dependency_1.cosmos.group.v1.GroupMember) => item.serialize(writer));
            if (this.group_policy_seq != 0)
                writer.writeUint64(4, this.group_policy_seq);
            if (this.group_policies.length)
                writer.writeRepeatedMessage(5, this.group_policies, (item: dependency_1.cosmos.group.v1.GroupPolicyInfo) => item.serialize(writer));
            if (this.proposal_seq != 0)
                writer.writeUint64(6, this.proposal_seq);
            if (this.proposals.length)
                writer.writeRepeatedMessage(7, this.proposals, (item: dependency_1.cosmos.group.v1.Proposal) => item.serialize(writer));
            if (this.votes.length)
                writer.writeRepeatedMessage(8, this.votes, (item: dependency_1.cosmos.group.v1.Vote) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenesisState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenesisState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_seq = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.groups, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.cosmos.group.v1.GroupInfo.deserialize(reader), dependency_1.cosmos.group.v1.GroupInfo));
                        break;
                    case 3:
                        reader.readMessage(message.group_members, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_1.cosmos.group.v1.GroupMember.deserialize(reader), dependency_1.cosmos.group.v1.GroupMember));
                        break;
                    case 4:
                        message.group_policy_seq = reader.readUint64();
                        break;
                    case 5:
                        reader.readMessage(message.group_policies, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_1.cosmos.group.v1.GroupPolicyInfo.deserialize(reader), dependency_1.cosmos.group.v1.GroupPolicyInfo));
                        break;
                    case 6:
                        message.proposal_seq = reader.readUint64();
                        break;
                    case 7:
                        reader.readMessage(message.proposals, () => pb_1.Message.addToRepeatedWrapperField(message, 7, dependency_1.cosmos.group.v1.Proposal.deserialize(reader), dependency_1.cosmos.group.v1.Proposal));
                        break;
                    case 8:
                        reader.readMessage(message.votes, () => pb_1.Message.addToRepeatedWrapperField(message, 8, dependency_1.cosmos.group.v1.Vote.deserialize(reader), dependency_1.cosmos.group.v1.Vote));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenesisState {
            return GenesisState.deserialize(bytes);
        }
    }
}
