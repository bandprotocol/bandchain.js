// source: cosmos/autocli/v1/options.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

goog.exportSymbol('proto.cosmos.autocli.v1.FlagOptions', null, global)
goog.exportSymbol('proto.cosmos.autocli.v1.ModuleOptions', null, global)
goog.exportSymbol(
  'proto.cosmos.autocli.v1.PositionalArgDescriptor',
  null,
  global,
)
goog.exportSymbol('proto.cosmos.autocli.v1.RpcCommandOptions', null, global)
goog.exportSymbol(
  'proto.cosmos.autocli.v1.ServiceCommandDescriptor',
  null,
  global,
)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.autocli.v1.ModuleOptions = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.cosmos.autocli.v1.ModuleOptions, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.autocli.v1.ModuleOptions.displayName =
    'proto.cosmos.autocli.v1.ModuleOptions'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.autocli.v1.ServiceCommandDescriptor = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.cosmos.autocli.v1.ServiceCommandDescriptor.repeatedFields_,
    null,
  )
}
goog.inherits(proto.cosmos.autocli.v1.ServiceCommandDescriptor, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.autocli.v1.ServiceCommandDescriptor.displayName =
    'proto.cosmos.autocli.v1.ServiceCommandDescriptor'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.autocli.v1.RpcCommandOptions = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.cosmos.autocli.v1.RpcCommandOptions.repeatedFields_,
    null,
  )
}
goog.inherits(proto.cosmos.autocli.v1.RpcCommandOptions, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.autocli.v1.RpcCommandOptions.displayName =
    'proto.cosmos.autocli.v1.RpcCommandOptions'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.autocli.v1.FlagOptions = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.cosmos.autocli.v1.FlagOptions, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.autocli.v1.FlagOptions.displayName =
    'proto.cosmos.autocli.v1.FlagOptions'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.autocli.v1.PositionalArgDescriptor = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.cosmos.autocli.v1.PositionalArgDescriptor, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.autocli.v1.PositionalArgDescriptor.displayName =
    'proto.cosmos.autocli.v1.PositionalArgDescriptor'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cosmos.autocli.v1.ModuleOptions.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.cosmos.autocli.v1.ModuleOptions.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cosmos.autocli.v1.ModuleOptions} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cosmos.autocli.v1.ModuleOptions.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        tx:
          (f = msg.getTx()) &&
          proto.cosmos.autocli.v1.ServiceCommandDescriptor.toObject(
            includeInstance,
            f,
          ),
        query:
          (f = msg.getQuery()) &&
          proto.cosmos.autocli.v1.ServiceCommandDescriptor.toObject(
            includeInstance,
            f,
          ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.autocli.v1.ModuleOptions}
 */
proto.cosmos.autocli.v1.ModuleOptions.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.cosmos.autocli.v1.ModuleOptions()
  return proto.cosmos.autocli.v1.ModuleOptions.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.autocli.v1.ModuleOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.autocli.v1.ModuleOptions}
 */
proto.cosmos.autocli.v1.ModuleOptions.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.cosmos.autocli.v1.ServiceCommandDescriptor()
        reader.readMessage(
          value,
          proto.cosmos.autocli.v1.ServiceCommandDescriptor
            .deserializeBinaryFromReader,
        )
        msg.setTx(value)
        break
      case 2:
        var value = new proto.cosmos.autocli.v1.ServiceCommandDescriptor()
        reader.readMessage(
          value,
          proto.cosmos.autocli.v1.ServiceCommandDescriptor
            .deserializeBinaryFromReader,
        )
        msg.setQuery(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.autocli.v1.ModuleOptions.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.cosmos.autocli.v1.ModuleOptions.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.autocli.v1.ModuleOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.autocli.v1.ModuleOptions.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getTx()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cosmos.autocli.v1.ServiceCommandDescriptor.serializeBinaryToWriter,
    )
  }
  f = message.getQuery()
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cosmos.autocli.v1.ServiceCommandDescriptor.serializeBinaryToWriter,
    )
  }
}

/**
 * optional ServiceCommandDescriptor tx = 1;
 * @return {?proto.cosmos.autocli.v1.ServiceCommandDescriptor}
 */
proto.cosmos.autocli.v1.ModuleOptions.prototype.getTx = function () {
  return /** @type{?proto.cosmos.autocli.v1.ServiceCommandDescriptor} */ (
    jspb.Message.getWrapperField(
      this,
      proto.cosmos.autocli.v1.ServiceCommandDescriptor,
      1,
    )
  )
}

/**
 * @param {?proto.cosmos.autocli.v1.ServiceCommandDescriptor|undefined} value
 * @return {!proto.cosmos.autocli.v1.ModuleOptions} returns this
 */
proto.cosmos.autocli.v1.ModuleOptions.prototype.setTx = function (value) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmos.autocli.v1.ModuleOptions} returns this
 */
proto.cosmos.autocli.v1.ModuleOptions.prototype.clearTx = function () {
  return this.setTx(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.autocli.v1.ModuleOptions.prototype.hasTx = function () {
  return jspb.Message.getField(this, 1) != null
}

/**
 * optional ServiceCommandDescriptor query = 2;
 * @return {?proto.cosmos.autocli.v1.ServiceCommandDescriptor}
 */
proto.cosmos.autocli.v1.ModuleOptions.prototype.getQuery = function () {
  return /** @type{?proto.cosmos.autocli.v1.ServiceCommandDescriptor} */ (
    jspb.Message.getWrapperField(
      this,
      proto.cosmos.autocli.v1.ServiceCommandDescriptor,
      2,
    )
  )
}

/**
 * @param {?proto.cosmos.autocli.v1.ServiceCommandDescriptor|undefined} value
 * @return {!proto.cosmos.autocli.v1.ModuleOptions} returns this
 */
proto.cosmos.autocli.v1.ModuleOptions.prototype.setQuery = function (value) {
  return jspb.Message.setWrapperField(this, 2, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmos.autocli.v1.ModuleOptions} returns this
 */
proto.cosmos.autocli.v1.ModuleOptions.prototype.clearQuery = function () {
  return this.setQuery(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.autocli.v1.ModuleOptions.prototype.hasQuery = function () {
  return jspb.Message.getField(this, 2) != null
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cosmos.autocli.v1.ServiceCommandDescriptor.repeatedFields_ = [2]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cosmos.autocli.v1.ServiceCommandDescriptor.prototype.toObject =
    function (opt_includeInstance) {
      return proto.cosmos.autocli.v1.ServiceCommandDescriptor.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cosmos.autocli.v1.ServiceCommandDescriptor} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cosmos.autocli.v1.ServiceCommandDescriptor.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        service: jspb.Message.getFieldWithDefault(msg, 1, ''),
        rpcCommandOptionsList: jspb.Message.toObjectList(
          msg.getRpcCommandOptionsList(),
          proto.cosmos.autocli.v1.RpcCommandOptions.toObject,
          includeInstance,
        ),
        subCommandsMap: (f = msg.getSubCommandsMap())
          ? f.toObject(
              includeInstance,
              proto.cosmos.autocli.v1.ServiceCommandDescriptor.toObject,
            )
          : [],
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.autocli.v1.ServiceCommandDescriptor}
 */
proto.cosmos.autocli.v1.ServiceCommandDescriptor.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.cosmos.autocli.v1.ServiceCommandDescriptor()
  return proto.cosmos.autocli.v1.ServiceCommandDescriptor.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.autocli.v1.ServiceCommandDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.autocli.v1.ServiceCommandDescriptor}
 */
proto.cosmos.autocli.v1.ServiceCommandDescriptor.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString())
          msg.setService(value)
          break
        case 2:
          var value = new proto.cosmos.autocli.v1.RpcCommandOptions()
          reader.readMessage(
            value,
            proto.cosmos.autocli.v1.RpcCommandOptions
              .deserializeBinaryFromReader,
          )
          msg.addRpcCommandOptions(value)
          break
        case 3:
          var value = msg.getSubCommandsMap()
          reader.readMessage(value, function (message, reader) {
            jspb.Map.deserializeBinary(
              message,
              reader,
              jspb.BinaryReader.prototype.readString,
              jspb.BinaryReader.prototype.readMessage,
              proto.cosmos.autocli.v1.ServiceCommandDescriptor
                .deserializeBinaryFromReader,
              '',
              new proto.cosmos.autocli.v1.ServiceCommandDescriptor(),
            )
          })
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.autocli.v1.ServiceCommandDescriptor.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.cosmos.autocli.v1.ServiceCommandDescriptor.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.autocli.v1.ServiceCommandDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.autocli.v1.ServiceCommandDescriptor.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getService()
    if (f.length > 0) {
      writer.writeString(1, f)
    }
    f = message.getRpcCommandOptionsList()
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        2,
        f,
        proto.cosmos.autocli.v1.RpcCommandOptions.serializeBinaryToWriter,
      )
    }
    f = message.getSubCommandsMap(true)
    if (f && f.getLength() > 0) {
      f.serializeBinary(
        3,
        writer,
        jspb.BinaryWriter.prototype.writeString,
        jspb.BinaryWriter.prototype.writeMessage,
        proto.cosmos.autocli.v1.ServiceCommandDescriptor
          .serializeBinaryToWriter,
      )
    }
  }

/**
 * optional string service = 1;
 * @return {string}
 */
proto.cosmos.autocli.v1.ServiceCommandDescriptor.prototype.getService =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
  }

/**
 * @param {string} value
 * @return {!proto.cosmos.autocli.v1.ServiceCommandDescriptor} returns this
 */
proto.cosmos.autocli.v1.ServiceCommandDescriptor.prototype.setService =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value)
  }

/**
 * repeated RpcCommandOptions rpc_command_options = 2;
 * @return {!Array<!proto.cosmos.autocli.v1.RpcCommandOptions>}
 */
proto.cosmos.autocli.v1.ServiceCommandDescriptor.prototype.getRpcCommandOptionsList =
  function () {
    return /** @type{!Array<!proto.cosmos.autocli.v1.RpcCommandOptions>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto.cosmos.autocli.v1.RpcCommandOptions,
        2,
      )
    )
  }

/**
 * @param {!Array<!proto.cosmos.autocli.v1.RpcCommandOptions>} value
 * @return {!proto.cosmos.autocli.v1.ServiceCommandDescriptor} returns this
 */
proto.cosmos.autocli.v1.ServiceCommandDescriptor.prototype.setRpcCommandOptionsList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 2, value)
  }

/**
 * @param {!proto.cosmos.autocli.v1.RpcCommandOptions=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions}
 */
proto.cosmos.autocli.v1.ServiceCommandDescriptor.prototype.addRpcCommandOptions =
  function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
      this,
      2,
      opt_value,
      proto.cosmos.autocli.v1.RpcCommandOptions,
      opt_index,
    )
  }

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.autocli.v1.ServiceCommandDescriptor} returns this
 */
proto.cosmos.autocli.v1.ServiceCommandDescriptor.prototype.clearRpcCommandOptionsList =
  function () {
    return this.setRpcCommandOptionsList([])
  }

/**
 * map<string, ServiceCommandDescriptor> sub_commands = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.cosmos.autocli.v1.ServiceCommandDescriptor>}
 */
proto.cosmos.autocli.v1.ServiceCommandDescriptor.prototype.getSubCommandsMap =
  function (opt_noLazyCreate) {
    return /** @type {!jspb.Map<string,!proto.cosmos.autocli.v1.ServiceCommandDescriptor>} */ (
      jspb.Message.getMapField(
        this,
        3,
        opt_noLazyCreate,
        proto.cosmos.autocli.v1.ServiceCommandDescriptor,
      )
    )
  }

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.cosmos.autocli.v1.ServiceCommandDescriptor} returns this
 */
proto.cosmos.autocli.v1.ServiceCommandDescriptor.prototype.clearSubCommandsMap =
  function () {
    this.getSubCommandsMap().clear()
    return this
  }

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cosmos.autocli.v1.RpcCommandOptions.repeatedFields_ = [6, 7, 11]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cosmos.autocli.v1.RpcCommandOptions.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.cosmos.autocli.v1.RpcCommandOptions.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cosmos.autocli.v1.RpcCommandOptions} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cosmos.autocli.v1.RpcCommandOptions.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        rpcMethod: jspb.Message.getFieldWithDefault(msg, 1, ''),
        use: jspb.Message.getFieldWithDefault(msg, 2, ''),
        pb_long: jspb.Message.getFieldWithDefault(msg, 3, ''),
        pb_short: jspb.Message.getFieldWithDefault(msg, 4, ''),
        example: jspb.Message.getFieldWithDefault(msg, 5, ''),
        aliasList:
          (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
        suggestForList:
          (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
        deprecated: jspb.Message.getFieldWithDefault(msg, 8, ''),
        version: jspb.Message.getFieldWithDefault(msg, 9, ''),
        flagOptionsMap: (f = msg.getFlagOptionsMap())
          ? f.toObject(
              includeInstance,
              proto.cosmos.autocli.v1.FlagOptions.toObject,
            )
          : [],
        positionalArgsList: jspb.Message.toObjectList(
          msg.getPositionalArgsList(),
          proto.cosmos.autocli.v1.PositionalArgDescriptor.toObject,
          includeInstance,
        ),
        skip: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions}
 */
proto.cosmos.autocli.v1.RpcCommandOptions.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.cosmos.autocli.v1.RpcCommandOptions()
  return proto.cosmos.autocli.v1.RpcCommandOptions.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.autocli.v1.RpcCommandOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions}
 */
proto.cosmos.autocli.v1.RpcCommandOptions.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString())
          msg.setRpcMethod(value)
          break
        case 2:
          var value = /** @type {string} */ (reader.readString())
          msg.setUse(value)
          break
        case 3:
          var value = /** @type {string} */ (reader.readString())
          msg.setLong(value)
          break
        case 4:
          var value = /** @type {string} */ (reader.readString())
          msg.setShort(value)
          break
        case 5:
          var value = /** @type {string} */ (reader.readString())
          msg.setExample(value)
          break
        case 6:
          var value = /** @type {string} */ (reader.readString())
          msg.addAlias(value)
          break
        case 7:
          var value = /** @type {string} */ (reader.readString())
          msg.addSuggestFor(value)
          break
        case 8:
          var value = /** @type {string} */ (reader.readString())
          msg.setDeprecated(value)
          break
        case 9:
          var value = /** @type {string} */ (reader.readString())
          msg.setVersion(value)
          break
        case 10:
          var value = msg.getFlagOptionsMap()
          reader.readMessage(value, function (message, reader) {
            jspb.Map.deserializeBinary(
              message,
              reader,
              jspb.BinaryReader.prototype.readString,
              jspb.BinaryReader.prototype.readMessage,
              proto.cosmos.autocli.v1.FlagOptions.deserializeBinaryFromReader,
              '',
              new proto.cosmos.autocli.v1.FlagOptions(),
            )
          })
          break
        case 11:
          var value = new proto.cosmos.autocli.v1.PositionalArgDescriptor()
          reader.readMessage(
            value,
            proto.cosmos.autocli.v1.PositionalArgDescriptor
              .deserializeBinaryFromReader,
          )
          msg.addPositionalArgs(value)
          break
        case 12:
          var value = /** @type {boolean} */ (reader.readBool())
          msg.setSkip(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.cosmos.autocli.v1.RpcCommandOptions.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.autocli.v1.RpcCommandOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.autocli.v1.RpcCommandOptions.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getRpcMethod()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getUse()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getLong()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getShort()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
  f = message.getExample()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
  f = message.getAliasList()
  if (f.length > 0) {
    writer.writeRepeatedString(6, f)
  }
  f = message.getSuggestForList()
  if (f.length > 0) {
    writer.writeRepeatedString(7, f)
  }
  f = message.getDeprecated()
  if (f.length > 0) {
    writer.writeString(8, f)
  }
  f = message.getVersion()
  if (f.length > 0) {
    writer.writeString(9, f)
  }
  f = message.getFlagOptionsMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      10,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeMessage,
      proto.cosmos.autocli.v1.FlagOptions.serializeBinaryToWriter,
    )
  }
  f = message.getPositionalArgsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.cosmos.autocli.v1.PositionalArgDescriptor.serializeBinaryToWriter,
    )
  }
  f = message.getSkip()
  if (f) {
    writer.writeBool(12, f)
  }
}

/**
 * optional string rpc_method = 1;
 * @return {string}
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.getRpcMethod = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions} returns this
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.setRpcMethod = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string use = 2;
 * @return {string}
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.getUse = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions} returns this
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.setUse = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string long = 3;
 * @return {string}
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.getLong = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions} returns this
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.setLong = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string short = 4;
 * @return {string}
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.getShort = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions} returns this
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.setShort = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional string example = 5;
 * @return {string}
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.getExample = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions} returns this
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.setExample = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * repeated string alias = 6;
 * @return {!Array<string>}
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.getAliasList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions} returns this
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.setAliasList = function (
  value,
) {
  return jspb.Message.setField(this, 6, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions} returns this
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.addAlias = function (
  value,
  opt_index,
) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions} returns this
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.clearAliasList =
  function () {
    return this.setAliasList([])
  }

/**
 * repeated string suggest_for = 7;
 * @return {!Array<string>}
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.getSuggestForList =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.getRepeatedField(this, 7)
    )
  }

/**
 * @param {!Array<string>} value
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions} returns this
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.setSuggestForList =
  function (value) {
    return jspb.Message.setField(this, 7, value || [])
  }

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions} returns this
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.addSuggestFor = function (
  value,
  opt_index,
) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions} returns this
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.clearSuggestForList =
  function () {
    return this.setSuggestForList([])
  }

/**
 * optional string deprecated = 8;
 * @return {string}
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.getDeprecated =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''))
  }

/**
 * @param {string} value
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions} returns this
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.setDeprecated = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 8, value)
}

/**
 * optional string version = 9;
 * @return {string}
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.getVersion = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions} returns this
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.setVersion = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 9, value)
}

/**
 * map<string, FlagOptions> flag_options = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.cosmos.autocli.v1.FlagOptions>}
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.getFlagOptionsMap =
  function (opt_noLazyCreate) {
    return /** @type {!jspb.Map<string,!proto.cosmos.autocli.v1.FlagOptions>} */ (
      jspb.Message.getMapField(
        this,
        10,
        opt_noLazyCreate,
        proto.cosmos.autocli.v1.FlagOptions,
      )
    )
  }

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions} returns this
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.clearFlagOptionsMap =
  function () {
    this.getFlagOptionsMap().clear()
    return this
  }

/**
 * repeated PositionalArgDescriptor positional_args = 11;
 * @return {!Array<!proto.cosmos.autocli.v1.PositionalArgDescriptor>}
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.getPositionalArgsList =
  function () {
    return /** @type{!Array<!proto.cosmos.autocli.v1.PositionalArgDescriptor>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto.cosmos.autocli.v1.PositionalArgDescriptor,
        11,
      )
    )
  }

/**
 * @param {!Array<!proto.cosmos.autocli.v1.PositionalArgDescriptor>} value
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions} returns this
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.setPositionalArgsList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 11, value)
  }

/**
 * @param {!proto.cosmos.autocli.v1.PositionalArgDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.autocli.v1.PositionalArgDescriptor}
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.addPositionalArgs =
  function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
      this,
      11,
      opt_value,
      proto.cosmos.autocli.v1.PositionalArgDescriptor,
      opt_index,
    )
  }

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions} returns this
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.clearPositionalArgsList =
  function () {
    return this.setPositionalArgsList([])
  }

/**
 * optional bool skip = 12;
 * @return {boolean}
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.getSkip = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 12, false)
  )
}

/**
 * @param {boolean} value
 * @return {!proto.cosmos.autocli.v1.RpcCommandOptions} returns this
 */
proto.cosmos.autocli.v1.RpcCommandOptions.prototype.setSkip = function (value) {
  return jspb.Message.setProto3BooleanField(this, 12, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cosmos.autocli.v1.FlagOptions.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.cosmos.autocli.v1.FlagOptions.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cosmos.autocli.v1.FlagOptions} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cosmos.autocli.v1.FlagOptions.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ''),
        shorthand: jspb.Message.getFieldWithDefault(msg, 2, ''),
        usage: jspb.Message.getFieldWithDefault(msg, 3, ''),
        defaultValue: jspb.Message.getFieldWithDefault(msg, 4, ''),
        noOptDefaultValue: jspb.Message.getFieldWithDefault(msg, 5, ''),
        deprecated: jspb.Message.getFieldWithDefault(msg, 6, ''),
        shorthandDeprecated: jspb.Message.getFieldWithDefault(msg, 7, ''),
        hidden: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.autocli.v1.FlagOptions}
 */
proto.cosmos.autocli.v1.FlagOptions.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.cosmos.autocli.v1.FlagOptions()
  return proto.cosmos.autocli.v1.FlagOptions.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.autocli.v1.FlagOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.autocli.v1.FlagOptions}
 */
proto.cosmos.autocli.v1.FlagOptions.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setName(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setShorthand(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setUsage(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setDefaultValue(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setNoOptDefaultValue(value)
        break
      case 6:
        var value = /** @type {string} */ (reader.readString())
        msg.setDeprecated(value)
        break
      case 7:
        var value = /** @type {string} */ (reader.readString())
        msg.setShorthandDeprecated(value)
        break
      case 8:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setHidden(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.autocli.v1.FlagOptions.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.cosmos.autocli.v1.FlagOptions.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.autocli.v1.FlagOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.autocli.v1.FlagOptions.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getName()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getShorthand()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getUsage()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getDefaultValue()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
  f = message.getNoOptDefaultValue()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
  f = message.getDeprecated()
  if (f.length > 0) {
    writer.writeString(6, f)
  }
  f = message.getShorthandDeprecated()
  if (f.length > 0) {
    writer.writeString(7, f)
  }
  f = message.getHidden()
  if (f) {
    writer.writeBool(8, f)
  }
}

/**
 * optional string name = 1;
 * @return {string}
 */
proto.cosmos.autocli.v1.FlagOptions.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.autocli.v1.FlagOptions} returns this
 */
proto.cosmos.autocli.v1.FlagOptions.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string shorthand = 2;
 * @return {string}
 */
proto.cosmos.autocli.v1.FlagOptions.prototype.getShorthand = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.autocli.v1.FlagOptions} returns this
 */
proto.cosmos.autocli.v1.FlagOptions.prototype.setShorthand = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string usage = 3;
 * @return {string}
 */
proto.cosmos.autocli.v1.FlagOptions.prototype.getUsage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.autocli.v1.FlagOptions} returns this
 */
proto.cosmos.autocli.v1.FlagOptions.prototype.setUsage = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string default_value = 4;
 * @return {string}
 */
proto.cosmos.autocli.v1.FlagOptions.prototype.getDefaultValue = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.autocli.v1.FlagOptions} returns this
 */
proto.cosmos.autocli.v1.FlagOptions.prototype.setDefaultValue = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional string no_opt_default_value = 5;
 * @return {string}
 */
proto.cosmos.autocli.v1.FlagOptions.prototype.getNoOptDefaultValue =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
  }

/**
 * @param {string} value
 * @return {!proto.cosmos.autocli.v1.FlagOptions} returns this
 */
proto.cosmos.autocli.v1.FlagOptions.prototype.setNoOptDefaultValue = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * optional string deprecated = 6;
 * @return {string}
 */
proto.cosmos.autocli.v1.FlagOptions.prototype.getDeprecated = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}

/**
 * @param {string} value
 * @return {!proto.cosmos.autocli.v1.FlagOptions} returns this
 */
proto.cosmos.autocli.v1.FlagOptions.prototype.setDeprecated = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value)
}

/**
 * optional string shorthand_deprecated = 7;
 * @return {string}
 */
proto.cosmos.autocli.v1.FlagOptions.prototype.getShorthandDeprecated =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''))
  }

/**
 * @param {string} value
 * @return {!proto.cosmos.autocli.v1.FlagOptions} returns this
 */
proto.cosmos.autocli.v1.FlagOptions.prototype.setShorthandDeprecated =
  function (value) {
    return jspb.Message.setProto3StringField(this, 7, value)
  }

/**
 * optional bool hidden = 8;
 * @return {boolean}
 */
proto.cosmos.autocli.v1.FlagOptions.prototype.getHidden = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 8, false)
  )
}

/**
 * @param {boolean} value
 * @return {!proto.cosmos.autocli.v1.FlagOptions} returns this
 */
proto.cosmos.autocli.v1.FlagOptions.prototype.setHidden = function (value) {
  return jspb.Message.setProto3BooleanField(this, 8, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cosmos.autocli.v1.PositionalArgDescriptor.prototype.toObject =
    function (opt_includeInstance) {
      return proto.cosmos.autocli.v1.PositionalArgDescriptor.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cosmos.autocli.v1.PositionalArgDescriptor} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cosmos.autocli.v1.PositionalArgDescriptor.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        protoField: jspb.Message.getFieldWithDefault(msg, 1, ''),
        varargs: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.autocli.v1.PositionalArgDescriptor}
 */
proto.cosmos.autocli.v1.PositionalArgDescriptor.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.cosmos.autocli.v1.PositionalArgDescriptor()
  return proto.cosmos.autocli.v1.PositionalArgDescriptor.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.autocli.v1.PositionalArgDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.autocli.v1.PositionalArgDescriptor}
 */
proto.cosmos.autocli.v1.PositionalArgDescriptor.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString())
          msg.setProtoField(value)
          break
        case 2:
          var value = /** @type {boolean} */ (reader.readBool())
          msg.setVarargs(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.autocli.v1.PositionalArgDescriptor.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.cosmos.autocli.v1.PositionalArgDescriptor.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.autocli.v1.PositionalArgDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.autocli.v1.PositionalArgDescriptor.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getProtoField()
    if (f.length > 0) {
      writer.writeString(1, f)
    }
    f = message.getVarargs()
    if (f) {
      writer.writeBool(2, f)
    }
  }

/**
 * optional string proto_field = 1;
 * @return {string}
 */
proto.cosmos.autocli.v1.PositionalArgDescriptor.prototype.getProtoField =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
  }

/**
 * @param {string} value
 * @return {!proto.cosmos.autocli.v1.PositionalArgDescriptor} returns this
 */
proto.cosmos.autocli.v1.PositionalArgDescriptor.prototype.setProtoField =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value)
  }

/**
 * optional bool varargs = 2;
 * @return {boolean}
 */
proto.cosmos.autocli.v1.PositionalArgDescriptor.prototype.getVarargs =
  function () {
    return /** @type {boolean} */ (
      jspb.Message.getBooleanFieldWithDefault(this, 2, false)
    )
  }

/**
 * @param {boolean} value
 * @return {!proto.cosmos.autocli.v1.PositionalArgDescriptor} returns this
 */
proto.cosmos.autocli.v1.PositionalArgDescriptor.prototype.setVarargs =
  function (value) {
    return jspb.Message.setProto3BooleanField(this, 2, value)
  }

goog.object.extend(exports, proto.cosmos.autocli.v1)
