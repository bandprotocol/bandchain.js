/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cosmos/autocli/v1/options.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace cosmos.autocli.v1 {
    export class ModuleOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tx?: ServiceCommandDescriptor;
            query?: ServiceCommandDescriptor;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tx" in data && data.tx != undefined) {
                    this.tx = data.tx;
                }
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
            }
        }
        get tx() {
            return pb_1.Message.getWrapperField(this, ServiceCommandDescriptor, 1) as ServiceCommandDescriptor;
        }
        set tx(value: ServiceCommandDescriptor) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_tx() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get query() {
            return pb_1.Message.getWrapperField(this, ServiceCommandDescriptor, 2) as ServiceCommandDescriptor;
        }
        set query(value: ServiceCommandDescriptor) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_query() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            tx?: ReturnType<typeof ServiceCommandDescriptor.prototype.toObject>;
            query?: ReturnType<typeof ServiceCommandDescriptor.prototype.toObject>;
        }): ModuleOptions {
            const message = new ModuleOptions({});
            if (data.tx != null) {
                message.tx = ServiceCommandDescriptor.fromObject(data.tx);
            }
            if (data.query != null) {
                message.query = ServiceCommandDescriptor.fromObject(data.query);
            }
            return message;
        }
        toObject() {
            const data: {
                tx?: ReturnType<typeof ServiceCommandDescriptor.prototype.toObject>;
                query?: ReturnType<typeof ServiceCommandDescriptor.prototype.toObject>;
            } = {};
            if (this.tx != null) {
                data.tx = this.tx.toObject();
            }
            if (this.query != null) {
                data.query = this.query.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_tx)
                writer.writeMessage(1, this.tx, () => this.tx.serialize(writer));
            if (this.has_query)
                writer.writeMessage(2, this.query, () => this.query.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModuleOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModuleOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tx, () => message.tx = ServiceCommandDescriptor.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.query, () => message.query = ServiceCommandDescriptor.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ModuleOptions {
            return ModuleOptions.deserialize(bytes);
        }
    }
    export class ServiceCommandDescriptor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service?: string;
            rpc_command_options?: RpcCommandOptions[];
            sub_commands?: Map<string, ServiceCommandDescriptor>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service" in data && data.service != undefined) {
                    this.service = data.service;
                }
                if ("rpc_command_options" in data && data.rpc_command_options != undefined) {
                    this.rpc_command_options = data.rpc_command_options;
                }
                if ("sub_commands" in data && data.sub_commands != undefined) {
                    this.sub_commands = data.sub_commands;
                }
            }
            if (!this.sub_commands)
                this.sub_commands = new Map();
        }
        get service() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get rpc_command_options() {
            return pb_1.Message.getRepeatedWrapperField(this, RpcCommandOptions, 2) as RpcCommandOptions[];
        }
        set rpc_command_options(value: RpcCommandOptions[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get sub_commands() {
            return pb_1.Message.getField(this, 3) as any as Map<string, ServiceCommandDescriptor>;
        }
        set sub_commands(value: Map<string, ServiceCommandDescriptor>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        static fromObject(data: {
            service?: string;
            rpc_command_options?: ReturnType<typeof RpcCommandOptions.prototype.toObject>[];
            sub_commands?: {
                [key: string]: ReturnType<typeof ServiceCommandDescriptor.prototype.toObject>;
            };
        }): ServiceCommandDescriptor {
            const message = new ServiceCommandDescriptor({});
            if (data.service != null) {
                message.service = data.service;
            }
            if (data.rpc_command_options != null) {
                message.rpc_command_options = data.rpc_command_options.map(item => RpcCommandOptions.fromObject(item));
            }
            if (typeof data.sub_commands == "object") {
                message.sub_commands = new Map(Object.entries(data.sub_commands).map(([key, value]) => [key, ServiceCommandDescriptor.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                service?: string;
                rpc_command_options?: ReturnType<typeof RpcCommandOptions.prototype.toObject>[];
                sub_commands?: {
                    [key: string]: ReturnType<typeof ServiceCommandDescriptor.prototype.toObject>;
                };
            } = {};
            if (this.service != null) {
                data.service = this.service;
            }
            if (this.rpc_command_options != null) {
                data.rpc_command_options = this.rpc_command_options.map((item: RpcCommandOptions) => item.toObject());
            }
            if (this.sub_commands != null) {
                data.sub_commands = (Object.fromEntries)((Array.from)(this.sub_commands).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service.length)
                writer.writeString(1, this.service);
            if (this.rpc_command_options.length)
                writer.writeRepeatedMessage(2, this.rpc_command_options, (item: RpcCommandOptions) => item.serialize(writer));
            for (const [key, value] of this.sub_commands) {
                writer.writeMessage(3, this.sub_commands, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServiceCommandDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServiceCommandDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.rpc_command_options, () => pb_1.Message.addToRepeatedWrapperField(message, 2, RpcCommandOptions.deserialize(reader), RpcCommandOptions));
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.sub_commands as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = ServiceCommandDescriptor.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServiceCommandDescriptor {
            return ServiceCommandDescriptor.deserialize(bytes);
        }
    }
    export class RpcCommandOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rpc_method?: string;
            use?: string;
            long?: string;
            short?: string;
            example?: string;
            alias?: string[];
            suggest_for?: string[];
            deprecated?: string;
            version?: string;
            flag_options?: Map<string, FlagOptions>;
            positional_args?: PositionalArgDescriptor[];
            skip?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 7, 11], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rpc_method" in data && data.rpc_method != undefined) {
                    this.rpc_method = data.rpc_method;
                }
                if ("use" in data && data.use != undefined) {
                    this.use = data.use;
                }
                if ("long" in data && data.long != undefined) {
                    this.long = data.long;
                }
                if ("short" in data && data.short != undefined) {
                    this.short = data.short;
                }
                if ("example" in data && data.example != undefined) {
                    this.example = data.example;
                }
                if ("alias" in data && data.alias != undefined) {
                    this.alias = data.alias;
                }
                if ("suggest_for" in data && data.suggest_for != undefined) {
                    this.suggest_for = data.suggest_for;
                }
                if ("deprecated" in data && data.deprecated != undefined) {
                    this.deprecated = data.deprecated;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("flag_options" in data && data.flag_options != undefined) {
                    this.flag_options = data.flag_options;
                }
                if ("positional_args" in data && data.positional_args != undefined) {
                    this.positional_args = data.positional_args;
                }
                if ("skip" in data && data.skip != undefined) {
                    this.skip = data.skip;
                }
            }
            if (!this.flag_options)
                this.flag_options = new Map();
        }
        get rpc_method() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set rpc_method(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get use() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set use(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get long() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set long(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get short() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set short(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get example() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set example(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get alias() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set alias(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get suggest_for() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set suggest_for(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get deprecated() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set deprecated(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get flag_options() {
            return pb_1.Message.getField(this, 10) as any as Map<string, FlagOptions>;
        }
        set flag_options(value: Map<string, FlagOptions>) {
            pb_1.Message.setField(this, 10, value as any);
        }
        get positional_args() {
            return pb_1.Message.getRepeatedWrapperField(this, PositionalArgDescriptor, 11) as PositionalArgDescriptor[];
        }
        set positional_args(value: PositionalArgDescriptor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 11, value);
        }
        get skip() {
            return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
        }
        set skip(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            rpc_method?: string;
            use?: string;
            long?: string;
            short?: string;
            example?: string;
            alias?: string[];
            suggest_for?: string[];
            deprecated?: string;
            version?: string;
            flag_options?: {
                [key: string]: ReturnType<typeof FlagOptions.prototype.toObject>;
            };
            positional_args?: ReturnType<typeof PositionalArgDescriptor.prototype.toObject>[];
            skip?: boolean;
        }): RpcCommandOptions {
            const message = new RpcCommandOptions({});
            if (data.rpc_method != null) {
                message.rpc_method = data.rpc_method;
            }
            if (data.use != null) {
                message.use = data.use;
            }
            if (data.long != null) {
                message.long = data.long;
            }
            if (data.short != null) {
                message.short = data.short;
            }
            if (data.example != null) {
                message.example = data.example;
            }
            if (data.alias != null) {
                message.alias = data.alias;
            }
            if (data.suggest_for != null) {
                message.suggest_for = data.suggest_for;
            }
            if (data.deprecated != null) {
                message.deprecated = data.deprecated;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (typeof data.flag_options == "object") {
                message.flag_options = new Map(Object.entries(data.flag_options).map(([key, value]) => [key, FlagOptions.fromObject(value)]));
            }
            if (data.positional_args != null) {
                message.positional_args = data.positional_args.map(item => PositionalArgDescriptor.fromObject(item));
            }
            if (data.skip != null) {
                message.skip = data.skip;
            }
            return message;
        }
        toObject() {
            const data: {
                rpc_method?: string;
                use?: string;
                long?: string;
                short?: string;
                example?: string;
                alias?: string[];
                suggest_for?: string[];
                deprecated?: string;
                version?: string;
                flag_options?: {
                    [key: string]: ReturnType<typeof FlagOptions.prototype.toObject>;
                };
                positional_args?: ReturnType<typeof PositionalArgDescriptor.prototype.toObject>[];
                skip?: boolean;
            } = {};
            if (this.rpc_method != null) {
                data.rpc_method = this.rpc_method;
            }
            if (this.use != null) {
                data.use = this.use;
            }
            if (this.long != null) {
                data.long = this.long;
            }
            if (this.short != null) {
                data.short = this.short;
            }
            if (this.example != null) {
                data.example = this.example;
            }
            if (this.alias != null) {
                data.alias = this.alias;
            }
            if (this.suggest_for != null) {
                data.suggest_for = this.suggest_for;
            }
            if (this.deprecated != null) {
                data.deprecated = this.deprecated;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.flag_options != null) {
                data.flag_options = (Object.fromEntries)((Array.from)(this.flag_options).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.positional_args != null) {
                data.positional_args = this.positional_args.map((item: PositionalArgDescriptor) => item.toObject());
            }
            if (this.skip != null) {
                data.skip = this.skip;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rpc_method.length)
                writer.writeString(1, this.rpc_method);
            if (this.use.length)
                writer.writeString(2, this.use);
            if (this.long.length)
                writer.writeString(3, this.long);
            if (this.short.length)
                writer.writeString(4, this.short);
            if (this.example.length)
                writer.writeString(5, this.example);
            if (this.alias.length)
                writer.writeRepeatedString(6, this.alias);
            if (this.suggest_for.length)
                writer.writeRepeatedString(7, this.suggest_for);
            if (this.deprecated.length)
                writer.writeString(8, this.deprecated);
            if (this.version.length)
                writer.writeString(9, this.version);
            for (const [key, value] of this.flag_options) {
                writer.writeMessage(10, this.flag_options, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (this.positional_args.length)
                writer.writeRepeatedMessage(11, this.positional_args, (item: PositionalArgDescriptor) => item.serialize(writer));
            if (this.skip != false)
                writer.writeBool(12, this.skip);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RpcCommandOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RpcCommandOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rpc_method = reader.readString();
                        break;
                    case 2:
                        message.use = reader.readString();
                        break;
                    case 3:
                        message.long = reader.readString();
                        break;
                    case 4:
                        message.short = reader.readString();
                        break;
                    case 5:
                        message.example = reader.readString();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 8:
                        message.deprecated = reader.readString();
                        break;
                    case 9:
                        message.version = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.flag_options as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = FlagOptions.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 11:
                        reader.readMessage(message.positional_args, () => pb_1.Message.addToRepeatedWrapperField(message, 11, PositionalArgDescriptor.deserialize(reader), PositionalArgDescriptor));
                        break;
                    case 12:
                        message.skip = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RpcCommandOptions {
            return RpcCommandOptions.deserialize(bytes);
        }
    }
    export class FlagOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            shorthand?: string;
            usage?: string;
            default_value?: string;
            deprecated?: string;
            shorthand_deprecated?: string;
            hidden?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("shorthand" in data && data.shorthand != undefined) {
                    this.shorthand = data.shorthand;
                }
                if ("usage" in data && data.usage != undefined) {
                    this.usage = data.usage;
                }
                if ("default_value" in data && data.default_value != undefined) {
                    this.default_value = data.default_value;
                }
                if ("deprecated" in data && data.deprecated != undefined) {
                    this.deprecated = data.deprecated;
                }
                if ("shorthand_deprecated" in data && data.shorthand_deprecated != undefined) {
                    this.shorthand_deprecated = data.shorthand_deprecated;
                }
                if ("hidden" in data && data.hidden != undefined) {
                    this.hidden = data.hidden;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get shorthand() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set shorthand(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get usage() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set usage(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get default_value() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set default_value(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get deprecated() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set deprecated(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get shorthand_deprecated() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set shorthand_deprecated(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get hidden() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set hidden(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            name?: string;
            shorthand?: string;
            usage?: string;
            default_value?: string;
            deprecated?: string;
            shorthand_deprecated?: string;
            hidden?: boolean;
        }): FlagOptions {
            const message = new FlagOptions({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.shorthand != null) {
                message.shorthand = data.shorthand;
            }
            if (data.usage != null) {
                message.usage = data.usage;
            }
            if (data.default_value != null) {
                message.default_value = data.default_value;
            }
            if (data.deprecated != null) {
                message.deprecated = data.deprecated;
            }
            if (data.shorthand_deprecated != null) {
                message.shorthand_deprecated = data.shorthand_deprecated;
            }
            if (data.hidden != null) {
                message.hidden = data.hidden;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                shorthand?: string;
                usage?: string;
                default_value?: string;
                deprecated?: string;
                shorthand_deprecated?: string;
                hidden?: boolean;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.shorthand != null) {
                data.shorthand = this.shorthand;
            }
            if (this.usage != null) {
                data.usage = this.usage;
            }
            if (this.default_value != null) {
                data.default_value = this.default_value;
            }
            if (this.deprecated != null) {
                data.deprecated = this.deprecated;
            }
            if (this.shorthand_deprecated != null) {
                data.shorthand_deprecated = this.shorthand_deprecated;
            }
            if (this.hidden != null) {
                data.hidden = this.hidden;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.shorthand.length)
                writer.writeString(2, this.shorthand);
            if (this.usage.length)
                writer.writeString(3, this.usage);
            if (this.default_value.length)
                writer.writeString(4, this.default_value);
            if (this.deprecated.length)
                writer.writeString(6, this.deprecated);
            if (this.shorthand_deprecated.length)
                writer.writeString(7, this.shorthand_deprecated);
            if (this.hidden != false)
                writer.writeBool(8, this.hidden);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FlagOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FlagOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.shorthand = reader.readString();
                        break;
                    case 3:
                        message.usage = reader.readString();
                        break;
                    case 4:
                        message.default_value = reader.readString();
                        break;
                    case 6:
                        message.deprecated = reader.readString();
                        break;
                    case 7:
                        message.shorthand_deprecated = reader.readString();
                        break;
                    case 8:
                        message.hidden = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FlagOptions {
            return FlagOptions.deserialize(bytes);
        }
    }
    export class PositionalArgDescriptor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            proto_field?: string;
            varargs?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("proto_field" in data && data.proto_field != undefined) {
                    this.proto_field = data.proto_field;
                }
                if ("varargs" in data && data.varargs != undefined) {
                    this.varargs = data.varargs;
                }
            }
        }
        get proto_field() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set proto_field(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get varargs() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set varargs(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            proto_field?: string;
            varargs?: boolean;
        }): PositionalArgDescriptor {
            const message = new PositionalArgDescriptor({});
            if (data.proto_field != null) {
                message.proto_field = data.proto_field;
            }
            if (data.varargs != null) {
                message.varargs = data.varargs;
            }
            return message;
        }
        toObject() {
            const data: {
                proto_field?: string;
                varargs?: boolean;
            } = {};
            if (this.proto_field != null) {
                data.proto_field = this.proto_field;
            }
            if (this.varargs != null) {
                data.varargs = this.varargs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.proto_field.length)
                writer.writeString(1, this.proto_field);
            if (this.varargs != false)
                writer.writeBool(2, this.varargs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PositionalArgDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PositionalArgDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.proto_field = reader.readString();
                        break;
                    case 2:
                        message.varargs = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PositionalArgDescriptor {
            return PositionalArgDescriptor.deserialize(bytes);
        }
    }
}
