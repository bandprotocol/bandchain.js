/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: cosmos/autocli/v1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./options";
import * as dependency_2 from "./../../query/v1/query";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace cosmos.autocli.v1 {
    export class AppOptionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AppOptionsRequest {
            const message = new AppOptionsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AppOptionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AppOptionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AppOptionsRequest {
            return AppOptionsRequest.deserialize(bytes);
        }
    }
    export class AppOptionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            module_options?: Map<string, dependency_1.cosmos.autocli.v1.ModuleOptions>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module_options" in data && data.module_options != undefined) {
                    this.module_options = data.module_options;
                }
            }
            if (!this.module_options)
                this.module_options = new Map();
        }
        get module_options() {
            return pb_1.Message.getField(this, 1) as any as Map<string, dependency_1.cosmos.autocli.v1.ModuleOptions>;
        }
        set module_options(value: Map<string, dependency_1.cosmos.autocli.v1.ModuleOptions>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            module_options?: {
                [key: string]: ReturnType<typeof dependency_1.cosmos.autocli.v1.ModuleOptions.prototype.toObject>;
            };
        }): AppOptionsResponse {
            const message = new AppOptionsResponse({});
            if (typeof data.module_options == "object") {
                message.module_options = new Map(Object.entries(data.module_options).map(([key, value]) => [key, dependency_1.cosmos.autocli.v1.ModuleOptions.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                module_options?: {
                    [key: string]: ReturnType<typeof dependency_1.cosmos.autocli.v1.ModuleOptions.prototype.toObject>;
                };
            } = {};
            if (this.module_options != null) {
                data.module_options = (Object.fromEntries)((Array.from)(this.module_options).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.module_options) {
                writer.writeMessage(1, this.module_options, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AppOptionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AppOptionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.module_options as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.cosmos.autocli.v1.ModuleOptions.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AppOptionsResponse {
            return AppOptionsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedQueryService {
        static definition = {
            AppOptions: {
                path: "/cosmos.autocli.v1.Query/AppOptions",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AppOptionsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AppOptionsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AppOptionsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AppOptionsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract AppOptions(call: grpc_1.ServerUnaryCall<AppOptionsRequest, AppOptionsResponse>, callback: grpc_1.sendUnaryData<AppOptionsResponse>): void;
    }
    export class QueryClient extends grpc_1.makeGenericClientConstructor(UnimplementedQueryService.definition, "Query", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        AppOptions: GrpcUnaryServiceInterface<AppOptionsRequest, AppOptionsResponse> = (message: AppOptionsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AppOptionsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AppOptionsResponse>, callback?: grpc_1.requestCallback<AppOptionsResponse>): grpc_1.ClientUnaryCall => {
            return super.AppOptions(message, metadata, options, callback);
        };
    }
}
