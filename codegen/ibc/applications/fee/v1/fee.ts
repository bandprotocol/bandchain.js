/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ibc/applications/fee/v1/fee.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../amino/amino";
import * as dependency_2 from "./../../../../cosmos/base/v1beta1/coin";
import * as dependency_3 from "./../../../../gogoproto/gogo";
import * as dependency_4 from "./../../../core/channel/v1/channel";
import * as dependency_5 from "./../../../../cosmos/msg/v1/msg";
import * as pb_1 from "google-protobuf";
export namespace ibc.applications.fee.v1 {
    export class Fee extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            recv_fee?: dependency_2.cosmos.base.v1beta1.Coin[];
            ack_fee?: dependency_2.cosmos.base.v1beta1.Coin[];
            timeout_fee?: dependency_2.cosmos.base.v1beta1.Coin[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("recv_fee" in data && data.recv_fee != undefined) {
                    this.recv_fee = data.recv_fee;
                }
                if ("ack_fee" in data && data.ack_fee != undefined) {
                    this.ack_fee = data.ack_fee;
                }
                if ("timeout_fee" in data && data.timeout_fee != undefined) {
                    this.timeout_fee = data.timeout_fee;
                }
            }
        }
        get recv_fee() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cosmos.base.v1beta1.Coin, 1) as dependency_2.cosmos.base.v1beta1.Coin[];
        }
        set recv_fee(value: dependency_2.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get ack_fee() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cosmos.base.v1beta1.Coin, 2) as dependency_2.cosmos.base.v1beta1.Coin[];
        }
        set ack_fee(value: dependency_2.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get timeout_fee() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cosmos.base.v1beta1.Coin, 3) as dependency_2.cosmos.base.v1beta1.Coin[];
        }
        set timeout_fee(value: dependency_2.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            recv_fee?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            ack_fee?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            timeout_fee?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.Coin.prototype.toObject>[];
        }): Fee {
            const message = new Fee({});
            if (data.recv_fee != null) {
                message.recv_fee = data.recv_fee.map(item => dependency_2.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            if (data.ack_fee != null) {
                message.ack_fee = data.ack_fee.map(item => dependency_2.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            if (data.timeout_fee != null) {
                message.timeout_fee = data.timeout_fee.map(item => dependency_2.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                recv_fee?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.Coin.prototype.toObject>[];
                ack_fee?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.Coin.prototype.toObject>[];
                timeout_fee?: ReturnType<typeof dependency_2.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            } = {};
            if (this.recv_fee != null) {
                data.recv_fee = this.recv_fee.map((item: dependency_2.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            if (this.ack_fee != null) {
                data.ack_fee = this.ack_fee.map((item: dependency_2.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            if (this.timeout_fee != null) {
                data.timeout_fee = this.timeout_fee.map((item: dependency_2.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.recv_fee.length)
                writer.writeRepeatedMessage(1, this.recv_fee, (item: dependency_2.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (this.ack_fee.length)
                writer.writeRepeatedMessage(2, this.ack_fee, (item: dependency_2.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (this.timeout_fee.length)
                writer.writeRepeatedMessage(3, this.timeout_fee, (item: dependency_2.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Fee {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Fee();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.recv_fee, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_2.cosmos.base.v1beta1.Coin));
                        break;
                    case 2:
                        reader.readMessage(message.ack_fee, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_2.cosmos.base.v1beta1.Coin));
                        break;
                    case 3:
                        reader.readMessage(message.timeout_fee, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_2.cosmos.base.v1beta1.Coin));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Fee {
            return Fee.deserialize(bytes);
        }
    }
    export class PacketFee extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fee?: Fee;
            refund_address?: string;
            relayers?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fee" in data && data.fee != undefined) {
                    this.fee = data.fee;
                }
                if ("refund_address" in data && data.refund_address != undefined) {
                    this.refund_address = data.refund_address;
                }
                if ("relayers" in data && data.relayers != undefined) {
                    this.relayers = data.relayers;
                }
            }
        }
        get fee() {
            return pb_1.Message.getWrapperField(this, Fee, 1) as Fee;
        }
        set fee(value: Fee) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_fee() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get refund_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set refund_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get relayers() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set relayers(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            fee?: ReturnType<typeof Fee.prototype.toObject>;
            refund_address?: string;
            relayers?: string[];
        }): PacketFee {
            const message = new PacketFee({});
            if (data.fee != null) {
                message.fee = Fee.fromObject(data.fee);
            }
            if (data.refund_address != null) {
                message.refund_address = data.refund_address;
            }
            if (data.relayers != null) {
                message.relayers = data.relayers;
            }
            return message;
        }
        toObject() {
            const data: {
                fee?: ReturnType<typeof Fee.prototype.toObject>;
                refund_address?: string;
                relayers?: string[];
            } = {};
            if (this.fee != null) {
                data.fee = this.fee.toObject();
            }
            if (this.refund_address != null) {
                data.refund_address = this.refund_address;
            }
            if (this.relayers != null) {
                data.relayers = this.relayers;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_fee)
                writer.writeMessage(1, this.fee, () => this.fee.serialize(writer));
            if (this.refund_address.length)
                writer.writeString(2, this.refund_address);
            if (this.relayers.length)
                writer.writeRepeatedString(3, this.relayers);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PacketFee {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PacketFee();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.fee, () => message.fee = Fee.deserialize(reader));
                        break;
                    case 2:
                        message.refund_address = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PacketFee {
            return PacketFee.deserialize(bytes);
        }
    }
    export class PacketFees extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            packet_fees?: PacketFee[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("packet_fees" in data && data.packet_fees != undefined) {
                    this.packet_fees = data.packet_fees;
                }
            }
        }
        get packet_fees() {
            return pb_1.Message.getRepeatedWrapperField(this, PacketFee, 1) as PacketFee[];
        }
        set packet_fees(value: PacketFee[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            packet_fees?: ReturnType<typeof PacketFee.prototype.toObject>[];
        }): PacketFees {
            const message = new PacketFees({});
            if (data.packet_fees != null) {
                message.packet_fees = data.packet_fees.map(item => PacketFee.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                packet_fees?: ReturnType<typeof PacketFee.prototype.toObject>[];
            } = {};
            if (this.packet_fees != null) {
                data.packet_fees = this.packet_fees.map((item: PacketFee) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.packet_fees.length)
                writer.writeRepeatedMessage(1, this.packet_fees, (item: PacketFee) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PacketFees {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PacketFees();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.packet_fees, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PacketFee.deserialize(reader), PacketFee));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PacketFees {
            return PacketFees.deserialize(bytes);
        }
    }
    export class IdentifiedPacketFees extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            packet_id?: dependency_4.ibc.core.channel.v1.PacketId;
            packet_fees?: PacketFee[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("packet_id" in data && data.packet_id != undefined) {
                    this.packet_id = data.packet_id;
                }
                if ("packet_fees" in data && data.packet_fees != undefined) {
                    this.packet_fees = data.packet_fees;
                }
            }
        }
        get packet_id() {
            return pb_1.Message.getWrapperField(this, dependency_4.ibc.core.channel.v1.PacketId, 1) as dependency_4.ibc.core.channel.v1.PacketId;
        }
        set packet_id(value: dependency_4.ibc.core.channel.v1.PacketId) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_packet_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get packet_fees() {
            return pb_1.Message.getRepeatedWrapperField(this, PacketFee, 2) as PacketFee[];
        }
        set packet_fees(value: PacketFee[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            packet_id?: ReturnType<typeof dependency_4.ibc.core.channel.v1.PacketId.prototype.toObject>;
            packet_fees?: ReturnType<typeof PacketFee.prototype.toObject>[];
        }): IdentifiedPacketFees {
            const message = new IdentifiedPacketFees({});
            if (data.packet_id != null) {
                message.packet_id = dependency_4.ibc.core.channel.v1.PacketId.fromObject(data.packet_id);
            }
            if (data.packet_fees != null) {
                message.packet_fees = data.packet_fees.map(item => PacketFee.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                packet_id?: ReturnType<typeof dependency_4.ibc.core.channel.v1.PacketId.prototype.toObject>;
                packet_fees?: ReturnType<typeof PacketFee.prototype.toObject>[];
            } = {};
            if (this.packet_id != null) {
                data.packet_id = this.packet_id.toObject();
            }
            if (this.packet_fees != null) {
                data.packet_fees = this.packet_fees.map((item: PacketFee) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_packet_id)
                writer.writeMessage(1, this.packet_id, () => this.packet_id.serialize(writer));
            if (this.packet_fees.length)
                writer.writeRepeatedMessage(2, this.packet_fees, (item: PacketFee) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IdentifiedPacketFees {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IdentifiedPacketFees();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.packet_id, () => message.packet_id = dependency_4.ibc.core.channel.v1.PacketId.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.packet_fees, () => pb_1.Message.addToRepeatedWrapperField(message, 2, PacketFee.deserialize(reader), PacketFee));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IdentifiedPacketFees {
            return IdentifiedPacketFees.deserialize(bytes);
        }
    }
}
