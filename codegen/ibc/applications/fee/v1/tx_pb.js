// source: ibc/applications/fee/v1/tx.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

var amino_amino_pb = require('../../../../amino/amino_pb.js')
goog.object.extend(proto, amino_amino_pb)
var gogoproto_gogo_pb = require('../../../../gogoproto/gogo_pb.js')
goog.object.extend(proto, gogoproto_gogo_pb)
var ibc_applications_fee_v1_fee_pb = require('../../../../ibc/applications/fee/v1/fee_pb.js')
goog.object.extend(proto, ibc_applications_fee_v1_fee_pb)
var ibc_core_channel_v1_channel_pb = require('../../../../ibc/core/channel/v1/channel_pb.js')
goog.object.extend(proto, ibc_core_channel_v1_channel_pb)
var cosmos_msg_v1_msg_pb = require('../../../../cosmos/msg/v1/msg_pb.js')
goog.object.extend(proto, cosmos_msg_v1_msg_pb)
goog.exportSymbol('proto.ibc.applications.fee.v1.MsgPayPacketFee', null, global)
goog.exportSymbol(
  'proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync',
  null,
  global,
)
goog.exportSymbol(
  'proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse',
  null,
  global,
)
goog.exportSymbol(
  'proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse',
  null,
  global,
)
goog.exportSymbol(
  'proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee',
  null,
  global,
)
goog.exportSymbol(
  'proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse',
  null,
  global,
)
goog.exportSymbol(
  'proto.ibc.applications.fee.v1.MsgRegisterPayee',
  null,
  global,
)
goog.exportSymbol(
  'proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse',
  null,
  global,
)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.applications.fee.v1.MsgRegisterPayee = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.ibc.applications.fee.v1.MsgRegisterPayee, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.applications.fee.v1.MsgRegisterPayee.displayName =
    'proto.ibc.applications.fee.v1.MsgRegisterPayee'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(
  proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse,
  jspb.Message,
)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse.displayName =
    'proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee = function (
  opt_data,
) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(
  proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee,
  jspb.Message,
)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.displayName =
    'proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse = function (
  opt_data,
) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(
  proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse,
  jspb.Message,
)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse.displayName =
    'proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.ibc.applications.fee.v1.MsgPayPacketFee.repeatedFields_,
    null,
  )
}
goog.inherits(proto.ibc.applications.fee.v1.MsgPayPacketFee, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.applications.fee.v1.MsgPayPacketFee.displayName =
    'proto.ibc.applications.fee.v1.MsgPayPacketFee'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(
  proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse,
  jspb.Message,
)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse.displayName =
    'proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync.displayName =
    'proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse = function (
  opt_data,
) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(
  proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse,
  jspb.Message,
)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse.displayName =
    'proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ibc.applications.fee.v1.MsgRegisterPayee.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.ibc.applications.fee.v1.MsgRegisterPayee.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ibc.applications.fee.v1.MsgRegisterPayee} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ibc.applications.fee.v1.MsgRegisterPayee.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        portId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        channelId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        relayer: jspb.Message.getFieldWithDefault(msg, 3, ''),
        payee: jspb.Message.getFieldWithDefault(msg, 4, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.applications.fee.v1.MsgRegisterPayee}
 */
proto.ibc.applications.fee.v1.MsgRegisterPayee.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.ibc.applications.fee.v1.MsgRegisterPayee()
  return proto.ibc.applications.fee.v1.MsgRegisterPayee.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.applications.fee.v1.MsgRegisterPayee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.applications.fee.v1.MsgRegisterPayee}
 */
proto.ibc.applications.fee.v1.MsgRegisterPayee.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString())
          msg.setPortId(value)
          break
        case 2:
          var value = /** @type {string} */ (reader.readString())
          msg.setChannelId(value)
          break
        case 3:
          var value = /** @type {string} */ (reader.readString())
          msg.setRelayer(value)
          break
        case 4:
          var value = /** @type {string} */ (reader.readString())
          msg.setPayee(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.applications.fee.v1.MsgRegisterPayee.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.ibc.applications.fee.v1.MsgRegisterPayee.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.applications.fee.v1.MsgRegisterPayee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.applications.fee.v1.MsgRegisterPayee.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getPortId()
    if (f.length > 0) {
      writer.writeString(1, f)
    }
    f = message.getChannelId()
    if (f.length > 0) {
      writer.writeString(2, f)
    }
    f = message.getRelayer()
    if (f.length > 0) {
      writer.writeString(3, f)
    }
    f = message.getPayee()
    if (f.length > 0) {
      writer.writeString(4, f)
    }
  }

/**
 * optional string port_id = 1;
 * @return {string}
 */
proto.ibc.applications.fee.v1.MsgRegisterPayee.prototype.getPortId =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
  }

/**
 * @param {string} value
 * @return {!proto.ibc.applications.fee.v1.MsgRegisterPayee} returns this
 */
proto.ibc.applications.fee.v1.MsgRegisterPayee.prototype.setPortId = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string channel_id = 2;
 * @return {string}
 */
proto.ibc.applications.fee.v1.MsgRegisterPayee.prototype.getChannelId =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
  }

/**
 * @param {string} value
 * @return {!proto.ibc.applications.fee.v1.MsgRegisterPayee} returns this
 */
proto.ibc.applications.fee.v1.MsgRegisterPayee.prototype.setChannelId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value)
  }

/**
 * optional string relayer = 3;
 * @return {string}
 */
proto.ibc.applications.fee.v1.MsgRegisterPayee.prototype.getRelayer =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
  }

/**
 * @param {string} value
 * @return {!proto.ibc.applications.fee.v1.MsgRegisterPayee} returns this
 */
proto.ibc.applications.fee.v1.MsgRegisterPayee.prototype.setRelayer = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string payee = 4;
 * @return {string}
 */
proto.ibc.applications.fee.v1.MsgRegisterPayee.prototype.getPayee =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
  }

/**
 * @param {string} value
 * @return {!proto.ibc.applications.fee.v1.MsgRegisterPayee} returns this
 */
proto.ibc.applications.fee.v1.MsgRegisterPayee.prototype.setPayee = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {}

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse}
 */
proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg = new proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse()
    return proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse}
 */
proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.applications.fee.v1.MsgRegisterPayeeResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.prototype.toObject =
    function (opt_includeInstance) {
      return proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {
          portId: jspb.Message.getFieldWithDefault(msg, 1, ''),
          channelId: jspb.Message.getFieldWithDefault(msg, 2, ''),
          relayer: jspb.Message.getFieldWithDefault(msg, 3, ''),
          counterpartyPayee: jspb.Message.getFieldWithDefault(msg, 4, ''),
        }

      if (includeInstance) {
        obj.$jspbMessageInstance = msg
      }
      return obj
    }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee}
 */
proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg = new proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee()
    return proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee}
 */
proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString())
          msg.setPortId(value)
          break
        case 2:
          var value = /** @type {string} */ (reader.readString())
          msg.setChannelId(value)
          break
        case 3:
          var value = /** @type {string} */ (reader.readString())
          msg.setRelayer(value)
          break
        case 4:
          var value = /** @type {string} */ (reader.readString())
          msg.setCounterpartyPayee(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getPortId()
    if (f.length > 0) {
      writer.writeString(1, f)
    }
    f = message.getChannelId()
    if (f.length > 0) {
      writer.writeString(2, f)
    }
    f = message.getRelayer()
    if (f.length > 0) {
      writer.writeString(3, f)
    }
    f = message.getCounterpartyPayee()
    if (f.length > 0) {
      writer.writeString(4, f)
    }
  }

/**
 * optional string port_id = 1;
 * @return {string}
 */
proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.prototype.getPortId =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
  }

/**
 * @param {string} value
 * @return {!proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee} returns this
 */
proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.prototype.setPortId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value)
  }

/**
 * optional string channel_id = 2;
 * @return {string}
 */
proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.prototype.getChannelId =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
  }

/**
 * @param {string} value
 * @return {!proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee} returns this
 */
proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.prototype.setChannelId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value)
  }

/**
 * optional string relayer = 3;
 * @return {string}
 */
proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.prototype.getRelayer =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
  }

/**
 * @param {string} value
 * @return {!proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee} returns this
 */
proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.prototype.setRelayer =
  function (value) {
    return jspb.Message.setProto3StringField(this, 3, value)
  }

/**
 * optional string counterparty_payee = 4;
 * @return {string}
 */
proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.prototype.getCounterpartyPayee =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
  }

/**
 * @param {string} value
 * @return {!proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee} returns this
 */
proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.prototype.setCounterpartyPayee =
  function (value) {
    return jspb.Message.setProto3StringField(this, 4, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {}

      if (includeInstance) {
        obj.$jspbMessageInstance = msg
      }
      return obj
    }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse}
 */
proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg =
      new proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse()
    return proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse}
 */
proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
  }

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee.repeatedFields_ = [5]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ibc.applications.fee.v1.MsgPayPacketFee.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.ibc.applications.fee.v1.MsgPayPacketFee.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ibc.applications.fee.v1.MsgPayPacketFee} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ibc.applications.fee.v1.MsgPayPacketFee.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        fee:
          (f = msg.getFee()) &&
          ibc_applications_fee_v1_fee_pb.Fee.toObject(includeInstance, f),
        sourcePortId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        sourceChannelId: jspb.Message.getFieldWithDefault(msg, 3, ''),
        signer: jspb.Message.getFieldWithDefault(msg, 4, ''),
        relayersList:
          (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFee}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.ibc.applications.fee.v1.MsgPayPacketFee()
  return proto.ibc.applications.fee.v1.MsgPayPacketFee.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.applications.fee.v1.MsgPayPacketFee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFee}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = new ibc_applications_fee_v1_fee_pb.Fee()
          reader.readMessage(
            value,
            ibc_applications_fee_v1_fee_pb.Fee.deserializeBinaryFromReader,
          )
          msg.setFee(value)
          break
        case 2:
          var value = /** @type {string} */ (reader.readString())
          msg.setSourcePortId(value)
          break
        case 3:
          var value = /** @type {string} */ (reader.readString())
          msg.setSourceChannelId(value)
          break
        case 4:
          var value = /** @type {string} */ (reader.readString())
          msg.setSigner(value)
          break
        case 5:
          var value = /** @type {string} */ (reader.readString())
          msg.addRelayers(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.ibc.applications.fee.v1.MsgPayPacketFee.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.applications.fee.v1.MsgPayPacketFee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getFee()
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        ibc_applications_fee_v1_fee_pb.Fee.serializeBinaryToWriter,
      )
    }
    f = message.getSourcePortId()
    if (f.length > 0) {
      writer.writeString(2, f)
    }
    f = message.getSourceChannelId()
    if (f.length > 0) {
      writer.writeString(3, f)
    }
    f = message.getSigner()
    if (f.length > 0) {
      writer.writeString(4, f)
    }
    f = message.getRelayersList()
    if (f.length > 0) {
      writer.writeRepeatedString(5, f)
    }
  }

/**
 * optional Fee fee = 1;
 * @return {?proto.ibc.applications.fee.v1.Fee}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee.prototype.getFee = function () {
  return /** @type{?proto.ibc.applications.fee.v1.Fee} */ (
    jspb.Message.getWrapperField(this, ibc_applications_fee_v1_fee_pb.Fee, 1)
  )
}

/**
 * @param {?proto.ibc.applications.fee.v1.Fee|undefined} value
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFee} returns this
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee.prototype.setFee = function (
  value,
) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFee} returns this
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee.prototype.clearFee = function () {
  return this.setFee(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee.prototype.hasFee = function () {
  return jspb.Message.getField(this, 1) != null
}

/**
 * optional string source_port_id = 2;
 * @return {string}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee.prototype.getSourcePortId =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
  }

/**
 * @param {string} value
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFee} returns this
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee.prototype.setSourcePortId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value)
  }

/**
 * optional string source_channel_id = 3;
 * @return {string}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee.prototype.getSourceChannelId =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
  }

/**
 * @param {string} value
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFee} returns this
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee.prototype.setSourceChannelId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 3, value)
  }

/**
 * optional string signer = 4;
 * @return {string}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee.prototype.getSigner =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
  }

/**
 * @param {string} value
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFee} returns this
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee.prototype.setSigner = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * repeated string relayers = 5;
 * @return {!Array<string>}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee.prototype.getRelayersList =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.getRepeatedField(this, 5)
    )
  }

/**
 * @param {!Array<string>} value
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFee} returns this
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee.prototype.setRelayersList =
  function (value) {
    return jspb.Message.setField(this, 5, value || [])
  }

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFee} returns this
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee.prototype.addRelayers = function (
  value,
  opt_index,
) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFee} returns this
 */
proto.ibc.applications.fee.v1.MsgPayPacketFee.prototype.clearRelayersList =
  function () {
    return this.setRelayersList([])
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {}

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg = new proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse()
    return proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync.prototype.toObject =
    function (opt_includeInstance) {
      return proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        packetId:
          (f = msg.getPacketId()) &&
          ibc_core_channel_v1_channel_pb.PacketId.toObject(includeInstance, f),
        packetFee:
          (f = msg.getPacketFee()) &&
          ibc_applications_fee_v1_fee_pb.PacketFee.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg = new proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync()
    return proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = new ibc_core_channel_v1_channel_pb.PacketId()
          reader.readMessage(
            value,
            ibc_core_channel_v1_channel_pb.PacketId.deserializeBinaryFromReader,
          )
          msg.setPacketId(value)
          break
        case 2:
          var value = new ibc_applications_fee_v1_fee_pb.PacketFee()
          reader.readMessage(
            value,
            ibc_applications_fee_v1_fee_pb.PacketFee
              .deserializeBinaryFromReader,
          )
          msg.setPacketFee(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getPacketId()
    if (f != null) {
      writer.writeMessage(
        1,
        f,
        ibc_core_channel_v1_channel_pb.PacketId.serializeBinaryToWriter,
      )
    }
    f = message.getPacketFee()
    if (f != null) {
      writer.writeMessage(
        2,
        f,
        ibc_applications_fee_v1_fee_pb.PacketFee.serializeBinaryToWriter,
      )
    }
  }

/**
 * optional ibc.core.channel.v1.PacketId packet_id = 1;
 * @return {?proto.ibc.core.channel.v1.PacketId}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync.prototype.getPacketId =
  function () {
    return /** @type{?proto.ibc.core.channel.v1.PacketId} */ (
      jspb.Message.getWrapperField(
        this,
        ibc_core_channel_v1_channel_pb.PacketId,
        1,
      )
    )
  }

/**
 * @param {?proto.ibc.core.channel.v1.PacketId|undefined} value
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync} returns this
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync.prototype.setPacketId =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value)
  }

/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync} returns this
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync.prototype.clearPacketId =
  function () {
    return this.setPacketId(undefined)
  }

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync.prototype.hasPacketId =
  function () {
    return jspb.Message.getField(this, 1) != null
  }

/**
 * optional PacketFee packet_fee = 2;
 * @return {?proto.ibc.applications.fee.v1.PacketFee}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync.prototype.getPacketFee =
  function () {
    return /** @type{?proto.ibc.applications.fee.v1.PacketFee} */ (
      jspb.Message.getWrapperField(
        this,
        ibc_applications_fee_v1_fee_pb.PacketFee,
        2,
      )
    )
  }

/**
 * @param {?proto.ibc.applications.fee.v1.PacketFee|undefined} value
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync} returns this
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync.prototype.setPacketFee =
  function (value) {
    return jspb.Message.setWrapperField(this, 2, value)
  }

/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync} returns this
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync.prototype.clearPacketFee =
  function () {
    return this.setPacketFee(undefined)
  }

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeAsync.prototype.hasPacketFee =
  function () {
    return jspb.Message.getField(this, 2) != null
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {}

      if (includeInstance) {
        obj.$jspbMessageInstance = msg
      }
      return obj
    }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg = new proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse()
    return proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
  }

goog.object.extend(exports, proto.ibc.applications.fee.v1)
