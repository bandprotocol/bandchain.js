/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ibc/applications/fee/v1/metadata.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace ibc.applications.fee.v1 {
    export class Metadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fee_version?: string;
            app_version?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fee_version" in data && data.fee_version != undefined) {
                    this.fee_version = data.fee_version;
                }
                if ("app_version" in data && data.app_version != undefined) {
                    this.app_version = data.app_version;
                }
            }
        }
        get fee_version() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set fee_version(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get app_version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set app_version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            fee_version?: string;
            app_version?: string;
        }): Metadata {
            const message = new Metadata({});
            if (data.fee_version != null) {
                message.fee_version = data.fee_version;
            }
            if (data.app_version != null) {
                message.app_version = data.app_version;
            }
            return message;
        }
        toObject() {
            const data: {
                fee_version?: string;
                app_version?: string;
            } = {};
            if (this.fee_version != null) {
                data.fee_version = this.fee_version;
            }
            if (this.app_version != null) {
                data.app_version = this.app_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fee_version.length)
                writer.writeString(1, this.fee_version);
            if (this.app_version.length)
                writer.writeString(2, this.app_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Metadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Metadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fee_version = reader.readString();
                        break;
                    case 2:
                        message.app_version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Metadata {
            return Metadata.deserialize(bytes);
        }
    }
}
