// source: ibc/lightclients/wasm/v1/tx.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

var cosmos_msg_v1_msg_pb = require('../../../../cosmos/msg/v1/msg_pb.js')
goog.object.extend(proto, cosmos_msg_v1_msg_pb)
goog.exportSymbol(
  'proto.ibc.lightclients.wasm.v1.MsgMigrateContract',
  null,
  global,
)
goog.exportSymbol(
  'proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse',
  null,
  global,
)
goog.exportSymbol(
  'proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum',
  null,
  global,
)
goog.exportSymbol(
  'proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse',
  null,
  global,
)
goog.exportSymbol('proto.ibc.lightclients.wasm.v1.MsgStoreCode', null, global)
goog.exportSymbol(
  'proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse',
  null,
  global,
)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCode = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.ibc.lightclients.wasm.v1.MsgStoreCode, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.wasm.v1.MsgStoreCode.displayName =
    'proto.ibc.lightclients.wasm.v1.MsgStoreCode'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse.displayName =
    'proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum.displayName =
    'proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(
  proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse,
  jspb.Message,
)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse.displayName =
    'proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContract = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.ibc.lightclients.wasm.v1.MsgMigrateContract, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.wasm.v1.MsgMigrateContract.displayName =
    'proto.ibc.lightclients.wasm.v1.MsgMigrateContract'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse = function (
  opt_data,
) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(
  proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse,
  jspb.Message,
)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse.displayName =
    'proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ibc.lightclients.wasm.v1.MsgStoreCode.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.ibc.lightclients.wasm.v1.MsgStoreCode.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ibc.lightclients.wasm.v1.MsgStoreCode} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ibc.lightclients.wasm.v1.MsgStoreCode.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        signer: jspb.Message.getFieldWithDefault(msg, 1, ''),
        wasmByteCode: msg.getWasmByteCode_asB64(),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.wasm.v1.MsgStoreCode}
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCode.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.ibc.lightclients.wasm.v1.MsgStoreCode()
  return proto.ibc.lightclients.wasm.v1.MsgStoreCode.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.wasm.v1.MsgStoreCode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.wasm.v1.MsgStoreCode}
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCode.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString())
          msg.setSigner(value)
          break
        case 2:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setWasmByteCode(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCode.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.ibc.lightclients.wasm.v1.MsgStoreCode.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.wasm.v1.MsgStoreCode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCode.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getSigner()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getWasmByteCode_asU8()
  if (f.length > 0) {
    writer.writeBytes(2, f)
  }
}

/**
 * optional string signer = 1;
 * @return {string}
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCode.prototype.getSigner = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.ibc.lightclients.wasm.v1.MsgStoreCode} returns this
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCode.prototype.setSigner = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional bytes wasm_byte_code = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCode.prototype.getWasmByteCode =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    )
  }

/**
 * optional bytes wasm_byte_code = 2;
 * This is a type-conversion wrapper around `getWasmByteCode()`
 * @return {string}
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCode.prototype.getWasmByteCode_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getWasmByteCode())
    )
  }

/**
 * optional bytes wasm_byte_code = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWasmByteCode()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCode.prototype.getWasmByteCode_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getWasmByteCode())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.wasm.v1.MsgStoreCode} returns this
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCode.prototype.setWasmByteCode =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 2, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        checksum: msg.getChecksum_asB64(),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse}
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg = new proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse()
    return proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse}
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setChecksum(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getChecksum_asU8()
    if (f.length > 0) {
      writer.writeBytes(1, f)
    }
  }

/**
 * optional bytes checksum = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse.prototype.getChecksum =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    )
  }

/**
 * optional bytes checksum = 1;
 * This is a type-conversion wrapper around `getChecksum()`
 * @return {string}
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse.prototype.getChecksum_asB64 =
  function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getChecksum()))
  }

/**
 * optional bytes checksum = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChecksum()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse.prototype.getChecksum_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getChecksum())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse} returns this
 */
proto.ibc.lightclients.wasm.v1.MsgStoreCodeResponse.prototype.setChecksum =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 1, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum.prototype.toObject =
    function (opt_includeInstance) {
      return proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        signer: jspb.Message.getFieldWithDefault(msg, 1, ''),
        checksum: msg.getChecksum_asB64(),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum}
 */
proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum()
  return proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum}
 */
proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString())
          msg.setSigner(value)
          break
        case 2:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setChecksum(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getSigner()
    if (f.length > 0) {
      writer.writeString(1, f)
    }
    f = message.getChecksum_asU8()
    if (f.length > 0) {
      writer.writeBytes(2, f)
    }
  }

/**
 * optional string signer = 1;
 * @return {string}
 */
proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum.prototype.getSigner =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
  }

/**
 * @param {string} value
 * @return {!proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum} returns this
 */
proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum.prototype.setSigner =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value)
  }

/**
 * optional bytes checksum = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum.prototype.getChecksum =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    )
  }

/**
 * optional bytes checksum = 2;
 * This is a type-conversion wrapper around `getChecksum()`
 * @return {string}
 */
proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum.prototype.getChecksum_asB64 =
  function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getChecksum()))
  }

/**
 * optional bytes checksum = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChecksum()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum.prototype.getChecksum_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getChecksum())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum} returns this
 */
proto.ibc.lightclients.wasm.v1.MsgRemoveChecksum.prototype.setChecksum =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 2, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {}

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse}
 */
proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg = new proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse()
    return proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse}
 */
proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.wasm.v1.MsgRemoveChecksumResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ibc.lightclients.wasm.v1.MsgMigrateContract.prototype.toObject =
    function (opt_includeInstance) {
      return proto.ibc.lightclients.wasm.v1.MsgMigrateContract.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ibc.lightclients.wasm.v1.MsgMigrateContract} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ibc.lightclients.wasm.v1.MsgMigrateContract.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        signer: jspb.Message.getFieldWithDefault(msg, 1, ''),
        clientId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        checksum: msg.getChecksum_asB64(),
        msg: msg.getMsg_asB64(),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.wasm.v1.MsgMigrateContract}
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContract.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.ibc.lightclients.wasm.v1.MsgMigrateContract()
  return proto.ibc.lightclients.wasm.v1.MsgMigrateContract.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.wasm.v1.MsgMigrateContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.wasm.v1.MsgMigrateContract}
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContract.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString())
          msg.setSigner(value)
          break
        case 2:
          var value = /** @type {string} */ (reader.readString())
          msg.setClientId(value)
          break
        case 3:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setChecksum(value)
          break
        case 4:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setMsg(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContract.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.ibc.lightclients.wasm.v1.MsgMigrateContract.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.wasm.v1.MsgMigrateContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContract.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getSigner()
    if (f.length > 0) {
      writer.writeString(1, f)
    }
    f = message.getClientId()
    if (f.length > 0) {
      writer.writeString(2, f)
    }
    f = message.getChecksum_asU8()
    if (f.length > 0) {
      writer.writeBytes(3, f)
    }
    f = message.getMsg_asU8()
    if (f.length > 0) {
      writer.writeBytes(4, f)
    }
  }

/**
 * optional string signer = 1;
 * @return {string}
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContract.prototype.getSigner =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
  }

/**
 * @param {string} value
 * @return {!proto.ibc.lightclients.wasm.v1.MsgMigrateContract} returns this
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContract.prototype.setSigner =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value)
  }

/**
 * optional string client_id = 2;
 * @return {string}
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContract.prototype.getClientId =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
  }

/**
 * @param {string} value
 * @return {!proto.ibc.lightclients.wasm.v1.MsgMigrateContract} returns this
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContract.prototype.setClientId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value)
  }

/**
 * optional bytes checksum = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContract.prototype.getChecksum =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 3, '')
    )
  }

/**
 * optional bytes checksum = 3;
 * This is a type-conversion wrapper around `getChecksum()`
 * @return {string}
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContract.prototype.getChecksum_asB64 =
  function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getChecksum()))
  }

/**
 * optional bytes checksum = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChecksum()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContract.prototype.getChecksum_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getChecksum())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.wasm.v1.MsgMigrateContract} returns this
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContract.prototype.setChecksum =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 3, value)
  }

/**
 * optional bytes msg = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContract.prototype.getMsg =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 4, '')
    )
  }

/**
 * optional bytes msg = 4;
 * This is a type-conversion wrapper around `getMsg()`
 * @return {string}
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContract.prototype.getMsg_asB64 =
  function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getMsg()))
  }

/**
 * optional bytes msg = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsg()`
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContract.prototype.getMsg_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getMsg()))
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.lightclients.wasm.v1.MsgMigrateContract} returns this
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContract.prototype.setMsg = function (
  value,
) {
  return jspb.Message.setProto3BytesField(this, 4, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse.toObject =
    function (includeInstance, msg) {
      var f,
        obj = {}

      if (includeInstance) {
        obj.$jspbMessageInstance = msg
      }
      return obj
    }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse}
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg = new proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse()
    return proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse}
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.lightclients.wasm.v1.MsgMigrateContractResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
  }

goog.object.extend(exports, proto.ibc.lightclients.wasm.v1)
