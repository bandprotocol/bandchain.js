// source: ibc/core/connection/v1/connection.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var gogoproto_gogo_pb = require('../../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var ibc_core_commitment_v1_commitment_pb = require('../../../../ibc/core/commitment/v1/commitment_pb.js');
goog.object.extend(proto, ibc_core_commitment_v1_commitment_pb);
goog.exportSymbol('proto.ibc.core.connection.v1.ClientPaths', null, global);
goog.exportSymbol('proto.ibc.core.connection.v1.ConnectionEnd', null, global);
goog.exportSymbol('proto.ibc.core.connection.v1.ConnectionPaths', null, global);
goog.exportSymbol('proto.ibc.core.connection.v1.Counterparty', null, global);
goog.exportSymbol('proto.ibc.core.connection.v1.IdentifiedConnection', null, global);
goog.exportSymbol('proto.ibc.core.connection.v1.Params', null, global);
goog.exportSymbol('proto.ibc.core.connection.v1.State', null, global);
goog.exportSymbol('proto.ibc.core.connection.v1.Version', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.connection.v1.ConnectionEnd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ibc.core.connection.v1.ConnectionEnd.repeatedFields_, null);
};
goog.inherits(proto.ibc.core.connection.v1.ConnectionEnd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.connection.v1.ConnectionEnd.displayName = 'proto.ibc.core.connection.v1.ConnectionEnd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.connection.v1.IdentifiedConnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ibc.core.connection.v1.IdentifiedConnection.repeatedFields_, null);
};
goog.inherits(proto.ibc.core.connection.v1.IdentifiedConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.connection.v1.IdentifiedConnection.displayName = 'proto.ibc.core.connection.v1.IdentifiedConnection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.connection.v1.Counterparty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.connection.v1.Counterparty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.connection.v1.Counterparty.displayName = 'proto.ibc.core.connection.v1.Counterparty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.connection.v1.ClientPaths = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ibc.core.connection.v1.ClientPaths.repeatedFields_, null);
};
goog.inherits(proto.ibc.core.connection.v1.ClientPaths, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.connection.v1.ClientPaths.displayName = 'proto.ibc.core.connection.v1.ClientPaths';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.connection.v1.ConnectionPaths = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ibc.core.connection.v1.ConnectionPaths.repeatedFields_, null);
};
goog.inherits(proto.ibc.core.connection.v1.ConnectionPaths, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.connection.v1.ConnectionPaths.displayName = 'proto.ibc.core.connection.v1.ConnectionPaths';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.connection.v1.Version = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ibc.core.connection.v1.Version.repeatedFields_, null);
};
goog.inherits(proto.ibc.core.connection.v1.Version, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.connection.v1.Version.displayName = 'proto.ibc.core.connection.v1.Version';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.connection.v1.Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.connection.v1.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.connection.v1.Params.displayName = 'proto.ibc.core.connection.v1.Params';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.core.connection.v1.ConnectionEnd.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.connection.v1.ConnectionEnd.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.connection.v1.ConnectionEnd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.connection.v1.ConnectionEnd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.ConnectionEnd.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    versionsList: jspb.Message.toObjectList(msg.getVersionsList(),
    proto.ibc.core.connection.v1.Version.toObject, includeInstance),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0),
    counterparty: (f = msg.getCounterparty()) && proto.ibc.core.connection.v1.Counterparty.toObject(includeInstance, f),
    delayPeriod: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.connection.v1.ConnectionEnd}
 */
proto.ibc.core.connection.v1.ConnectionEnd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.connection.v1.ConnectionEnd;
  return proto.ibc.core.connection.v1.ConnectionEnd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.connection.v1.ConnectionEnd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.connection.v1.ConnectionEnd}
 */
proto.ibc.core.connection.v1.ConnectionEnd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = new proto.ibc.core.connection.v1.Version;
      reader.readMessage(value,proto.ibc.core.connection.v1.Version.deserializeBinaryFromReader);
      msg.addVersions(value);
      break;
    case 3:
      var value = /** @type {!proto.ibc.core.connection.v1.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 4:
      var value = new proto.ibc.core.connection.v1.Counterparty;
      reader.readMessage(value,proto.ibc.core.connection.v1.Counterparty.deserializeBinaryFromReader);
      msg.setCounterparty(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDelayPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.ConnectionEnd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.connection.v1.ConnectionEnd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.connection.v1.ConnectionEnd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.ConnectionEnd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ibc.core.connection.v1.Version.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getCounterparty();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ibc.core.connection.v1.Counterparty.serializeBinaryToWriter
    );
  }
  f = message.getDelayPeriod();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.ibc.core.connection.v1.ConnectionEnd.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.ConnectionEnd} returns this
 */
proto.ibc.core.connection.v1.ConnectionEnd.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Version versions = 2;
 * @return {!Array<!proto.ibc.core.connection.v1.Version>}
 */
proto.ibc.core.connection.v1.ConnectionEnd.prototype.getVersionsList = function() {
  return /** @type{!Array<!proto.ibc.core.connection.v1.Version>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ibc.core.connection.v1.Version, 2));
};


/**
 * @param {!Array<!proto.ibc.core.connection.v1.Version>} value
 * @return {!proto.ibc.core.connection.v1.ConnectionEnd} returns this
*/
proto.ibc.core.connection.v1.ConnectionEnd.prototype.setVersionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ibc.core.connection.v1.Version=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ibc.core.connection.v1.Version}
 */
proto.ibc.core.connection.v1.ConnectionEnd.prototype.addVersions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ibc.core.connection.v1.Version, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.core.connection.v1.ConnectionEnd} returns this
 */
proto.ibc.core.connection.v1.ConnectionEnd.prototype.clearVersionsList = function() {
  return this.setVersionsList([]);
};


/**
 * optional State state = 3;
 * @return {!proto.ibc.core.connection.v1.State}
 */
proto.ibc.core.connection.v1.ConnectionEnd.prototype.getState = function() {
  return /** @type {!proto.ibc.core.connection.v1.State} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ibc.core.connection.v1.State} value
 * @return {!proto.ibc.core.connection.v1.ConnectionEnd} returns this
 */
proto.ibc.core.connection.v1.ConnectionEnd.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Counterparty counterparty = 4;
 * @return {?proto.ibc.core.connection.v1.Counterparty}
 */
proto.ibc.core.connection.v1.ConnectionEnd.prototype.getCounterparty = function() {
  return /** @type{?proto.ibc.core.connection.v1.Counterparty} */ (
    jspb.Message.getWrapperField(this, proto.ibc.core.connection.v1.Counterparty, 4));
};


/**
 * @param {?proto.ibc.core.connection.v1.Counterparty|undefined} value
 * @return {!proto.ibc.core.connection.v1.ConnectionEnd} returns this
*/
proto.ibc.core.connection.v1.ConnectionEnd.prototype.setCounterparty = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.connection.v1.ConnectionEnd} returns this
 */
proto.ibc.core.connection.v1.ConnectionEnd.prototype.clearCounterparty = function() {
  return this.setCounterparty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.connection.v1.ConnectionEnd.prototype.hasCounterparty = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 delay_period = 5;
 * @return {number}
 */
proto.ibc.core.connection.v1.ConnectionEnd.prototype.getDelayPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.core.connection.v1.ConnectionEnd} returns this
 */
proto.ibc.core.connection.v1.ConnectionEnd.prototype.setDelayPeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.core.connection.v1.IdentifiedConnection.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.connection.v1.IdentifiedConnection.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.connection.v1.IdentifiedConnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.connection.v1.IdentifiedConnection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.IdentifiedConnection.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    versionsList: jspb.Message.toObjectList(msg.getVersionsList(),
    proto.ibc.core.connection.v1.Version.toObject, includeInstance),
    state: jspb.Message.getFieldWithDefault(msg, 4, 0),
    counterparty: (f = msg.getCounterparty()) && proto.ibc.core.connection.v1.Counterparty.toObject(includeInstance, f),
    delayPeriod: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.connection.v1.IdentifiedConnection}
 */
proto.ibc.core.connection.v1.IdentifiedConnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.connection.v1.IdentifiedConnection;
  return proto.ibc.core.connection.v1.IdentifiedConnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.connection.v1.IdentifiedConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.connection.v1.IdentifiedConnection}
 */
proto.ibc.core.connection.v1.IdentifiedConnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 3:
      var value = new proto.ibc.core.connection.v1.Version;
      reader.readMessage(value,proto.ibc.core.connection.v1.Version.deserializeBinaryFromReader);
      msg.addVersions(value);
      break;
    case 4:
      var value = /** @type {!proto.ibc.core.connection.v1.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 5:
      var value = new proto.ibc.core.connection.v1.Counterparty;
      reader.readMessage(value,proto.ibc.core.connection.v1.Counterparty.deserializeBinaryFromReader);
      msg.setCounterparty(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDelayPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.IdentifiedConnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.connection.v1.IdentifiedConnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.connection.v1.IdentifiedConnection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.IdentifiedConnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ibc.core.connection.v1.Version.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCounterparty();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ibc.core.connection.v1.Counterparty.serializeBinaryToWriter
    );
  }
  f = message.getDelayPeriod();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ibc.core.connection.v1.IdentifiedConnection.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.IdentifiedConnection} returns this
 */
proto.ibc.core.connection.v1.IdentifiedConnection.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string client_id = 2;
 * @return {string}
 */
proto.ibc.core.connection.v1.IdentifiedConnection.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.IdentifiedConnection} returns this
 */
proto.ibc.core.connection.v1.IdentifiedConnection.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Version versions = 3;
 * @return {!Array<!proto.ibc.core.connection.v1.Version>}
 */
proto.ibc.core.connection.v1.IdentifiedConnection.prototype.getVersionsList = function() {
  return /** @type{!Array<!proto.ibc.core.connection.v1.Version>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ibc.core.connection.v1.Version, 3));
};


/**
 * @param {!Array<!proto.ibc.core.connection.v1.Version>} value
 * @return {!proto.ibc.core.connection.v1.IdentifiedConnection} returns this
*/
proto.ibc.core.connection.v1.IdentifiedConnection.prototype.setVersionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ibc.core.connection.v1.Version=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ibc.core.connection.v1.Version}
 */
proto.ibc.core.connection.v1.IdentifiedConnection.prototype.addVersions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ibc.core.connection.v1.Version, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.core.connection.v1.IdentifiedConnection} returns this
 */
proto.ibc.core.connection.v1.IdentifiedConnection.prototype.clearVersionsList = function() {
  return this.setVersionsList([]);
};


/**
 * optional State state = 4;
 * @return {!proto.ibc.core.connection.v1.State}
 */
proto.ibc.core.connection.v1.IdentifiedConnection.prototype.getState = function() {
  return /** @type {!proto.ibc.core.connection.v1.State} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.ibc.core.connection.v1.State} value
 * @return {!proto.ibc.core.connection.v1.IdentifiedConnection} returns this
 */
proto.ibc.core.connection.v1.IdentifiedConnection.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Counterparty counterparty = 5;
 * @return {?proto.ibc.core.connection.v1.Counterparty}
 */
proto.ibc.core.connection.v1.IdentifiedConnection.prototype.getCounterparty = function() {
  return /** @type{?proto.ibc.core.connection.v1.Counterparty} */ (
    jspb.Message.getWrapperField(this, proto.ibc.core.connection.v1.Counterparty, 5));
};


/**
 * @param {?proto.ibc.core.connection.v1.Counterparty|undefined} value
 * @return {!proto.ibc.core.connection.v1.IdentifiedConnection} returns this
*/
proto.ibc.core.connection.v1.IdentifiedConnection.prototype.setCounterparty = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.connection.v1.IdentifiedConnection} returns this
 */
proto.ibc.core.connection.v1.IdentifiedConnection.prototype.clearCounterparty = function() {
  return this.setCounterparty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.connection.v1.IdentifiedConnection.prototype.hasCounterparty = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 delay_period = 6;
 * @return {number}
 */
proto.ibc.core.connection.v1.IdentifiedConnection.prototype.getDelayPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.core.connection.v1.IdentifiedConnection} returns this
 */
proto.ibc.core.connection.v1.IdentifiedConnection.prototype.setDelayPeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.connection.v1.Counterparty.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.connection.v1.Counterparty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.connection.v1.Counterparty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.Counterparty.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connectionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    prefix: (f = msg.getPrefix()) && ibc_core_commitment_v1_commitment_pb.MerklePrefix.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.connection.v1.Counterparty}
 */
proto.ibc.core.connection.v1.Counterparty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.connection.v1.Counterparty;
  return proto.ibc.core.connection.v1.Counterparty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.connection.v1.Counterparty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.connection.v1.Counterparty}
 */
proto.ibc.core.connection.v1.Counterparty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    case 3:
      var value = new ibc_core_commitment_v1_commitment_pb.MerklePrefix;
      reader.readMessage(value,ibc_core_commitment_v1_commitment_pb.MerklePrefix.deserializeBinaryFromReader);
      msg.setPrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.Counterparty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.connection.v1.Counterparty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.connection.v1.Counterparty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.Counterparty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrefix();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ibc_core_commitment_v1_commitment_pb.MerklePrefix.serializeBinaryToWriter
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.ibc.core.connection.v1.Counterparty.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.Counterparty} returns this
 */
proto.ibc.core.connection.v1.Counterparty.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string connection_id = 2;
 * @return {string}
 */
proto.ibc.core.connection.v1.Counterparty.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.Counterparty} returns this
 */
proto.ibc.core.connection.v1.Counterparty.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ibc.core.commitment.v1.MerklePrefix prefix = 3;
 * @return {?proto.ibc.core.commitment.v1.MerklePrefix}
 */
proto.ibc.core.connection.v1.Counterparty.prototype.getPrefix = function() {
  return /** @type{?proto.ibc.core.commitment.v1.MerklePrefix} */ (
    jspb.Message.getWrapperField(this, ibc_core_commitment_v1_commitment_pb.MerklePrefix, 3));
};


/**
 * @param {?proto.ibc.core.commitment.v1.MerklePrefix|undefined} value
 * @return {!proto.ibc.core.connection.v1.Counterparty} returns this
*/
proto.ibc.core.connection.v1.Counterparty.prototype.setPrefix = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.connection.v1.Counterparty} returns this
 */
proto.ibc.core.connection.v1.Counterparty.prototype.clearPrefix = function() {
  return this.setPrefix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.connection.v1.Counterparty.prototype.hasPrefix = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.core.connection.v1.ClientPaths.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.connection.v1.ClientPaths.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.connection.v1.ClientPaths.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.connection.v1.ClientPaths} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.ClientPaths.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.connection.v1.ClientPaths}
 */
proto.ibc.core.connection.v1.ClientPaths.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.connection.v1.ClientPaths;
  return proto.ibc.core.connection.v1.ClientPaths.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.connection.v1.ClientPaths} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.connection.v1.ClientPaths}
 */
proto.ibc.core.connection.v1.ClientPaths.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPaths(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.ClientPaths.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.connection.v1.ClientPaths.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.connection.v1.ClientPaths} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.ClientPaths.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string paths = 1;
 * @return {!Array<string>}
 */
proto.ibc.core.connection.v1.ClientPaths.prototype.getPathsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ibc.core.connection.v1.ClientPaths} returns this
 */
proto.ibc.core.connection.v1.ClientPaths.prototype.setPathsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ibc.core.connection.v1.ClientPaths} returns this
 */
proto.ibc.core.connection.v1.ClientPaths.prototype.addPaths = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.core.connection.v1.ClientPaths} returns this
 */
proto.ibc.core.connection.v1.ClientPaths.prototype.clearPathsList = function() {
  return this.setPathsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.core.connection.v1.ConnectionPaths.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.connection.v1.ConnectionPaths.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.connection.v1.ConnectionPaths.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.connection.v1.ConnectionPaths} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.ConnectionPaths.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pathsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.connection.v1.ConnectionPaths}
 */
proto.ibc.core.connection.v1.ConnectionPaths.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.connection.v1.ConnectionPaths;
  return proto.ibc.core.connection.v1.ConnectionPaths.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.connection.v1.ConnectionPaths} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.connection.v1.ConnectionPaths}
 */
proto.ibc.core.connection.v1.ConnectionPaths.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPaths(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.ConnectionPaths.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.connection.v1.ConnectionPaths.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.connection.v1.ConnectionPaths} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.ConnectionPaths.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPathsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.ibc.core.connection.v1.ConnectionPaths.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.ConnectionPaths} returns this
 */
proto.ibc.core.connection.v1.ConnectionPaths.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string paths = 2;
 * @return {!Array<string>}
 */
proto.ibc.core.connection.v1.ConnectionPaths.prototype.getPathsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ibc.core.connection.v1.ConnectionPaths} returns this
 */
proto.ibc.core.connection.v1.ConnectionPaths.prototype.setPathsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ibc.core.connection.v1.ConnectionPaths} returns this
 */
proto.ibc.core.connection.v1.ConnectionPaths.prototype.addPaths = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.core.connection.v1.ConnectionPaths} returns this
 */
proto.ibc.core.connection.v1.ConnectionPaths.prototype.clearPathsList = function() {
  return this.setPathsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.core.connection.v1.Version.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.connection.v1.Version.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.connection.v1.Version.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.connection.v1.Version} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.Version.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    featuresList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.connection.v1.Version}
 */
proto.ibc.core.connection.v1.Version.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.connection.v1.Version;
  return proto.ibc.core.connection.v1.Version.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.connection.v1.Version} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.connection.v1.Version}
 */
proto.ibc.core.connection.v1.Version.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFeatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.Version.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.connection.v1.Version.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.connection.v1.Version} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.Version.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.ibc.core.connection.v1.Version.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.Version} returns this
 */
proto.ibc.core.connection.v1.Version.prototype.setIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string features = 2;
 * @return {!Array<string>}
 */
proto.ibc.core.connection.v1.Version.prototype.getFeaturesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ibc.core.connection.v1.Version} returns this
 */
proto.ibc.core.connection.v1.Version.prototype.setFeaturesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ibc.core.connection.v1.Version} returns this
 */
proto.ibc.core.connection.v1.Version.prototype.addFeatures = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.core.connection.v1.Version} returns this
 */
proto.ibc.core.connection.v1.Version.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.connection.v1.Params.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.connection.v1.Params.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.connection.v1.Params} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.Params.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxExpectedTimePerBlock: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.connection.v1.Params}
 */
proto.ibc.core.connection.v1.Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.connection.v1.Params;
  return proto.ibc.core.connection.v1.Params.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.connection.v1.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.connection.v1.Params}
 */
proto.ibc.core.connection.v1.Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxExpectedTimePerBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.connection.v1.Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.connection.v1.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxExpectedTimePerBlock();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 max_expected_time_per_block = 1;
 * @return {number}
 */
proto.ibc.core.connection.v1.Params.prototype.getMaxExpectedTimePerBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.core.connection.v1.Params} returns this
 */
proto.ibc.core.connection.v1.Params.prototype.setMaxExpectedTimePerBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.ibc.core.connection.v1.State = {
  STATE_UNINITIALIZED_UNSPECIFIED: 0,
  STATE_INIT: 1,
  STATE_TRYOPEN: 2,
  STATE_OPEN: 3
};

goog.object.extend(exports, proto.ibc.core.connection.v1);
