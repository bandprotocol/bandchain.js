// source: ibc/core/connection/v1/tx.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var gogoproto_gogo_pb = require('../../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var cosmos_msg_v1_msg_pb = require('../../../../cosmos/msg/v1/msg_pb.js');
goog.object.extend(proto, cosmos_msg_v1_msg_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var ibc_core_client_v1_client_pb = require('../../../../ibc/core/client/v1/client_pb.js');
goog.object.extend(proto, ibc_core_client_v1_client_pb);
var ibc_core_connection_v1_connection_pb = require('../../../../ibc/core/connection/v1/connection_pb.js');
goog.object.extend(proto, ibc_core_connection_v1_connection_pb);
goog.exportSymbol('proto.ibc.core.connection.v1.MsgConnectionOpenAck', null, global);
goog.exportSymbol('proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse', null, global);
goog.exportSymbol('proto.ibc.core.connection.v1.MsgConnectionOpenConfirm', null, global);
goog.exportSymbol('proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse', null, global);
goog.exportSymbol('proto.ibc.core.connection.v1.MsgConnectionOpenInit', null, global);
goog.exportSymbol('proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse', null, global);
goog.exportSymbol('proto.ibc.core.connection.v1.MsgConnectionOpenTry', null, global);
goog.exportSymbol('proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse', null, global);
goog.exportSymbol('proto.ibc.core.connection.v1.MsgUpdateParams', null, global);
goog.exportSymbol('proto.ibc.core.connection.v1.MsgUpdateParamsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.connection.v1.MsgConnectionOpenInit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.connection.v1.MsgConnectionOpenInit.displayName = 'proto.ibc.core.connection.v1.MsgConnectionOpenInit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse.displayName = 'proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ibc.core.connection.v1.MsgConnectionOpenTry.repeatedFields_, null);
};
goog.inherits(proto.ibc.core.connection.v1.MsgConnectionOpenTry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.connection.v1.MsgConnectionOpenTry.displayName = 'proto.ibc.core.connection.v1.MsgConnectionOpenTry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse.displayName = 'proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.connection.v1.MsgConnectionOpenAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.connection.v1.MsgConnectionOpenAck.displayName = 'proto.ibc.core.connection.v1.MsgConnectionOpenAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse.displayName = 'proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.connection.v1.MsgConnectionOpenConfirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.displayName = 'proto.ibc.core.connection.v1.MsgConnectionOpenConfirm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse.displayName = 'proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.connection.v1.MsgUpdateParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.connection.v1.MsgUpdateParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.connection.v1.MsgUpdateParams.displayName = 'proto.ibc.core.connection.v1.MsgUpdateParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.connection.v1.MsgUpdateParamsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.core.connection.v1.MsgUpdateParamsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.connection.v1.MsgUpdateParamsResponse.displayName = 'proto.ibc.core.connection.v1.MsgUpdateParamsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInit.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.connection.v1.MsgConnectionOpenInit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenInit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInit.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    counterparty: (f = msg.getCounterparty()) && ibc_core_connection_v1_connection_pb.Counterparty.toObject(includeInstance, f),
    version: (f = msg.getVersion()) && ibc_core_connection_v1_connection_pb.Version.toObject(includeInstance, f),
    delayPeriod: jspb.Message.getFieldWithDefault(msg, 4, 0),
    signer: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenInit}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.connection.v1.MsgConnectionOpenInit;
  return proto.ibc.core.connection.v1.MsgConnectionOpenInit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenInit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenInit}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = new ibc_core_connection_v1_connection_pb.Counterparty;
      reader.readMessage(value,ibc_core_connection_v1_connection_pb.Counterparty.deserializeBinaryFromReader);
      msg.setCounterparty(value);
      break;
    case 3:
      var value = new ibc_core_connection_v1_connection_pb.Version;
      reader.readMessage(value,ibc_core_connection_v1_connection_pb.Version.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDelayPeriod(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.connection.v1.MsgConnectionOpenInit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenInit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCounterparty();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ibc_core_connection_v1_connection_pb.Counterparty.serializeBinaryToWriter
    );
  }
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ibc_core_connection_v1_connection_pb.Version.serializeBinaryToWriter
    );
  }
  f = message.getDelayPeriod();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInit.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenInit} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInit.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Counterparty counterparty = 2;
 * @return {?proto.ibc.core.connection.v1.Counterparty}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInit.prototype.getCounterparty = function() {
  return /** @type{?proto.ibc.core.connection.v1.Counterparty} */ (
    jspb.Message.getWrapperField(this, ibc_core_connection_v1_connection_pb.Counterparty, 2));
};


/**
 * @param {?proto.ibc.core.connection.v1.Counterparty|undefined} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenInit} returns this
*/
proto.ibc.core.connection.v1.MsgConnectionOpenInit.prototype.setCounterparty = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenInit} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInit.prototype.clearCounterparty = function() {
  return this.setCounterparty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInit.prototype.hasCounterparty = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Version version = 3;
 * @return {?proto.ibc.core.connection.v1.Version}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInit.prototype.getVersion = function() {
  return /** @type{?proto.ibc.core.connection.v1.Version} */ (
    jspb.Message.getWrapperField(this, ibc_core_connection_v1_connection_pb.Version, 3));
};


/**
 * @param {?proto.ibc.core.connection.v1.Version|undefined} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenInit} returns this
*/
proto.ibc.core.connection.v1.MsgConnectionOpenInit.prototype.setVersion = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenInit} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInit.prototype.clearVersion = function() {
  return this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInit.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 delay_period = 4;
 * @return {number}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInit.prototype.getDelayPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenInit} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInit.prototype.setDelayPeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string signer = 5;
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInit.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenInit} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInit.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse;
  return proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgConnectionOpenInitResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.connection.v1.MsgConnectionOpenTry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    previousConnectionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientState: (f = msg.getClientState()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    counterparty: (f = msg.getCounterparty()) && ibc_core_connection_v1_connection_pb.Counterparty.toObject(includeInstance, f),
    delayPeriod: jspb.Message.getFieldWithDefault(msg, 5, 0),
    counterpartyVersionsList: jspb.Message.toObjectList(msg.getCounterpartyVersionsList(),
    ibc_core_connection_v1_connection_pb.Version.toObject, includeInstance),
    proofHeight: (f = msg.getProofHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    proofInit: msg.getProofInit_asB64(),
    proofClient: msg.getProofClient_asB64(),
    proofConsensus: msg.getProofConsensus_asB64(),
    consensusHeight: (f = msg.getConsensusHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 12, ""),
    hostConsensusStateProof: msg.getHostConsensusStateProof_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.connection.v1.MsgConnectionOpenTry;
  return proto.ibc.core.connection.v1.MsgConnectionOpenTry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousConnectionId(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setClientState(value);
      break;
    case 4:
      var value = new ibc_core_connection_v1_connection_pb.Counterparty;
      reader.readMessage(value,ibc_core_connection_v1_connection_pb.Counterparty.deserializeBinaryFromReader);
      msg.setCounterparty(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDelayPeriod(value);
      break;
    case 6:
      var value = new ibc_core_connection_v1_connection_pb.Version;
      reader.readMessage(value,ibc_core_connection_v1_connection_pb.Version.deserializeBinaryFromReader);
      msg.addCounterpartyVersions(value);
      break;
    case 7:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofInit(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofClient(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofConsensus(value);
      break;
    case 11:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setConsensusHeight(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHostConsensusStateProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.connection.v1.MsgConnectionOpenTry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPreviousConnectionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getCounterparty();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ibc_core_connection_v1_connection_pb.Counterparty.serializeBinaryToWriter
    );
  }
  f = message.getDelayPeriod();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getCounterpartyVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      ibc_core_connection_v1_connection_pb.Version.serializeBinaryToWriter
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getProofInit_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getProofClient_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getProofConsensus_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getConsensusHeight();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getHostConsensusStateProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string previous_connection_id = 2;
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getPreviousConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setPreviousConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Any client_state = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getClientState = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
*/
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setClientState = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.clearClientState = function() {
  return this.setClientState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.hasClientState = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Counterparty counterparty = 4;
 * @return {?proto.ibc.core.connection.v1.Counterparty}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getCounterparty = function() {
  return /** @type{?proto.ibc.core.connection.v1.Counterparty} */ (
    jspb.Message.getWrapperField(this, ibc_core_connection_v1_connection_pb.Counterparty, 4));
};


/**
 * @param {?proto.ibc.core.connection.v1.Counterparty|undefined} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
*/
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setCounterparty = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.clearCounterparty = function() {
  return this.setCounterparty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.hasCounterparty = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 delay_period = 5;
 * @return {number}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getDelayPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setDelayPeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Version counterparty_versions = 6;
 * @return {!Array<!proto.ibc.core.connection.v1.Version>}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getCounterpartyVersionsList = function() {
  return /** @type{!Array<!proto.ibc.core.connection.v1.Version>} */ (
    jspb.Message.getRepeatedWrapperField(this, ibc_core_connection_v1_connection_pb.Version, 6));
};


/**
 * @param {!Array<!proto.ibc.core.connection.v1.Version>} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
*/
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setCounterpartyVersionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.ibc.core.connection.v1.Version=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ibc.core.connection.v1.Version}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.addCounterpartyVersions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.ibc.core.connection.v1.Version, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.clearCounterpartyVersionsList = function() {
  return this.setCounterpartyVersionsList([]);
};


/**
 * optional ibc.core.client.v1.Height proof_height = 7;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 7));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
*/
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes proof_init = 8;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofInit = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes proof_init = 8;
 * This is a type-conversion wrapper around `getProofInit()`
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofInit_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofInit()));
};


/**
 * optional bytes proof_init = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofInit()`
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofInit_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofInit()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setProofInit = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes proof_client = 9;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofClient = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes proof_client = 9;
 * This is a type-conversion wrapper around `getProofClient()`
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofClient_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofClient()));
};


/**
 * optional bytes proof_client = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofClient()`
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofClient_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofClient()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setProofClient = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes proof_consensus = 10;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofConsensus = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes proof_consensus = 10;
 * This is a type-conversion wrapper around `getProofConsensus()`
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofConsensus_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofConsensus()));
};


/**
 * optional bytes proof_consensus = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofConsensus()`
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofConsensus_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofConsensus()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setProofConsensus = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional ibc.core.client.v1.Height consensus_height = 11;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getConsensusHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 11));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
*/
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setConsensusHeight = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.clearConsensusHeight = function() {
  return this.setConsensusHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.hasConsensusHeight = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string signer = 12;
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional bytes host_consensus_state_proof = 13;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getHostConsensusStateProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes host_consensus_state_proof = 13;
 * This is a type-conversion wrapper around `getHostConsensusStateProof()`
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getHostConsensusStateProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHostConsensusStateProof()));
};


/**
 * optional bytes host_consensus_state_proof = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHostConsensusStateProof()`
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getHostConsensusStateProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHostConsensusStateProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setHostConsensusStateProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse;
  return proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.connection.v1.MsgConnectionOpenAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    counterpartyConnectionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: (f = msg.getVersion()) && ibc_core_connection_v1_connection_pb.Version.toObject(includeInstance, f),
    clientState: (f = msg.getClientState()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    proofHeight: (f = msg.getProofHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    proofTry: msg.getProofTry_asB64(),
    proofClient: msg.getProofClient_asB64(),
    proofConsensus: msg.getProofConsensus_asB64(),
    consensusHeight: (f = msg.getConsensusHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 10, ""),
    hostConsensusStateProof: msg.getHostConsensusStateProof_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenAck}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.connection.v1.MsgConnectionOpenAck;
  return proto.ibc.core.connection.v1.MsgConnectionOpenAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenAck}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCounterpartyConnectionId(value);
      break;
    case 3:
      var value = new ibc_core_connection_v1_connection_pb.Version;
      reader.readMessage(value,ibc_core_connection_v1_connection_pb.Version.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 4:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setClientState(value);
      break;
    case 5:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofTry(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofClient(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofConsensus(value);
      break;
    case 9:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setConsensusHeight(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHostConsensusStateProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.connection.v1.MsgConnectionOpenAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCounterpartyConnectionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ibc_core_connection_v1_connection_pb.Version.serializeBinaryToWriter
    );
  }
  f = message.getClientState();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getProofTry_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getProofClient_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getProofConsensus_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getConsensusHeight();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getHostConsensusStateProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
};


/**
 * optional string connection_id = 1;
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenAck} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string counterparty_connection_id = 2;
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.getCounterpartyConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenAck} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.setCounterpartyConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Version version = 3;
 * @return {?proto.ibc.core.connection.v1.Version}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.getVersion = function() {
  return /** @type{?proto.ibc.core.connection.v1.Version} */ (
    jspb.Message.getWrapperField(this, ibc_core_connection_v1_connection_pb.Version, 3));
};


/**
 * @param {?proto.ibc.core.connection.v1.Version|undefined} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenAck} returns this
*/
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.setVersion = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenAck} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.clearVersion = function() {
  return this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Any client_state = 4;
 * @return {?proto.google.protobuf.Any}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.getClientState = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 4));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenAck} returns this
*/
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.setClientState = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenAck} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.clearClientState = function() {
  return this.setClientState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.hasClientState = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ibc.core.client.v1.Height proof_height = 5;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 5));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenAck} returns this
*/
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenAck} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes proof_try = 6;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.getProofTry = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes proof_try = 6;
 * This is a type-conversion wrapper around `getProofTry()`
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.getProofTry_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofTry()));
};


/**
 * optional bytes proof_try = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofTry()`
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.getProofTry_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofTry()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenAck} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.setProofTry = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes proof_client = 7;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.getProofClient = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes proof_client = 7;
 * This is a type-conversion wrapper around `getProofClient()`
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.getProofClient_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofClient()));
};


/**
 * optional bytes proof_client = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofClient()`
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.getProofClient_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofClient()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenAck} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.setProofClient = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes proof_consensus = 8;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.getProofConsensus = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes proof_consensus = 8;
 * This is a type-conversion wrapper around `getProofConsensus()`
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.getProofConsensus_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofConsensus()));
};


/**
 * optional bytes proof_consensus = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofConsensus()`
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.getProofConsensus_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofConsensus()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenAck} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.setProofConsensus = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional ibc.core.client.v1.Height consensus_height = 9;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.getConsensusHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 9));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenAck} returns this
*/
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.setConsensusHeight = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenAck} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.clearConsensusHeight = function() {
  return this.setConsensusHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.hasConsensusHeight = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string signer = 10;
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenAck} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bytes host_consensus_state_proof = 11;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.getHostConsensusStateProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes host_consensus_state_proof = 11;
 * This is a type-conversion wrapper around `getHostConsensusStateProof()`
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.getHostConsensusStateProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHostConsensusStateProof()));
};


/**
 * optional bytes host_consensus_state_proof = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHostConsensusStateProof()`
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.getHostConsensusStateProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHostConsensusStateProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenAck} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAck.prototype.setHostConsensusStateProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse;
  return proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgConnectionOpenAckResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenConfirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    proofAck: msg.getProofAck_asB64(),
    proofHeight: (f = msg.getProofHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenConfirm}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.connection.v1.MsgConnectionOpenConfirm;
  return proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenConfirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenConfirm}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofAck(value);
      break;
    case 3:
      var value = new ibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenConfirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProofAck_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string connection_id = 1;
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenConfirm} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes proof_ack = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.prototype.getProofAck = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes proof_ack = 2;
 * This is a type-conversion wrapper around `getProofAck()`
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.prototype.getProofAck_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofAck()));
};


/**
 * optional bytes proof_ack = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofAck()`
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.prototype.getProofAck_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofAck()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenConfirm} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.prototype.setProofAck = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional ibc.core.client.v1.Height proof_height = 3;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 3));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenConfirm} returns this
*/
proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenConfirm} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string signer = 4;
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenConfirm} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirm.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse;
  return proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.connection.v1.MsgUpdateParams.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.connection.v1.MsgUpdateParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.connection.v1.MsgUpdateParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgUpdateParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    signer: jspb.Message.getFieldWithDefault(msg, 1, ""),
    params: (f = msg.getParams()) && ibc_core_connection_v1_connection_pb.Params.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.connection.v1.MsgUpdateParams}
 */
proto.ibc.core.connection.v1.MsgUpdateParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.connection.v1.MsgUpdateParams;
  return proto.ibc.core.connection.v1.MsgUpdateParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.connection.v1.MsgUpdateParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.connection.v1.MsgUpdateParams}
 */
proto.ibc.core.connection.v1.MsgUpdateParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    case 2:
      var value = new ibc_core_connection_v1_connection_pb.Params;
      reader.readMessage(value,ibc_core_connection_v1_connection_pb.Params.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgUpdateParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.connection.v1.MsgUpdateParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.connection.v1.MsgUpdateParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgUpdateParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ibc_core_connection_v1_connection_pb.Params.serializeBinaryToWriter
    );
  }
};


/**
 * optional string signer = 1;
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgUpdateParams.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.MsgUpdateParams} returns this
 */
proto.ibc.core.connection.v1.MsgUpdateParams.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Params params = 2;
 * @return {?proto.ibc.core.connection.v1.Params}
 */
proto.ibc.core.connection.v1.MsgUpdateParams.prototype.getParams = function() {
  return /** @type{?proto.ibc.core.connection.v1.Params} */ (
    jspb.Message.getWrapperField(this, ibc_core_connection_v1_connection_pb.Params, 2));
};


/**
 * @param {?proto.ibc.core.connection.v1.Params|undefined} value
 * @return {!proto.ibc.core.connection.v1.MsgUpdateParams} returns this
*/
proto.ibc.core.connection.v1.MsgUpdateParams.prototype.setParams = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.connection.v1.MsgUpdateParams} returns this
 */
proto.ibc.core.connection.v1.MsgUpdateParams.prototype.clearParams = function() {
  return this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.connection.v1.MsgUpdateParams.prototype.hasParams = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.connection.v1.MsgUpdateParamsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.connection.v1.MsgUpdateParamsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.connection.v1.MsgUpdateParamsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgUpdateParamsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.connection.v1.MsgUpdateParamsResponse}
 */
proto.ibc.core.connection.v1.MsgUpdateParamsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.connection.v1.MsgUpdateParamsResponse;
  return proto.ibc.core.connection.v1.MsgUpdateParamsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.connection.v1.MsgUpdateParamsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.connection.v1.MsgUpdateParamsResponse}
 */
proto.ibc.core.connection.v1.MsgUpdateParamsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgUpdateParamsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.connection.v1.MsgUpdateParamsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.connection.v1.MsgUpdateParamsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgUpdateParamsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.ibc.core.connection.v1);
