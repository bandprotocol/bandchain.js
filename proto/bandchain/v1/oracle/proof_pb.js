// source: bandchain/v1/oracle/proof.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf')
var goog = jspb
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this
  }.call(null) ||
  Function('return this')()

var google_api_annotations_pb = require('../../../google/api/annotations_pb.js')
goog.object.extend(proto, google_api_annotations_pb)
var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js')
goog.object.extend(proto, gogoproto_gogo_pb)
var oracle_v1_oracle_pb = require('../../../oracle/v1/oracle_pb.js')
goog.object.extend(proto, oracle_v1_oracle_pb)
goog.exportSymbol(
  'proto.bandchain.v1.oracle.BlockHeaderMerkleParts',
  null,
  global,
)
goog.exportSymbol('proto.bandchain.v1.oracle.BlockRelayProof', null, global)
goog.exportSymbol(
  'proto.bandchain.v1.oracle.CommonEncodedVotePart',
  null,
  global,
)
goog.exportSymbol('proto.bandchain.v1.oracle.CountProof', null, global)
goog.exportSymbol('proto.bandchain.v1.oracle.CountProofResult', null, global)
goog.exportSymbol('proto.bandchain.v1.oracle.IAVLMerklePath', null, global)
goog.exportSymbol('proto.bandchain.v1.oracle.MultiProof', null, global)
goog.exportSymbol('proto.bandchain.v1.oracle.MultiProofRequest', null, global)
goog.exportSymbol('proto.bandchain.v1.oracle.MultiProofResponse', null, global)
goog.exportSymbol('proto.bandchain.v1.oracle.MultiProofResult', null, global)
goog.exportSymbol('proto.bandchain.v1.oracle.MultiStoreProof', null, global)
goog.exportSymbol('proto.bandchain.v1.oracle.OracleDataProof', null, global)
goog.exportSymbol('proto.bandchain.v1.oracle.ProofRequest', null, global)
goog.exportSymbol('proto.bandchain.v1.oracle.ProofResponse', null, global)
goog.exportSymbol(
  'proto.bandchain.v1.oracle.RequestCountProofRequest',
  null,
  global,
)
goog.exportSymbol(
  'proto.bandchain.v1.oracle.RequestCountProofResponse',
  null,
  global,
)
goog.exportSymbol('proto.bandchain.v1.oracle.RequestsCountProof', null, global)
goog.exportSymbol('proto.bandchain.v1.oracle.SingleProof', null, global)
goog.exportSymbol('proto.bandchain.v1.oracle.SingleProofResult', null, global)
goog.exportSymbol('proto.bandchain.v1.oracle.TMSignature', null, global)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.ProofRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.bandchain.v1.oracle.ProofRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.ProofRequest.displayName =
    'proto.bandchain.v1.oracle.ProofRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.ProofResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.bandchain.v1.oracle.ProofResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.ProofResponse.displayName =
    'proto.bandchain.v1.oracle.ProofResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.MultiProofRequest = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.bandchain.v1.oracle.MultiProofRequest.repeatedFields_,
    null,
  )
}
goog.inherits(proto.bandchain.v1.oracle.MultiProofRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.MultiProofRequest.displayName =
    'proto.bandchain.v1.oracle.MultiProofRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.MultiProofResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.bandchain.v1.oracle.MultiProofResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.MultiProofResponse.displayName =
    'proto.bandchain.v1.oracle.MultiProofResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.RequestCountProofRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.bandchain.v1.oracle.RequestCountProofRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.RequestCountProofRequest.displayName =
    'proto.bandchain.v1.oracle.RequestCountProofRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.RequestCountProofResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.bandchain.v1.oracle.RequestCountProofResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.RequestCountProofResponse.displayName =
    'proto.bandchain.v1.oracle.RequestCountProofResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.SingleProofResult = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.bandchain.v1.oracle.SingleProofResult, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.SingleProofResult.displayName =
    'proto.bandchain.v1.oracle.SingleProofResult'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.MultiProofResult = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.bandchain.v1.oracle.MultiProofResult, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.MultiProofResult.displayName =
    'proto.bandchain.v1.oracle.MultiProofResult'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.CountProofResult = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.bandchain.v1.oracle.CountProofResult, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.CountProofResult.displayName =
    'proto.bandchain.v1.oracle.CountProofResult'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.SingleProof = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.bandchain.v1.oracle.SingleProof, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.SingleProof.displayName =
    'proto.bandchain.v1.oracle.SingleProof'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.MultiProof = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.bandchain.v1.oracle.MultiProof.repeatedFields_,
    null,
  )
}
goog.inherits(proto.bandchain.v1.oracle.MultiProof, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.MultiProof.displayName =
    'proto.bandchain.v1.oracle.MultiProof'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.CountProof = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.bandchain.v1.oracle.CountProof, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.CountProof.displayName =
    'proto.bandchain.v1.oracle.CountProof'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.OracleDataProof = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.bandchain.v1.oracle.OracleDataProof.repeatedFields_,
    null,
  )
}
goog.inherits(proto.bandchain.v1.oracle.OracleDataProof, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.OracleDataProof.displayName =
    'proto.bandchain.v1.oracle.OracleDataProof'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.IAVLMerklePath = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.bandchain.v1.oracle.IAVLMerklePath, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.IAVLMerklePath.displayName =
    'proto.bandchain.v1.oracle.IAVLMerklePath'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.BlockRelayProof = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.bandchain.v1.oracle.BlockRelayProof.repeatedFields_,
    null,
  )
}
goog.inherits(proto.bandchain.v1.oracle.BlockRelayProof, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.BlockRelayProof.displayName =
    'proto.bandchain.v1.oracle.BlockRelayProof'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.MultiStoreProof = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.bandchain.v1.oracle.MultiStoreProof, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.MultiStoreProof.displayName =
    'proto.bandchain.v1.oracle.MultiStoreProof'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.bandchain.v1.oracle.BlockHeaderMerkleParts, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.BlockHeaderMerkleParts.displayName =
    'proto.bandchain.v1.oracle.BlockHeaderMerkleParts'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.CommonEncodedVotePart = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.bandchain.v1.oracle.CommonEncodedVotePart, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.CommonEncodedVotePart.displayName =
    'proto.bandchain.v1.oracle.CommonEncodedVotePart'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.TMSignature = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.bandchain.v1.oracle.TMSignature, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.TMSignature.displayName =
    'proto.bandchain.v1.oracle.TMSignature'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.RequestsCountProof = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.bandchain.v1.oracle.RequestsCountProof.repeatedFields_,
    null,
  )
}
goog.inherits(proto.bandchain.v1.oracle.RequestsCountProof, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.RequestsCountProof.displayName =
    'proto.bandchain.v1.oracle.RequestsCountProof'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.ProofRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.bandchain.v1.oracle.ProofRequest.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.ProofRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.ProofRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        height: jspb.Message.getFieldWithDefault(msg, 2, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.ProofRequest}
 */
proto.bandchain.v1.oracle.ProofRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.bandchain.v1.oracle.ProofRequest()
  return proto.bandchain.v1.oracle.ProofRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.ProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.ProofRequest}
 */
proto.bandchain.v1.oracle.ProofRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setRequestId(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setHeight(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.ProofRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.bandchain.v1.oracle.ProofRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.ProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.ProofRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getRequestId()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
  f = message.getHeight()
  if (f !== 0) {
    writer.writeInt64(2, f)
  }
}

/**
 * optional uint64 request_id = 1;
 * @return {number}
 */
proto.bandchain.v1.oracle.ProofRequest.prototype.getRequestId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.ProofRequest} returns this
 */
proto.bandchain.v1.oracle.ProofRequest.prototype.setRequestId = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional int64 height = 2;
 * @return {number}
 */
proto.bandchain.v1.oracle.ProofRequest.prototype.getHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.ProofRequest} returns this
 */
proto.bandchain.v1.oracle.ProofRequest.prototype.setHeight = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.ProofResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.bandchain.v1.oracle.ProofResponse.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.ProofResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.ProofResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        height: jspb.Message.getFieldWithDefault(msg, 1, 0),
        result:
          (f = msg.getResult()) &&
          proto.bandchain.v1.oracle.SingleProofResult.toObject(
            includeInstance,
            f,
          ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.ProofResponse}
 */
proto.bandchain.v1.oracle.ProofResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.bandchain.v1.oracle.ProofResponse()
  return proto.bandchain.v1.oracle.ProofResponse.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.ProofResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.ProofResponse}
 */
proto.bandchain.v1.oracle.ProofResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setHeight(value)
        break
      case 2:
        var value = new proto.bandchain.v1.oracle.SingleProofResult()
        reader.readMessage(
          value,
          proto.bandchain.v1.oracle.SingleProofResult
            .deserializeBinaryFromReader,
        )
        msg.setResult(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.ProofResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.bandchain.v1.oracle.ProofResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.ProofResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.ProofResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getHeight()
  if (f !== 0) {
    writer.writeInt64(1, f)
  }
  f = message.getResult()
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bandchain.v1.oracle.SingleProofResult.serializeBinaryToWriter,
    )
  }
}

/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.bandchain.v1.oracle.ProofResponse.prototype.getHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.ProofResponse} returns this
 */
proto.bandchain.v1.oracle.ProofResponse.prototype.setHeight = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional SingleProofResult result = 2;
 * @return {?proto.bandchain.v1.oracle.SingleProofResult}
 */
proto.bandchain.v1.oracle.ProofResponse.prototype.getResult = function () {
  return /** @type{?proto.bandchain.v1.oracle.SingleProofResult} */ (
    jspb.Message.getWrapperField(
      this,
      proto.bandchain.v1.oracle.SingleProofResult,
      2,
    )
  )
}

/**
 * @param {?proto.bandchain.v1.oracle.SingleProofResult|undefined} value
 * @return {!proto.bandchain.v1.oracle.ProofResponse} returns this
 */
proto.bandchain.v1.oracle.ProofResponse.prototype.setResult = function (value) {
  return jspb.Message.setWrapperField(this, 2, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.bandchain.v1.oracle.ProofResponse} returns this
 */
proto.bandchain.v1.oracle.ProofResponse.prototype.clearResult = function () {
  return this.setResult(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bandchain.v1.oracle.ProofResponse.prototype.hasResult = function () {
  return jspb.Message.getField(this, 2) != null
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bandchain.v1.oracle.MultiProofRequest.repeatedFields_ = [1]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.MultiProofRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.bandchain.v1.oracle.MultiProofRequest.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.MultiProofRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.MultiProofRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        requestIdsList:
          (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.MultiProofRequest}
 */
proto.bandchain.v1.oracle.MultiProofRequest.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.bandchain.v1.oracle.MultiProofRequest()
  return proto.bandchain.v1.oracle.MultiProofRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.MultiProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.MultiProofRequest}
 */
proto.bandchain.v1.oracle.MultiProofRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var values = /** @type {!Array<number>} */ (
            reader.isDelimited()
              ? reader.readPackedUint64()
              : [reader.readUint64()]
          )
          for (var i = 0; i < values.length; i++) {
            msg.addRequestIds(values[i])
          }
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.MultiProofRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.bandchain.v1.oracle.MultiProofRequest.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.MultiProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.MultiProofRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getRequestIdsList()
  if (f.length > 0) {
    writer.writePackedUint64(1, f)
  }
}

/**
 * repeated uint64 request_ids = 1;
 * @return {!Array<number>}
 */
proto.bandchain.v1.oracle.MultiProofRequest.prototype.getRequestIdsList =
  function () {
    return /** @type {!Array<number>} */ (
      jspb.Message.getRepeatedField(this, 1)
    )
  }

/**
 * @param {!Array<number>} value
 * @return {!proto.bandchain.v1.oracle.MultiProofRequest} returns this
 */
proto.bandchain.v1.oracle.MultiProofRequest.prototype.setRequestIdsList =
  function (value) {
    return jspb.Message.setField(this, 1, value || [])
  }

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.bandchain.v1.oracle.MultiProofRequest} returns this
 */
proto.bandchain.v1.oracle.MultiProofRequest.prototype.addRequestIds = function (
  value,
  opt_index,
) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bandchain.v1.oracle.MultiProofRequest} returns this
 */
proto.bandchain.v1.oracle.MultiProofRequest.prototype.clearRequestIdsList =
  function () {
    return this.setRequestIdsList([])
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.MultiProofResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.bandchain.v1.oracle.MultiProofResponse.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.MultiProofResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.MultiProofResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        height: jspb.Message.getFieldWithDefault(msg, 1, 0),
        result:
          (f = msg.getResult()) &&
          proto.bandchain.v1.oracle.MultiProofResult.toObject(
            includeInstance,
            f,
          ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.MultiProofResponse}
 */
proto.bandchain.v1.oracle.MultiProofResponse.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.bandchain.v1.oracle.MultiProofResponse()
  return proto.bandchain.v1.oracle.MultiProofResponse.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.MultiProofResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.MultiProofResponse}
 */
proto.bandchain.v1.oracle.MultiProofResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readInt64())
          msg.setHeight(value)
          break
        case 2:
          var value = new proto.bandchain.v1.oracle.MultiProofResult()
          reader.readMessage(
            value,
            proto.bandchain.v1.oracle.MultiProofResult
              .deserializeBinaryFromReader,
          )
          msg.setResult(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.MultiProofResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.bandchain.v1.oracle.MultiProofResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.MultiProofResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.MultiProofResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getHeight()
    if (f !== 0) {
      writer.writeInt64(1, f)
    }
    f = message.getResult()
    if (f != null) {
      writer.writeMessage(
        2,
        f,
        proto.bandchain.v1.oracle.MultiProofResult.serializeBinaryToWriter,
      )
    }
  }

/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.bandchain.v1.oracle.MultiProofResponse.prototype.getHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.MultiProofResponse} returns this
 */
proto.bandchain.v1.oracle.MultiProofResponse.prototype.setHeight = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional MultiProofResult result = 2;
 * @return {?proto.bandchain.v1.oracle.MultiProofResult}
 */
proto.bandchain.v1.oracle.MultiProofResponse.prototype.getResult = function () {
  return /** @type{?proto.bandchain.v1.oracle.MultiProofResult} */ (
    jspb.Message.getWrapperField(
      this,
      proto.bandchain.v1.oracle.MultiProofResult,
      2,
    )
  )
}

/**
 * @param {?proto.bandchain.v1.oracle.MultiProofResult|undefined} value
 * @return {!proto.bandchain.v1.oracle.MultiProofResponse} returns this
 */
proto.bandchain.v1.oracle.MultiProofResponse.prototype.setResult = function (
  value,
) {
  return jspb.Message.setWrapperField(this, 2, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.bandchain.v1.oracle.MultiProofResponse} returns this
 */
proto.bandchain.v1.oracle.MultiProofResponse.prototype.clearResult =
  function () {
    return this.setResult(undefined)
  }

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bandchain.v1.oracle.MultiProofResponse.prototype.hasResult = function () {
  return jspb.Message.getField(this, 2) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.RequestCountProofRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bandchain.v1.oracle.RequestCountProofRequest.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.RequestCountProofRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.RequestCountProofRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {}

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.RequestCountProofRequest}
 */
proto.bandchain.v1.oracle.RequestCountProofRequest.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg = new proto.bandchain.v1.oracle.RequestCountProofRequest()
    return proto.bandchain.v1.oracle.RequestCountProofRequest.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.RequestCountProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.RequestCountProofRequest}
 */
proto.bandchain.v1.oracle.RequestCountProofRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.RequestCountProofRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.bandchain.v1.oracle.RequestCountProofRequest.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.RequestCountProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.RequestCountProofRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.RequestCountProofResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bandchain.v1.oracle.RequestCountProofResponse.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.RequestCountProofResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.RequestCountProofResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        height: jspb.Message.getFieldWithDefault(msg, 1, 0),
        result:
          (f = msg.getResult()) &&
          proto.bandchain.v1.oracle.CountProofResult.toObject(
            includeInstance,
            f,
          ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.RequestCountProofResponse}
 */
proto.bandchain.v1.oracle.RequestCountProofResponse.deserializeBinary =
  function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg = new proto.bandchain.v1.oracle.RequestCountProofResponse()
    return proto.bandchain.v1.oracle.RequestCountProofResponse.deserializeBinaryFromReader(
      msg,
      reader,
    )
  }

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.RequestCountProofResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.RequestCountProofResponse}
 */
proto.bandchain.v1.oracle.RequestCountProofResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readInt64())
          msg.setHeight(value)
          break
        case 2:
          var value = new proto.bandchain.v1.oracle.CountProofResult()
          reader.readMessage(
            value,
            proto.bandchain.v1.oracle.CountProofResult
              .deserializeBinaryFromReader,
          )
          msg.setResult(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.RequestCountProofResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.bandchain.v1.oracle.RequestCountProofResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.RequestCountProofResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.RequestCountProofResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getHeight()
    if (f !== 0) {
      writer.writeInt64(1, f)
    }
    f = message.getResult()
    if (f != null) {
      writer.writeMessage(
        2,
        f,
        proto.bandchain.v1.oracle.CountProofResult.serializeBinaryToWriter,
      )
    }
  }

/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.bandchain.v1.oracle.RequestCountProofResponse.prototype.getHeight =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
  }

/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.RequestCountProofResponse} returns this
 */
proto.bandchain.v1.oracle.RequestCountProofResponse.prototype.setHeight =
  function (value) {
    return jspb.Message.setProto3IntField(this, 1, value)
  }

/**
 * optional CountProofResult result = 2;
 * @return {?proto.bandchain.v1.oracle.CountProofResult}
 */
proto.bandchain.v1.oracle.RequestCountProofResponse.prototype.getResult =
  function () {
    return /** @type{?proto.bandchain.v1.oracle.CountProofResult} */ (
      jspb.Message.getWrapperField(
        this,
        proto.bandchain.v1.oracle.CountProofResult,
        2,
      )
    )
  }

/**
 * @param {?proto.bandchain.v1.oracle.CountProofResult|undefined} value
 * @return {!proto.bandchain.v1.oracle.RequestCountProofResponse} returns this
 */
proto.bandchain.v1.oracle.RequestCountProofResponse.prototype.setResult =
  function (value) {
    return jspb.Message.setWrapperField(this, 2, value)
  }

/**
 * Clears the message field making it undefined.
 * @return {!proto.bandchain.v1.oracle.RequestCountProofResponse} returns this
 */
proto.bandchain.v1.oracle.RequestCountProofResponse.prototype.clearResult =
  function () {
    return this.setResult(undefined)
  }

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bandchain.v1.oracle.RequestCountProofResponse.prototype.hasResult =
  function () {
    return jspb.Message.getField(this, 2) != null
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.SingleProofResult.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.bandchain.v1.oracle.SingleProofResult.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.SingleProofResult} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.SingleProofResult.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        proof:
          (f = msg.getProof()) &&
          proto.bandchain.v1.oracle.SingleProof.toObject(includeInstance, f),
        evmProofBytes: msg.getEvmProofBytes_asB64(),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.SingleProofResult}
 */
proto.bandchain.v1.oracle.SingleProofResult.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.bandchain.v1.oracle.SingleProofResult()
  return proto.bandchain.v1.oracle.SingleProofResult.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.SingleProofResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.SingleProofResult}
 */
proto.bandchain.v1.oracle.SingleProofResult.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = new proto.bandchain.v1.oracle.SingleProof()
          reader.readMessage(
            value,
            proto.bandchain.v1.oracle.SingleProof.deserializeBinaryFromReader,
          )
          msg.setProof(value)
          break
        case 2:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setEvmProofBytes(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.SingleProofResult.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.bandchain.v1.oracle.SingleProofResult.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.SingleProofResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.SingleProofResult.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getProof()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bandchain.v1.oracle.SingleProof.serializeBinaryToWriter,
    )
  }
  f = message.getEvmProofBytes_asU8()
  if (f.length > 0) {
    writer.writeBytes(2, f)
  }
}

/**
 * optional SingleProof proof = 1;
 * @return {?proto.bandchain.v1.oracle.SingleProof}
 */
proto.bandchain.v1.oracle.SingleProofResult.prototype.getProof = function () {
  return /** @type{?proto.bandchain.v1.oracle.SingleProof} */ (
    jspb.Message.getWrapperField(this, proto.bandchain.v1.oracle.SingleProof, 1)
  )
}

/**
 * @param {?proto.bandchain.v1.oracle.SingleProof|undefined} value
 * @return {!proto.bandchain.v1.oracle.SingleProofResult} returns this
 */
proto.bandchain.v1.oracle.SingleProofResult.prototype.setProof = function (
  value,
) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.bandchain.v1.oracle.SingleProofResult} returns this
 */
proto.bandchain.v1.oracle.SingleProofResult.prototype.clearProof = function () {
  return this.setProof(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bandchain.v1.oracle.SingleProofResult.prototype.hasProof = function () {
  return jspb.Message.getField(this, 1) != null
}

/**
 * optional bytes evm_proof_bytes = 2;
 * @return {!(string|Uint8Array)}
 */
proto.bandchain.v1.oracle.SingleProofResult.prototype.getEvmProofBytes =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    )
  }

/**
 * optional bytes evm_proof_bytes = 2;
 * This is a type-conversion wrapper around `getEvmProofBytes()`
 * @return {string}
 */
proto.bandchain.v1.oracle.SingleProofResult.prototype.getEvmProofBytes_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getEvmProofBytes())
    )
  }

/**
 * optional bytes evm_proof_bytes = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvmProofBytes()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.SingleProofResult.prototype.getEvmProofBytes_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getEvmProofBytes())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.SingleProofResult} returns this
 */
proto.bandchain.v1.oracle.SingleProofResult.prototype.setEvmProofBytes =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 2, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.MultiProofResult.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.bandchain.v1.oracle.MultiProofResult.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.MultiProofResult} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.MultiProofResult.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        proof:
          (f = msg.getProof()) &&
          proto.bandchain.v1.oracle.MultiProof.toObject(includeInstance, f),
        evmProofBytes: msg.getEvmProofBytes_asB64(),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.MultiProofResult}
 */
proto.bandchain.v1.oracle.MultiProofResult.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.bandchain.v1.oracle.MultiProofResult()
  return proto.bandchain.v1.oracle.MultiProofResult.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.MultiProofResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.MultiProofResult}
 */
proto.bandchain.v1.oracle.MultiProofResult.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = new proto.bandchain.v1.oracle.MultiProof()
          reader.readMessage(
            value,
            proto.bandchain.v1.oracle.MultiProof.deserializeBinaryFromReader,
          )
          msg.setProof(value)
          break
        case 2:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setEvmProofBytes(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.MultiProofResult.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.bandchain.v1.oracle.MultiProofResult.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.MultiProofResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.MultiProofResult.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getProof()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bandchain.v1.oracle.MultiProof.serializeBinaryToWriter,
    )
  }
  f = message.getEvmProofBytes_asU8()
  if (f.length > 0) {
    writer.writeBytes(2, f)
  }
}

/**
 * optional MultiProof proof = 1;
 * @return {?proto.bandchain.v1.oracle.MultiProof}
 */
proto.bandchain.v1.oracle.MultiProofResult.prototype.getProof = function () {
  return /** @type{?proto.bandchain.v1.oracle.MultiProof} */ (
    jspb.Message.getWrapperField(this, proto.bandchain.v1.oracle.MultiProof, 1)
  )
}

/**
 * @param {?proto.bandchain.v1.oracle.MultiProof|undefined} value
 * @return {!proto.bandchain.v1.oracle.MultiProofResult} returns this
 */
proto.bandchain.v1.oracle.MultiProofResult.prototype.setProof = function (
  value,
) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.bandchain.v1.oracle.MultiProofResult} returns this
 */
proto.bandchain.v1.oracle.MultiProofResult.prototype.clearProof = function () {
  return this.setProof(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bandchain.v1.oracle.MultiProofResult.prototype.hasProof = function () {
  return jspb.Message.getField(this, 1) != null
}

/**
 * optional bytes evm_proof_bytes = 2;
 * @return {!(string|Uint8Array)}
 */
proto.bandchain.v1.oracle.MultiProofResult.prototype.getEvmProofBytes =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    )
  }

/**
 * optional bytes evm_proof_bytes = 2;
 * This is a type-conversion wrapper around `getEvmProofBytes()`
 * @return {string}
 */
proto.bandchain.v1.oracle.MultiProofResult.prototype.getEvmProofBytes_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getEvmProofBytes())
    )
  }

/**
 * optional bytes evm_proof_bytes = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvmProofBytes()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.MultiProofResult.prototype.getEvmProofBytes_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getEvmProofBytes())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.MultiProofResult} returns this
 */
proto.bandchain.v1.oracle.MultiProofResult.prototype.setEvmProofBytes =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 2, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.CountProofResult.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.bandchain.v1.oracle.CountProofResult.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.CountProofResult} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.CountProofResult.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        proof:
          (f = msg.getProof()) &&
          proto.bandchain.v1.oracle.CountProof.toObject(includeInstance, f),
        evmProofBytes: msg.getEvmProofBytes_asB64(),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.CountProofResult}
 */
proto.bandchain.v1.oracle.CountProofResult.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.bandchain.v1.oracle.CountProofResult()
  return proto.bandchain.v1.oracle.CountProofResult.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.CountProofResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.CountProofResult}
 */
proto.bandchain.v1.oracle.CountProofResult.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = new proto.bandchain.v1.oracle.CountProof()
          reader.readMessage(
            value,
            proto.bandchain.v1.oracle.CountProof.deserializeBinaryFromReader,
          )
          msg.setProof(value)
          break
        case 2:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setEvmProofBytes(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.CountProofResult.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.bandchain.v1.oracle.CountProofResult.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.CountProofResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.CountProofResult.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getProof()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bandchain.v1.oracle.CountProof.serializeBinaryToWriter,
    )
  }
  f = message.getEvmProofBytes_asU8()
  if (f.length > 0) {
    writer.writeBytes(2, f)
  }
}

/**
 * optional CountProof proof = 1;
 * @return {?proto.bandchain.v1.oracle.CountProof}
 */
proto.bandchain.v1.oracle.CountProofResult.prototype.getProof = function () {
  return /** @type{?proto.bandchain.v1.oracle.CountProof} */ (
    jspb.Message.getWrapperField(this, proto.bandchain.v1.oracle.CountProof, 1)
  )
}

/**
 * @param {?proto.bandchain.v1.oracle.CountProof|undefined} value
 * @return {!proto.bandchain.v1.oracle.CountProofResult} returns this
 */
proto.bandchain.v1.oracle.CountProofResult.prototype.setProof = function (
  value,
) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.bandchain.v1.oracle.CountProofResult} returns this
 */
proto.bandchain.v1.oracle.CountProofResult.prototype.clearProof = function () {
  return this.setProof(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bandchain.v1.oracle.CountProofResult.prototype.hasProof = function () {
  return jspb.Message.getField(this, 1) != null
}

/**
 * optional bytes evm_proof_bytes = 2;
 * @return {!(string|Uint8Array)}
 */
proto.bandchain.v1.oracle.CountProofResult.prototype.getEvmProofBytes =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    )
  }

/**
 * optional bytes evm_proof_bytes = 2;
 * This is a type-conversion wrapper around `getEvmProofBytes()`
 * @return {string}
 */
proto.bandchain.v1.oracle.CountProofResult.prototype.getEvmProofBytes_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getEvmProofBytes())
    )
  }

/**
 * optional bytes evm_proof_bytes = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvmProofBytes()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.CountProofResult.prototype.getEvmProofBytes_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getEvmProofBytes())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.CountProofResult} returns this
 */
proto.bandchain.v1.oracle.CountProofResult.prototype.setEvmProofBytes =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 2, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.SingleProof.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.bandchain.v1.oracle.SingleProof.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.SingleProof} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.SingleProof.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
        oracleDataProof:
          (f = msg.getOracleDataProof()) &&
          proto.bandchain.v1.oracle.OracleDataProof.toObject(
            includeInstance,
            f,
          ),
        blockRelayProof:
          (f = msg.getBlockRelayProof()) &&
          proto.bandchain.v1.oracle.BlockRelayProof.toObject(
            includeInstance,
            f,
          ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.SingleProof}
 */
proto.bandchain.v1.oracle.SingleProof.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.bandchain.v1.oracle.SingleProof()
  return proto.bandchain.v1.oracle.SingleProof.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.SingleProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.SingleProof}
 */
proto.bandchain.v1.oracle.SingleProof.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setBlockHeight(value)
        break
      case 2:
        var value = new proto.bandchain.v1.oracle.OracleDataProof()
        reader.readMessage(
          value,
          proto.bandchain.v1.oracle.OracleDataProof.deserializeBinaryFromReader,
        )
        msg.setOracleDataProof(value)
        break
      case 3:
        var value = new proto.bandchain.v1.oracle.BlockRelayProof()
        reader.readMessage(
          value,
          proto.bandchain.v1.oracle.BlockRelayProof.deserializeBinaryFromReader,
        )
        msg.setBlockRelayProof(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.SingleProof.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.bandchain.v1.oracle.SingleProof.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.SingleProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.SingleProof.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getBlockHeight()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
  f = message.getOracleDataProof()
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bandchain.v1.oracle.OracleDataProof.serializeBinaryToWriter,
    )
  }
  f = message.getBlockRelayProof()
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bandchain.v1.oracle.BlockRelayProof.serializeBinaryToWriter,
    )
  }
}

/**
 * optional uint64 block_height = 1;
 * @return {number}
 */
proto.bandchain.v1.oracle.SingleProof.prototype.getBlockHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.SingleProof} returns this
 */
proto.bandchain.v1.oracle.SingleProof.prototype.setBlockHeight = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional OracleDataProof oracle_data_proof = 2;
 * @return {?proto.bandchain.v1.oracle.OracleDataProof}
 */
proto.bandchain.v1.oracle.SingleProof.prototype.getOracleDataProof =
  function () {
    return /** @type{?proto.bandchain.v1.oracle.OracleDataProof} */ (
      jspb.Message.getWrapperField(
        this,
        proto.bandchain.v1.oracle.OracleDataProof,
        2,
      )
    )
  }

/**
 * @param {?proto.bandchain.v1.oracle.OracleDataProof|undefined} value
 * @return {!proto.bandchain.v1.oracle.SingleProof} returns this
 */
proto.bandchain.v1.oracle.SingleProof.prototype.setOracleDataProof = function (
  value,
) {
  return jspb.Message.setWrapperField(this, 2, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.bandchain.v1.oracle.SingleProof} returns this
 */
proto.bandchain.v1.oracle.SingleProof.prototype.clearOracleDataProof =
  function () {
    return this.setOracleDataProof(undefined)
  }

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bandchain.v1.oracle.SingleProof.prototype.hasOracleDataProof =
  function () {
    return jspb.Message.getField(this, 2) != null
  }

/**
 * optional BlockRelayProof block_relay_proof = 3;
 * @return {?proto.bandchain.v1.oracle.BlockRelayProof}
 */
proto.bandchain.v1.oracle.SingleProof.prototype.getBlockRelayProof =
  function () {
    return /** @type{?proto.bandchain.v1.oracle.BlockRelayProof} */ (
      jspb.Message.getWrapperField(
        this,
        proto.bandchain.v1.oracle.BlockRelayProof,
        3,
      )
    )
  }

/**
 * @param {?proto.bandchain.v1.oracle.BlockRelayProof|undefined} value
 * @return {!proto.bandchain.v1.oracle.SingleProof} returns this
 */
proto.bandchain.v1.oracle.SingleProof.prototype.setBlockRelayProof = function (
  value,
) {
  return jspb.Message.setWrapperField(this, 3, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.bandchain.v1.oracle.SingleProof} returns this
 */
proto.bandchain.v1.oracle.SingleProof.prototype.clearBlockRelayProof =
  function () {
    return this.setBlockRelayProof(undefined)
  }

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bandchain.v1.oracle.SingleProof.prototype.hasBlockRelayProof =
  function () {
    return jspb.Message.getField(this, 3) != null
  }

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bandchain.v1.oracle.MultiProof.repeatedFields_ = [2]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.MultiProof.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.bandchain.v1.oracle.MultiProof.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.MultiProof} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.MultiProof.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
        oracleDataMultiProofList: jspb.Message.toObjectList(
          msg.getOracleDataMultiProofList(),
          proto.bandchain.v1.oracle.OracleDataProof.toObject,
          includeInstance,
        ),
        blockRelayProof:
          (f = msg.getBlockRelayProof()) &&
          proto.bandchain.v1.oracle.BlockRelayProof.toObject(
            includeInstance,
            f,
          ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.MultiProof}
 */
proto.bandchain.v1.oracle.MultiProof.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.bandchain.v1.oracle.MultiProof()
  return proto.bandchain.v1.oracle.MultiProof.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.MultiProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.MultiProof}
 */
proto.bandchain.v1.oracle.MultiProof.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setBlockHeight(value)
        break
      case 2:
        var value = new proto.bandchain.v1.oracle.OracleDataProof()
        reader.readMessage(
          value,
          proto.bandchain.v1.oracle.OracleDataProof.deserializeBinaryFromReader,
        )
        msg.addOracleDataMultiProof(value)
        break
      case 3:
        var value = new proto.bandchain.v1.oracle.BlockRelayProof()
        reader.readMessage(
          value,
          proto.bandchain.v1.oracle.BlockRelayProof.deserializeBinaryFromReader,
        )
        msg.setBlockRelayProof(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.MultiProof.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.bandchain.v1.oracle.MultiProof.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.MultiProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.MultiProof.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getBlockHeight()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
  f = message.getOracleDataMultiProofList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.bandchain.v1.oracle.OracleDataProof.serializeBinaryToWriter,
    )
  }
  f = message.getBlockRelayProof()
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bandchain.v1.oracle.BlockRelayProof.serializeBinaryToWriter,
    )
  }
}

/**
 * optional uint64 block_height = 1;
 * @return {number}
 */
proto.bandchain.v1.oracle.MultiProof.prototype.getBlockHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.MultiProof} returns this
 */
proto.bandchain.v1.oracle.MultiProof.prototype.setBlockHeight = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * repeated OracleDataProof oracle_data_multi_proof = 2;
 * @return {!Array<!proto.bandchain.v1.oracle.OracleDataProof>}
 */
proto.bandchain.v1.oracle.MultiProof.prototype.getOracleDataMultiProofList =
  function () {
    return /** @type{!Array<!proto.bandchain.v1.oracle.OracleDataProof>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto.bandchain.v1.oracle.OracleDataProof,
        2,
      )
    )
  }

/**
 * @param {!Array<!proto.bandchain.v1.oracle.OracleDataProof>} value
 * @return {!proto.bandchain.v1.oracle.MultiProof} returns this
 */
proto.bandchain.v1.oracle.MultiProof.prototype.setOracleDataMultiProofList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 2, value)
  }

/**
 * @param {!proto.bandchain.v1.oracle.OracleDataProof=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bandchain.v1.oracle.OracleDataProof}
 */
proto.bandchain.v1.oracle.MultiProof.prototype.addOracleDataMultiProof =
  function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
      this,
      2,
      opt_value,
      proto.bandchain.v1.oracle.OracleDataProof,
      opt_index,
    )
  }

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bandchain.v1.oracle.MultiProof} returns this
 */
proto.bandchain.v1.oracle.MultiProof.prototype.clearOracleDataMultiProofList =
  function () {
    return this.setOracleDataMultiProofList([])
  }

/**
 * optional BlockRelayProof block_relay_proof = 3;
 * @return {?proto.bandchain.v1.oracle.BlockRelayProof}
 */
proto.bandchain.v1.oracle.MultiProof.prototype.getBlockRelayProof =
  function () {
    return /** @type{?proto.bandchain.v1.oracle.BlockRelayProof} */ (
      jspb.Message.getWrapperField(
        this,
        proto.bandchain.v1.oracle.BlockRelayProof,
        3,
      )
    )
  }

/**
 * @param {?proto.bandchain.v1.oracle.BlockRelayProof|undefined} value
 * @return {!proto.bandchain.v1.oracle.MultiProof} returns this
 */
proto.bandchain.v1.oracle.MultiProof.prototype.setBlockRelayProof = function (
  value,
) {
  return jspb.Message.setWrapperField(this, 3, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.bandchain.v1.oracle.MultiProof} returns this
 */
proto.bandchain.v1.oracle.MultiProof.prototype.clearBlockRelayProof =
  function () {
    return this.setBlockRelayProof(undefined)
  }

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bandchain.v1.oracle.MultiProof.prototype.hasBlockRelayProof =
  function () {
    return jspb.Message.getField(this, 3) != null
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.CountProof.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.bandchain.v1.oracle.CountProof.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.CountProof} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.CountProof.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
        countProof:
          (f = msg.getCountProof()) &&
          proto.bandchain.v1.oracle.RequestsCountProof.toObject(
            includeInstance,
            f,
          ),
        blockRelayProof:
          (f = msg.getBlockRelayProof()) &&
          proto.bandchain.v1.oracle.BlockRelayProof.toObject(
            includeInstance,
            f,
          ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.CountProof}
 */
proto.bandchain.v1.oracle.CountProof.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.bandchain.v1.oracle.CountProof()
  return proto.bandchain.v1.oracle.CountProof.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.CountProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.CountProof}
 */
proto.bandchain.v1.oracle.CountProof.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setBlockHeight(value)
        break
      case 2:
        var value = new proto.bandchain.v1.oracle.RequestsCountProof()
        reader.readMessage(
          value,
          proto.bandchain.v1.oracle.RequestsCountProof
            .deserializeBinaryFromReader,
        )
        msg.setCountProof(value)
        break
      case 3:
        var value = new proto.bandchain.v1.oracle.BlockRelayProof()
        reader.readMessage(
          value,
          proto.bandchain.v1.oracle.BlockRelayProof.deserializeBinaryFromReader,
        )
        msg.setBlockRelayProof(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.CountProof.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.bandchain.v1.oracle.CountProof.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.CountProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.CountProof.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getBlockHeight()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
  f = message.getCountProof()
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bandchain.v1.oracle.RequestsCountProof.serializeBinaryToWriter,
    )
  }
  f = message.getBlockRelayProof()
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bandchain.v1.oracle.BlockRelayProof.serializeBinaryToWriter,
    )
  }
}

/**
 * optional uint64 block_height = 1;
 * @return {number}
 */
proto.bandchain.v1.oracle.CountProof.prototype.getBlockHeight = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.CountProof} returns this
 */
proto.bandchain.v1.oracle.CountProof.prototype.setBlockHeight = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional RequestsCountProof count_proof = 2;
 * @return {?proto.bandchain.v1.oracle.RequestsCountProof}
 */
proto.bandchain.v1.oracle.CountProof.prototype.getCountProof = function () {
  return /** @type{?proto.bandchain.v1.oracle.RequestsCountProof} */ (
    jspb.Message.getWrapperField(
      this,
      proto.bandchain.v1.oracle.RequestsCountProof,
      2,
    )
  )
}

/**
 * @param {?proto.bandchain.v1.oracle.RequestsCountProof|undefined} value
 * @return {!proto.bandchain.v1.oracle.CountProof} returns this
 */
proto.bandchain.v1.oracle.CountProof.prototype.setCountProof = function (
  value,
) {
  return jspb.Message.setWrapperField(this, 2, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.bandchain.v1.oracle.CountProof} returns this
 */
proto.bandchain.v1.oracle.CountProof.prototype.clearCountProof = function () {
  return this.setCountProof(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bandchain.v1.oracle.CountProof.prototype.hasCountProof = function () {
  return jspb.Message.getField(this, 2) != null
}

/**
 * optional BlockRelayProof block_relay_proof = 3;
 * @return {?proto.bandchain.v1.oracle.BlockRelayProof}
 */
proto.bandchain.v1.oracle.CountProof.prototype.getBlockRelayProof =
  function () {
    return /** @type{?proto.bandchain.v1.oracle.BlockRelayProof} */ (
      jspb.Message.getWrapperField(
        this,
        proto.bandchain.v1.oracle.BlockRelayProof,
        3,
      )
    )
  }

/**
 * @param {?proto.bandchain.v1.oracle.BlockRelayProof|undefined} value
 * @return {!proto.bandchain.v1.oracle.CountProof} returns this
 */
proto.bandchain.v1.oracle.CountProof.prototype.setBlockRelayProof = function (
  value,
) {
  return jspb.Message.setWrapperField(this, 3, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.bandchain.v1.oracle.CountProof} returns this
 */
proto.bandchain.v1.oracle.CountProof.prototype.clearBlockRelayProof =
  function () {
    return this.setBlockRelayProof(undefined)
  }

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bandchain.v1.oracle.CountProof.prototype.hasBlockRelayProof =
  function () {
    return jspb.Message.getField(this, 3) != null
  }

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bandchain.v1.oracle.OracleDataProof.repeatedFields_ = [3]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.OracleDataProof.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.bandchain.v1.oracle.OracleDataProof.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.OracleDataProof} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.OracleDataProof.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        result:
          (f = msg.getResult()) &&
          oracle_v1_oracle_pb.Result.toObject(includeInstance, f),
        version: jspb.Message.getFieldWithDefault(msg, 2, 0),
        merklePathsList: jspb.Message.toObjectList(
          msg.getMerklePathsList(),
          proto.bandchain.v1.oracle.IAVLMerklePath.toObject,
          includeInstance,
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.OracleDataProof}
 */
proto.bandchain.v1.oracle.OracleDataProof.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.bandchain.v1.oracle.OracleDataProof()
  return proto.bandchain.v1.oracle.OracleDataProof.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.OracleDataProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.OracleDataProof}
 */
proto.bandchain.v1.oracle.OracleDataProof.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = new oracle_v1_oracle_pb.Result()
          reader.readMessage(
            value,
            oracle_v1_oracle_pb.Result.deserializeBinaryFromReader,
          )
          msg.setResult(value)
          break
        case 2:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setVersion(value)
          break
        case 3:
          var value = new proto.bandchain.v1.oracle.IAVLMerklePath()
          reader.readMessage(
            value,
            proto.bandchain.v1.oracle.IAVLMerklePath
              .deserializeBinaryFromReader,
          )
          msg.addMerklePaths(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.OracleDataProof.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.bandchain.v1.oracle.OracleDataProof.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.OracleDataProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.OracleDataProof.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getResult()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      oracle_v1_oracle_pb.Result.serializeBinaryToWriter,
    )
  }
  f = message.getVersion()
  if (f !== 0) {
    writer.writeUint64(2, f)
  }
  f = message.getMerklePathsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.bandchain.v1.oracle.IAVLMerklePath.serializeBinaryToWriter,
    )
  }
}

/**
 * optional oracle.v1.Result result = 1;
 * @return {?proto.oracle.v1.Result}
 */
proto.bandchain.v1.oracle.OracleDataProof.prototype.getResult = function () {
  return /** @type{?proto.oracle.v1.Result} */ (
    jspb.Message.getWrapperField(this, oracle_v1_oracle_pb.Result, 1)
  )
}

/**
 * @param {?proto.oracle.v1.Result|undefined} value
 * @return {!proto.bandchain.v1.oracle.OracleDataProof} returns this
 */
proto.bandchain.v1.oracle.OracleDataProof.prototype.setResult = function (
  value,
) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.bandchain.v1.oracle.OracleDataProof} returns this
 */
proto.bandchain.v1.oracle.OracleDataProof.prototype.clearResult = function () {
  return this.setResult(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bandchain.v1.oracle.OracleDataProof.prototype.hasResult = function () {
  return jspb.Message.getField(this, 1) != null
}

/**
 * optional uint64 version = 2;
 * @return {number}
 */
proto.bandchain.v1.oracle.OracleDataProof.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.OracleDataProof} returns this
 */
proto.bandchain.v1.oracle.OracleDataProof.prototype.setVersion = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * repeated IAVLMerklePath merkle_paths = 3;
 * @return {!Array<!proto.bandchain.v1.oracle.IAVLMerklePath>}
 */
proto.bandchain.v1.oracle.OracleDataProof.prototype.getMerklePathsList =
  function () {
    return /** @type{!Array<!proto.bandchain.v1.oracle.IAVLMerklePath>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto.bandchain.v1.oracle.IAVLMerklePath,
        3,
      )
    )
  }

/**
 * @param {!Array<!proto.bandchain.v1.oracle.IAVLMerklePath>} value
 * @return {!proto.bandchain.v1.oracle.OracleDataProof} returns this
 */
proto.bandchain.v1.oracle.OracleDataProof.prototype.setMerklePathsList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 3, value)
  }

/**
 * @param {!proto.bandchain.v1.oracle.IAVLMerklePath=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bandchain.v1.oracle.IAVLMerklePath}
 */
proto.bandchain.v1.oracle.OracleDataProof.prototype.addMerklePaths = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    3,
    opt_value,
    proto.bandchain.v1.oracle.IAVLMerklePath,
    opt_index,
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bandchain.v1.oracle.OracleDataProof} returns this
 */
proto.bandchain.v1.oracle.OracleDataProof.prototype.clearMerklePathsList =
  function () {
    return this.setMerklePathsList([])
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.IAVLMerklePath.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.bandchain.v1.oracle.IAVLMerklePath.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.IAVLMerklePath} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.IAVLMerklePath.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        isDataOnRight: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        subtreeHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
        subtreeSize: jspb.Message.getFieldWithDefault(msg, 3, 0),
        subtreeVersion: jspb.Message.getFieldWithDefault(msg, 4, 0),
        siblingHash: msg.getSiblingHash_asB64(),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.IAVLMerklePath}
 */
proto.bandchain.v1.oracle.IAVLMerklePath.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.bandchain.v1.oracle.IAVLMerklePath()
  return proto.bandchain.v1.oracle.IAVLMerklePath.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.IAVLMerklePath} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.IAVLMerklePath}
 */
proto.bandchain.v1.oracle.IAVLMerklePath.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {boolean} */ (reader.readBool())
          msg.setIsDataOnRight(value)
          break
        case 2:
          var value = /** @type {number} */ (reader.readUint32())
          msg.setSubtreeHeight(value)
          break
        case 3:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setSubtreeSize(value)
          break
        case 4:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setSubtreeVersion(value)
          break
        case 5:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setSiblingHash(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.IAVLMerklePath.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.bandchain.v1.oracle.IAVLMerklePath.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.IAVLMerklePath} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.IAVLMerklePath.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getIsDataOnRight()
  if (f) {
    writer.writeBool(1, f)
  }
  f = message.getSubtreeHeight()
  if (f !== 0) {
    writer.writeUint32(2, f)
  }
  f = message.getSubtreeSize()
  if (f !== 0) {
    writer.writeUint64(3, f)
  }
  f = message.getSubtreeVersion()
  if (f !== 0) {
    writer.writeUint64(4, f)
  }
  f = message.getSiblingHash_asU8()
  if (f.length > 0) {
    writer.writeBytes(5, f)
  }
}

/**
 * optional bool is_data_on_right = 1;
 * @return {boolean}
 */
proto.bandchain.v1.oracle.IAVLMerklePath.prototype.getIsDataOnRight =
  function () {
    return /** @type {boolean} */ (
      jspb.Message.getBooleanFieldWithDefault(this, 1, false)
    )
  }

/**
 * @param {boolean} value
 * @return {!proto.bandchain.v1.oracle.IAVLMerklePath} returns this
 */
proto.bandchain.v1.oracle.IAVLMerklePath.prototype.setIsDataOnRight = function (
  value,
) {
  return jspb.Message.setProto3BooleanField(this, 1, value)
}

/**
 * optional uint32 subtree_height = 2;
 * @return {number}
 */
proto.bandchain.v1.oracle.IAVLMerklePath.prototype.getSubtreeHeight =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
  }

/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.IAVLMerklePath} returns this
 */
proto.bandchain.v1.oracle.IAVLMerklePath.prototype.setSubtreeHeight = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional uint64 subtree_size = 3;
 * @return {number}
 */
proto.bandchain.v1.oracle.IAVLMerklePath.prototype.getSubtreeSize =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
  }

/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.IAVLMerklePath} returns this
 */
proto.bandchain.v1.oracle.IAVLMerklePath.prototype.setSubtreeSize = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * optional uint64 subtree_version = 4;
 * @return {number}
 */
proto.bandchain.v1.oracle.IAVLMerklePath.prototype.getSubtreeVersion =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
  }

/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.IAVLMerklePath} returns this
 */
proto.bandchain.v1.oracle.IAVLMerklePath.prototype.setSubtreeVersion =
  function (value) {
    return jspb.Message.setProto3IntField(this, 4, value)
  }

/**
 * optional bytes sibling_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.bandchain.v1.oracle.IAVLMerklePath.prototype.getSiblingHash =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 5, '')
    )
  }

/**
 * optional bytes sibling_hash = 5;
 * This is a type-conversion wrapper around `getSiblingHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.IAVLMerklePath.prototype.getSiblingHash_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getSiblingHash())
    )
  }

/**
 * optional bytes sibling_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSiblingHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.IAVLMerklePath.prototype.getSiblingHash_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getSiblingHash())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.IAVLMerklePath} returns this
 */
proto.bandchain.v1.oracle.IAVLMerklePath.prototype.setSiblingHash = function (
  value,
) {
  return jspb.Message.setProto3BytesField(this, 5, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bandchain.v1.oracle.BlockRelayProof.repeatedFields_ = [4]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.BlockRelayProof.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.bandchain.v1.oracle.BlockRelayProof.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.BlockRelayProof} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.BlockRelayProof.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        multiStoreProof:
          (f = msg.getMultiStoreProof()) &&
          proto.bandchain.v1.oracle.MultiStoreProof.toObject(
            includeInstance,
            f,
          ),
        blockHeaderMerkleParts:
          (f = msg.getBlockHeaderMerkleParts()) &&
          proto.bandchain.v1.oracle.BlockHeaderMerkleParts.toObject(
            includeInstance,
            f,
          ),
        commonEncodedVotePart:
          (f = msg.getCommonEncodedVotePart()) &&
          proto.bandchain.v1.oracle.CommonEncodedVotePart.toObject(
            includeInstance,
            f,
          ),
        signaturesList: jspb.Message.toObjectList(
          msg.getSignaturesList(),
          proto.bandchain.v1.oracle.TMSignature.toObject,
          includeInstance,
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.BlockRelayProof}
 */
proto.bandchain.v1.oracle.BlockRelayProof.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.bandchain.v1.oracle.BlockRelayProof()
  return proto.bandchain.v1.oracle.BlockRelayProof.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.BlockRelayProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.BlockRelayProof}
 */
proto.bandchain.v1.oracle.BlockRelayProof.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = new proto.bandchain.v1.oracle.MultiStoreProof()
          reader.readMessage(
            value,
            proto.bandchain.v1.oracle.MultiStoreProof
              .deserializeBinaryFromReader,
          )
          msg.setMultiStoreProof(value)
          break
        case 2:
          var value = new proto.bandchain.v1.oracle.BlockHeaderMerkleParts()
          reader.readMessage(
            value,
            proto.bandchain.v1.oracle.BlockHeaderMerkleParts
              .deserializeBinaryFromReader,
          )
          msg.setBlockHeaderMerkleParts(value)
          break
        case 3:
          var value = new proto.bandchain.v1.oracle.CommonEncodedVotePart()
          reader.readMessage(
            value,
            proto.bandchain.v1.oracle.CommonEncodedVotePart
              .deserializeBinaryFromReader,
          )
          msg.setCommonEncodedVotePart(value)
          break
        case 4:
          var value = new proto.bandchain.v1.oracle.TMSignature()
          reader.readMessage(
            value,
            proto.bandchain.v1.oracle.TMSignature.deserializeBinaryFromReader,
          )
          msg.addSignatures(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.BlockRelayProof.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.bandchain.v1.oracle.BlockRelayProof.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.BlockRelayProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.BlockRelayProof.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getMultiStoreProof()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bandchain.v1.oracle.MultiStoreProof.serializeBinaryToWriter,
    )
  }
  f = message.getBlockHeaderMerkleParts()
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bandchain.v1.oracle.BlockHeaderMerkleParts.serializeBinaryToWriter,
    )
  }
  f = message.getCommonEncodedVotePart()
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bandchain.v1.oracle.CommonEncodedVotePart.serializeBinaryToWriter,
    )
  }
  f = message.getSignaturesList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.bandchain.v1.oracle.TMSignature.serializeBinaryToWriter,
    )
  }
}

/**
 * optional MultiStoreProof multi_store_proof = 1;
 * @return {?proto.bandchain.v1.oracle.MultiStoreProof}
 */
proto.bandchain.v1.oracle.BlockRelayProof.prototype.getMultiStoreProof =
  function () {
    return /** @type{?proto.bandchain.v1.oracle.MultiStoreProof} */ (
      jspb.Message.getWrapperField(
        this,
        proto.bandchain.v1.oracle.MultiStoreProof,
        1,
      )
    )
  }

/**
 * @param {?proto.bandchain.v1.oracle.MultiStoreProof|undefined} value
 * @return {!proto.bandchain.v1.oracle.BlockRelayProof} returns this
 */
proto.bandchain.v1.oracle.BlockRelayProof.prototype.setMultiStoreProof =
  function (value) {
    return jspb.Message.setWrapperField(this, 1, value)
  }

/**
 * Clears the message field making it undefined.
 * @return {!proto.bandchain.v1.oracle.BlockRelayProof} returns this
 */
proto.bandchain.v1.oracle.BlockRelayProof.prototype.clearMultiStoreProof =
  function () {
    return this.setMultiStoreProof(undefined)
  }

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bandchain.v1.oracle.BlockRelayProof.prototype.hasMultiStoreProof =
  function () {
    return jspb.Message.getField(this, 1) != null
  }

/**
 * optional BlockHeaderMerkleParts block_header_merkle_parts = 2;
 * @return {?proto.bandchain.v1.oracle.BlockHeaderMerkleParts}
 */
proto.bandchain.v1.oracle.BlockRelayProof.prototype.getBlockHeaderMerkleParts =
  function () {
    return /** @type{?proto.bandchain.v1.oracle.BlockHeaderMerkleParts} */ (
      jspb.Message.getWrapperField(
        this,
        proto.bandchain.v1.oracle.BlockHeaderMerkleParts,
        2,
      )
    )
  }

/**
 * @param {?proto.bandchain.v1.oracle.BlockHeaderMerkleParts|undefined} value
 * @return {!proto.bandchain.v1.oracle.BlockRelayProof} returns this
 */
proto.bandchain.v1.oracle.BlockRelayProof.prototype.setBlockHeaderMerkleParts =
  function (value) {
    return jspb.Message.setWrapperField(this, 2, value)
  }

/**
 * Clears the message field making it undefined.
 * @return {!proto.bandchain.v1.oracle.BlockRelayProof} returns this
 */
proto.bandchain.v1.oracle.BlockRelayProof.prototype.clearBlockHeaderMerkleParts =
  function () {
    return this.setBlockHeaderMerkleParts(undefined)
  }

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bandchain.v1.oracle.BlockRelayProof.prototype.hasBlockHeaderMerkleParts =
  function () {
    return jspb.Message.getField(this, 2) != null
  }

/**
 * optional CommonEncodedVotePart common_encoded_vote_part = 3;
 * @return {?proto.bandchain.v1.oracle.CommonEncodedVotePart}
 */
proto.bandchain.v1.oracle.BlockRelayProof.prototype.getCommonEncodedVotePart =
  function () {
    return /** @type{?proto.bandchain.v1.oracle.CommonEncodedVotePart} */ (
      jspb.Message.getWrapperField(
        this,
        proto.bandchain.v1.oracle.CommonEncodedVotePart,
        3,
      )
    )
  }

/**
 * @param {?proto.bandchain.v1.oracle.CommonEncodedVotePart|undefined} value
 * @return {!proto.bandchain.v1.oracle.BlockRelayProof} returns this
 */
proto.bandchain.v1.oracle.BlockRelayProof.prototype.setCommonEncodedVotePart =
  function (value) {
    return jspb.Message.setWrapperField(this, 3, value)
  }

/**
 * Clears the message field making it undefined.
 * @return {!proto.bandchain.v1.oracle.BlockRelayProof} returns this
 */
proto.bandchain.v1.oracle.BlockRelayProof.prototype.clearCommonEncodedVotePart =
  function () {
    return this.setCommonEncodedVotePart(undefined)
  }

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bandchain.v1.oracle.BlockRelayProof.prototype.hasCommonEncodedVotePart =
  function () {
    return jspb.Message.getField(this, 3) != null
  }

/**
 * repeated TMSignature signatures = 4;
 * @return {!Array<!proto.bandchain.v1.oracle.TMSignature>}
 */
proto.bandchain.v1.oracle.BlockRelayProof.prototype.getSignaturesList =
  function () {
    return /** @type{!Array<!proto.bandchain.v1.oracle.TMSignature>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto.bandchain.v1.oracle.TMSignature,
        4,
      )
    )
  }

/**
 * @param {!Array<!proto.bandchain.v1.oracle.TMSignature>} value
 * @return {!proto.bandchain.v1.oracle.BlockRelayProof} returns this
 */
proto.bandchain.v1.oracle.BlockRelayProof.prototype.setSignaturesList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 4, value)
  }

/**
 * @param {!proto.bandchain.v1.oracle.TMSignature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bandchain.v1.oracle.TMSignature}
 */
proto.bandchain.v1.oracle.BlockRelayProof.prototype.addSignatures = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    4,
    opt_value,
    proto.bandchain.v1.oracle.TMSignature,
    opt_index,
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bandchain.v1.oracle.BlockRelayProof} returns this
 */
proto.bandchain.v1.oracle.BlockRelayProof.prototype.clearSignaturesList =
  function () {
    return this.setSignaturesList([])
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.MultiStoreProof.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.bandchain.v1.oracle.MultiStoreProof.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.MultiStoreProof} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.MultiStoreProof.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        oracleIavlStateHash: msg.getOracleIavlStateHash_asB64(),
        paramsStoreMerkleHash: msg.getParamsStoreMerkleHash_asB64(),
        slashingToStakingStoresMerkleHash:
          msg.getSlashingToStakingStoresMerkleHash_asB64(),
        transferToUpgradeStoresMerkleHash:
          msg.getTransferToUpgradeStoresMerkleHash_asB64(),
        authToMintStoresMerkleHash: msg.getAuthToMintStoresMerkleHash_asB64(),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.MultiStoreProof}
 */
proto.bandchain.v1.oracle.MultiStoreProof.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.bandchain.v1.oracle.MultiStoreProof()
  return proto.bandchain.v1.oracle.MultiStoreProof.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.MultiStoreProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.MultiStoreProof}
 */
proto.bandchain.v1.oracle.MultiStoreProof.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setOracleIavlStateHash(value)
          break
        case 2:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setParamsStoreMerkleHash(value)
          break
        case 3:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setSlashingToStakingStoresMerkleHash(value)
          break
        case 4:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setTransferToUpgradeStoresMerkleHash(value)
          break
        case 5:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setAuthToMintStoresMerkleHash(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.bandchain.v1.oracle.MultiStoreProof.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.MultiStoreProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.MultiStoreProof.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getOracleIavlStateHash_asU8()
  if (f.length > 0) {
    writer.writeBytes(1, f)
  }
  f = message.getParamsStoreMerkleHash_asU8()
  if (f.length > 0) {
    writer.writeBytes(2, f)
  }
  f = message.getSlashingToStakingStoresMerkleHash_asU8()
  if (f.length > 0) {
    writer.writeBytes(3, f)
  }
  f = message.getTransferToUpgradeStoresMerkleHash_asU8()
  if (f.length > 0) {
    writer.writeBytes(4, f)
  }
  f = message.getAuthToMintStoresMerkleHash_asU8()
  if (f.length > 0) {
    writer.writeBytes(5, f)
  }
}

/**
 * optional bytes oracle_iavl_state_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getOracleIavlStateHash =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    )
  }

/**
 * optional bytes oracle_iavl_state_hash = 1;
 * This is a type-conversion wrapper around `getOracleIavlStateHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getOracleIavlStateHash_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getOracleIavlStateHash())
    )
  }

/**
 * optional bytes oracle_iavl_state_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOracleIavlStateHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getOracleIavlStateHash_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getOracleIavlStateHash())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.MultiStoreProof} returns this
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.setOracleIavlStateHash =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 1, value)
  }

/**
 * optional bytes params_store_merkle_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getParamsStoreMerkleHash =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    )
  }

/**
 * optional bytes params_store_merkle_hash = 2;
 * This is a type-conversion wrapper around `getParamsStoreMerkleHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getParamsStoreMerkleHash_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getParamsStoreMerkleHash())
    )
  }

/**
 * optional bytes params_store_merkle_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParamsStoreMerkleHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getParamsStoreMerkleHash_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getParamsStoreMerkleHash())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.MultiStoreProof} returns this
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.setParamsStoreMerkleHash =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 2, value)
  }

/**
 * optional bytes slashing_to_staking_stores_merkle_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getSlashingToStakingStoresMerkleHash =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 3, '')
    )
  }

/**
 * optional bytes slashing_to_staking_stores_merkle_hash = 3;
 * This is a type-conversion wrapper around `getSlashingToStakingStoresMerkleHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getSlashingToStakingStoresMerkleHash_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getSlashingToStakingStoresMerkleHash())
    )
  }

/**
 * optional bytes slashing_to_staking_stores_merkle_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSlashingToStakingStoresMerkleHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getSlashingToStakingStoresMerkleHash_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getSlashingToStakingStoresMerkleHash())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.MultiStoreProof} returns this
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.setSlashingToStakingStoresMerkleHash =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 3, value)
  }

/**
 * optional bytes transfer_to_upgrade_stores_merkle_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getTransferToUpgradeStoresMerkleHash =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 4, '')
    )
  }

/**
 * optional bytes transfer_to_upgrade_stores_merkle_hash = 4;
 * This is a type-conversion wrapper around `getTransferToUpgradeStoresMerkleHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getTransferToUpgradeStoresMerkleHash_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getTransferToUpgradeStoresMerkleHash())
    )
  }

/**
 * optional bytes transfer_to_upgrade_stores_merkle_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransferToUpgradeStoresMerkleHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getTransferToUpgradeStoresMerkleHash_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getTransferToUpgradeStoresMerkleHash())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.MultiStoreProof} returns this
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.setTransferToUpgradeStoresMerkleHash =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 4, value)
  }

/**
 * optional bytes auth_to_mint_stores_merkle_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getAuthToMintStoresMerkleHash =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 5, '')
    )
  }

/**
 * optional bytes auth_to_mint_stores_merkle_hash = 5;
 * This is a type-conversion wrapper around `getAuthToMintStoresMerkleHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getAuthToMintStoresMerkleHash_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getAuthToMintStoresMerkleHash())
    )
  }

/**
 * optional bytes auth_to_mint_stores_merkle_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthToMintStoresMerkleHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getAuthToMintStoresMerkleHash_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getAuthToMintStoresMerkleHash())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.MultiStoreProof} returns this
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.setAuthToMintStoresMerkleHash =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 5, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bandchain.v1.oracle.BlockHeaderMerkleParts.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.BlockHeaderMerkleParts.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        versionAndChainIdHash: msg.getVersionAndChainIdHash_asB64(),
        height: jspb.Message.getFieldWithDefault(msg, 2, 0),
        timeSecond: jspb.Message.getFieldWithDefault(msg, 3, 0),
        timeNanoSecond: jspb.Message.getFieldWithDefault(msg, 4, 0),
        lastBlockIdAndOther: msg.getLastBlockIdAndOther_asB64(),
        nextValidatorHashAndConsensusHash:
          msg.getNextValidatorHashAndConsensusHash_asB64(),
        lastResultsHash: msg.getLastResultsHash_asB64(),
        evidenceAndProposerHash: msg.getEvidenceAndProposerHash_asB64(),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.bandchain.v1.oracle.BlockHeaderMerkleParts()
  return proto.bandchain.v1.oracle.BlockHeaderMerkleParts.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setVersionAndChainIdHash(value)
          break
        case 2:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setHeight(value)
          break
        case 3:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setTimeSecond(value)
          break
        case 4:
          var value = /** @type {number} */ (reader.readUint32())
          msg.setTimeNanoSecond(value)
          break
        case 5:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setLastBlockIdAndOther(value)
          break
        case 6:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setNextValidatorHashAndConsensusHash(value)
          break
        case 7:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setLastResultsHash(value)
          break
        case 8:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setEvidenceAndProposerHash(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.bandchain.v1.oracle.BlockHeaderMerkleParts.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getVersionAndChainIdHash_asU8()
    if (f.length > 0) {
      writer.writeBytes(1, f)
    }
    f = message.getHeight()
    if (f !== 0) {
      writer.writeUint64(2, f)
    }
    f = message.getTimeSecond()
    if (f !== 0) {
      writer.writeUint64(3, f)
    }
    f = message.getTimeNanoSecond()
    if (f !== 0) {
      writer.writeUint32(4, f)
    }
    f = message.getLastBlockIdAndOther_asU8()
    if (f.length > 0) {
      writer.writeBytes(5, f)
    }
    f = message.getNextValidatorHashAndConsensusHash_asU8()
    if (f.length > 0) {
      writer.writeBytes(6, f)
    }
    f = message.getLastResultsHash_asU8()
    if (f.length > 0) {
      writer.writeBytes(7, f)
    }
    f = message.getEvidenceAndProposerHash_asU8()
    if (f.length > 0) {
      writer.writeBytes(8, f)
    }
  }

/**
 * optional bytes version_and_chain_id_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getVersionAndChainIdHash =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    )
  }

/**
 * optional bytes version_and_chain_id_hash = 1;
 * This is a type-conversion wrapper around `getVersionAndChainIdHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getVersionAndChainIdHash_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getVersionAndChainIdHash())
    )
  }

/**
 * optional bytes version_and_chain_id_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVersionAndChainIdHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getVersionAndChainIdHash_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getVersionAndChainIdHash())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} returns this
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.setVersionAndChainIdHash =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 1, value)
  }

/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getHeight =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
  }

/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} returns this
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.setHeight =
  function (value) {
    return jspb.Message.setProto3IntField(this, 2, value)
  }

/**
 * optional uint64 time_second = 3;
 * @return {number}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getTimeSecond =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
  }

/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} returns this
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.setTimeSecond =
  function (value) {
    return jspb.Message.setProto3IntField(this, 3, value)
  }

/**
 * optional uint32 time_nano_second = 4;
 * @return {number}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getTimeNanoSecond =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
  }

/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} returns this
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.setTimeNanoSecond =
  function (value) {
    return jspb.Message.setProto3IntField(this, 4, value)
  }

/**
 * optional bytes last_block_id_and_other = 5;
 * @return {!(string|Uint8Array)}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getLastBlockIdAndOther =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 5, '')
    )
  }

/**
 * optional bytes last_block_id_and_other = 5;
 * This is a type-conversion wrapper around `getLastBlockIdAndOther()`
 * @return {string}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getLastBlockIdAndOther_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getLastBlockIdAndOther())
    )
  }

/**
 * optional bytes last_block_id_and_other = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastBlockIdAndOther()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getLastBlockIdAndOther_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getLastBlockIdAndOther())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} returns this
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.setLastBlockIdAndOther =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 5, value)
  }

/**
 * optional bytes next_validator_hash_and_consensus_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getNextValidatorHashAndConsensusHash =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 6, '')
    )
  }

/**
 * optional bytes next_validator_hash_and_consensus_hash = 6;
 * This is a type-conversion wrapper around `getNextValidatorHashAndConsensusHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getNextValidatorHashAndConsensusHash_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getNextValidatorHashAndConsensusHash())
    )
  }

/**
 * optional bytes next_validator_hash_and_consensus_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNextValidatorHashAndConsensusHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getNextValidatorHashAndConsensusHash_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getNextValidatorHashAndConsensusHash())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} returns this
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.setNextValidatorHashAndConsensusHash =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 6, value)
  }

/**
 * optional bytes last_results_hash = 7;
 * @return {!(string|Uint8Array)}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getLastResultsHash =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 7, '')
    )
  }

/**
 * optional bytes last_results_hash = 7;
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getLastResultsHash_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getLastResultsHash())
    )
  }

/**
 * optional bytes last_results_hash = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getLastResultsHash_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getLastResultsHash())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} returns this
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.setLastResultsHash =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 7, value)
  }

/**
 * optional bytes evidence_and_proposer_hash = 8;
 * @return {!(string|Uint8Array)}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getEvidenceAndProposerHash =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 8, '')
    )
  }

/**
 * optional bytes evidence_and_proposer_hash = 8;
 * This is a type-conversion wrapper around `getEvidenceAndProposerHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getEvidenceAndProposerHash_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getEvidenceAndProposerHash())
    )
  }

/**
 * optional bytes evidence_and_proposer_hash = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvidenceAndProposerHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getEvidenceAndProposerHash_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getEvidenceAndProposerHash())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} returns this
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.setEvidenceAndProposerHash =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 8, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.CommonEncodedVotePart.prototype.toObject =
    function (opt_includeInstance) {
      return proto.bandchain.v1.oracle.CommonEncodedVotePart.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.CommonEncodedVotePart} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.CommonEncodedVotePart.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        signedDataPrefix: msg.getSignedDataPrefix_asB64(),
        signedDataSuffix: msg.getSignedDataSuffix_asB64(),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.CommonEncodedVotePart}
 */
proto.bandchain.v1.oracle.CommonEncodedVotePart.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.bandchain.v1.oracle.CommonEncodedVotePart()
  return proto.bandchain.v1.oracle.CommonEncodedVotePart.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.CommonEncodedVotePart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.CommonEncodedVotePart}
 */
proto.bandchain.v1.oracle.CommonEncodedVotePart.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setSignedDataPrefix(value)
          break
        case 2:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setSignedDataSuffix(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.CommonEncodedVotePart.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.bandchain.v1.oracle.CommonEncodedVotePart.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.CommonEncodedVotePart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.CommonEncodedVotePart.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getSignedDataPrefix_asU8()
    if (f.length > 0) {
      writer.writeBytes(1, f)
    }
    f = message.getSignedDataSuffix_asU8()
    if (f.length > 0) {
      writer.writeBytes(2, f)
    }
  }

/**
 * optional bytes signed_data_prefix = 1;
 * @return {!(string|Uint8Array)}
 */
proto.bandchain.v1.oracle.CommonEncodedVotePart.prototype.getSignedDataPrefix =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    )
  }

/**
 * optional bytes signed_data_prefix = 1;
 * This is a type-conversion wrapper around `getSignedDataPrefix()`
 * @return {string}
 */
proto.bandchain.v1.oracle.CommonEncodedVotePart.prototype.getSignedDataPrefix_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getSignedDataPrefix())
    )
  }

/**
 * optional bytes signed_data_prefix = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignedDataPrefix()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.CommonEncodedVotePart.prototype.getSignedDataPrefix_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getSignedDataPrefix())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.CommonEncodedVotePart} returns this
 */
proto.bandchain.v1.oracle.CommonEncodedVotePart.prototype.setSignedDataPrefix =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 1, value)
  }

/**
 * optional bytes signed_data_suffix = 2;
 * @return {!(string|Uint8Array)}
 */
proto.bandchain.v1.oracle.CommonEncodedVotePart.prototype.getSignedDataSuffix =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    )
  }

/**
 * optional bytes signed_data_suffix = 2;
 * This is a type-conversion wrapper around `getSignedDataSuffix()`
 * @return {string}
 */
proto.bandchain.v1.oracle.CommonEncodedVotePart.prototype.getSignedDataSuffix_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getSignedDataSuffix())
    )
  }

/**
 * optional bytes signed_data_suffix = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignedDataSuffix()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.CommonEncodedVotePart.prototype.getSignedDataSuffix_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getSignedDataSuffix())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.CommonEncodedVotePart} returns this
 */
proto.bandchain.v1.oracle.CommonEncodedVotePart.prototype.setSignedDataSuffix =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 2, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.TMSignature.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.bandchain.v1.oracle.TMSignature.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.TMSignature} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.TMSignature.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        r: msg.getR_asB64(),
        s: msg.getS_asB64(),
        v: jspb.Message.getFieldWithDefault(msg, 3, 0),
        encodedTimestamp: msg.getEncodedTimestamp_asB64(),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.TMSignature}
 */
proto.bandchain.v1.oracle.TMSignature.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.bandchain.v1.oracle.TMSignature()
  return proto.bandchain.v1.oracle.TMSignature.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.TMSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.TMSignature}
 */
proto.bandchain.v1.oracle.TMSignature.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setR(value)
        break
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setS(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setV(value)
        break
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setEncodedTimestamp(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.TMSignature.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.bandchain.v1.oracle.TMSignature.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.TMSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.TMSignature.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getR_asU8()
  if (f.length > 0) {
    writer.writeBytes(1, f)
  }
  f = message.getS_asU8()
  if (f.length > 0) {
    writer.writeBytes(2, f)
  }
  f = message.getV()
  if (f !== 0) {
    writer.writeUint32(3, f)
  }
  f = message.getEncodedTimestamp_asU8()
  if (f.length > 0) {
    writer.writeBytes(4, f)
  }
}

/**
 * optional bytes r = 1;
 * @return {!(string|Uint8Array)}
 */
proto.bandchain.v1.oracle.TMSignature.prototype.getR = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 1, '')
  )
}

/**
 * optional bytes r = 1;
 * This is a type-conversion wrapper around `getR()`
 * @return {string}
 */
proto.bandchain.v1.oracle.TMSignature.prototype.getR_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getR()))
}

/**
 * optional bytes r = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getR()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.TMSignature.prototype.getR_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getR()))
}

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.TMSignature} returns this
 */
proto.bandchain.v1.oracle.TMSignature.prototype.setR = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value)
}

/**
 * optional bytes s = 2;
 * @return {!(string|Uint8Array)}
 */
proto.bandchain.v1.oracle.TMSignature.prototype.getS = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 2, '')
  )
}

/**
 * optional bytes s = 2;
 * This is a type-conversion wrapper around `getS()`
 * @return {string}
 */
proto.bandchain.v1.oracle.TMSignature.prototype.getS_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getS()))
}

/**
 * optional bytes s = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getS()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.TMSignature.prototype.getS_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getS()))
}

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.TMSignature} returns this
 */
proto.bandchain.v1.oracle.TMSignature.prototype.setS = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value)
}

/**
 * optional uint32 v = 3;
 * @return {number}
 */
proto.bandchain.v1.oracle.TMSignature.prototype.getV = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.TMSignature} returns this
 */
proto.bandchain.v1.oracle.TMSignature.prototype.setV = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * optional bytes encoded_timestamp = 4;
 * @return {!(string|Uint8Array)}
 */
proto.bandchain.v1.oracle.TMSignature.prototype.getEncodedTimestamp =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 4, '')
    )
  }

/**
 * optional bytes encoded_timestamp = 4;
 * This is a type-conversion wrapper around `getEncodedTimestamp()`
 * @return {string}
 */
proto.bandchain.v1.oracle.TMSignature.prototype.getEncodedTimestamp_asB64 =
  function () {
    return /** @type {string} */ (
      jspb.Message.bytesAsB64(this.getEncodedTimestamp())
    )
  }

/**
 * optional bytes encoded_timestamp = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncodedTimestamp()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.TMSignature.prototype.getEncodedTimestamp_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getEncodedTimestamp())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.TMSignature} returns this
 */
proto.bandchain.v1.oracle.TMSignature.prototype.setEncodedTimestamp = function (
  value,
) {
  return jspb.Message.setProto3BytesField(this, 4, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bandchain.v1.oracle.RequestsCountProof.repeatedFields_ = [3]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bandchain.v1.oracle.RequestsCountProof.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.bandchain.v1.oracle.RequestsCountProof.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bandchain.v1.oracle.RequestsCountProof} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bandchain.v1.oracle.RequestsCountProof.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        count: jspb.Message.getFieldWithDefault(msg, 1, 0),
        version: jspb.Message.getFieldWithDefault(msg, 2, 0),
        merklePathsList: jspb.Message.toObjectList(
          msg.getMerklePathsList(),
          proto.bandchain.v1.oracle.IAVLMerklePath.toObject,
          includeInstance,
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.RequestsCountProof}
 */
proto.bandchain.v1.oracle.RequestsCountProof.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.bandchain.v1.oracle.RequestsCountProof()
  return proto.bandchain.v1.oracle.RequestsCountProof.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.RequestsCountProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.RequestsCountProof}
 */
proto.bandchain.v1.oracle.RequestsCountProof.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setCount(value)
          break
        case 2:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setVersion(value)
          break
        case 3:
          var value = new proto.bandchain.v1.oracle.IAVLMerklePath()
          reader.readMessage(
            value,
            proto.bandchain.v1.oracle.IAVLMerklePath
              .deserializeBinaryFromReader,
          )
          msg.addMerklePaths(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.RequestsCountProof.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.bandchain.v1.oracle.RequestsCountProof.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.RequestsCountProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.RequestsCountProof.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getCount()
    if (f !== 0) {
      writer.writeUint64(1, f)
    }
    f = message.getVersion()
    if (f !== 0) {
      writer.writeUint64(2, f)
    }
    f = message.getMerklePathsList()
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        3,
        f,
        proto.bandchain.v1.oracle.IAVLMerklePath.serializeBinaryToWriter,
      )
    }
  }

/**
 * optional uint64 count = 1;
 * @return {number}
 */
proto.bandchain.v1.oracle.RequestsCountProof.prototype.getCount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.RequestsCountProof} returns this
 */
proto.bandchain.v1.oracle.RequestsCountProof.prototype.setCount = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional uint64 version = 2;
 * @return {number}
 */
proto.bandchain.v1.oracle.RequestsCountProof.prototype.getVersion =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
  }

/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.RequestsCountProof} returns this
 */
proto.bandchain.v1.oracle.RequestsCountProof.prototype.setVersion = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * repeated IAVLMerklePath merkle_paths = 3;
 * @return {!Array<!proto.bandchain.v1.oracle.IAVLMerklePath>}
 */
proto.bandchain.v1.oracle.RequestsCountProof.prototype.getMerklePathsList =
  function () {
    return /** @type{!Array<!proto.bandchain.v1.oracle.IAVLMerklePath>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto.bandchain.v1.oracle.IAVLMerklePath,
        3,
      )
    )
  }

/**
 * @param {!Array<!proto.bandchain.v1.oracle.IAVLMerklePath>} value
 * @return {!proto.bandchain.v1.oracle.RequestsCountProof} returns this
 */
proto.bandchain.v1.oracle.RequestsCountProof.prototype.setMerklePathsList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 3, value)
  }

/**
 * @param {!proto.bandchain.v1.oracle.IAVLMerklePath=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bandchain.v1.oracle.IAVLMerklePath}
 */
proto.bandchain.v1.oracle.RequestsCountProof.prototype.addMerklePaths =
  function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
      this,
      3,
      opt_value,
      proto.bandchain.v1.oracle.IAVLMerklePath,
      opt_index,
    )
  }

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bandchain.v1.oracle.RequestsCountProof} returns this
 */
proto.bandchain.v1.oracle.RequestsCountProof.prototype.clearMerklePathsList =
  function () {
    return this.setMerklePathsList([])
  }

goog.object.extend(exports, proto.bandchain.v1.oracle)
