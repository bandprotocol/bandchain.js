// source: feeds/v1beta1/feeds.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var cosmos_proto_cosmos_pb = require('../../cosmos_proto/cosmos_pb.js');
goog.object.extend(proto, cosmos_proto_cosmos_pb);
var gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
goog.exportSymbol('proto.feeds.v1beta1.CurrentFeedWithDeviations', null, global);
goog.exportSymbol('proto.feeds.v1beta1.CurrentFeeds', null, global);
goog.exportSymbol('proto.feeds.v1beta1.DelegatorSignals', null, global);
goog.exportSymbol('proto.feeds.v1beta1.Feed', null, global);
goog.exportSymbol('proto.feeds.v1beta1.FeedWithDeviation', null, global);
goog.exportSymbol('proto.feeds.v1beta1.Price', null, global);
goog.exportSymbol('proto.feeds.v1beta1.PriceStatus', null, global);
goog.exportSymbol('proto.feeds.v1beta1.ReferenceSourceConfig', null, global);
goog.exportSymbol('proto.feeds.v1beta1.Signal', null, global);
goog.exportSymbol('proto.feeds.v1beta1.SignalPrice', null, global);
goog.exportSymbol('proto.feeds.v1beta1.ValidatorPrice', null, global);
goog.exportSymbol('proto.feeds.v1beta1.ValidatorPriceList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feeds.v1beta1.Signal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feeds.v1beta1.Signal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feeds.v1beta1.Signal.displayName = 'proto.feeds.v1beta1.Signal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feeds.v1beta1.DelegatorSignals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feeds.v1beta1.DelegatorSignals.repeatedFields_, null);
};
goog.inherits(proto.feeds.v1beta1.DelegatorSignals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feeds.v1beta1.DelegatorSignals.displayName = 'proto.feeds.v1beta1.DelegatorSignals';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feeds.v1beta1.Feed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feeds.v1beta1.Feed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feeds.v1beta1.Feed.displayName = 'proto.feeds.v1beta1.Feed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feeds.v1beta1.FeedWithDeviation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feeds.v1beta1.FeedWithDeviation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feeds.v1beta1.FeedWithDeviation.displayName = 'proto.feeds.v1beta1.FeedWithDeviation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feeds.v1beta1.CurrentFeeds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feeds.v1beta1.CurrentFeeds.repeatedFields_, null);
};
goog.inherits(proto.feeds.v1beta1.CurrentFeeds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feeds.v1beta1.CurrentFeeds.displayName = 'proto.feeds.v1beta1.CurrentFeeds';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feeds.v1beta1.CurrentFeedWithDeviations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feeds.v1beta1.CurrentFeedWithDeviations.repeatedFields_, null);
};
goog.inherits(proto.feeds.v1beta1.CurrentFeedWithDeviations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feeds.v1beta1.CurrentFeedWithDeviations.displayName = 'proto.feeds.v1beta1.CurrentFeedWithDeviations';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feeds.v1beta1.Price = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feeds.v1beta1.Price, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feeds.v1beta1.Price.displayName = 'proto.feeds.v1beta1.Price';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feeds.v1beta1.SignalPrice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feeds.v1beta1.SignalPrice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feeds.v1beta1.SignalPrice.displayName = 'proto.feeds.v1beta1.SignalPrice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feeds.v1beta1.ValidatorPrice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feeds.v1beta1.ValidatorPrice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feeds.v1beta1.ValidatorPrice.displayName = 'proto.feeds.v1beta1.ValidatorPrice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feeds.v1beta1.ValidatorPriceList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.feeds.v1beta1.ValidatorPriceList.repeatedFields_, null);
};
goog.inherits(proto.feeds.v1beta1.ValidatorPriceList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feeds.v1beta1.ValidatorPriceList.displayName = 'proto.feeds.v1beta1.ValidatorPriceList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feeds.v1beta1.ReferenceSourceConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feeds.v1beta1.ReferenceSourceConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feeds.v1beta1.ReferenceSourceConfig.displayName = 'proto.feeds.v1beta1.ReferenceSourceConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feeds.v1beta1.Signal.prototype.toObject = function(opt_includeInstance) {
  return proto.feeds.v1beta1.Signal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feeds.v1beta1.Signal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.Signal.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    power: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feeds.v1beta1.Signal}
 */
proto.feeds.v1beta1.Signal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feeds.v1beta1.Signal;
  return proto.feeds.v1beta1.Signal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feeds.v1beta1.Signal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feeds.v1beta1.Signal}
 */
proto.feeds.v1beta1.Signal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPower(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feeds.v1beta1.Signal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feeds.v1beta1.Signal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feeds.v1beta1.Signal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.Signal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPower();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.feeds.v1beta1.Signal.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feeds.v1beta1.Signal} returns this
 */
proto.feeds.v1beta1.Signal.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 power = 2;
 * @return {number}
 */
proto.feeds.v1beta1.Signal.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.feeds.v1beta1.Signal} returns this
 */
proto.feeds.v1beta1.Signal.prototype.setPower = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feeds.v1beta1.DelegatorSignals.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feeds.v1beta1.DelegatorSignals.prototype.toObject = function(opt_includeInstance) {
  return proto.feeds.v1beta1.DelegatorSignals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feeds.v1beta1.DelegatorSignals} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.DelegatorSignals.toObject = function(includeInstance, msg) {
  var f, obj = {
    delegator: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signalsList: jspb.Message.toObjectList(msg.getSignalsList(),
    proto.feeds.v1beta1.Signal.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feeds.v1beta1.DelegatorSignals}
 */
proto.feeds.v1beta1.DelegatorSignals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feeds.v1beta1.DelegatorSignals;
  return proto.feeds.v1beta1.DelegatorSignals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feeds.v1beta1.DelegatorSignals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feeds.v1beta1.DelegatorSignals}
 */
proto.feeds.v1beta1.DelegatorSignals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDelegator(value);
      break;
    case 2:
      var value = new proto.feeds.v1beta1.Signal;
      reader.readMessage(value,proto.feeds.v1beta1.Signal.deserializeBinaryFromReader);
      msg.addSignals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feeds.v1beta1.DelegatorSignals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feeds.v1beta1.DelegatorSignals.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feeds.v1beta1.DelegatorSignals} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.DelegatorSignals.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDelegator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSignalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.feeds.v1beta1.Signal.serializeBinaryToWriter
    );
  }
};


/**
 * optional string delegator = 1;
 * @return {string}
 */
proto.feeds.v1beta1.DelegatorSignals.prototype.getDelegator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feeds.v1beta1.DelegatorSignals} returns this
 */
proto.feeds.v1beta1.DelegatorSignals.prototype.setDelegator = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Signal signals = 2;
 * @return {!Array<!proto.feeds.v1beta1.Signal>}
 */
proto.feeds.v1beta1.DelegatorSignals.prototype.getSignalsList = function() {
  return /** @type{!Array<!proto.feeds.v1beta1.Signal>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feeds.v1beta1.Signal, 2));
};


/**
 * @param {!Array<!proto.feeds.v1beta1.Signal>} value
 * @return {!proto.feeds.v1beta1.DelegatorSignals} returns this
*/
proto.feeds.v1beta1.DelegatorSignals.prototype.setSignalsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.feeds.v1beta1.Signal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feeds.v1beta1.Signal}
 */
proto.feeds.v1beta1.DelegatorSignals.prototype.addSignals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.feeds.v1beta1.Signal, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feeds.v1beta1.DelegatorSignals} returns this
 */
proto.feeds.v1beta1.DelegatorSignals.prototype.clearSignalsList = function() {
  return this.setSignalsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feeds.v1beta1.Feed.prototype.toObject = function(opt_includeInstance) {
  return proto.feeds.v1beta1.Feed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feeds.v1beta1.Feed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.Feed.toObject = function(includeInstance, msg) {
  var f, obj = {
    signalId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    power: jspb.Message.getFieldWithDefault(msg, 2, 0),
    interval: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feeds.v1beta1.Feed}
 */
proto.feeds.v1beta1.Feed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feeds.v1beta1.Feed;
  return proto.feeds.v1beta1.Feed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feeds.v1beta1.Feed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feeds.v1beta1.Feed}
 */
proto.feeds.v1beta1.Feed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignalId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPower(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feeds.v1beta1.Feed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feeds.v1beta1.Feed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feeds.v1beta1.Feed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.Feed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignalId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPower();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getInterval();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string signal_id = 1;
 * @return {string}
 */
proto.feeds.v1beta1.Feed.prototype.getSignalId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feeds.v1beta1.Feed} returns this
 */
proto.feeds.v1beta1.Feed.prototype.setSignalId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 power = 2;
 * @return {number}
 */
proto.feeds.v1beta1.Feed.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.feeds.v1beta1.Feed} returns this
 */
proto.feeds.v1beta1.Feed.prototype.setPower = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 interval = 3;
 * @return {number}
 */
proto.feeds.v1beta1.Feed.prototype.getInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.feeds.v1beta1.Feed} returns this
 */
proto.feeds.v1beta1.Feed.prototype.setInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feeds.v1beta1.FeedWithDeviation.prototype.toObject = function(opt_includeInstance) {
  return proto.feeds.v1beta1.FeedWithDeviation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feeds.v1beta1.FeedWithDeviation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.FeedWithDeviation.toObject = function(includeInstance, msg) {
  var f, obj = {
    signalId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    power: jspb.Message.getFieldWithDefault(msg, 2, 0),
    interval: jspb.Message.getFieldWithDefault(msg, 3, 0),
    deviationBasisPoint: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feeds.v1beta1.FeedWithDeviation}
 */
proto.feeds.v1beta1.FeedWithDeviation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feeds.v1beta1.FeedWithDeviation;
  return proto.feeds.v1beta1.FeedWithDeviation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feeds.v1beta1.FeedWithDeviation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feeds.v1beta1.FeedWithDeviation}
 */
proto.feeds.v1beta1.FeedWithDeviation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignalId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPower(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInterval(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDeviationBasisPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feeds.v1beta1.FeedWithDeviation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feeds.v1beta1.FeedWithDeviation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feeds.v1beta1.FeedWithDeviation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.FeedWithDeviation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignalId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPower();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getInterval();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDeviationBasisPoint();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string signal_id = 1;
 * @return {string}
 */
proto.feeds.v1beta1.FeedWithDeviation.prototype.getSignalId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feeds.v1beta1.FeedWithDeviation} returns this
 */
proto.feeds.v1beta1.FeedWithDeviation.prototype.setSignalId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 power = 2;
 * @return {number}
 */
proto.feeds.v1beta1.FeedWithDeviation.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.feeds.v1beta1.FeedWithDeviation} returns this
 */
proto.feeds.v1beta1.FeedWithDeviation.prototype.setPower = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 interval = 3;
 * @return {number}
 */
proto.feeds.v1beta1.FeedWithDeviation.prototype.getInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.feeds.v1beta1.FeedWithDeviation} returns this
 */
proto.feeds.v1beta1.FeedWithDeviation.prototype.setInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 deviation_basis_point = 4;
 * @return {number}
 */
proto.feeds.v1beta1.FeedWithDeviation.prototype.getDeviationBasisPoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.feeds.v1beta1.FeedWithDeviation} returns this
 */
proto.feeds.v1beta1.FeedWithDeviation.prototype.setDeviationBasisPoint = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feeds.v1beta1.CurrentFeeds.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feeds.v1beta1.CurrentFeeds.prototype.toObject = function(opt_includeInstance) {
  return proto.feeds.v1beta1.CurrentFeeds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feeds.v1beta1.CurrentFeeds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.CurrentFeeds.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedsList: jspb.Message.toObjectList(msg.getFeedsList(),
    proto.feeds.v1beta1.Feed.toObject, includeInstance),
    lastUpdateTimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lastUpdateBlock: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feeds.v1beta1.CurrentFeeds}
 */
proto.feeds.v1beta1.CurrentFeeds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feeds.v1beta1.CurrentFeeds;
  return proto.feeds.v1beta1.CurrentFeeds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feeds.v1beta1.CurrentFeeds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feeds.v1beta1.CurrentFeeds}
 */
proto.feeds.v1beta1.CurrentFeeds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feeds.v1beta1.Feed;
      reader.readMessage(value,proto.feeds.v1beta1.Feed.deserializeBinaryFromReader);
      msg.addFeeds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastUpdateTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastUpdateBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feeds.v1beta1.CurrentFeeds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feeds.v1beta1.CurrentFeeds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feeds.v1beta1.CurrentFeeds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.CurrentFeeds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeedsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.feeds.v1beta1.Feed.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdateTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getLastUpdateBlock();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * repeated Feed feeds = 1;
 * @return {!Array<!proto.feeds.v1beta1.Feed>}
 */
proto.feeds.v1beta1.CurrentFeeds.prototype.getFeedsList = function() {
  return /** @type{!Array<!proto.feeds.v1beta1.Feed>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feeds.v1beta1.Feed, 1));
};


/**
 * @param {!Array<!proto.feeds.v1beta1.Feed>} value
 * @return {!proto.feeds.v1beta1.CurrentFeeds} returns this
*/
proto.feeds.v1beta1.CurrentFeeds.prototype.setFeedsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feeds.v1beta1.Feed=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feeds.v1beta1.Feed}
 */
proto.feeds.v1beta1.CurrentFeeds.prototype.addFeeds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feeds.v1beta1.Feed, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feeds.v1beta1.CurrentFeeds} returns this
 */
proto.feeds.v1beta1.CurrentFeeds.prototype.clearFeedsList = function() {
  return this.setFeedsList([]);
};


/**
 * optional int64 last_update_timestamp = 2;
 * @return {number}
 */
proto.feeds.v1beta1.CurrentFeeds.prototype.getLastUpdateTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.feeds.v1beta1.CurrentFeeds} returns this
 */
proto.feeds.v1beta1.CurrentFeeds.prototype.setLastUpdateTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 last_update_block = 3;
 * @return {number}
 */
proto.feeds.v1beta1.CurrentFeeds.prototype.getLastUpdateBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.feeds.v1beta1.CurrentFeeds} returns this
 */
proto.feeds.v1beta1.CurrentFeeds.prototype.setLastUpdateBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feeds.v1beta1.CurrentFeedWithDeviations.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feeds.v1beta1.CurrentFeedWithDeviations.prototype.toObject = function(opt_includeInstance) {
  return proto.feeds.v1beta1.CurrentFeedWithDeviations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feeds.v1beta1.CurrentFeedWithDeviations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.CurrentFeedWithDeviations.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedsList: jspb.Message.toObjectList(msg.getFeedsList(),
    proto.feeds.v1beta1.FeedWithDeviation.toObject, includeInstance),
    lastUpdateTimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lastUpdateBlock: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feeds.v1beta1.CurrentFeedWithDeviations}
 */
proto.feeds.v1beta1.CurrentFeedWithDeviations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feeds.v1beta1.CurrentFeedWithDeviations;
  return proto.feeds.v1beta1.CurrentFeedWithDeviations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feeds.v1beta1.CurrentFeedWithDeviations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feeds.v1beta1.CurrentFeedWithDeviations}
 */
proto.feeds.v1beta1.CurrentFeedWithDeviations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feeds.v1beta1.FeedWithDeviation;
      reader.readMessage(value,proto.feeds.v1beta1.FeedWithDeviation.deserializeBinaryFromReader);
      msg.addFeeds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastUpdateTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastUpdateBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feeds.v1beta1.CurrentFeedWithDeviations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feeds.v1beta1.CurrentFeedWithDeviations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feeds.v1beta1.CurrentFeedWithDeviations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.CurrentFeedWithDeviations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeedsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.feeds.v1beta1.FeedWithDeviation.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdateTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getLastUpdateBlock();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * repeated FeedWithDeviation feeds = 1;
 * @return {!Array<!proto.feeds.v1beta1.FeedWithDeviation>}
 */
proto.feeds.v1beta1.CurrentFeedWithDeviations.prototype.getFeedsList = function() {
  return /** @type{!Array<!proto.feeds.v1beta1.FeedWithDeviation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feeds.v1beta1.FeedWithDeviation, 1));
};


/**
 * @param {!Array<!proto.feeds.v1beta1.FeedWithDeviation>} value
 * @return {!proto.feeds.v1beta1.CurrentFeedWithDeviations} returns this
*/
proto.feeds.v1beta1.CurrentFeedWithDeviations.prototype.setFeedsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.feeds.v1beta1.FeedWithDeviation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feeds.v1beta1.FeedWithDeviation}
 */
proto.feeds.v1beta1.CurrentFeedWithDeviations.prototype.addFeeds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.feeds.v1beta1.FeedWithDeviation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feeds.v1beta1.CurrentFeedWithDeviations} returns this
 */
proto.feeds.v1beta1.CurrentFeedWithDeviations.prototype.clearFeedsList = function() {
  return this.setFeedsList([]);
};


/**
 * optional int64 last_update_timestamp = 2;
 * @return {number}
 */
proto.feeds.v1beta1.CurrentFeedWithDeviations.prototype.getLastUpdateTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.feeds.v1beta1.CurrentFeedWithDeviations} returns this
 */
proto.feeds.v1beta1.CurrentFeedWithDeviations.prototype.setLastUpdateTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 last_update_block = 3;
 * @return {number}
 */
proto.feeds.v1beta1.CurrentFeedWithDeviations.prototype.getLastUpdateBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.feeds.v1beta1.CurrentFeedWithDeviations} returns this
 */
proto.feeds.v1beta1.CurrentFeedWithDeviations.prototype.setLastUpdateBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feeds.v1beta1.Price.prototype.toObject = function(opt_includeInstance) {
  return proto.feeds.v1beta1.Price.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feeds.v1beta1.Price} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.Price.toObject = function(includeInstance, msg) {
  var f, obj = {
    priceStatus: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signalId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    price: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feeds.v1beta1.Price}
 */
proto.feeds.v1beta1.Price.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feeds.v1beta1.Price;
  return proto.feeds.v1beta1.Price.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feeds.v1beta1.Price} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feeds.v1beta1.Price}
 */
proto.feeds.v1beta1.Price.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.feeds.v1beta1.PriceStatus} */ (reader.readEnum());
      msg.setPriceStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignalId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feeds.v1beta1.Price.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feeds.v1beta1.Price.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feeds.v1beta1.Price} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.Price.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPriceStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSignalId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional PriceStatus price_status = 1;
 * @return {!proto.feeds.v1beta1.PriceStatus}
 */
proto.feeds.v1beta1.Price.prototype.getPriceStatus = function() {
  return /** @type {!proto.feeds.v1beta1.PriceStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.feeds.v1beta1.PriceStatus} value
 * @return {!proto.feeds.v1beta1.Price} returns this
 */
proto.feeds.v1beta1.Price.prototype.setPriceStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string signal_id = 2;
 * @return {string}
 */
proto.feeds.v1beta1.Price.prototype.getSignalId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feeds.v1beta1.Price} returns this
 */
proto.feeds.v1beta1.Price.prototype.setSignalId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 price = 3;
 * @return {number}
 */
proto.feeds.v1beta1.Price.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.feeds.v1beta1.Price} returns this
 */
proto.feeds.v1beta1.Price.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.feeds.v1beta1.Price.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.feeds.v1beta1.Price} returns this
 */
proto.feeds.v1beta1.Price.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feeds.v1beta1.SignalPrice.prototype.toObject = function(opt_includeInstance) {
  return proto.feeds.v1beta1.SignalPrice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feeds.v1beta1.SignalPrice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.SignalPrice.toObject = function(includeInstance, msg) {
  var f, obj = {
    priceStatus: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signalId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    price: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feeds.v1beta1.SignalPrice}
 */
proto.feeds.v1beta1.SignalPrice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feeds.v1beta1.SignalPrice;
  return proto.feeds.v1beta1.SignalPrice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feeds.v1beta1.SignalPrice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feeds.v1beta1.SignalPrice}
 */
proto.feeds.v1beta1.SignalPrice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.feeds.v1beta1.PriceStatus} */ (reader.readEnum());
      msg.setPriceStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignalId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feeds.v1beta1.SignalPrice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feeds.v1beta1.SignalPrice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feeds.v1beta1.SignalPrice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.SignalPrice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPriceStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSignalId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional PriceStatus price_status = 1;
 * @return {!proto.feeds.v1beta1.PriceStatus}
 */
proto.feeds.v1beta1.SignalPrice.prototype.getPriceStatus = function() {
  return /** @type {!proto.feeds.v1beta1.PriceStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.feeds.v1beta1.PriceStatus} value
 * @return {!proto.feeds.v1beta1.SignalPrice} returns this
 */
proto.feeds.v1beta1.SignalPrice.prototype.setPriceStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string signal_id = 2;
 * @return {string}
 */
proto.feeds.v1beta1.SignalPrice.prototype.getSignalId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feeds.v1beta1.SignalPrice} returns this
 */
proto.feeds.v1beta1.SignalPrice.prototype.setSignalId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 price = 3;
 * @return {number}
 */
proto.feeds.v1beta1.SignalPrice.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.feeds.v1beta1.SignalPrice} returns this
 */
proto.feeds.v1beta1.SignalPrice.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feeds.v1beta1.ValidatorPrice.prototype.toObject = function(opt_includeInstance) {
  return proto.feeds.v1beta1.ValidatorPrice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feeds.v1beta1.ValidatorPrice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.ValidatorPrice.toObject = function(includeInstance, msg) {
  var f, obj = {
    priceStatus: jspb.Message.getFieldWithDefault(msg, 1, 0),
    validator: jspb.Message.getFieldWithDefault(msg, 2, ""),
    signalId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    price: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feeds.v1beta1.ValidatorPrice}
 */
proto.feeds.v1beta1.ValidatorPrice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feeds.v1beta1.ValidatorPrice;
  return proto.feeds.v1beta1.ValidatorPrice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feeds.v1beta1.ValidatorPrice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feeds.v1beta1.ValidatorPrice}
 */
proto.feeds.v1beta1.ValidatorPrice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.feeds.v1beta1.PriceStatus} */ (reader.readEnum());
      msg.setPriceStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidator(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignalId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feeds.v1beta1.ValidatorPrice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feeds.v1beta1.ValidatorPrice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feeds.v1beta1.ValidatorPrice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.ValidatorPrice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPriceStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValidator();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSignalId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional PriceStatus price_status = 1;
 * @return {!proto.feeds.v1beta1.PriceStatus}
 */
proto.feeds.v1beta1.ValidatorPrice.prototype.getPriceStatus = function() {
  return /** @type {!proto.feeds.v1beta1.PriceStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.feeds.v1beta1.PriceStatus} value
 * @return {!proto.feeds.v1beta1.ValidatorPrice} returns this
 */
proto.feeds.v1beta1.ValidatorPrice.prototype.setPriceStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string validator = 2;
 * @return {string}
 */
proto.feeds.v1beta1.ValidatorPrice.prototype.getValidator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feeds.v1beta1.ValidatorPrice} returns this
 */
proto.feeds.v1beta1.ValidatorPrice.prototype.setValidator = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string signal_id = 3;
 * @return {string}
 */
proto.feeds.v1beta1.ValidatorPrice.prototype.getSignalId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feeds.v1beta1.ValidatorPrice} returns this
 */
proto.feeds.v1beta1.ValidatorPrice.prototype.setSignalId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 price = 4;
 * @return {number}
 */
proto.feeds.v1beta1.ValidatorPrice.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.feeds.v1beta1.ValidatorPrice} returns this
 */
proto.feeds.v1beta1.ValidatorPrice.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 timestamp = 5;
 * @return {number}
 */
proto.feeds.v1beta1.ValidatorPrice.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.feeds.v1beta1.ValidatorPrice} returns this
 */
proto.feeds.v1beta1.ValidatorPrice.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 block_height = 6;
 * @return {number}
 */
proto.feeds.v1beta1.ValidatorPrice.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.feeds.v1beta1.ValidatorPrice} returns this
 */
proto.feeds.v1beta1.ValidatorPrice.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.feeds.v1beta1.ValidatorPriceList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feeds.v1beta1.ValidatorPriceList.prototype.toObject = function(opt_includeInstance) {
  return proto.feeds.v1beta1.ValidatorPriceList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feeds.v1beta1.ValidatorPriceList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.ValidatorPriceList.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: jspb.Message.getFieldWithDefault(msg, 1, ""),
    validatorPricesList: jspb.Message.toObjectList(msg.getValidatorPricesList(),
    proto.feeds.v1beta1.ValidatorPrice.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feeds.v1beta1.ValidatorPriceList}
 */
proto.feeds.v1beta1.ValidatorPriceList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feeds.v1beta1.ValidatorPriceList;
  return proto.feeds.v1beta1.ValidatorPriceList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feeds.v1beta1.ValidatorPriceList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feeds.v1beta1.ValidatorPriceList}
 */
proto.feeds.v1beta1.ValidatorPriceList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidator(value);
      break;
    case 2:
      var value = new proto.feeds.v1beta1.ValidatorPrice;
      reader.readMessage(value,proto.feeds.v1beta1.ValidatorPrice.deserializeBinaryFromReader);
      msg.addValidatorPrices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feeds.v1beta1.ValidatorPriceList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feeds.v1beta1.ValidatorPriceList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feeds.v1beta1.ValidatorPriceList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.ValidatorPriceList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValidatorPricesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.feeds.v1beta1.ValidatorPrice.serializeBinaryToWriter
    );
  }
};


/**
 * optional string validator = 1;
 * @return {string}
 */
proto.feeds.v1beta1.ValidatorPriceList.prototype.getValidator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feeds.v1beta1.ValidatorPriceList} returns this
 */
proto.feeds.v1beta1.ValidatorPriceList.prototype.setValidator = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ValidatorPrice validator_prices = 2;
 * @return {!Array<!proto.feeds.v1beta1.ValidatorPrice>}
 */
proto.feeds.v1beta1.ValidatorPriceList.prototype.getValidatorPricesList = function() {
  return /** @type{!Array<!proto.feeds.v1beta1.ValidatorPrice>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.feeds.v1beta1.ValidatorPrice, 2));
};


/**
 * @param {!Array<!proto.feeds.v1beta1.ValidatorPrice>} value
 * @return {!proto.feeds.v1beta1.ValidatorPriceList} returns this
*/
proto.feeds.v1beta1.ValidatorPriceList.prototype.setValidatorPricesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.feeds.v1beta1.ValidatorPrice=} opt_value
 * @param {number=} opt_index
 * @return {!proto.feeds.v1beta1.ValidatorPrice}
 */
proto.feeds.v1beta1.ValidatorPriceList.prototype.addValidatorPrices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.feeds.v1beta1.ValidatorPrice, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.feeds.v1beta1.ValidatorPriceList} returns this
 */
proto.feeds.v1beta1.ValidatorPriceList.prototype.clearValidatorPricesList = function() {
  return this.setValidatorPricesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feeds.v1beta1.ReferenceSourceConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.feeds.v1beta1.ReferenceSourceConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feeds.v1beta1.ReferenceSourceConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.ReferenceSourceConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    ipfsHash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feeds.v1beta1.ReferenceSourceConfig}
 */
proto.feeds.v1beta1.ReferenceSourceConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feeds.v1beta1.ReferenceSourceConfig;
  return proto.feeds.v1beta1.ReferenceSourceConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feeds.v1beta1.ReferenceSourceConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feeds.v1beta1.ReferenceSourceConfig}
 */
proto.feeds.v1beta1.ReferenceSourceConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpfsHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feeds.v1beta1.ReferenceSourceConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feeds.v1beta1.ReferenceSourceConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feeds.v1beta1.ReferenceSourceConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feeds.v1beta1.ReferenceSourceConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIpfsHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string ipfs_hash = 1;
 * @return {string}
 */
proto.feeds.v1beta1.ReferenceSourceConfig.prototype.getIpfsHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feeds.v1beta1.ReferenceSourceConfig} returns this
 */
proto.feeds.v1beta1.ReferenceSourceConfig.prototype.setIpfsHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.feeds.v1beta1.ReferenceSourceConfig.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feeds.v1beta1.ReferenceSourceConfig} returns this
 */
proto.feeds.v1beta1.ReferenceSourceConfig.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.feeds.v1beta1.PriceStatus = {
  PRICE_STATUS_UNSPECIFIED: 0,
  PRICE_STATUS_UNSUPPORTED: 1,
  PRICE_STATUS_UNAVAILABLE: 2,
  PRICE_STATUS_AVAILABLE: 3
};

goog.object.extend(exports, proto.feeds.v1beta1);
