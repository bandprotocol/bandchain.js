// source: oracle/v1/query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf')
var goog = jspb
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this
  }.call(null) ||
  Function('return this')()

var gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js')
goog.object.extend(proto, gogoproto_gogo_pb)
var google_api_annotations_pb = require('../../google/api/annotations_pb.js')
goog.object.extend(proto, google_api_annotations_pb)
var cosmos_proto_cosmos_pb = require('../../cosmos_proto/cosmos_pb.js')
goog.object.extend(proto, cosmos_proto_cosmos_pb)
var oracle_v1_oracle_pb = require('../../oracle/v1/oracle_pb.js')
goog.object.extend(proto, oracle_v1_oracle_pb)
goog.exportSymbol('proto.oracle.v1.QueryActiveValidatorsRequest', null, global)
goog.exportSymbol('proto.oracle.v1.QueryActiveValidatorsResponse', null, global)
goog.exportSymbol('proto.oracle.v1.QueryCountsRequest', null, global)
goog.exportSymbol('proto.oracle.v1.QueryCountsResponse', null, global)
goog.exportSymbol('proto.oracle.v1.QueryDataRequest', null, global)
goog.exportSymbol('proto.oracle.v1.QueryDataResponse', null, global)
goog.exportSymbol('proto.oracle.v1.QueryDataSourceRequest', null, global)
goog.exportSymbol('proto.oracle.v1.QueryDataSourceResponse', null, global)
goog.exportSymbol('proto.oracle.v1.QueryIsReporterRequest', null, global)
goog.exportSymbol('proto.oracle.v1.QueryIsReporterResponse', null, global)
goog.exportSymbol('proto.oracle.v1.QueryOracleScriptRequest', null, global)
goog.exportSymbol('proto.oracle.v1.QueryOracleScriptResponse', null, global)
goog.exportSymbol('proto.oracle.v1.QueryParamsRequest', null, global)
goog.exportSymbol('proto.oracle.v1.QueryParamsResponse', null, global)
goog.exportSymbol('proto.oracle.v1.QueryPendingRequestsRequest', null, global)
goog.exportSymbol('proto.oracle.v1.QueryPendingRequestsResponse', null, global)
goog.exportSymbol('proto.oracle.v1.QueryReportersRequest', null, global)
goog.exportSymbol('proto.oracle.v1.QueryReportersResponse', null, global)
goog.exportSymbol('proto.oracle.v1.QueryRequestPriceRequest', null, global)
goog.exportSymbol('proto.oracle.v1.QueryRequestPriceResponse', null, global)
goog.exportSymbol('proto.oracle.v1.QueryRequestRequest', null, global)
goog.exportSymbol('proto.oracle.v1.QueryRequestResponse', null, global)
goog.exportSymbol('proto.oracle.v1.QueryRequestSearchRequest', null, global)
goog.exportSymbol('proto.oracle.v1.QueryRequestSearchResponse', null, global)
goog.exportSymbol(
  'proto.oracle.v1.QueryRequestVerificationRequest',
  null,
  global,
)
goog.exportSymbol(
  'proto.oracle.v1.QueryRequestVerificationResponse',
  null,
  global,
)
goog.exportSymbol('proto.oracle.v1.QueryValidatorRequest', null, global)
goog.exportSymbol('proto.oracle.v1.QueryValidatorResponse', null, global)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryCountsRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryCountsRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryCountsRequest.displayName =
    'proto.oracle.v1.QueryCountsRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryCountsResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryCountsResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryCountsResponse.displayName =
    'proto.oracle.v1.QueryCountsResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryDataRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryDataRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryDataRequest.displayName =
    'proto.oracle.v1.QueryDataRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryDataResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryDataResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryDataResponse.displayName =
    'proto.oracle.v1.QueryDataResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryDataSourceRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryDataSourceRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryDataSourceRequest.displayName =
    'proto.oracle.v1.QueryDataSourceRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryDataSourceResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryDataSourceResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryDataSourceResponse.displayName =
    'proto.oracle.v1.QueryDataSourceResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryOracleScriptRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryOracleScriptRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryOracleScriptRequest.displayName =
    'proto.oracle.v1.QueryOracleScriptRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryOracleScriptResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryOracleScriptResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryOracleScriptResponse.displayName =
    'proto.oracle.v1.QueryOracleScriptResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryRequestRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryRequestRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryRequestRequest.displayName =
    'proto.oracle.v1.QueryRequestRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryRequestResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.oracle.v1.QueryRequestResponse.repeatedFields_,
    null,
  )
}
goog.inherits(proto.oracle.v1.QueryRequestResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryRequestResponse.displayName =
    'proto.oracle.v1.QueryRequestResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryPendingRequestsRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryPendingRequestsRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryPendingRequestsRequest.displayName =
    'proto.oracle.v1.QueryPendingRequestsRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryPendingRequestsResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.oracle.v1.QueryPendingRequestsResponse.repeatedFields_,
    null,
  )
}
goog.inherits(proto.oracle.v1.QueryPendingRequestsResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryPendingRequestsResponse.displayName =
    'proto.oracle.v1.QueryPendingRequestsResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryParamsRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryParamsRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryParamsRequest.displayName =
    'proto.oracle.v1.QueryParamsRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryParamsResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryParamsResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryParamsResponse.displayName =
    'proto.oracle.v1.QueryParamsResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryValidatorRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryValidatorRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryValidatorRequest.displayName =
    'proto.oracle.v1.QueryValidatorRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryValidatorResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryValidatorResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryValidatorResponse.displayName =
    'proto.oracle.v1.QueryValidatorResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryIsReporterRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryIsReporterRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryIsReporterRequest.displayName =
    'proto.oracle.v1.QueryIsReporterRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryIsReporterResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryIsReporterResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryIsReporterResponse.displayName =
    'proto.oracle.v1.QueryIsReporterResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryReportersRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryReportersRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryReportersRequest.displayName =
    'proto.oracle.v1.QueryReportersRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryReportersResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.oracle.v1.QueryReportersResponse.repeatedFields_,
    null,
  )
}
goog.inherits(proto.oracle.v1.QueryReportersResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryReportersResponse.displayName =
    'proto.oracle.v1.QueryReportersResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryActiveValidatorsRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryActiveValidatorsRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryActiveValidatorsRequest.displayName =
    'proto.oracle.v1.QueryActiveValidatorsRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryActiveValidatorsResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.oracle.v1.QueryActiveValidatorsResponse.repeatedFields_,
    null,
  )
}
goog.inherits(proto.oracle.v1.QueryActiveValidatorsResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryActiveValidatorsResponse.displayName =
    'proto.oracle.v1.QueryActiveValidatorsResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryRequestSearchRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryRequestSearchRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryRequestSearchRequest.displayName =
    'proto.oracle.v1.QueryRequestSearchRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryRequestSearchResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryRequestSearchResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryRequestSearchResponse.displayName =
    'proto.oracle.v1.QueryRequestSearchResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryRequestPriceRequest = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.oracle.v1.QueryRequestPriceRequest.repeatedFields_,
    null,
  )
}
goog.inherits(proto.oracle.v1.QueryRequestPriceRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryRequestPriceRequest.displayName =
    'proto.oracle.v1.QueryRequestPriceRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryRequestPriceResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.oracle.v1.QueryRequestPriceResponse.repeatedFields_,
    null,
  )
}
goog.inherits(proto.oracle.v1.QueryRequestPriceResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryRequestPriceResponse.displayName =
    'proto.oracle.v1.QueryRequestPriceResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryRequestVerificationRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryRequestVerificationRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryRequestVerificationRequest.displayName =
    'proto.oracle.v1.QueryRequestVerificationRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oracle.v1.QueryRequestVerificationResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.oracle.v1.QueryRequestVerificationResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oracle.v1.QueryRequestVerificationResponse.displayName =
    'proto.oracle.v1.QueryRequestVerificationResponse'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryCountsRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryCountsRequest.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryCountsRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryCountsRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {}

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryCountsRequest}
 */
proto.oracle.v1.QueryCountsRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryCountsRequest()
  return proto.oracle.v1.QueryCountsRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryCountsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryCountsRequest}
 */
proto.oracle.v1.QueryCountsRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryCountsRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.oracle.v1.QueryCountsRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryCountsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryCountsRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryCountsResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryCountsResponse.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryCountsResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryCountsResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        dataSourceCount: jspb.Message.getFieldWithDefault(msg, 1, 0),
        oracleScriptCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
        requestCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryCountsResponse}
 */
proto.oracle.v1.QueryCountsResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryCountsResponse()
  return proto.oracle.v1.QueryCountsResponse.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryCountsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryCountsResponse}
 */
proto.oracle.v1.QueryCountsResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setDataSourceCount(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setOracleScriptCount(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setRequestCount(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryCountsResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.oracle.v1.QueryCountsResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryCountsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryCountsResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getDataSourceCount()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
  f = message.getOracleScriptCount()
  if (f !== 0) {
    writer.writeUint64(2, f)
  }
  f = message.getRequestCount()
  if (f !== 0) {
    writer.writeUint64(3, f)
  }
}

/**
 * optional uint64 data_source_count = 1;
 * @return {number}
 */
proto.oracle.v1.QueryCountsResponse.prototype.getDataSourceCount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.oracle.v1.QueryCountsResponse} returns this
 */
proto.oracle.v1.QueryCountsResponse.prototype.setDataSourceCount = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional uint64 oracle_script_count = 2;
 * @return {number}
 */
proto.oracle.v1.QueryCountsResponse.prototype.getOracleScriptCount =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
  }

/**
 * @param {number} value
 * @return {!proto.oracle.v1.QueryCountsResponse} returns this
 */
proto.oracle.v1.QueryCountsResponse.prototype.setOracleScriptCount = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional uint64 request_count = 3;
 * @return {number}
 */
proto.oracle.v1.QueryCountsResponse.prototype.getRequestCount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.oracle.v1.QueryCountsResponse} returns this
 */
proto.oracle.v1.QueryCountsResponse.prototype.setRequestCount = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryDataRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryDataRequest.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryDataRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryDataRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        dataHash: jspb.Message.getFieldWithDefault(msg, 1, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryDataRequest}
 */
proto.oracle.v1.QueryDataRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryDataRequest()
  return proto.oracle.v1.QueryDataRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryDataRequest}
 */
proto.oracle.v1.QueryDataRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setDataHash(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryDataRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.oracle.v1.QueryDataRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryDataRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getDataHash()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string data_hash = 1;
 * @return {string}
 */
proto.oracle.v1.QueryDataRequest.prototype.getDataHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.oracle.v1.QueryDataRequest} returns this
 */
proto.oracle.v1.QueryDataRequest.prototype.setDataHash = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryDataResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryDataResponse.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryDataResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryDataResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        data: msg.getData_asB64(),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryDataResponse}
 */
proto.oracle.v1.QueryDataResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryDataResponse()
  return proto.oracle.v1.QueryDataResponse.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryDataResponse}
 */
proto.oracle.v1.QueryDataResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes())
        msg.setData(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryDataResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.oracle.v1.QueryDataResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryDataResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getData_asU8()
  if (f.length > 0) {
    writer.writeBytes(1, f)
  }
}

/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.oracle.v1.QueryDataResponse.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */ (
    jspb.Message.getFieldWithDefault(this, 1, '')
  )
}

/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.oracle.v1.QueryDataResponse.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()))
}

/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryDataResponse.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()))
}

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.oracle.v1.QueryDataResponse} returns this
 */
proto.oracle.v1.QueryDataResponse.prototype.setData = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryDataSourceRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryDataSourceRequest.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryDataSourceRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryDataSourceRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        dataSourceId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryDataSourceRequest}
 */
proto.oracle.v1.QueryDataSourceRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryDataSourceRequest()
  return proto.oracle.v1.QueryDataSourceRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryDataSourceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryDataSourceRequest}
 */
proto.oracle.v1.QueryDataSourceRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setDataSourceId(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryDataSourceRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.oracle.v1.QueryDataSourceRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryDataSourceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryDataSourceRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getDataSourceId()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
}

/**
 * optional uint64 data_source_id = 1;
 * @return {number}
 */
proto.oracle.v1.QueryDataSourceRequest.prototype.getDataSourceId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.oracle.v1.QueryDataSourceRequest} returns this
 */
proto.oracle.v1.QueryDataSourceRequest.prototype.setDataSourceId = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryDataSourceResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryDataSourceResponse.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryDataSourceResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryDataSourceResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        dataSource:
          (f = msg.getDataSource()) &&
          oracle_v1_oracle_pb.DataSource.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryDataSourceResponse}
 */
proto.oracle.v1.QueryDataSourceResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryDataSourceResponse()
  return proto.oracle.v1.QueryDataSourceResponse.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryDataSourceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryDataSourceResponse}
 */
proto.oracle.v1.QueryDataSourceResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new oracle_v1_oracle_pb.DataSource()
        reader.readMessage(
          value,
          oracle_v1_oracle_pb.DataSource.deserializeBinaryFromReader,
        )
        msg.setDataSource(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryDataSourceResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.oracle.v1.QueryDataSourceResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryDataSourceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryDataSourceResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getDataSource()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      oracle_v1_oracle_pb.DataSource.serializeBinaryToWriter,
    )
  }
}

/**
 * optional DataSource data_source = 1;
 * @return {?proto.oracle.v1.DataSource}
 */
proto.oracle.v1.QueryDataSourceResponse.prototype.getDataSource = function () {
  return /** @type{?proto.oracle.v1.DataSource} */ (
    jspb.Message.getWrapperField(this, oracle_v1_oracle_pb.DataSource, 1)
  )
}

/**
 * @param {?proto.oracle.v1.DataSource|undefined} value
 * @return {!proto.oracle.v1.QueryDataSourceResponse} returns this
 */
proto.oracle.v1.QueryDataSourceResponse.prototype.setDataSource = function (
  value,
) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.oracle.v1.QueryDataSourceResponse} returns this
 */
proto.oracle.v1.QueryDataSourceResponse.prototype.clearDataSource =
  function () {
    return this.setDataSource(undefined)
  }

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.oracle.v1.QueryDataSourceResponse.prototype.hasDataSource = function () {
  return jspb.Message.getField(this, 1) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryOracleScriptRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryOracleScriptRequest.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryOracleScriptRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryOracleScriptRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        oracleScriptId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryOracleScriptRequest}
 */
proto.oracle.v1.QueryOracleScriptRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryOracleScriptRequest()
  return proto.oracle.v1.QueryOracleScriptRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryOracleScriptRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryOracleScriptRequest}
 */
proto.oracle.v1.QueryOracleScriptRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setOracleScriptId(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryOracleScriptRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.oracle.v1.QueryOracleScriptRequest.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryOracleScriptRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryOracleScriptRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getOracleScriptId()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
}

/**
 * optional uint64 oracle_script_id = 1;
 * @return {number}
 */
proto.oracle.v1.QueryOracleScriptRequest.prototype.getOracleScriptId =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
  }

/**
 * @param {number} value
 * @return {!proto.oracle.v1.QueryOracleScriptRequest} returns this
 */
proto.oracle.v1.QueryOracleScriptRequest.prototype.setOracleScriptId =
  function (value) {
    return jspb.Message.setProto3IntField(this, 1, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryOracleScriptResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryOracleScriptResponse.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryOracleScriptResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryOracleScriptResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        oracleScript:
          (f = msg.getOracleScript()) &&
          oracle_v1_oracle_pb.OracleScript.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryOracleScriptResponse}
 */
proto.oracle.v1.QueryOracleScriptResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryOracleScriptResponse()
  return proto.oracle.v1.QueryOracleScriptResponse.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryOracleScriptResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryOracleScriptResponse}
 */
proto.oracle.v1.QueryOracleScriptResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = new oracle_v1_oracle_pb.OracleScript()
          reader.readMessage(
            value,
            oracle_v1_oracle_pb.OracleScript.deserializeBinaryFromReader,
          )
          msg.setOracleScript(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryOracleScriptResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.oracle.v1.QueryOracleScriptResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryOracleScriptResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryOracleScriptResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getOracleScript()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      oracle_v1_oracle_pb.OracleScript.serializeBinaryToWriter,
    )
  }
}

/**
 * optional OracleScript oracle_script = 1;
 * @return {?proto.oracle.v1.OracleScript}
 */
proto.oracle.v1.QueryOracleScriptResponse.prototype.getOracleScript =
  function () {
    return /** @type{?proto.oracle.v1.OracleScript} */ (
      jspb.Message.getWrapperField(this, oracle_v1_oracle_pb.OracleScript, 1)
    )
  }

/**
 * @param {?proto.oracle.v1.OracleScript|undefined} value
 * @return {!proto.oracle.v1.QueryOracleScriptResponse} returns this
 */
proto.oracle.v1.QueryOracleScriptResponse.prototype.setOracleScript = function (
  value,
) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.oracle.v1.QueryOracleScriptResponse} returns this
 */
proto.oracle.v1.QueryOracleScriptResponse.prototype.clearOracleScript =
  function () {
    return this.setOracleScript(undefined)
  }

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.oracle.v1.QueryOracleScriptResponse.prototype.hasOracleScript =
  function () {
    return jspb.Message.getField(this, 1) != null
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryRequestRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryRequestRequest.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryRequestRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryRequestRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryRequestRequest}
 */
proto.oracle.v1.QueryRequestRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryRequestRequest()
  return proto.oracle.v1.QueryRequestRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryRequestRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryRequestRequest}
 */
proto.oracle.v1.QueryRequestRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setRequestId(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryRequestRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.oracle.v1.QueryRequestRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryRequestRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryRequestRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getRequestId()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
}

/**
 * optional uint64 request_id = 1;
 * @return {number}
 */
proto.oracle.v1.QueryRequestRequest.prototype.getRequestId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.oracle.v1.QueryRequestRequest} returns this
 */
proto.oracle.v1.QueryRequestRequest.prototype.setRequestId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.oracle.v1.QueryRequestResponse.repeatedFields_ = [2]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryRequestResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryRequestResponse.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryRequestResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryRequestResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        request:
          (f = msg.getRequest()) &&
          oracle_v1_oracle_pb.Request.toObject(includeInstance, f),
        reportsList: jspb.Message.toObjectList(
          msg.getReportsList(),
          oracle_v1_oracle_pb.Report.toObject,
          includeInstance,
        ),
        result:
          (f = msg.getResult()) &&
          oracle_v1_oracle_pb.Result.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryRequestResponse}
 */
proto.oracle.v1.QueryRequestResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryRequestResponse()
  return proto.oracle.v1.QueryRequestResponse.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryRequestResponse}
 */
proto.oracle.v1.QueryRequestResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new oracle_v1_oracle_pb.Request()
        reader.readMessage(
          value,
          oracle_v1_oracle_pb.Request.deserializeBinaryFromReader,
        )
        msg.setRequest(value)
        break
      case 2:
        var value = new oracle_v1_oracle_pb.Report()
        reader.readMessage(
          value,
          oracle_v1_oracle_pb.Report.deserializeBinaryFromReader,
        )
        msg.addReports(value)
        break
      case 3:
        var value = new oracle_v1_oracle_pb.Result()
        reader.readMessage(
          value,
          oracle_v1_oracle_pb.Result.deserializeBinaryFromReader,
        )
        msg.setResult(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryRequestResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.oracle.v1.QueryRequestResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryRequestResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getRequest()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      oracle_v1_oracle_pb.Request.serializeBinaryToWriter,
    )
  }
  f = message.getReportsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      oracle_v1_oracle_pb.Report.serializeBinaryToWriter,
    )
  }
  f = message.getResult()
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      oracle_v1_oracle_pb.Result.serializeBinaryToWriter,
    )
  }
}

/**
 * optional Request request = 1;
 * @return {?proto.oracle.v1.Request}
 */
proto.oracle.v1.QueryRequestResponse.prototype.getRequest = function () {
  return /** @type{?proto.oracle.v1.Request} */ (
    jspb.Message.getWrapperField(this, oracle_v1_oracle_pb.Request, 1)
  )
}

/**
 * @param {?proto.oracle.v1.Request|undefined} value
 * @return {!proto.oracle.v1.QueryRequestResponse} returns this
 */
proto.oracle.v1.QueryRequestResponse.prototype.setRequest = function (value) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.oracle.v1.QueryRequestResponse} returns this
 */
proto.oracle.v1.QueryRequestResponse.prototype.clearRequest = function () {
  return this.setRequest(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.oracle.v1.QueryRequestResponse.prototype.hasRequest = function () {
  return jspb.Message.getField(this, 1) != null
}

/**
 * repeated Report reports = 2;
 * @return {!Array<!proto.oracle.v1.Report>}
 */
proto.oracle.v1.QueryRequestResponse.prototype.getReportsList = function () {
  return /** @type{!Array<!proto.oracle.v1.Report>} */ (
    jspb.Message.getRepeatedWrapperField(this, oracle_v1_oracle_pb.Report, 2)
  )
}

/**
 * @param {!Array<!proto.oracle.v1.Report>} value
 * @return {!proto.oracle.v1.QueryRequestResponse} returns this
 */
proto.oracle.v1.QueryRequestResponse.prototype.setReportsList = function (
  value,
) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value)
}

/**
 * @param {!proto.oracle.v1.Report=} opt_value
 * @param {number=} opt_index
 * @return {!proto.oracle.v1.Report}
 */
proto.oracle.v1.QueryRequestResponse.prototype.addReports = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.oracle.v1.Report,
    opt_index,
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.oracle.v1.QueryRequestResponse} returns this
 */
proto.oracle.v1.QueryRequestResponse.prototype.clearReportsList = function () {
  return this.setReportsList([])
}

/**
 * optional Result result = 3;
 * @return {?proto.oracle.v1.Result}
 */
proto.oracle.v1.QueryRequestResponse.prototype.getResult = function () {
  return /** @type{?proto.oracle.v1.Result} */ (
    jspb.Message.getWrapperField(this, oracle_v1_oracle_pb.Result, 3)
  )
}

/**
 * @param {?proto.oracle.v1.Result|undefined} value
 * @return {!proto.oracle.v1.QueryRequestResponse} returns this
 */
proto.oracle.v1.QueryRequestResponse.prototype.setResult = function (value) {
  return jspb.Message.setWrapperField(this, 3, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.oracle.v1.QueryRequestResponse} returns this
 */
proto.oracle.v1.QueryRequestResponse.prototype.clearResult = function () {
  return this.setResult(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.oracle.v1.QueryRequestResponse.prototype.hasResult = function () {
  return jspb.Message.getField(this, 3) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryPendingRequestsRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryPendingRequestsRequest.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryPendingRequestsRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryPendingRequestsRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        validatorAddress: jspb.Message.getFieldWithDefault(msg, 1, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryPendingRequestsRequest}
 */
proto.oracle.v1.QueryPendingRequestsRequest.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryPendingRequestsRequest()
  return proto.oracle.v1.QueryPendingRequestsRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryPendingRequestsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryPendingRequestsRequest}
 */
proto.oracle.v1.QueryPendingRequestsRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString())
          msg.setValidatorAddress(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryPendingRequestsRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.oracle.v1.QueryPendingRequestsRequest.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryPendingRequestsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryPendingRequestsRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getValidatorAddress()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string validator_address = 1;
 * @return {string}
 */
proto.oracle.v1.QueryPendingRequestsRequest.prototype.getValidatorAddress =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
  }

/**
 * @param {string} value
 * @return {!proto.oracle.v1.QueryPendingRequestsRequest} returns this
 */
proto.oracle.v1.QueryPendingRequestsRequest.prototype.setValidatorAddress =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value)
  }

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.oracle.v1.QueryPendingRequestsResponse.repeatedFields_ = [1]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryPendingRequestsResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryPendingRequestsResponse.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryPendingRequestsResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryPendingRequestsResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        requestIdsList:
          (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryPendingRequestsResponse}
 */
proto.oracle.v1.QueryPendingRequestsResponse.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryPendingRequestsResponse()
  return proto.oracle.v1.QueryPendingRequestsResponse.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryPendingRequestsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryPendingRequestsResponse}
 */
proto.oracle.v1.QueryPendingRequestsResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var values = /** @type {!Array<number>} */ (
            reader.isDelimited()
              ? reader.readPackedUint64()
              : [reader.readUint64()]
          )
          for (var i = 0; i < values.length; i++) {
            msg.addRequestIds(values[i])
          }
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryPendingRequestsResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.oracle.v1.QueryPendingRequestsResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryPendingRequestsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryPendingRequestsResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getRequestIdsList()
    if (f.length > 0) {
      writer.writePackedUint64(1, f)
    }
  }

/**
 * repeated uint64 request_ids = 1;
 * @return {!Array<number>}
 */
proto.oracle.v1.QueryPendingRequestsResponse.prototype.getRequestIdsList =
  function () {
    return /** @type {!Array<number>} */ (
      jspb.Message.getRepeatedField(this, 1)
    )
  }

/**
 * @param {!Array<number>} value
 * @return {!proto.oracle.v1.QueryPendingRequestsResponse} returns this
 */
proto.oracle.v1.QueryPendingRequestsResponse.prototype.setRequestIdsList =
  function (value) {
    return jspb.Message.setField(this, 1, value || [])
  }

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.oracle.v1.QueryPendingRequestsResponse} returns this
 */
proto.oracle.v1.QueryPendingRequestsResponse.prototype.addRequestIds =
  function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 1, value, opt_index)
  }

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.oracle.v1.QueryPendingRequestsResponse} returns this
 */
proto.oracle.v1.QueryPendingRequestsResponse.prototype.clearRequestIdsList =
  function () {
    return this.setRequestIdsList([])
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryParamsRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryParamsRequest.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryParamsRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryParamsRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {}

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryParamsRequest}
 */
proto.oracle.v1.QueryParamsRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryParamsRequest()
  return proto.oracle.v1.QueryParamsRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryParamsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryParamsRequest}
 */
proto.oracle.v1.QueryParamsRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryParamsRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.oracle.v1.QueryParamsRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryParamsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryParamsRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryParamsResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryParamsResponse.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryParamsResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryParamsResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        params:
          (f = msg.getParams()) &&
          oracle_v1_oracle_pb.Params.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryParamsResponse}
 */
proto.oracle.v1.QueryParamsResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryParamsResponse()
  return proto.oracle.v1.QueryParamsResponse.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryParamsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryParamsResponse}
 */
proto.oracle.v1.QueryParamsResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new oracle_v1_oracle_pb.Params()
        reader.readMessage(
          value,
          oracle_v1_oracle_pb.Params.deserializeBinaryFromReader,
        )
        msg.setParams(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryParamsResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.oracle.v1.QueryParamsResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryParamsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryParamsResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getParams()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      oracle_v1_oracle_pb.Params.serializeBinaryToWriter,
    )
  }
}

/**
 * optional Params params = 1;
 * @return {?proto.oracle.v1.Params}
 */
proto.oracle.v1.QueryParamsResponse.prototype.getParams = function () {
  return /** @type{?proto.oracle.v1.Params} */ (
    jspb.Message.getWrapperField(this, oracle_v1_oracle_pb.Params, 1)
  )
}

/**
 * @param {?proto.oracle.v1.Params|undefined} value
 * @return {!proto.oracle.v1.QueryParamsResponse} returns this
 */
proto.oracle.v1.QueryParamsResponse.prototype.setParams = function (value) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.oracle.v1.QueryParamsResponse} returns this
 */
proto.oracle.v1.QueryParamsResponse.prototype.clearParams = function () {
  return this.setParams(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.oracle.v1.QueryParamsResponse.prototype.hasParams = function () {
  return jspb.Message.getField(this, 1) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryValidatorRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryValidatorRequest.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryValidatorRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryValidatorRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        validatorAddress: jspb.Message.getFieldWithDefault(msg, 1, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryValidatorRequest}
 */
proto.oracle.v1.QueryValidatorRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryValidatorRequest()
  return proto.oracle.v1.QueryValidatorRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryValidatorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryValidatorRequest}
 */
proto.oracle.v1.QueryValidatorRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setValidatorAddress(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryValidatorRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.oracle.v1.QueryValidatorRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryValidatorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryValidatorRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getValidatorAddress()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string validator_address = 1;
 * @return {string}
 */
proto.oracle.v1.QueryValidatorRequest.prototype.getValidatorAddress =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
  }

/**
 * @param {string} value
 * @return {!proto.oracle.v1.QueryValidatorRequest} returns this
 */
proto.oracle.v1.QueryValidatorRequest.prototype.setValidatorAddress = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryValidatorResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryValidatorResponse.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryValidatorResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryValidatorResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        status:
          (f = msg.getStatus()) &&
          oracle_v1_oracle_pb.ValidatorStatus.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryValidatorResponse}
 */
proto.oracle.v1.QueryValidatorResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryValidatorResponse()
  return proto.oracle.v1.QueryValidatorResponse.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryValidatorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryValidatorResponse}
 */
proto.oracle.v1.QueryValidatorResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new oracle_v1_oracle_pb.ValidatorStatus()
        reader.readMessage(
          value,
          oracle_v1_oracle_pb.ValidatorStatus.deserializeBinaryFromReader,
        )
        msg.setStatus(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryValidatorResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.oracle.v1.QueryValidatorResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryValidatorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryValidatorResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getStatus()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      oracle_v1_oracle_pb.ValidatorStatus.serializeBinaryToWriter,
    )
  }
}

/**
 * optional ValidatorStatus status = 1;
 * @return {?proto.oracle.v1.ValidatorStatus}
 */
proto.oracle.v1.QueryValidatorResponse.prototype.getStatus = function () {
  return /** @type{?proto.oracle.v1.ValidatorStatus} */ (
    jspb.Message.getWrapperField(this, oracle_v1_oracle_pb.ValidatorStatus, 1)
  )
}

/**
 * @param {?proto.oracle.v1.ValidatorStatus|undefined} value
 * @return {!proto.oracle.v1.QueryValidatorResponse} returns this
 */
proto.oracle.v1.QueryValidatorResponse.prototype.setStatus = function (value) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.oracle.v1.QueryValidatorResponse} returns this
 */
proto.oracle.v1.QueryValidatorResponse.prototype.clearStatus = function () {
  return this.setStatus(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.oracle.v1.QueryValidatorResponse.prototype.hasStatus = function () {
  return jspb.Message.getField(this, 1) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryIsReporterRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryIsReporterRequest.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryIsReporterRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryIsReporterRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        validatorAddress: jspb.Message.getFieldWithDefault(msg, 1, ''),
        reporterAddress: jspb.Message.getFieldWithDefault(msg, 2, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryIsReporterRequest}
 */
proto.oracle.v1.QueryIsReporterRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryIsReporterRequest()
  return proto.oracle.v1.QueryIsReporterRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryIsReporterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryIsReporterRequest}
 */
proto.oracle.v1.QueryIsReporterRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setValidatorAddress(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setReporterAddress(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryIsReporterRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.oracle.v1.QueryIsReporterRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryIsReporterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryIsReporterRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getValidatorAddress()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getReporterAddress()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
}

/**
 * optional string validator_address = 1;
 * @return {string}
 */
proto.oracle.v1.QueryIsReporterRequest.prototype.getValidatorAddress =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
  }

/**
 * @param {string} value
 * @return {!proto.oracle.v1.QueryIsReporterRequest} returns this
 */
proto.oracle.v1.QueryIsReporterRequest.prototype.setValidatorAddress =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value)
  }

/**
 * optional string reporter_address = 2;
 * @return {string}
 */
proto.oracle.v1.QueryIsReporterRequest.prototype.getReporterAddress =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
  }

/**
 * @param {string} value
 * @return {!proto.oracle.v1.QueryIsReporterRequest} returns this
 */
proto.oracle.v1.QueryIsReporterRequest.prototype.setReporterAddress = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryIsReporterResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryIsReporterResponse.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryIsReporterResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryIsReporterResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        isReporter: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryIsReporterResponse}
 */
proto.oracle.v1.QueryIsReporterResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryIsReporterResponse()
  return proto.oracle.v1.QueryIsReporterResponse.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryIsReporterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryIsReporterResponse}
 */
proto.oracle.v1.QueryIsReporterResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setIsReporter(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryIsReporterResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.oracle.v1.QueryIsReporterResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryIsReporterResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryIsReporterResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getIsReporter()
  if (f) {
    writer.writeBool(1, f)
  }
}

/**
 * optional bool is_reporter = 1;
 * @return {boolean}
 */
proto.oracle.v1.QueryIsReporterResponse.prototype.getIsReporter = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  )
}

/**
 * @param {boolean} value
 * @return {!proto.oracle.v1.QueryIsReporterResponse} returns this
 */
proto.oracle.v1.QueryIsReporterResponse.prototype.setIsReporter = function (
  value,
) {
  return jspb.Message.setProto3BooleanField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryReportersRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryReportersRequest.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryReportersRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryReportersRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        validatorAddress: jspb.Message.getFieldWithDefault(msg, 1, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryReportersRequest}
 */
proto.oracle.v1.QueryReportersRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryReportersRequest()
  return proto.oracle.v1.QueryReportersRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryReportersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryReportersRequest}
 */
proto.oracle.v1.QueryReportersRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setValidatorAddress(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryReportersRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.oracle.v1.QueryReportersRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryReportersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryReportersRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getValidatorAddress()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string validator_address = 1;
 * @return {string}
 */
proto.oracle.v1.QueryReportersRequest.prototype.getValidatorAddress =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
  }

/**
 * @param {string} value
 * @return {!proto.oracle.v1.QueryReportersRequest} returns this
 */
proto.oracle.v1.QueryReportersRequest.prototype.setValidatorAddress = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.oracle.v1.QueryReportersResponse.repeatedFields_ = [1]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryReportersResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryReportersResponse.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryReportersResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryReportersResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        reporterList:
          (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryReportersResponse}
 */
proto.oracle.v1.QueryReportersResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryReportersResponse()
  return proto.oracle.v1.QueryReportersResponse.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryReportersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryReportersResponse}
 */
proto.oracle.v1.QueryReportersResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.addReporter(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryReportersResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.oracle.v1.QueryReportersResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryReportersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryReportersResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getReporterList()
  if (f.length > 0) {
    writer.writeRepeatedString(1, f)
  }
}

/**
 * repeated string reporter = 1;
 * @return {!Array<string>}
 */
proto.oracle.v1.QueryReportersResponse.prototype.getReporterList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.oracle.v1.QueryReportersResponse} returns this
 */
proto.oracle.v1.QueryReportersResponse.prototype.setReporterList = function (
  value,
) {
  return jspb.Message.setField(this, 1, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.oracle.v1.QueryReportersResponse} returns this
 */
proto.oracle.v1.QueryReportersResponse.prototype.addReporter = function (
  value,
  opt_index,
) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.oracle.v1.QueryReportersResponse} returns this
 */
proto.oracle.v1.QueryReportersResponse.prototype.clearReporterList =
  function () {
    return this.setReporterList([])
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryActiveValidatorsRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryActiveValidatorsRequest.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryActiveValidatorsRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryActiveValidatorsRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {}

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryActiveValidatorsRequest}
 */
proto.oracle.v1.QueryActiveValidatorsRequest.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryActiveValidatorsRequest()
  return proto.oracle.v1.QueryActiveValidatorsRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryActiveValidatorsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryActiveValidatorsRequest}
 */
proto.oracle.v1.QueryActiveValidatorsRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryActiveValidatorsRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.oracle.v1.QueryActiveValidatorsRequest.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryActiveValidatorsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryActiveValidatorsRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
  }

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.oracle.v1.QueryActiveValidatorsResponse.repeatedFields_ = [1]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryActiveValidatorsResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryActiveValidatorsResponse.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryActiveValidatorsResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryActiveValidatorsResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        validatorsList: jspb.Message.toObjectList(
          msg.getValidatorsList(),
          oracle_v1_oracle_pb.ActiveValidator.toObject,
          includeInstance,
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryActiveValidatorsResponse}
 */
proto.oracle.v1.QueryActiveValidatorsResponse.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryActiveValidatorsResponse()
  return proto.oracle.v1.QueryActiveValidatorsResponse.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryActiveValidatorsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryActiveValidatorsResponse}
 */
proto.oracle.v1.QueryActiveValidatorsResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = new oracle_v1_oracle_pb.ActiveValidator()
          reader.readMessage(
            value,
            oracle_v1_oracle_pb.ActiveValidator.deserializeBinaryFromReader,
          )
          msg.addValidators(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryActiveValidatorsResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.oracle.v1.QueryActiveValidatorsResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryActiveValidatorsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryActiveValidatorsResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getValidatorsList()
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        1,
        f,
        oracle_v1_oracle_pb.ActiveValidator.serializeBinaryToWriter,
      )
    }
  }

/**
 * repeated ActiveValidator validators = 1;
 * @return {!Array<!proto.oracle.v1.ActiveValidator>}
 */
proto.oracle.v1.QueryActiveValidatorsResponse.prototype.getValidatorsList =
  function () {
    return /** @type{!Array<!proto.oracle.v1.ActiveValidator>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        oracle_v1_oracle_pb.ActiveValidator,
        1,
      )
    )
  }

/**
 * @param {!Array<!proto.oracle.v1.ActiveValidator>} value
 * @return {!proto.oracle.v1.QueryActiveValidatorsResponse} returns this
 */
proto.oracle.v1.QueryActiveValidatorsResponse.prototype.setValidatorsList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value)
  }

/**
 * @param {!proto.oracle.v1.ActiveValidator=} opt_value
 * @param {number=} opt_index
 * @return {!proto.oracle.v1.ActiveValidator}
 */
proto.oracle.v1.QueryActiveValidatorsResponse.prototype.addValidators =
  function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
      this,
      1,
      opt_value,
      proto.oracle.v1.ActiveValidator,
      opt_index,
    )
  }

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.oracle.v1.QueryActiveValidatorsResponse} returns this
 */
proto.oracle.v1.QueryActiveValidatorsResponse.prototype.clearValidatorsList =
  function () {
    return this.setValidatorsList([])
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryRequestSearchRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryRequestSearchRequest.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryRequestSearchRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryRequestSearchRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        oracleScriptId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        calldata: jspb.Message.getFieldWithDefault(msg, 2, ''),
        askCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
        minCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryRequestSearchRequest}
 */
proto.oracle.v1.QueryRequestSearchRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryRequestSearchRequest()
  return proto.oracle.v1.QueryRequestSearchRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryRequestSearchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryRequestSearchRequest}
 */
proto.oracle.v1.QueryRequestSearchRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setOracleScriptId(value)
          break
        case 2:
          var value = /** @type {string} */ (reader.readString())
          msg.setCalldata(value)
          break
        case 3:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setAskCount(value)
          break
        case 4:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setMinCount(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryRequestSearchRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.oracle.v1.QueryRequestSearchRequest.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryRequestSearchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryRequestSearchRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getOracleScriptId()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
  f = message.getCalldata()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getAskCount()
  if (f !== 0) {
    writer.writeUint64(3, f)
  }
  f = message.getMinCount()
  if (f !== 0) {
    writer.writeUint64(4, f)
  }
}

/**
 * optional uint64 oracle_script_id = 1;
 * @return {number}
 */
proto.oracle.v1.QueryRequestSearchRequest.prototype.getOracleScriptId =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
  }

/**
 * @param {number} value
 * @return {!proto.oracle.v1.QueryRequestSearchRequest} returns this
 */
proto.oracle.v1.QueryRequestSearchRequest.prototype.setOracleScriptId =
  function (value) {
    return jspb.Message.setProto3IntField(this, 1, value)
  }

/**
 * optional string calldata = 2;
 * @return {string}
 */
proto.oracle.v1.QueryRequestSearchRequest.prototype.getCalldata = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.oracle.v1.QueryRequestSearchRequest} returns this
 */
proto.oracle.v1.QueryRequestSearchRequest.prototype.setCalldata = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional uint64 ask_count = 3;
 * @return {number}
 */
proto.oracle.v1.QueryRequestSearchRequest.prototype.getAskCount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.oracle.v1.QueryRequestSearchRequest} returns this
 */
proto.oracle.v1.QueryRequestSearchRequest.prototype.setAskCount = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * optional uint64 min_count = 4;
 * @return {number}
 */
proto.oracle.v1.QueryRequestSearchRequest.prototype.getMinCount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}

/**
 * @param {number} value
 * @return {!proto.oracle.v1.QueryRequestSearchRequest} returns this
 */
proto.oracle.v1.QueryRequestSearchRequest.prototype.setMinCount = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 4, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryRequestSearchResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryRequestSearchResponse.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryRequestSearchResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryRequestSearchResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        request:
          (f = msg.getRequest()) &&
          proto.oracle.v1.QueryRequestResponse.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryRequestSearchResponse}
 */
proto.oracle.v1.QueryRequestSearchResponse.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryRequestSearchResponse()
  return proto.oracle.v1.QueryRequestSearchResponse.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryRequestSearchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryRequestSearchResponse}
 */
proto.oracle.v1.QueryRequestSearchResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = new proto.oracle.v1.QueryRequestResponse()
          reader.readMessage(
            value,
            proto.oracle.v1.QueryRequestResponse.deserializeBinaryFromReader,
          )
          msg.setRequest(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryRequestSearchResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.oracle.v1.QueryRequestSearchResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryRequestSearchResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryRequestSearchResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getRequest()
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.oracle.v1.QueryRequestResponse.serializeBinaryToWriter,
    )
  }
}

/**
 * optional QueryRequestResponse request = 1;
 * @return {?proto.oracle.v1.QueryRequestResponse}
 */
proto.oracle.v1.QueryRequestSearchResponse.prototype.getRequest = function () {
  return /** @type{?proto.oracle.v1.QueryRequestResponse} */ (
    jspb.Message.getWrapperField(this, proto.oracle.v1.QueryRequestResponse, 1)
  )
}

/**
 * @param {?proto.oracle.v1.QueryRequestResponse|undefined} value
 * @return {!proto.oracle.v1.QueryRequestSearchResponse} returns this
 */
proto.oracle.v1.QueryRequestSearchResponse.prototype.setRequest = function (
  value,
) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.oracle.v1.QueryRequestSearchResponse} returns this
 */
proto.oracle.v1.QueryRequestSearchResponse.prototype.clearRequest =
  function () {
    return this.setRequest(undefined)
  }

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.oracle.v1.QueryRequestSearchResponse.prototype.hasRequest = function () {
  return jspb.Message.getField(this, 1) != null
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.oracle.v1.QueryRequestPriceRequest.repeatedFields_ = [1]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryRequestPriceRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryRequestPriceRequest.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryRequestPriceRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryRequestPriceRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        symbolsList:
          (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
        askCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
        minCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryRequestPriceRequest}
 */
proto.oracle.v1.QueryRequestPriceRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryRequestPriceRequest()
  return proto.oracle.v1.QueryRequestPriceRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryRequestPriceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryRequestPriceRequest}
 */
proto.oracle.v1.QueryRequestPriceRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString())
          msg.addSymbols(value)
          break
        case 2:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setAskCount(value)
          break
        case 3:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setMinCount(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryRequestPriceRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.oracle.v1.QueryRequestPriceRequest.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryRequestPriceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryRequestPriceRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getSymbolsList()
  if (f.length > 0) {
    writer.writeRepeatedString(1, f)
  }
  f = message.getAskCount()
  if (f !== 0) {
    writer.writeUint64(2, f)
  }
  f = message.getMinCount()
  if (f !== 0) {
    writer.writeUint64(3, f)
  }
}

/**
 * repeated string symbols = 1;
 * @return {!Array<string>}
 */
proto.oracle.v1.QueryRequestPriceRequest.prototype.getSymbolsList =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.getRepeatedField(this, 1)
    )
  }

/**
 * @param {!Array<string>} value
 * @return {!proto.oracle.v1.QueryRequestPriceRequest} returns this
 */
proto.oracle.v1.QueryRequestPriceRequest.prototype.setSymbolsList = function (
  value,
) {
  return jspb.Message.setField(this, 1, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.oracle.v1.QueryRequestPriceRequest} returns this
 */
proto.oracle.v1.QueryRequestPriceRequest.prototype.addSymbols = function (
  value,
  opt_index,
) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.oracle.v1.QueryRequestPriceRequest} returns this
 */
proto.oracle.v1.QueryRequestPriceRequest.prototype.clearSymbolsList =
  function () {
    return this.setSymbolsList([])
  }

/**
 * optional uint64 ask_count = 2;
 * @return {number}
 */
proto.oracle.v1.QueryRequestPriceRequest.prototype.getAskCount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.oracle.v1.QueryRequestPriceRequest} returns this
 */
proto.oracle.v1.QueryRequestPriceRequest.prototype.setAskCount = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional uint64 min_count = 3;
 * @return {number}
 */
proto.oracle.v1.QueryRequestPriceRequest.prototype.getMinCount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.oracle.v1.QueryRequestPriceRequest} returns this
 */
proto.oracle.v1.QueryRequestPriceRequest.prototype.setMinCount = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.oracle.v1.QueryRequestPriceResponse.repeatedFields_ = [1]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryRequestPriceResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.oracle.v1.QueryRequestPriceResponse.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryRequestPriceResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryRequestPriceResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        priceResultsList: jspb.Message.toObjectList(
          msg.getPriceResultsList(),
          oracle_v1_oracle_pb.PriceResult.toObject,
          includeInstance,
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryRequestPriceResponse}
 */
proto.oracle.v1.QueryRequestPriceResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryRequestPriceResponse()
  return proto.oracle.v1.QueryRequestPriceResponse.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryRequestPriceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryRequestPriceResponse}
 */
proto.oracle.v1.QueryRequestPriceResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = new oracle_v1_oracle_pb.PriceResult()
          reader.readMessage(
            value,
            oracle_v1_oracle_pb.PriceResult.deserializeBinaryFromReader,
          )
          msg.addPriceResults(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryRequestPriceResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.oracle.v1.QueryRequestPriceResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryRequestPriceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryRequestPriceResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getPriceResultsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      oracle_v1_oracle_pb.PriceResult.serializeBinaryToWriter,
    )
  }
}

/**
 * repeated PriceResult price_results = 1;
 * @return {!Array<!proto.oracle.v1.PriceResult>}
 */
proto.oracle.v1.QueryRequestPriceResponse.prototype.getPriceResultsList =
  function () {
    return /** @type{!Array<!proto.oracle.v1.PriceResult>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        oracle_v1_oracle_pb.PriceResult,
        1,
      )
    )
  }

/**
 * @param {!Array<!proto.oracle.v1.PriceResult>} value
 * @return {!proto.oracle.v1.QueryRequestPriceResponse} returns this
 */
proto.oracle.v1.QueryRequestPriceResponse.prototype.setPriceResultsList =
  function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value)
  }

/**
 * @param {!proto.oracle.v1.PriceResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.oracle.v1.PriceResult}
 */
proto.oracle.v1.QueryRequestPriceResponse.prototype.addPriceResults = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.oracle.v1.PriceResult,
    opt_index,
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.oracle.v1.QueryRequestPriceResponse} returns this
 */
proto.oracle.v1.QueryRequestPriceResponse.prototype.clearPriceResultsList =
  function () {
    return this.setPriceResultsList([])
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryRequestVerificationRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.oracle.v1.QueryRequestVerificationRequest.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryRequestVerificationRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryRequestVerificationRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        chainId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        validator: jspb.Message.getFieldWithDefault(msg, 2, ''),
        requestId: jspb.Message.getFieldWithDefault(msg, 3, 0),
        externalId: jspb.Message.getFieldWithDefault(msg, 4, 0),
        dataSourceId: jspb.Message.getFieldWithDefault(msg, 5, 0),
        reporter: jspb.Message.getFieldWithDefault(msg, 6, ''),
        signature: msg.getSignature_asB64(),
        maxDelay: jspb.Message.getFieldWithDefault(msg, 8, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryRequestVerificationRequest}
 */
proto.oracle.v1.QueryRequestVerificationRequest.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryRequestVerificationRequest()
  return proto.oracle.v1.QueryRequestVerificationRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryRequestVerificationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryRequestVerificationRequest}
 */
proto.oracle.v1.QueryRequestVerificationRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString())
          msg.setChainId(value)
          break
        case 2:
          var value = /** @type {string} */ (reader.readString())
          msg.setValidator(value)
          break
        case 3:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setRequestId(value)
          break
        case 4:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setExternalId(value)
          break
        case 5:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setDataSourceId(value)
          break
        case 6:
          var value = /** @type {string} */ (reader.readString())
          msg.setReporter(value)
          break
        case 7:
          var value = /** @type {!Uint8Array} */ (reader.readBytes())
          msg.setSignature(value)
          break
        case 8:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setMaxDelay(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryRequestVerificationRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.oracle.v1.QueryRequestVerificationRequest.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryRequestVerificationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryRequestVerificationRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getChainId()
    if (f.length > 0) {
      writer.writeString(1, f)
    }
    f = message.getValidator()
    if (f.length > 0) {
      writer.writeString(2, f)
    }
    f = message.getRequestId()
    if (f !== 0) {
      writer.writeUint64(3, f)
    }
    f = message.getExternalId()
    if (f !== 0) {
      writer.writeUint64(4, f)
    }
    f = message.getDataSourceId()
    if (f !== 0) {
      writer.writeUint64(5, f)
    }
    f = message.getReporter()
    if (f.length > 0) {
      writer.writeString(6, f)
    }
    f = message.getSignature_asU8()
    if (f.length > 0) {
      writer.writeBytes(7, f)
    }
    f = message.getMaxDelay()
    if (f !== 0) {
      writer.writeUint64(8, f)
    }
  }

/**
 * optional string chain_id = 1;
 * @return {string}
 */
proto.oracle.v1.QueryRequestVerificationRequest.prototype.getChainId =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
  }

/**
 * @param {string} value
 * @return {!proto.oracle.v1.QueryRequestVerificationRequest} returns this
 */
proto.oracle.v1.QueryRequestVerificationRequest.prototype.setChainId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value)
  }

/**
 * optional string validator = 2;
 * @return {string}
 */
proto.oracle.v1.QueryRequestVerificationRequest.prototype.getValidator =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
  }

/**
 * @param {string} value
 * @return {!proto.oracle.v1.QueryRequestVerificationRequest} returns this
 */
proto.oracle.v1.QueryRequestVerificationRequest.prototype.setValidator =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value)
  }

/**
 * optional uint64 request_id = 3;
 * @return {number}
 */
proto.oracle.v1.QueryRequestVerificationRequest.prototype.getRequestId =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
  }

/**
 * @param {number} value
 * @return {!proto.oracle.v1.QueryRequestVerificationRequest} returns this
 */
proto.oracle.v1.QueryRequestVerificationRequest.prototype.setRequestId =
  function (value) {
    return jspb.Message.setProto3IntField(this, 3, value)
  }

/**
 * optional uint64 external_id = 4;
 * @return {number}
 */
proto.oracle.v1.QueryRequestVerificationRequest.prototype.getExternalId =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
  }

/**
 * @param {number} value
 * @return {!proto.oracle.v1.QueryRequestVerificationRequest} returns this
 */
proto.oracle.v1.QueryRequestVerificationRequest.prototype.setExternalId =
  function (value) {
    return jspb.Message.setProto3IntField(this, 4, value)
  }

/**
 * optional uint64 data_source_id = 5;
 * @return {number}
 */
proto.oracle.v1.QueryRequestVerificationRequest.prototype.getDataSourceId =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0))
  }

/**
 * @param {number} value
 * @return {!proto.oracle.v1.QueryRequestVerificationRequest} returns this
 */
proto.oracle.v1.QueryRequestVerificationRequest.prototype.setDataSourceId =
  function (value) {
    return jspb.Message.setProto3IntField(this, 5, value)
  }

/**
 * optional string reporter = 6;
 * @return {string}
 */
proto.oracle.v1.QueryRequestVerificationRequest.prototype.getReporter =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
  }

/**
 * @param {string} value
 * @return {!proto.oracle.v1.QueryRequestVerificationRequest} returns this
 */
proto.oracle.v1.QueryRequestVerificationRequest.prototype.setReporter =
  function (value) {
    return jspb.Message.setProto3StringField(this, 6, value)
  }

/**
 * optional bytes signature = 7;
 * @return {!(string|Uint8Array)}
 */
proto.oracle.v1.QueryRequestVerificationRequest.prototype.getSignature =
  function () {
    return /** @type {!(string|Uint8Array)} */ (
      jspb.Message.getFieldWithDefault(this, 7, '')
    )
  }

/**
 * optional bytes signature = 7;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.oracle.v1.QueryRequestVerificationRequest.prototype.getSignature_asB64 =
  function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSignature()))
  }

/**
 * optional bytes signature = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryRequestVerificationRequest.prototype.getSignature_asU8 =
  function () {
    return /** @type {!Uint8Array} */ (
      jspb.Message.bytesAsU8(this.getSignature())
    )
  }

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.oracle.v1.QueryRequestVerificationRequest} returns this
 */
proto.oracle.v1.QueryRequestVerificationRequest.prototype.setSignature =
  function (value) {
    return jspb.Message.setProto3BytesField(this, 7, value)
  }

/**
 * optional uint64 max_delay = 8;
 * @return {number}
 */
proto.oracle.v1.QueryRequestVerificationRequest.prototype.getMaxDelay =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0))
  }

/**
 * @param {number} value
 * @return {!proto.oracle.v1.QueryRequestVerificationRequest} returns this
 */
proto.oracle.v1.QueryRequestVerificationRequest.prototype.setMaxDelay =
  function (value) {
    return jspb.Message.setProto3IntField(this, 8, value)
  }

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.oracle.v1.QueryRequestVerificationResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.oracle.v1.QueryRequestVerificationResponse.toObject(
        opt_includeInstance,
        this,
      )
    }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.oracle.v1.QueryRequestVerificationResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.oracle.v1.QueryRequestVerificationResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        chainId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        validator: jspb.Message.getFieldWithDefault(msg, 2, ''),
        requestId: jspb.Message.getFieldWithDefault(msg, 3, 0),
        externalId: jspb.Message.getFieldWithDefault(msg, 4, 0),
        dataSourceId: jspb.Message.getFieldWithDefault(msg, 5, 0),
        isDelay: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oracle.v1.QueryRequestVerificationResponse}
 */
proto.oracle.v1.QueryRequestVerificationResponse.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.oracle.v1.QueryRequestVerificationResponse()
  return proto.oracle.v1.QueryRequestVerificationResponse.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oracle.v1.QueryRequestVerificationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oracle.v1.QueryRequestVerificationResponse}
 */
proto.oracle.v1.QueryRequestVerificationResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break
      }
      var field = reader.getFieldNumber()
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString())
          msg.setChainId(value)
          break
        case 2:
          var value = /** @type {string} */ (reader.readString())
          msg.setValidator(value)
          break
        case 3:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setRequestId(value)
          break
        case 4:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setExternalId(value)
          break
        case 5:
          var value = /** @type {number} */ (reader.readUint64())
          msg.setDataSourceId(value)
          break
        case 6:
          var value = /** @type {boolean} */ (reader.readBool())
          msg.setIsDelay(value)
          break
        default:
          reader.skipField()
          break
      }
    }
    return msg
  }

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oracle.v1.QueryRequestVerificationResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter()
    proto.oracle.v1.QueryRequestVerificationResponse.serializeBinaryToWriter(
      this,
      writer,
    )
    return writer.getResultBuffer()
  }

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oracle.v1.QueryRequestVerificationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oracle.v1.QueryRequestVerificationResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined
    f = message.getChainId()
    if (f.length > 0) {
      writer.writeString(1, f)
    }
    f = message.getValidator()
    if (f.length > 0) {
      writer.writeString(2, f)
    }
    f = message.getRequestId()
    if (f !== 0) {
      writer.writeUint64(3, f)
    }
    f = message.getExternalId()
    if (f !== 0) {
      writer.writeUint64(4, f)
    }
    f = message.getDataSourceId()
    if (f !== 0) {
      writer.writeUint64(5, f)
    }
    f = message.getIsDelay()
    if (f) {
      writer.writeBool(6, f)
    }
  }

/**
 * optional string chain_id = 1;
 * @return {string}
 */
proto.oracle.v1.QueryRequestVerificationResponse.prototype.getChainId =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
  }

/**
 * @param {string} value
 * @return {!proto.oracle.v1.QueryRequestVerificationResponse} returns this
 */
proto.oracle.v1.QueryRequestVerificationResponse.prototype.setChainId =
  function (value) {
    return jspb.Message.setProto3StringField(this, 1, value)
  }

/**
 * optional string validator = 2;
 * @return {string}
 */
proto.oracle.v1.QueryRequestVerificationResponse.prototype.getValidator =
  function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
  }

/**
 * @param {string} value
 * @return {!proto.oracle.v1.QueryRequestVerificationResponse} returns this
 */
proto.oracle.v1.QueryRequestVerificationResponse.prototype.setValidator =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value)
  }

/**
 * optional uint64 request_id = 3;
 * @return {number}
 */
proto.oracle.v1.QueryRequestVerificationResponse.prototype.getRequestId =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
  }

/**
 * @param {number} value
 * @return {!proto.oracle.v1.QueryRequestVerificationResponse} returns this
 */
proto.oracle.v1.QueryRequestVerificationResponse.prototype.setRequestId =
  function (value) {
    return jspb.Message.setProto3IntField(this, 3, value)
  }

/**
 * optional uint64 external_id = 4;
 * @return {number}
 */
proto.oracle.v1.QueryRequestVerificationResponse.prototype.getExternalId =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
  }

/**
 * @param {number} value
 * @return {!proto.oracle.v1.QueryRequestVerificationResponse} returns this
 */
proto.oracle.v1.QueryRequestVerificationResponse.prototype.setExternalId =
  function (value) {
    return jspb.Message.setProto3IntField(this, 4, value)
  }

/**
 * optional uint64 data_source_id = 5;
 * @return {number}
 */
proto.oracle.v1.QueryRequestVerificationResponse.prototype.getDataSourceId =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0))
  }

/**
 * @param {number} value
 * @return {!proto.oracle.v1.QueryRequestVerificationResponse} returns this
 */
proto.oracle.v1.QueryRequestVerificationResponse.prototype.setDataSourceId =
  function (value) {
    return jspb.Message.setProto3IntField(this, 5, value)
  }

/**
 * optional bool is_delay = 6;
 * @return {boolean}
 */
proto.oracle.v1.QueryRequestVerificationResponse.prototype.getIsDelay =
  function () {
    return /** @type {boolean} */ (
      jspb.Message.getBooleanFieldWithDefault(this, 6, false)
    )
  }

/**
 * @param {boolean} value
 * @return {!proto.oracle.v1.QueryRequestVerificationResponse} returns this
 */
proto.oracle.v1.QueryRequestVerificationResponse.prototype.setIsDelay =
  function (value) {
    return jspb.Message.setProto3BooleanField(this, 6, value)
  }

goog.object.extend(exports, proto.oracle.v1)
