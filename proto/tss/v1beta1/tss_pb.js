// source: tss/v1beta1/tss.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var cosmos_base_v1beta1_coin_pb = require('../../cosmos/base/v1beta1/coin_pb.js');
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb);
var cosmos_proto_cosmos_pb = require('../../cosmos_proto/cosmos_pb.js');
goog.object.extend(proto, cosmos_proto_cosmos_pb);
goog.exportSymbol('proto.tss.v1beta1.AssignedMember', null, global);
goog.exportSymbol('proto.tss.v1beta1.Complaint', null, global);
goog.exportSymbol('proto.tss.v1beta1.ComplaintStatus', null, global);
goog.exportSymbol('proto.tss.v1beta1.ComplaintWithStatus', null, global);
goog.exportSymbol('proto.tss.v1beta1.ComplaintsWithStatus', null, global);
goog.exportSymbol('proto.tss.v1beta1.Confirm', null, global);
goog.exportSymbol('proto.tss.v1beta1.DE', null, global);
goog.exportSymbol('proto.tss.v1beta1.DEQueue', null, global);
goog.exportSymbol('proto.tss.v1beta1.EVMSignature', null, global);
goog.exportSymbol('proto.tss.v1beta1.Group', null, global);
goog.exportSymbol('proto.tss.v1beta1.GroupStatus', null, global);
goog.exportSymbol('proto.tss.v1beta1.Member', null, global);
goog.exportSymbol('proto.tss.v1beta1.MemberStatus', null, global);
goog.exportSymbol('proto.tss.v1beta1.PartialSignature', null, global);
goog.exportSymbol('proto.tss.v1beta1.PendingProcessGroups', null, global);
goog.exportSymbol('proto.tss.v1beta1.PendingProcessSignings', null, global);
goog.exportSymbol('proto.tss.v1beta1.PendingSignings', null, global);
goog.exportSymbol('proto.tss.v1beta1.PrefixMsgType', null, global);
goog.exportSymbol('proto.tss.v1beta1.Replacement', null, global);
goog.exportSymbol('proto.tss.v1beta1.ReplacementStatus', null, global);
goog.exportSymbol('proto.tss.v1beta1.Round1Info', null, global);
goog.exportSymbol('proto.tss.v1beta1.Round2Info', null, global);
goog.exportSymbol('proto.tss.v1beta1.Signing', null, global);
goog.exportSymbol('proto.tss.v1beta1.SigningStatus', null, global);
goog.exportSymbol('proto.tss.v1beta1.Status', null, global);
goog.exportSymbol('proto.tss.v1beta1.TextRequestingSignature', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.Group = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tss.v1beta1.Group.repeatedFields_, null);
};
goog.inherits(proto.tss.v1beta1.Group, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.Group.displayName = 'proto.tss.v1beta1.Group';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.Replacement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tss.v1beta1.Replacement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.Replacement.displayName = 'proto.tss.v1beta1.Replacement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.Round1Info = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tss.v1beta1.Round1Info.repeatedFields_, null);
};
goog.inherits(proto.tss.v1beta1.Round1Info, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.Round1Info.displayName = 'proto.tss.v1beta1.Round1Info';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.Round2Info = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tss.v1beta1.Round2Info.repeatedFields_, null);
};
goog.inherits(proto.tss.v1beta1.Round2Info, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.Round2Info.displayName = 'proto.tss.v1beta1.Round2Info';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.DE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tss.v1beta1.DE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.DE.displayName = 'proto.tss.v1beta1.DE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.DEQueue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tss.v1beta1.DEQueue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.DEQueue.displayName = 'proto.tss.v1beta1.DEQueue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.Signing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tss.v1beta1.Signing.repeatedFields_, null);
};
goog.inherits(proto.tss.v1beta1.Signing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.Signing.displayName = 'proto.tss.v1beta1.Signing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.AssignedMember = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tss.v1beta1.AssignedMember, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.AssignedMember.displayName = 'proto.tss.v1beta1.AssignedMember';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.PendingSignings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tss.v1beta1.PendingSignings.repeatedFields_, null);
};
goog.inherits(proto.tss.v1beta1.PendingSignings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.PendingSignings.displayName = 'proto.tss.v1beta1.PendingSignings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.Member = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tss.v1beta1.Member, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.Member.displayName = 'proto.tss.v1beta1.Member';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tss.v1beta1.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.Status.displayName = 'proto.tss.v1beta1.Status';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.Confirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tss.v1beta1.Confirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.Confirm.displayName = 'proto.tss.v1beta1.Confirm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.Complaint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tss.v1beta1.Complaint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.Complaint.displayName = 'proto.tss.v1beta1.Complaint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.ComplaintWithStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tss.v1beta1.ComplaintWithStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.ComplaintWithStatus.displayName = 'proto.tss.v1beta1.ComplaintWithStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.ComplaintsWithStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tss.v1beta1.ComplaintsWithStatus.repeatedFields_, null);
};
goog.inherits(proto.tss.v1beta1.ComplaintsWithStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.ComplaintsWithStatus.displayName = 'proto.tss.v1beta1.ComplaintsWithStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.PendingProcessGroups = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tss.v1beta1.PendingProcessGroups.repeatedFields_, null);
};
goog.inherits(proto.tss.v1beta1.PendingProcessGroups, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.PendingProcessGroups.displayName = 'proto.tss.v1beta1.PendingProcessGroups';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.PendingProcessSignings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tss.v1beta1.PendingProcessSignings.repeatedFields_, null);
};
goog.inherits(proto.tss.v1beta1.PendingProcessSignings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.PendingProcessSignings.displayName = 'proto.tss.v1beta1.PendingProcessSignings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.PartialSignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tss.v1beta1.PartialSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.PartialSignature.displayName = 'proto.tss.v1beta1.PartialSignature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.TextRequestingSignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tss.v1beta1.TextRequestingSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.TextRequestingSignature.displayName = 'proto.tss.v1beta1.TextRequestingSignature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tss.v1beta1.EVMSignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tss.v1beta1.EVMSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tss.v1beta1.EVMSignature.displayName = 'proto.tss.v1beta1.EVMSignature';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tss.v1beta1.Group.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.Group.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.Group.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.Group} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.Group.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    threshold: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pubKey: msg.getPubKey_asB64(),
    status: jspb.Message.getFieldWithDefault(msg, 5, 0),
    feeList: jspb.Message.toObjectList(msg.getFeeList(),
    cosmos_base_v1beta1_coin_pb.Coin.toObject, includeInstance),
    latestReplacementId: jspb.Message.getFieldWithDefault(msg, 7, 0),
    createdHeight: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.Group}
 */
proto.tss.v1beta1.Group.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.Group;
  return proto.tss.v1beta1.Group.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.Group} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.Group}
 */
proto.tss.v1beta1.Group.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGroupId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setThreshold(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubKey(value);
      break;
    case 5:
      var value = /** @type {!proto.tss.v1beta1.GroupStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 6:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.addFee(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLatestReplacementId(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreatedHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Group.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.Group.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.Group} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.Group.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getThreshold();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPubKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getFeeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getLatestReplacementId();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getCreatedHeight();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional uint64 group_id = 1;
 * @return {number}
 */
proto.tss.v1beta1.Group.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.Group} returns this
 */
proto.tss.v1beta1.Group.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 size = 2;
 * @return {number}
 */
proto.tss.v1beta1.Group.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.Group} returns this
 */
proto.tss.v1beta1.Group.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 threshold = 3;
 * @return {number}
 */
proto.tss.v1beta1.Group.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.Group} returns this
 */
proto.tss.v1beta1.Group.prototype.setThreshold = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes pub_key = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.Group.prototype.getPubKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes pub_key = 4;
 * This is a type-conversion wrapper around `getPubKey()`
 * @return {string}
 */
proto.tss.v1beta1.Group.prototype.getPubKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubKey()));
};


/**
 * optional bytes pub_key = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubKey()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Group.prototype.getPubKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.Group} returns this
 */
proto.tss.v1beta1.Group.prototype.setPubKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional GroupStatus status = 5;
 * @return {!proto.tss.v1beta1.GroupStatus}
 */
proto.tss.v1beta1.Group.prototype.getStatus = function() {
  return /** @type {!proto.tss.v1beta1.GroupStatus} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.tss.v1beta1.GroupStatus} value
 * @return {!proto.tss.v1beta1.Group} returns this
 */
proto.tss.v1beta1.Group.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * repeated cosmos.base.v1beta1.Coin fee = 6;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.tss.v1beta1.Group.prototype.getFeeList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 6));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.tss.v1beta1.Group} returns this
*/
proto.tss.v1beta1.Group.prototype.setFeeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.tss.v1beta1.Group.prototype.addFee = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.cosmos.base.v1beta1.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tss.v1beta1.Group} returns this
 */
proto.tss.v1beta1.Group.prototype.clearFeeList = function() {
  return this.setFeeList([]);
};


/**
 * optional uint64 latest_replacement_id = 7;
 * @return {number}
 */
proto.tss.v1beta1.Group.prototype.getLatestReplacementId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.Group} returns this
 */
proto.tss.v1beta1.Group.prototype.setLatestReplacementId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 created_height = 8;
 * @return {number}
 */
proto.tss.v1beta1.Group.prototype.getCreatedHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.Group} returns this
 */
proto.tss.v1beta1.Group.prototype.setCreatedHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.Replacement.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.Replacement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.Replacement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.Replacement.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signingId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fromGroupId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fromPubKey: msg.getFromPubKey_asB64(),
    toGroupId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    toPubKey: msg.getToPubKey_asB64(),
    status: jspb.Message.getFieldWithDefault(msg, 7, 0),
    execTime: (f = msg.getExecTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.Replacement}
 */
proto.tss.v1beta1.Replacement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.Replacement;
  return proto.tss.v1beta1.Replacement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.Replacement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.Replacement}
 */
proto.tss.v1beta1.Replacement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSigningId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromGroupId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFromPubKey(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToGroupId(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToPubKey(value);
      break;
    case 7:
      var value = /** @type {!proto.tss.v1beta1.ReplacementStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExecTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Replacement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.Replacement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.Replacement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.Replacement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSigningId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getFromGroupId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFromPubKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getToGroupId();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getToPubKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getExecTime();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.tss.v1beta1.Replacement.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.Replacement} returns this
 */
proto.tss.v1beta1.Replacement.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 signing_id = 2;
 * @return {number}
 */
proto.tss.v1beta1.Replacement.prototype.getSigningId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.Replacement} returns this
 */
proto.tss.v1beta1.Replacement.prototype.setSigningId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 from_group_id = 3;
 * @return {number}
 */
proto.tss.v1beta1.Replacement.prototype.getFromGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.Replacement} returns this
 */
proto.tss.v1beta1.Replacement.prototype.setFromGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes from_pub_key = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.Replacement.prototype.getFromPubKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes from_pub_key = 4;
 * This is a type-conversion wrapper around `getFromPubKey()`
 * @return {string}
 */
proto.tss.v1beta1.Replacement.prototype.getFromPubKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFromPubKey()));
};


/**
 * optional bytes from_pub_key = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromPubKey()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Replacement.prototype.getFromPubKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFromPubKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.Replacement} returns this
 */
proto.tss.v1beta1.Replacement.prototype.setFromPubKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint64 to_group_id = 5;
 * @return {number}
 */
proto.tss.v1beta1.Replacement.prototype.getToGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.Replacement} returns this
 */
proto.tss.v1beta1.Replacement.prototype.setToGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes to_pub_key = 6;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.Replacement.prototype.getToPubKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes to_pub_key = 6;
 * This is a type-conversion wrapper around `getToPubKey()`
 * @return {string}
 */
proto.tss.v1beta1.Replacement.prototype.getToPubKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToPubKey()));
};


/**
 * optional bytes to_pub_key = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToPubKey()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Replacement.prototype.getToPubKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToPubKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.Replacement} returns this
 */
proto.tss.v1beta1.Replacement.prototype.setToPubKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional ReplacementStatus status = 7;
 * @return {!proto.tss.v1beta1.ReplacementStatus}
 */
proto.tss.v1beta1.Replacement.prototype.getStatus = function() {
  return /** @type {!proto.tss.v1beta1.ReplacementStatus} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.tss.v1beta1.ReplacementStatus} value
 * @return {!proto.tss.v1beta1.Replacement} returns this
 */
proto.tss.v1beta1.Replacement.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional google.protobuf.Timestamp exec_time = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.tss.v1beta1.Replacement.prototype.getExecTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.tss.v1beta1.Replacement} returns this
*/
proto.tss.v1beta1.Replacement.prototype.setExecTime = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tss.v1beta1.Replacement} returns this
 */
proto.tss.v1beta1.Replacement.prototype.clearExecTime = function() {
  return this.setExecTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tss.v1beta1.Replacement.prototype.hasExecTime = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tss.v1beta1.Round1Info.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.Round1Info.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.Round1Info.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.Round1Info} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.Round1Info.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    coefficientCommitsList: msg.getCoefficientCommitsList_asB64(),
    oneTimePubKey: msg.getOneTimePubKey_asB64(),
    a0Signature: msg.getA0Signature_asB64(),
    oneTimeSignature: msg.getOneTimeSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.Round1Info}
 */
proto.tss.v1beta1.Round1Info.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.Round1Info;
  return proto.tss.v1beta1.Round1Info.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.Round1Info} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.Round1Info}
 */
proto.tss.v1beta1.Round1Info.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemberId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addCoefficientCommits(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOneTimePubKey(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setA0Signature(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOneTimeSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Round1Info.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.Round1Info.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.Round1Info} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.Round1Info.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCoefficientCommitsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getOneTimePubKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getA0Signature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getOneTimeSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional uint64 member_id = 1;
 * @return {number}
 */
proto.tss.v1beta1.Round1Info.prototype.getMemberId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.Round1Info} returns this
 */
proto.tss.v1beta1.Round1Info.prototype.setMemberId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated bytes coefficient_commits = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.tss.v1beta1.Round1Info.prototype.getCoefficientCommitsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes coefficient_commits = 2;
 * This is a type-conversion wrapper around `getCoefficientCommitsList()`
 * @return {!Array<string>}
 */
proto.tss.v1beta1.Round1Info.prototype.getCoefficientCommitsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getCoefficientCommitsList()));
};


/**
 * repeated bytes coefficient_commits = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCoefficientCommitsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.tss.v1beta1.Round1Info.prototype.getCoefficientCommitsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getCoefficientCommitsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.tss.v1beta1.Round1Info} returns this
 */
proto.tss.v1beta1.Round1Info.prototype.setCoefficientCommitsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.tss.v1beta1.Round1Info} returns this
 */
proto.tss.v1beta1.Round1Info.prototype.addCoefficientCommits = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tss.v1beta1.Round1Info} returns this
 */
proto.tss.v1beta1.Round1Info.prototype.clearCoefficientCommitsList = function() {
  return this.setCoefficientCommitsList([]);
};


/**
 * optional bytes one_time_pub_key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.Round1Info.prototype.getOneTimePubKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes one_time_pub_key = 3;
 * This is a type-conversion wrapper around `getOneTimePubKey()`
 * @return {string}
 */
proto.tss.v1beta1.Round1Info.prototype.getOneTimePubKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOneTimePubKey()));
};


/**
 * optional bytes one_time_pub_key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOneTimePubKey()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Round1Info.prototype.getOneTimePubKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOneTimePubKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.Round1Info} returns this
 */
proto.tss.v1beta1.Round1Info.prototype.setOneTimePubKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes a0_signature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.Round1Info.prototype.getA0Signature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes a0_signature = 4;
 * This is a type-conversion wrapper around `getA0Signature()`
 * @return {string}
 */
proto.tss.v1beta1.Round1Info.prototype.getA0Signature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getA0Signature()));
};


/**
 * optional bytes a0_signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getA0Signature()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Round1Info.prototype.getA0Signature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getA0Signature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.Round1Info} returns this
 */
proto.tss.v1beta1.Round1Info.prototype.setA0Signature = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes one_time_signature = 5;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.Round1Info.prototype.getOneTimeSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes one_time_signature = 5;
 * This is a type-conversion wrapper around `getOneTimeSignature()`
 * @return {string}
 */
proto.tss.v1beta1.Round1Info.prototype.getOneTimeSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOneTimeSignature()));
};


/**
 * optional bytes one_time_signature = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOneTimeSignature()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Round1Info.prototype.getOneTimeSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOneTimeSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.Round1Info} returns this
 */
proto.tss.v1beta1.Round1Info.prototype.setOneTimeSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tss.v1beta1.Round2Info.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.Round2Info.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.Round2Info.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.Round2Info} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.Round2Info.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    encryptedSecretSharesList: msg.getEncryptedSecretSharesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.Round2Info}
 */
proto.tss.v1beta1.Round2Info.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.Round2Info;
  return proto.tss.v1beta1.Round2Info.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.Round2Info} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.Round2Info}
 */
proto.tss.v1beta1.Round2Info.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemberId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addEncryptedSecretShares(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Round2Info.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.Round2Info.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.Round2Info} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.Round2Info.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getEncryptedSecretSharesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 member_id = 1;
 * @return {number}
 */
proto.tss.v1beta1.Round2Info.prototype.getMemberId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.Round2Info} returns this
 */
proto.tss.v1beta1.Round2Info.prototype.setMemberId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated bytes encrypted_secret_shares = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.tss.v1beta1.Round2Info.prototype.getEncryptedSecretSharesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes encrypted_secret_shares = 2;
 * This is a type-conversion wrapper around `getEncryptedSecretSharesList()`
 * @return {!Array<string>}
 */
proto.tss.v1beta1.Round2Info.prototype.getEncryptedSecretSharesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getEncryptedSecretSharesList()));
};


/**
 * repeated bytes encrypted_secret_shares = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptedSecretSharesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.tss.v1beta1.Round2Info.prototype.getEncryptedSecretSharesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getEncryptedSecretSharesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.tss.v1beta1.Round2Info} returns this
 */
proto.tss.v1beta1.Round2Info.prototype.setEncryptedSecretSharesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.tss.v1beta1.Round2Info} returns this
 */
proto.tss.v1beta1.Round2Info.prototype.addEncryptedSecretShares = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tss.v1beta1.Round2Info} returns this
 */
proto.tss.v1beta1.Round2Info.prototype.clearEncryptedSecretSharesList = function() {
  return this.setEncryptedSecretSharesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.DE.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.DE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.DE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.DE.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubD: msg.getPubD_asB64(),
    pubE: msg.getPubE_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.DE}
 */
proto.tss.v1beta1.DE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.DE;
  return proto.tss.v1beta1.DE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.DE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.DE}
 */
proto.tss.v1beta1.DE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubD(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubE(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.DE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.DE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.DE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.DE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubD_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPubE_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes pub_d = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.DE.prototype.getPubD = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pub_d = 1;
 * This is a type-conversion wrapper around `getPubD()`
 * @return {string}
 */
proto.tss.v1beta1.DE.prototype.getPubD_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubD()));
};


/**
 * optional bytes pub_d = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubD()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.DE.prototype.getPubD_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubD()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.DE} returns this
 */
proto.tss.v1beta1.DE.prototype.setPubD = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes pub_e = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.DE.prototype.getPubE = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes pub_e = 2;
 * This is a type-conversion wrapper around `getPubE()`
 * @return {string}
 */
proto.tss.v1beta1.DE.prototype.getPubE_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubE()));
};


/**
 * optional bytes pub_e = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubE()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.DE.prototype.getPubE_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubE()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.DE} returns this
 */
proto.tss.v1beta1.DE.prototype.setPubE = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.DEQueue.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.DEQueue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.DEQueue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.DEQueue.toObject = function(includeInstance, msg) {
  var f, obj = {
    head: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tail: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.DEQueue}
 */
proto.tss.v1beta1.DEQueue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.DEQueue;
  return proto.tss.v1beta1.DEQueue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.DEQueue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.DEQueue}
 */
proto.tss.v1beta1.DEQueue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHead(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.DEQueue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.DEQueue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.DEQueue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.DEQueue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHead();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTail();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 head = 1;
 * @return {number}
 */
proto.tss.v1beta1.DEQueue.prototype.getHead = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.DEQueue} returns this
 */
proto.tss.v1beta1.DEQueue.prototype.setHead = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 tail = 2;
 * @return {number}
 */
proto.tss.v1beta1.DEQueue.prototype.getTail = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.DEQueue} returns this
 */
proto.tss.v1beta1.DEQueue.prototype.setTail = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tss.v1beta1.Signing.repeatedFields_ = [4,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.Signing.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.Signing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.Signing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.Signing.toObject = function(includeInstance, msg) {
  var f, obj = {
    signingId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    groupId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    groupPubKey: msg.getGroupPubKey_asB64(),
    assignedMembersList: jspb.Message.toObjectList(msg.getAssignedMembersList(),
    proto.tss.v1beta1.AssignedMember.toObject, includeInstance),
    message: msg.getMessage_asB64(),
    groupPubNonce: msg.getGroupPubNonce_asB64(),
    signature: msg.getSignature_asB64(),
    feeList: jspb.Message.toObjectList(msg.getFeeList(),
    cosmos_base_v1beta1_coin_pb.Coin.toObject, includeInstance),
    status: jspb.Message.getFieldWithDefault(msg, 9, 0),
    createdHeight: jspb.Message.getFieldWithDefault(msg, 10, 0),
    requester: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.Signing}
 */
proto.tss.v1beta1.Signing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.Signing;
  return proto.tss.v1beta1.Signing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.Signing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.Signing}
 */
proto.tss.v1beta1.Signing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSigningId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGroupId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPubKey(value);
      break;
    case 4:
      var value = new proto.tss.v1beta1.AssignedMember;
      reader.readMessage(value,proto.tss.v1beta1.AssignedMember.deserializeBinaryFromReader);
      msg.addAssignedMembers(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessage(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPubNonce(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 8:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.addFee(value);
      break;
    case 9:
      var value = /** @type {!proto.tss.v1beta1.SigningStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreatedHeight(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequester(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Signing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.Signing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.Signing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.Signing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSigningId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getGroupPubKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAssignedMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.tss.v1beta1.AssignedMember.serializeBinaryToWriter
    );
  }
  f = message.getMessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getGroupPubNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getFeeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getCreatedHeight();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getRequester();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional uint64 signing_id = 1;
 * @return {number}
 */
proto.tss.v1beta1.Signing.prototype.getSigningId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.Signing} returns this
 */
proto.tss.v1beta1.Signing.prototype.setSigningId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 group_id = 2;
 * @return {number}
 */
proto.tss.v1beta1.Signing.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.Signing} returns this
 */
proto.tss.v1beta1.Signing.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes group_pub_key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.Signing.prototype.getGroupPubKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes group_pub_key = 3;
 * This is a type-conversion wrapper around `getGroupPubKey()`
 * @return {string}
 */
proto.tss.v1beta1.Signing.prototype.getGroupPubKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPubKey()));
};


/**
 * optional bytes group_pub_key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPubKey()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Signing.prototype.getGroupPubKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPubKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.Signing} returns this
 */
proto.tss.v1beta1.Signing.prototype.setGroupPubKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated AssignedMember assigned_members = 4;
 * @return {!Array<!proto.tss.v1beta1.AssignedMember>}
 */
proto.tss.v1beta1.Signing.prototype.getAssignedMembersList = function() {
  return /** @type{!Array<!proto.tss.v1beta1.AssignedMember>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tss.v1beta1.AssignedMember, 4));
};


/**
 * @param {!Array<!proto.tss.v1beta1.AssignedMember>} value
 * @return {!proto.tss.v1beta1.Signing} returns this
*/
proto.tss.v1beta1.Signing.prototype.setAssignedMembersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.tss.v1beta1.AssignedMember=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tss.v1beta1.AssignedMember}
 */
proto.tss.v1beta1.Signing.prototype.addAssignedMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.tss.v1beta1.AssignedMember, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tss.v1beta1.Signing} returns this
 */
proto.tss.v1beta1.Signing.prototype.clearAssignedMembersList = function() {
  return this.setAssignedMembersList([]);
};


/**
 * optional bytes message = 5;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.Signing.prototype.getMessage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes message = 5;
 * This is a type-conversion wrapper around `getMessage()`
 * @return {string}
 */
proto.tss.v1beta1.Signing.prototype.getMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessage()));
};


/**
 * optional bytes message = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessage()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Signing.prototype.getMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.Signing} returns this
 */
proto.tss.v1beta1.Signing.prototype.setMessage = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes group_pub_nonce = 6;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.Signing.prototype.getGroupPubNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes group_pub_nonce = 6;
 * This is a type-conversion wrapper around `getGroupPubNonce()`
 * @return {string}
 */
proto.tss.v1beta1.Signing.prototype.getGroupPubNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPubNonce()));
};


/**
 * optional bytes group_pub_nonce = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPubNonce()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Signing.prototype.getGroupPubNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPubNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.Signing} returns this
 */
proto.tss.v1beta1.Signing.prototype.setGroupPubNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes signature = 7;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.Signing.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes signature = 7;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.tss.v1beta1.Signing.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Signing.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.Signing} returns this
 */
proto.tss.v1beta1.Signing.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * repeated cosmos.base.v1beta1.Coin fee = 8;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.tss.v1beta1.Signing.prototype.getFeeList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 8));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.tss.v1beta1.Signing} returns this
*/
proto.tss.v1beta1.Signing.prototype.setFeeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.tss.v1beta1.Signing.prototype.addFee = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.cosmos.base.v1beta1.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tss.v1beta1.Signing} returns this
 */
proto.tss.v1beta1.Signing.prototype.clearFeeList = function() {
  return this.setFeeList([]);
};


/**
 * optional SigningStatus status = 9;
 * @return {!proto.tss.v1beta1.SigningStatus}
 */
proto.tss.v1beta1.Signing.prototype.getStatus = function() {
  return /** @type {!proto.tss.v1beta1.SigningStatus} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.tss.v1beta1.SigningStatus} value
 * @return {!proto.tss.v1beta1.Signing} returns this
 */
proto.tss.v1beta1.Signing.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional uint64 created_height = 10;
 * @return {number}
 */
proto.tss.v1beta1.Signing.prototype.getCreatedHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.Signing} returns this
 */
proto.tss.v1beta1.Signing.prototype.setCreatedHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string requester = 11;
 * @return {string}
 */
proto.tss.v1beta1.Signing.prototype.getRequester = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.tss.v1beta1.Signing} returns this
 */
proto.tss.v1beta1.Signing.prototype.setRequester = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.AssignedMember.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.AssignedMember.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.AssignedMember} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.AssignedMember.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pubKey: msg.getPubKey_asB64(),
    pubD: msg.getPubD_asB64(),
    pubE: msg.getPubE_asB64(),
    bindingFactor: msg.getBindingFactor_asB64(),
    pubNonce: msg.getPubNonce_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.AssignedMember}
 */
proto.tss.v1beta1.AssignedMember.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.AssignedMember;
  return proto.tss.v1beta1.AssignedMember.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.AssignedMember} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.AssignedMember}
 */
proto.tss.v1beta1.AssignedMember.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemberId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubKey(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubD(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubE(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBindingFactor(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.AssignedMember.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.AssignedMember.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.AssignedMember} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.AssignedMember.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPubKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getPubD_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPubE_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getBindingFactor_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getPubNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional uint64 member_id = 1;
 * @return {number}
 */
proto.tss.v1beta1.AssignedMember.prototype.getMemberId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.AssignedMember} returns this
 */
proto.tss.v1beta1.AssignedMember.prototype.setMemberId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.tss.v1beta1.AssignedMember.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tss.v1beta1.AssignedMember} returns this
 */
proto.tss.v1beta1.AssignedMember.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes pub_key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.AssignedMember.prototype.getPubKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes pub_key = 3;
 * This is a type-conversion wrapper around `getPubKey()`
 * @return {string}
 */
proto.tss.v1beta1.AssignedMember.prototype.getPubKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubKey()));
};


/**
 * optional bytes pub_key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubKey()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.AssignedMember.prototype.getPubKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.AssignedMember} returns this
 */
proto.tss.v1beta1.AssignedMember.prototype.setPubKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes pub_d = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.AssignedMember.prototype.getPubD = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes pub_d = 4;
 * This is a type-conversion wrapper around `getPubD()`
 * @return {string}
 */
proto.tss.v1beta1.AssignedMember.prototype.getPubD_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubD()));
};


/**
 * optional bytes pub_d = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubD()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.AssignedMember.prototype.getPubD_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubD()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.AssignedMember} returns this
 */
proto.tss.v1beta1.AssignedMember.prototype.setPubD = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes pub_e = 5;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.AssignedMember.prototype.getPubE = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes pub_e = 5;
 * This is a type-conversion wrapper around `getPubE()`
 * @return {string}
 */
proto.tss.v1beta1.AssignedMember.prototype.getPubE_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubE()));
};


/**
 * optional bytes pub_e = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubE()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.AssignedMember.prototype.getPubE_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubE()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.AssignedMember} returns this
 */
proto.tss.v1beta1.AssignedMember.prototype.setPubE = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes binding_factor = 6;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.AssignedMember.prototype.getBindingFactor = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes binding_factor = 6;
 * This is a type-conversion wrapper around `getBindingFactor()`
 * @return {string}
 */
proto.tss.v1beta1.AssignedMember.prototype.getBindingFactor_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBindingFactor()));
};


/**
 * optional bytes binding_factor = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBindingFactor()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.AssignedMember.prototype.getBindingFactor_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBindingFactor()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.AssignedMember} returns this
 */
proto.tss.v1beta1.AssignedMember.prototype.setBindingFactor = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes pub_nonce = 7;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.AssignedMember.prototype.getPubNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes pub_nonce = 7;
 * This is a type-conversion wrapper around `getPubNonce()`
 * @return {string}
 */
proto.tss.v1beta1.AssignedMember.prototype.getPubNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubNonce()));
};


/**
 * optional bytes pub_nonce = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubNonce()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.AssignedMember.prototype.getPubNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.AssignedMember} returns this
 */
proto.tss.v1beta1.AssignedMember.prototype.setPubNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tss.v1beta1.PendingSignings.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.PendingSignings.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.PendingSignings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.PendingSignings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.PendingSignings.toObject = function(includeInstance, msg) {
  var f, obj = {
    signingIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.PendingSignings}
 */
proto.tss.v1beta1.PendingSignings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.PendingSignings;
  return proto.tss.v1beta1.PendingSignings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.PendingSignings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.PendingSignings}
 */
proto.tss.v1beta1.PendingSignings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSigningIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.PendingSignings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.PendingSignings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.PendingSignings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.PendingSignings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSigningIdsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
};


/**
 * repeated uint64 signing_ids = 1;
 * @return {!Array<number>}
 */
proto.tss.v1beta1.PendingSignings.prototype.getSigningIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.tss.v1beta1.PendingSignings} returns this
 */
proto.tss.v1beta1.PendingSignings.prototype.setSigningIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tss.v1beta1.PendingSignings} returns this
 */
proto.tss.v1beta1.PendingSignings.prototype.addSigningIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tss.v1beta1.PendingSignings} returns this
 */
proto.tss.v1beta1.PendingSignings.prototype.clearSigningIdsList = function() {
  return this.setSigningIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.Member.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.Member.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.Member} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.Member.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pubKey: msg.getPubKey_asB64(),
    isMalicious: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.Member}
 */
proto.tss.v1beta1.Member.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.Member;
  return proto.tss.v1beta1.Member.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.Member} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.Member}
 */
proto.tss.v1beta1.Member.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubKey(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMalicious(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Member.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.Member.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.Member} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.Member.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPubKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getIsMalicious();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.tss.v1beta1.Member.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.Member} returns this
 */
proto.tss.v1beta1.Member.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.tss.v1beta1.Member.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tss.v1beta1.Member} returns this
 */
proto.tss.v1beta1.Member.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes pub_key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.Member.prototype.getPubKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes pub_key = 3;
 * This is a type-conversion wrapper around `getPubKey()`
 * @return {string}
 */
proto.tss.v1beta1.Member.prototype.getPubKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubKey()));
};


/**
 * optional bytes pub_key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubKey()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Member.prototype.getPubKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.Member} returns this
 */
proto.tss.v1beta1.Member.prototype.setPubKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bool is_malicious = 4;
 * @return {boolean}
 */
proto.tss.v1beta1.Member.prototype.getIsMalicious = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tss.v1beta1.Member} returns this
 */
proto.tss.v1beta1.Member.prototype.setIsMalicious = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    since: (f = msg.getSince()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    lastActive: (f = msg.getLastActive()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.Status}
 */
proto.tss.v1beta1.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.Status;
  return proto.tss.v1beta1.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.Status}
 */
proto.tss.v1beta1.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!proto.tss.v1beta1.MemberStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setSince(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSince();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastActive();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.tss.v1beta1.Status.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tss.v1beta1.Status} returns this
 */
proto.tss.v1beta1.Status.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional MemberStatus status = 2;
 * @return {!proto.tss.v1beta1.MemberStatus}
 */
proto.tss.v1beta1.Status.prototype.getStatus = function() {
  return /** @type {!proto.tss.v1beta1.MemberStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tss.v1beta1.MemberStatus} value
 * @return {!proto.tss.v1beta1.Status} returns this
 */
proto.tss.v1beta1.Status.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp since = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.tss.v1beta1.Status.prototype.getSince = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.tss.v1beta1.Status} returns this
*/
proto.tss.v1beta1.Status.prototype.setSince = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tss.v1beta1.Status} returns this
 */
proto.tss.v1beta1.Status.prototype.clearSince = function() {
  return this.setSince(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tss.v1beta1.Status.prototype.hasSince = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp last_active = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.tss.v1beta1.Status.prototype.getLastActive = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.tss.v1beta1.Status} returns this
*/
proto.tss.v1beta1.Status.prototype.setLastActive = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tss.v1beta1.Status} returns this
 */
proto.tss.v1beta1.Status.prototype.clearLastActive = function() {
  return this.setLastActive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tss.v1beta1.Status.prototype.hasLastActive = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.Confirm.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.Confirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.Confirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.Confirm.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ownPubKeySig: msg.getOwnPubKeySig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.Confirm}
 */
proto.tss.v1beta1.Confirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.Confirm;
  return proto.tss.v1beta1.Confirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.Confirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.Confirm}
 */
proto.tss.v1beta1.Confirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemberId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOwnPubKeySig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Confirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.Confirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.Confirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.Confirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOwnPubKeySig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 member_id = 1;
 * @return {number}
 */
proto.tss.v1beta1.Confirm.prototype.getMemberId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.Confirm} returns this
 */
proto.tss.v1beta1.Confirm.prototype.setMemberId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes own_pub_key_sig = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.Confirm.prototype.getOwnPubKeySig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes own_pub_key_sig = 2;
 * This is a type-conversion wrapper around `getOwnPubKeySig()`
 * @return {string}
 */
proto.tss.v1beta1.Confirm.prototype.getOwnPubKeySig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOwnPubKeySig()));
};


/**
 * optional bytes own_pub_key_sig = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOwnPubKeySig()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Confirm.prototype.getOwnPubKeySig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOwnPubKeySig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.Confirm} returns this
 */
proto.tss.v1beta1.Confirm.prototype.setOwnPubKeySig = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.Complaint.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.Complaint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.Complaint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.Complaint.toObject = function(includeInstance, msg) {
  var f, obj = {
    complainant: jspb.Message.getFieldWithDefault(msg, 1, 0),
    respondent: jspb.Message.getFieldWithDefault(msg, 2, 0),
    keySym: msg.getKeySym_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.Complaint}
 */
proto.tss.v1beta1.Complaint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.Complaint;
  return proto.tss.v1beta1.Complaint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.Complaint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.Complaint}
 */
proto.tss.v1beta1.Complaint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setComplainant(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRespondent(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKeySym(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Complaint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.Complaint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.Complaint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.Complaint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComplainant();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRespondent();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getKeySym_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional uint64 complainant = 1;
 * @return {number}
 */
proto.tss.v1beta1.Complaint.prototype.getComplainant = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.Complaint} returns this
 */
proto.tss.v1beta1.Complaint.prototype.setComplainant = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 respondent = 2;
 * @return {number}
 */
proto.tss.v1beta1.Complaint.prototype.getRespondent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.Complaint} returns this
 */
proto.tss.v1beta1.Complaint.prototype.setRespondent = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes key_sym = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.Complaint.prototype.getKeySym = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes key_sym = 3;
 * This is a type-conversion wrapper around `getKeySym()`
 * @return {string}
 */
proto.tss.v1beta1.Complaint.prototype.getKeySym_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeySym()));
};


/**
 * optional bytes key_sym = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeySym()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Complaint.prototype.getKeySym_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeySym()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.Complaint} returns this
 */
proto.tss.v1beta1.Complaint.prototype.setKeySym = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes signature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.Complaint.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes signature = 4;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.tss.v1beta1.Complaint.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.Complaint.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.Complaint} returns this
 */
proto.tss.v1beta1.Complaint.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.ComplaintWithStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.ComplaintWithStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.ComplaintWithStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.ComplaintWithStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    complaint: (f = msg.getComplaint()) && proto.tss.v1beta1.Complaint.toObject(includeInstance, f),
    complaintStatus: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.ComplaintWithStatus}
 */
proto.tss.v1beta1.ComplaintWithStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.ComplaintWithStatus;
  return proto.tss.v1beta1.ComplaintWithStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.ComplaintWithStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.ComplaintWithStatus}
 */
proto.tss.v1beta1.ComplaintWithStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tss.v1beta1.Complaint;
      reader.readMessage(value,proto.tss.v1beta1.Complaint.deserializeBinaryFromReader);
      msg.setComplaint(value);
      break;
    case 2:
      var value = /** @type {!proto.tss.v1beta1.ComplaintStatus} */ (reader.readEnum());
      msg.setComplaintStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.ComplaintWithStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.ComplaintWithStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.ComplaintWithStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.ComplaintWithStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComplaint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tss.v1beta1.Complaint.serializeBinaryToWriter
    );
  }
  f = message.getComplaintStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Complaint complaint = 1;
 * @return {?proto.tss.v1beta1.Complaint}
 */
proto.tss.v1beta1.ComplaintWithStatus.prototype.getComplaint = function() {
  return /** @type{?proto.tss.v1beta1.Complaint} */ (
    jspb.Message.getWrapperField(this, proto.tss.v1beta1.Complaint, 1));
};


/**
 * @param {?proto.tss.v1beta1.Complaint|undefined} value
 * @return {!proto.tss.v1beta1.ComplaintWithStatus} returns this
*/
proto.tss.v1beta1.ComplaintWithStatus.prototype.setComplaint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tss.v1beta1.ComplaintWithStatus} returns this
 */
proto.tss.v1beta1.ComplaintWithStatus.prototype.clearComplaint = function() {
  return this.setComplaint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tss.v1beta1.ComplaintWithStatus.prototype.hasComplaint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ComplaintStatus complaint_status = 2;
 * @return {!proto.tss.v1beta1.ComplaintStatus}
 */
proto.tss.v1beta1.ComplaintWithStatus.prototype.getComplaintStatus = function() {
  return /** @type {!proto.tss.v1beta1.ComplaintStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tss.v1beta1.ComplaintStatus} value
 * @return {!proto.tss.v1beta1.ComplaintWithStatus} returns this
 */
proto.tss.v1beta1.ComplaintWithStatus.prototype.setComplaintStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tss.v1beta1.ComplaintsWithStatus.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.ComplaintsWithStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.ComplaintsWithStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.ComplaintsWithStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.ComplaintsWithStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    complaintsWithStatusList: jspb.Message.toObjectList(msg.getComplaintsWithStatusList(),
    proto.tss.v1beta1.ComplaintWithStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.ComplaintsWithStatus}
 */
proto.tss.v1beta1.ComplaintsWithStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.ComplaintsWithStatus;
  return proto.tss.v1beta1.ComplaintsWithStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.ComplaintsWithStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.ComplaintsWithStatus}
 */
proto.tss.v1beta1.ComplaintsWithStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemberId(value);
      break;
    case 2:
      var value = new proto.tss.v1beta1.ComplaintWithStatus;
      reader.readMessage(value,proto.tss.v1beta1.ComplaintWithStatus.deserializeBinaryFromReader);
      msg.addComplaintsWithStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.ComplaintsWithStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.ComplaintsWithStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.ComplaintsWithStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.ComplaintsWithStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getComplaintsWithStatusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tss.v1beta1.ComplaintWithStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 member_id = 1;
 * @return {number}
 */
proto.tss.v1beta1.ComplaintsWithStatus.prototype.getMemberId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.ComplaintsWithStatus} returns this
 */
proto.tss.v1beta1.ComplaintsWithStatus.prototype.setMemberId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated ComplaintWithStatus complaints_with_status = 2;
 * @return {!Array<!proto.tss.v1beta1.ComplaintWithStatus>}
 */
proto.tss.v1beta1.ComplaintsWithStatus.prototype.getComplaintsWithStatusList = function() {
  return /** @type{!Array<!proto.tss.v1beta1.ComplaintWithStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tss.v1beta1.ComplaintWithStatus, 2));
};


/**
 * @param {!Array<!proto.tss.v1beta1.ComplaintWithStatus>} value
 * @return {!proto.tss.v1beta1.ComplaintsWithStatus} returns this
*/
proto.tss.v1beta1.ComplaintsWithStatus.prototype.setComplaintsWithStatusList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tss.v1beta1.ComplaintWithStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tss.v1beta1.ComplaintWithStatus}
 */
proto.tss.v1beta1.ComplaintsWithStatus.prototype.addComplaintsWithStatus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tss.v1beta1.ComplaintWithStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tss.v1beta1.ComplaintsWithStatus} returns this
 */
proto.tss.v1beta1.ComplaintsWithStatus.prototype.clearComplaintsWithStatusList = function() {
  return this.setComplaintsWithStatusList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tss.v1beta1.PendingProcessGroups.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.PendingProcessGroups.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.PendingProcessGroups.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.PendingProcessGroups} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.PendingProcessGroups.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.PendingProcessGroups}
 */
proto.tss.v1beta1.PendingProcessGroups.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.PendingProcessGroups;
  return proto.tss.v1beta1.PendingProcessGroups.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.PendingProcessGroups} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.PendingProcessGroups}
 */
proto.tss.v1beta1.PendingProcessGroups.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addGroupIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.PendingProcessGroups.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.PendingProcessGroups.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.PendingProcessGroups} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.PendingProcessGroups.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupIdsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
};


/**
 * repeated uint64 group_ids = 1;
 * @return {!Array<number>}
 */
proto.tss.v1beta1.PendingProcessGroups.prototype.getGroupIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.tss.v1beta1.PendingProcessGroups} returns this
 */
proto.tss.v1beta1.PendingProcessGroups.prototype.setGroupIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tss.v1beta1.PendingProcessGroups} returns this
 */
proto.tss.v1beta1.PendingProcessGroups.prototype.addGroupIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tss.v1beta1.PendingProcessGroups} returns this
 */
proto.tss.v1beta1.PendingProcessGroups.prototype.clearGroupIdsList = function() {
  return this.setGroupIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tss.v1beta1.PendingProcessSignings.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.PendingProcessSignings.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.PendingProcessSignings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.PendingProcessSignings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.PendingProcessSignings.toObject = function(includeInstance, msg) {
  var f, obj = {
    signingIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.PendingProcessSignings}
 */
proto.tss.v1beta1.PendingProcessSignings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.PendingProcessSignings;
  return proto.tss.v1beta1.PendingProcessSignings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.PendingProcessSignings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.PendingProcessSignings}
 */
proto.tss.v1beta1.PendingProcessSignings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSigningIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.PendingProcessSignings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.PendingProcessSignings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.PendingProcessSignings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.PendingProcessSignings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSigningIdsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
};


/**
 * repeated uint64 signing_ids = 1;
 * @return {!Array<number>}
 */
proto.tss.v1beta1.PendingProcessSignings.prototype.getSigningIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.tss.v1beta1.PendingProcessSignings} returns this
 */
proto.tss.v1beta1.PendingProcessSignings.prototype.setSigningIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tss.v1beta1.PendingProcessSignings} returns this
 */
proto.tss.v1beta1.PendingProcessSignings.prototype.addSigningIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tss.v1beta1.PendingProcessSignings} returns this
 */
proto.tss.v1beta1.PendingProcessSignings.prototype.clearSigningIdsList = function() {
  return this.setSigningIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.PartialSignature.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.PartialSignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.PartialSignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.PartialSignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.PartialSignature}
 */
proto.tss.v1beta1.PartialSignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.PartialSignature;
  return proto.tss.v1beta1.PartialSignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.PartialSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.PartialSignature}
 */
proto.tss.v1beta1.PartialSignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemberId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.PartialSignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.PartialSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.PartialSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.PartialSignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 member_id = 1;
 * @return {number}
 */
proto.tss.v1beta1.PartialSignature.prototype.getMemberId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tss.v1beta1.PartialSignature} returns this
 */
proto.tss.v1beta1.PartialSignature.prototype.setMemberId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.PartialSignature.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.tss.v1beta1.PartialSignature.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.PartialSignature.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.PartialSignature} returns this
 */
proto.tss.v1beta1.PartialSignature.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.TextRequestingSignature.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.TextRequestingSignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.TextRequestingSignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.TextRequestingSignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: msg.getMessage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.TextRequestingSignature}
 */
proto.tss.v1beta1.TextRequestingSignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.TextRequestingSignature;
  return proto.tss.v1beta1.TextRequestingSignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.TextRequestingSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.TextRequestingSignature}
 */
proto.tss.v1beta1.TextRequestingSignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.TextRequestingSignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.TextRequestingSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.TextRequestingSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.TextRequestingSignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes message = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.TextRequestingSignature.prototype.getMessage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes message = 1;
 * This is a type-conversion wrapper around `getMessage()`
 * @return {string}
 */
proto.tss.v1beta1.TextRequestingSignature.prototype.getMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessage()));
};


/**
 * optional bytes message = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessage()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.TextRequestingSignature.prototype.getMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.TextRequestingSignature} returns this
 */
proto.tss.v1beta1.TextRequestingSignature.prototype.setMessage = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tss.v1beta1.EVMSignature.prototype.toObject = function(opt_includeInstance) {
  return proto.tss.v1beta1.EVMSignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tss.v1beta1.EVMSignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.EVMSignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    rAddress: msg.getRAddress_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tss.v1beta1.EVMSignature}
 */
proto.tss.v1beta1.EVMSignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tss.v1beta1.EVMSignature;
  return proto.tss.v1beta1.EVMSignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tss.v1beta1.EVMSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tss.v1beta1.EVMSignature}
 */
proto.tss.v1beta1.EVMSignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.EVMSignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tss.v1beta1.EVMSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tss.v1beta1.EVMSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tss.v1beta1.EVMSignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes r_address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.EVMSignature.prototype.getRAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes r_address = 1;
 * This is a type-conversion wrapper around `getRAddress()`
 * @return {string}
 */
proto.tss.v1beta1.EVMSignature.prototype.getRAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRAddress()));
};


/**
 * optional bytes r_address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRAddress()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.EVMSignature.prototype.getRAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.EVMSignature} returns this
 */
proto.tss.v1beta1.EVMSignature.prototype.setRAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tss.v1beta1.EVMSignature.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.tss.v1beta1.EVMSignature.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.tss.v1beta1.EVMSignature.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tss.v1beta1.EVMSignature} returns this
 */
proto.tss.v1beta1.EVMSignature.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.tss.v1beta1.ReplacementStatus = {
  REPLACEMENT_STATUS_UNSPECIFIED: 0,
  REPLACEMENT_STATUS_WAITING: 1,
  REPLACEMENT_STATUS_SUCCESS: 2,
  REPLACEMENT_STATUS_FALLEN: 3
};

/**
 * @enum {number}
 */
proto.tss.v1beta1.SigningStatus = {
  SIGNING_STATUS_UNSPECIFIED: 0,
  SIGNING_STATUS_WAITING: 1,
  SIGNING_STATUS_SUCCESS: 2,
  SIGNING_STATUS_EXPIRED: 3,
  SIGNING_STATUS_FALLEN: 4
};

/**
 * @enum {number}
 */
proto.tss.v1beta1.MemberStatus = {
  MEMBER_STATUS_UNSPECIFIED: 0,
  MEMBER_STATUS_ACTIVE: 1,
  MEMBER_STATUS_INACTIVE: 2,
  MEMBER_STATUS_JAIL: 3
};

/**
 * @enum {number}
 */
proto.tss.v1beta1.GroupStatus = {
  GROUP_STATUS_UNSPECIFIED: 0,
  GROUP_STATUS_ROUND_1: 1,
  GROUP_STATUS_ROUND_2: 2,
  GROUP_STATUS_ROUND_3: 3,
  GROUP_STATUS_ACTIVE: 4,
  GROUP_STATUS_EXPIRED: 5,
  GROUP_STATUS_FALLEN: 6
};

/**
 * @enum {number}
 */
proto.tss.v1beta1.ComplaintStatus = {
  COMPLAINT_STATUS_UNSPECIFIED: 0,
  COMPLAINT_STATUS_SUCCESS: 1,
  COMPLAINT_STATUS_FAILED: 2
};

/**
 * @enum {number}
 */
proto.tss.v1beta1.PrefixMsgType = {
  PREFIX_UNSPECIFIED_MSG: 0,
  PREFIX_TEXT_MSG: 1,
  PREFIX_REPLACE_GROUP_MSG: 2,
  PREFIX_ORACLE_MSG: 3
};

goog.object.extend(exports, proto.tss.v1beta1);
